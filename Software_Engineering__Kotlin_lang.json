{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "52e81fda-b99a-11e8-acb1-4a0007054d20",
    "deck_config_uuid": "a69dd698-6d5b-11e6-adf3-8c705a50cbf0",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "crowdanki_uuid": "a69dd698-6d5b-11e6-adf3-8c705a50cbf0",
            "dyn": false,
            "lapse": {
                "delays": [
                    10
                ],
                "leechAction": 0,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": true,
                "delays": [
                    1,
                    10
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    7
                ],
                "order": 1,
                "perDay": 20,
                "separate": true
            },
            "replayq": true,
            "rev": {
                "bury": true,
                "ease4": 1.3,
                "fuzz": 0.05,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "minSpace": 1,
                "perDay": 100
            },
            "timer": 0
        }
    ],
    "desc": "This Kotlin deck dedicated to language reference from official http://kotlinlang.org/docs/reference/ site.\n\nThis deck covers almost all info from official docs except JS, Tooling and some FAQ sections.\nExperimental features (like 'coroutines' in Kotlin 1.1) won't be added as well.\nI won't add JS-related sections in future.\n\nThis deck made by Sergiy Kovtunenko.\n\nVersion History:\nv.1.0.0 (26.Feb.2017): finished converting Kotlin reference into Anki cards.\nv.1.0.1 (8.Mar.2017): Tag with kotlin version has been added to all cards.\nv.1.1.0 (11.Mar.2017): Covered all language reference details for Kotlin 1.1; Removed sections about maven. Added cards from \"What's new..?\" section.\nv.1.1.1 (12.Mar.2017): Fixed card template to highlight references (links to original Kotlin documentation)\nv.1.1.2 (13.Mar.2017): Highlighted some cards content.\nv.1.1.3 (18.Mar.2017): Huge changes: migrated from 'image-based' content to `markdown-based` content. Decks fully synchronized with latest changes on Kotlin website.\nv.1.1.3 (22.Mar.2017): Improved CSS card styling, minor improvements.\nv.1.1.4 (19.Apr.2017): Synced with latest website updates.\nv.1.1.5 (25.Apr.2017): Added new card about expression precedence (from Grammar section), synced with latest website updates.\nv.1.1.6 (14.May.2017): \u0000Synced with latest website changes, removed 1 card.\nv.1.1.7 (22.May.2017): \u0000Reworked 'Operator Overloading' section, synced with latest website changes, fixed typos.\nv.1.1.8 (23.Jul.2017): \u0000Synced with latest website changes, fixed typos. Last synced git commit: bf502525e61097368bd520179fb25ed68b8e5ae4",
    "dyn": 0,
    "extendNew": 10,
    "extendRev": 50,
    "media_files": [
        "paste-21668110008632.jpg",
        "paste-21904333211756.jpg",
        "paste-2108828943530.jpg"
    ],
    "name": "Software Engineering::Kotlin lang",
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}\n\n.leftPaddedСard {\n font-family: arial;\n font-size: 20px;\n text-align: left;\n color: black;\n background-color: white;\n}\n\n.cloze {color: blue;}\n\n.smallFont {\n font-family: arial;\n font-size: 10px;\n text-align: center;\n color: black;\n background-color: white;\n}\n\n.mac .card { font-family: \"Consolas\", \"Monaco\", \"Menlo\", \"Courier\", monospace; }\n\n.win .card { font-family: \"Consolas\", \"Courier\", monospace; }\n\n.keyword_old {\n  font-family: \"Liberation Mono\", Consolas, Menlo, Courier, monospace;\n  font-style: normal;\n  color: #0000C0;\n}\n\n.info {\n        padding-top: 120px;\n        text-align: left;\n}\n\ntable {\n  width: auto !important;\n  margin: 0 auto;\n}\n\n.kbd {\n    box-shadow: inset 0px 1px 0px 0px #ffffff;\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0.05, #f9f9f9), color-stop(1, #e9e9e9) );\n    background-color: #f9f9f9;\n    border-radius: 5px;\n    border: 1px solid #dcdcdc;\n    display: inline-block;\n    font-size: 0.8em;\n    height: 30px;\n    line-height: 30px;\n    padding: 0px 10px;\n    text-align: center;\n    text-shadow: 1px 1px 0px #ffffff;\n}\n\n.keyword  {\n    box-shadow: inset 0px 1px 0px 0px #ffffff;\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0.05, #f9f9f9), color-stop(1, #e9e9e9) );\n    background-color: #f9f9f9;\n    border-radius: 5px;\n    border: 1px solid #dcdcdc;\n    display: inline-block;\n    font-size: 0.8em;\n    height: 30px;\n    line-height: 30px;\n    padding: 0px 10px;\n    text-align: center;\n    text-shadow: 1px 1px 0px #ffffff;\n}",
            "flds": [
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Front",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Back",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Reference",
                    "ord": 2,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "name": "Basic with Reference and Tags",
            "req": [
                [
                    0,
                    "all",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ],
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n<div class=leftPaddedСard>{{Back}}</div>\n\n<hr id=misc>\n\n<p>\n<div class=smallFont>\n<a href=\"{{Reference}}\">{{Reference}}</a>\n</div>\n</p>\n<p><div class=smallFont>{{Tags}}</div></p>",
                    "bafmt": "",
                    "bqfmt": "",
                    "did": null,
                    "name": "Basic with Ref. and Tags",
                    "ord": 0,
                    "qfmt": "{{Front}}"
                }
            ],
            "type": 0,
            "vers": []
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>Defining <b>packages</b></div>",
                "<p>Package specification should be at the top of the source file:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">package</span> <span style=\"color: #000000\">my.demo</span>\n\n<span style=\"color: #204a87; font-weight: bold\">import</span> <span style=\"color: #000000\">java.util.*</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// ...</span>\n</pre></div>\n<p>It is not required to match directories and packages: source files can be placed arbitrarily in the file system.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzI5NjgsICJpZCI6ICIxNDg3OTUwNjk5MDgzLTAwMSIsICJtZCI6ICJQYWNrYWdlIHNwZWNpZmljYXRpb24gc2hvdWxkIGJlIGF0IHRoZSB0b3Agb2YgdGhlIHNvdXJjZSBmaWxlOlxuICBcbmBgYCBrb3RsaW5cbnBhY2thZ2UgbXkuZGVtb1xuICBcbmltcG9ydCBqYXZhLnV0aWwuKlxuICBcbi8vIC4uLlxuYGBgXG4gIFxuSXQgaXMgbm90IHJlcXVpcmVkIHRvIG1hdGNoIGRpcmVjdG9yaWVzIGFuZCBwYWNrYWdlczogc291cmNlIGZpbGVzIGNhbiBiZSBwbGFjZWQgYXJiaXRyYXJpbHkgaW4gdGhlIGZpbGUgc3lzdGVtLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#defining-packages"
            ],
            "flags": 0,
            "guid": "zT/7`JGop)",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Defining <b>functions</b>",
                "<p>Function having two <code>Int</code> parameters with <code>Int</code> return type:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">sum</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">b</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"sum of 3 and 5 is \"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">sum</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">5</span><span style=\"color: #000000; font-weight: bold\">))</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Function with an expression body and inferred return type:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">sum</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">b</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"sum of 19 and 23 is ${sum(19, 23)}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Function returning no meaningful value:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">printSum</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Unit</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"sum of $a and $b is ${a + b}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">printSum</span><span style=\"color: #000000; font-weight: bold\">(-</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">8</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p><code>Unit</code> return type can be omitted:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">printSum</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"sum of $a and $b is ${a + b}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">printSum</span><span style=\"color: #000000; font-weight: bold\">(-</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">8</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzMyODQsICJpZCI6ICIxNDg3OTUwNzgzNjc0LTAwMSIsICJtZCI6ICJGdW5jdGlvbiBoYXZpbmcgdHdvIGBJbnRgIHBhcmFtZXRlcnMgd2l0aCBgSW50YCByZXR1cm4gdHlwZTpcbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIHN1bShhOiBJbnQsIGI6IEludCk6IEludCB7XG4gICAgcmV0dXJuIGEgKyBiXG59XG4gIFxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHByaW50KCZxdW90O3N1bSBvZiAzIGFuZCA1IGlzICZxdW90OylcbiAgICBwcmludGxuKHN1bSgzLCA1KSlcbn1cbmBgYFxuICBcbkZ1bmN0aW9uIHdpdGggYW4gZXhwcmVzc2lvbiBib2R5IGFuZCBpbmZlcnJlZCByZXR1cm4gdHlwZTpcbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIHN1bShhOiBJbnQsIGI6IEludCkgPSBhICsgYlxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICBwcmludGxuKCZxdW90O3N1bSBvZiAxOSBhbmQgMjMgaXMgJHtzdW0oMTksIDIzKX0mcXVvdDspXG59XG5gYGBcbiAgXG5GdW5jdGlvbiByZXR1cm5pbmcgbm8gbWVhbmluZ2Z1bCB2YWx1ZTpcbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIHByaW50U3VtKGE6IEludCwgYjogSW50KTogVW5pdCB7XG4gICAgcHJpbnRsbigmcXVvdDtzdW0gb2YgJGEgYW5kICRiIGlzICR7YSArIGJ9JnF1b3Q7KVxufVxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICBwcmludFN1bSgtMSwgOClcbn1cbmBgYFxuICBcbmBVbml0YCByZXR1cm4gdHlwZSBjYW4gYmUgb21pdHRlZDpcbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIHByaW50U3VtKGE6IEludCwgYjogSW50KSB7XG4gICAgcHJpbnRsbigmcXVvdDtzdW0gb2YgJGEgYW5kICRiIGlzICR7YSArIGJ9JnF1b3Q7KVxufVxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICBwcmludFN1bSgtMSwgOClcbn1cbmBgYFxuICBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#defining-functions"
            ],
            "flags": 0,
            "guid": "vkp:e[^v?s",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Defining <b>local</b> variables",
                "<p>Assign-once (read-only) local variable:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>  <span style=\"color: #8f5902; font-style: italic\">// immediate assignment</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">2</span>   <span style=\"color: #8f5902; font-style: italic\">// `Int` type is inferred</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">c</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span>  <span style=\"color: #8f5902; font-style: italic\">// Type required when no initializer is provided</span>\n    <span style=\"color: #000000\">c</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">3</span>       <span style=\"color: #8f5902; font-style: italic\">// deferred assignment</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a = $a, b = $b, c = $c\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Mutable variable:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">5</span> <span style=\"color: #8f5902; font-style: italic\">// `Int` type is inferred</span>\n    <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">+=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x = $x\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzMzMTMsICJpZCI6ICIxNDg3OTUwODM5MzU2LTAwMSIsICJtZCI6ICJBc3NpZ24tb25jZSAocmVhZC1vbmx5KSBsb2NhbCB2YXJpYWJsZTpcbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhbCBhOiBJbnQgPSAxICAvLyBpbW1lZGlhdGUgYXNzaWdubWVudFxuICAgIHZhbCBiID0gMiAgIC8vIGBJbnRgIHR5cGUgaXMgaW5mZXJyZWRcbiAgICB2YWwgYzogSW50ICAvLyBUeXBlIHJlcXVpcmVkIHdoZW4gbm8gaW5pdGlhbGl6ZXIgaXMgcHJvdmlkZWRcbiAgICBjID0gMyAgICAgICAvLyBkZWZlcnJlZCBhc3NpZ25tZW50XG4gICAgcHJpbnRsbigmcXVvdDthID0gJGEsIGIgPSAkYiwgYyA9ICRjJnF1b3Q7KVxufVxuYGBgXG4gIFxuTXV0YWJsZSB2YXJpYWJsZTpcbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhciB4ID0gNSAvLyBgSW50YCB0eXBlIGlzIGluZmVycmVkXG4gICAgeCArPSAxXG4gICAgcHJpbnRsbigmcXVvdDt4ID0gJHgmcXVvdDspXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#defining-local-variables"
            ],
            "flags": 0,
            "guid": "cH1u5FPGL^",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Comments",
                "<p>Just like Java and JavaScript, Kotlin supports end-of-line and block comments.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">// This is an end-of-line comment</span>\n\n<span style=\"color: #8f5902; font-style: italic\">/* This is a block comment</span>\n<span style=\"color: #8f5902; font-style: italic\">   on multiple lines. */</span>\n</pre></div>\n<p>Unlike Java, block comments in Kotlin can be nested.</p>\n<p>See <a href=\"kotlin-doc.html\">Documenting Kotlin Code</a> for information on the documentation comment syntax.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzc3NTgsICJpZCI6ICIxNDg3OTUwODc2MjE4LTAwMSIsICJtZCI6ICJKdXN0IGxpa2UgSmF2YSBhbmQgSmF2YVNjcmlwdCwgS290bGluIHN1cHBvcnRzIGVuZC1vZi1saW5lIGFuZCBibG9jayBjb21tZW50cy5cbiAgXG5gYGAga290bGluXG4vLyBUaGlzIGlzIGFuIGVuZC1vZi1saW5lIGNvbW1lbnRcbiAgXG4vKiBUaGlzIGlzIGEgYmxvY2sgY29tbWVudFxuICAgb24gbXVsdGlwbGUgbGluZXMuICovXG5gYGBcbiAgXG5Vbmxpa2UgSmF2YSwgYmxvY2sgY29tbWVudHMgaW4gS290bGluIGNhbiBiZSBuZXN0ZWQuXG4gIFxuU2VlIFtEb2N1bWVudGluZyBLb3RsaW4gQ29kZV0oa290bGluLWRvYy5odG1sKSBmb3IgaW5mb3JtYXRpb24gb24gdGhlIGRvY3VtZW50YXRpb24gY29tbWVudCBzeW50YXguXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#comments"
            ],
            "flags": 0,
            "guid": "FkZzTB0wmS",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using <b>string templates</b>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n    <span style=\"color: #8f5902; font-style: italic\">// simple name in template:</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">s1</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"a is $a\"</span> \n\n    <span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">2</span>\n    <span style=\"color: #8f5902; font-style: italic\">// arbitrary expression in template:</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">s2</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"${s1.replace(\"</span><span style=\"color: #204a87; font-weight: bold\">is</span><span style=\"color: #4e9a06\">\", \"</span><span style=\"color: #000000\">was</span><span style=\"color: #4e9a06\">\")}, but now is $a\"</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">s2</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzc3NjYsICJpZCI6ICIxNDg3OTUwOTAwMzEwLTAwMSIsICJtZCI6ICJgYGAga290bGluXG5mdW4gbWFpbihhcmdzOiBBcnJheSZsdDtTdHJpbmcmZ3Q7KSB7XG4gICAgdmFyIGEgPSAxXG4gICAgLy8gc2ltcGxlIG5hbWUgaW4gdGVtcGxhdGU6XG4gICAgdmFsIHMxID0gJnF1b3Q7YSBpcyAkYSZxdW90OyBcbiAgXG4gICAgYSA9IDJcbiAgICAvLyBhcmJpdHJhcnkgZXhwcmVzc2lvbiBpbiB0ZW1wbGF0ZTpcbiAgICB2YWwgczIgPSAmcXVvdDske3MxLnJlcGxhY2UoJnF1b3Q7aXMmcXVvdDssICZxdW90O3dhcyZxdW90Oyl9LCBidXQgbm93IGlzICRhJnF1b3Q7XG4gICAgcHJpbnRsbihzMilcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#using-string-templates"
            ],
            "flags": 0,
            "guid": "J=v>NVu95]",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using <b>conditional expressions</b>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">maxOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">a</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">b</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"max of 0 and 42 is ${maxOf(0, 42)}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Using <em class=\"keyword\">if</em> as an expression:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">maxOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">a</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000\">b</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"max of 0 and 42 is ${maxOf(0, 42)}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzM0NDUsICJpZCI6ICIxNDg3OTUwOTM1NTI5LTAwMSIsICJtZCI6ICIgIFxuYGBgIGtvdGxpblxuZnVuIG1heE9mKGE6IEludCwgYjogSW50KTogSW50IHtcbiAgICBpZiAoYSAmZ3Q7IGIpIHtcbiAgICAgICAgcmV0dXJuIGFcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYlxuICAgIH1cbn1cbiAgXG5mdW4gbWFpbihhcmdzOiBBcnJheSZsdDtTdHJpbmcmZ3Q7KSB7XG4gICAgcHJpbnRsbigmcXVvdDttYXggb2YgMCBhbmQgNDIgaXMgJHttYXhPZigwLCA0Mil9JnF1b3Q7KVxufVxuYGBgXG4gIFxuICBcblVzaW5nICppZip7OiAua2V5d29yZCB9IGFzIGFuIGV4cHJlc3Npb246XG4gIFxuICBcbmBgYCBrb3RsaW5cbmZ1biBtYXhPZihhOiBJbnQsIGI6IEludCkgPSBpZiAoYSAmZ3Q7IGIpIGEgZWxzZSBiXG4gIFxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHByaW50bG4oJnF1b3Q7bWF4IG9mIDAgYW5kIDQyIGlzICR7bWF4T2YoMCwgNDIpfSZxdW90Oylcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#using-conditional-expressions"
            ],
            "flags": 0,
            "guid": "RhG]VG6I>W",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using <b>nullable</b> values and checking for <b>null</b>",
                "<p>A reference must be explicitly marked as nullable when <em class=\"keyword\">null</em> value is possible.</p>\n<p>Return <em class=\"keyword\">null</em> if <code>str</code> does not hold an integer:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">parseInt</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">str</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Use a function returning nullable value:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">parseInt</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">str</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">str</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toIntOrNull</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">printProduct</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">arg1</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">arg2</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">parseInt</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">arg1</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">y</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">parseInt</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">arg2</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #8f5902; font-style: italic\">// Using `x * y` yields error because they may hold nulls.</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">!=</span> <span style=\"color: #204a87; font-weight: bold\">null</span> <span style=\"color: #000000; font-weight: bold\">&amp;&amp;</span> <span style=\"color: #000000\">y</span> <span style=\"color: #000000; font-weight: bold\">!=</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// x and y are automatically cast to non-nullable after null check</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"either '$arg1' or '$arg2' is not a number\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>    \n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">printProduct</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"6\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"7\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">printProduct</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"7\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">printProduct</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"b\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>or</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">parseInt</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">str</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">str</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toIntOrNull</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">printProduct</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">arg1</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">arg2</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">parseInt</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">arg1</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">y</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">parseInt</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">arg2</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Wrong number format in arg1: '${arg1}'\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">y</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Wrong number format in arg2: '${arg2}'\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #8f5902; font-style: italic\">// x and y are automatically cast to non-nullable after null check</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">printProduct</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"6\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"7\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">printProduct</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"7\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">printProduct</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"99\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"b\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzc3NDksICJpZCI6ICIxNDg3OTUwOTU5NzQ3LTAwMSIsICJtZCI6ICJBIHJlZmVyZW5jZSBtdXN0IGJlIGV4cGxpY2l0bHkgbWFya2VkIGFzIG51bGxhYmxlIHdoZW4gKm51bGwqezogLmtleXdvcmQgfSB2YWx1ZSBpcyBwb3NzaWJsZS5cbiAgXG5SZXR1cm4gKm51bGwqezogLmtleXdvcmQgfSBpZiBgc3RyYCBkb2VzIG5vdCBob2xkIGFuIGludGVnZXI6XG4gIFxuYGBgIGtvdGxpblxuZnVuIHBhcnNlSW50KHN0cjogU3RyaW5nKTogSW50PyB7XG4gICAgLy8gLi4uXG59XG5gYGBcbiAgXG5Vc2UgYSBmdW5jdGlvbiByZXR1cm5pbmcgbnVsbGFibGUgdmFsdWU6XG4gIFxuICBcbiAgXG5gYGAga290bGluXG5mdW4gcGFyc2VJbnQoc3RyOiBTdHJpbmcpOiBJbnQ/IHtcbiAgICByZXR1cm4gc3RyLnRvSW50T3JOdWxsKClcbn1cbiAgXG5mdW4gcHJpbnRQcm9kdWN0KGFyZzE6IFN0cmluZywgYXJnMjogU3RyaW5nKSB7XG4gICAgdmFsIHggPSBwYXJzZUludChhcmcxKVxuICAgIHZhbCB5ID0gcGFyc2VJbnQoYXJnMilcbiAgXG4gICAgLy8gVXNpbmcgYHggKiB5YCB5aWVsZHMgZXJyb3IgYmVjYXVzZSB0aGV5IG1heSBob2xkIG51bGxzLlxuICAgIGlmICh4ICE9IG51bGwgJmFtcDsmYW1wOyB5ICE9IG51bGwpIHtcbiAgICAgICAgLy8geCBhbmQgeSBhcmUgYXV0b21hdGljYWxseSBjYXN0IHRvIG5vbi1udWxsYWJsZSBhZnRlciBudWxsIGNoZWNrXG4gICAgICAgIHByaW50bG4oeCAqIHkpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwcmludGxuKCZxdW90O2VpdGhlciAmYXBvczskYXJnMSZhcG9zOyBvciAmYXBvczskYXJnMiZhcG9zOyBpcyBub3QgYSBudW1iZXImcXVvdDspXG4gICAgfSAgICBcbn1cbiAgXG4gIFxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHByaW50UHJvZHVjdCgmcXVvdDs2JnF1b3Q7LCAmcXVvdDs3JnF1b3Q7KVxuICAgIHByaW50UHJvZHVjdCgmcXVvdDthJnF1b3Q7LCAmcXVvdDs3JnF1b3Q7KVxuICAgIHByaW50UHJvZHVjdCgmcXVvdDthJnF1b3Q7LCAmcXVvdDtiJnF1b3Q7KVxufVxuYGBgXG4gIFxub3JcbiAgXG4gIFxuICBcbmBgYCBrb3RsaW5cbmZ1biBwYXJzZUludChzdHI6IFN0cmluZyk6IEludD8ge1xuICAgIHJldHVybiBzdHIudG9JbnRPck51bGwoKVxufVxuICBcbmZ1biBwcmludFByb2R1Y3QoYXJnMTogU3RyaW5nLCBhcmcyOiBTdHJpbmcpIHtcbiAgICB2YWwgeCA9IHBhcnNlSW50KGFyZzEpXG4gICAgdmFsIHkgPSBwYXJzZUludChhcmcyKVxuICBcbiAgICAvLyAuLi5cbiAgICBpZiAoeCA9PSBudWxsKSB7XG4gICAgICAgIHByaW50bG4oJnF1b3Q7V3JvbmcgbnVtYmVyIGZvcm1hdCBpbiBhcmcxOiAmYXBvczske2FyZzF9JmFwb3M7JnF1b3Q7KVxuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHkgPT0gbnVsbCkge1xuICAgICAgICBwcmludGxuKCZxdW90O1dyb25nIG51bWJlciBmb3JtYXQgaW4gYXJnMjogJmFwb3M7JHthcmcyfSZhcG9zOyZxdW90OylcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICBcbiAgICAvLyB4IGFuZCB5IGFyZSBhdXRvbWF0aWNhbGx5IGNhc3QgdG8gbm9uLW51bGxhYmxlIGFmdGVyIG51bGwgY2hlY2tcbiAgICBwcmludGxuKHggKiB5KVxufVxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICBwcmludFByb2R1Y3QoJnF1b3Q7NiZxdW90OywgJnF1b3Q7NyZxdW90OylcbiAgICBwcmludFByb2R1Y3QoJnF1b3Q7YSZxdW90OywgJnF1b3Q7NyZxdW90OylcbiAgICBwcmludFByb2R1Y3QoJnF1b3Q7OTkmcXVvdDssICZxdW90O2ImcXVvdDspXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#using-nullable-values-and-checking-for-null-keyword-"
            ],
            "flags": 0,
            "guid": "uso,.-jh1s",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using <b>type checks</b> and <b>automatic casts</b>",
                "<p>The <em class=\"keyword\">is</em> operator checks if an expression is an instance of a type.<br />\nIf an immutable local variable or property is checked for a specific type, there's no need to cast it explicitly:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">getStringLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span> <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// `obj` is automatically cast to `String` in this branch</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #8f5902; font-style: italic\">// `obj` is still of type `Any` outside of the type-checked branch</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">printLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"'$obj' string length is ${getStringLength(obj) ?: \"</span><span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000\">err</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">not</span> <span style=\"color: #000000\">a</span> <span style=\"color: #000000\">string</span><span style=\"color: #4e9a06\">\"} \"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000\">printLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Incomprehensibilities\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">printLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1000</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">printLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">()))</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>or</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">getStringLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span> <span style=\"color: #000000; font-weight: bold\">!</span><span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n\n    <span style=\"color: #8f5902; font-style: italic\">// `obj` is automatically cast to `String` in this branch</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">printLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"'$obj' string length is ${getStringLength(obj) ?: \"</span><span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000\">err</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">not</span> <span style=\"color: #000000\">a</span> <span style=\"color: #000000\">string</span><span style=\"color: #4e9a06\">\"} \"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000\">printLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Incomprehensibilities\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">printLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1000</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">printLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">()))</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>or even</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">getStringLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// `obj` is automatically cast to `String` on the right-hand side of `&amp;&amp;`</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span> <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">&amp;&amp;</span> <span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">printLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"'$obj' string length is ${getStringLength(obj) ?: \"</span><span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000\">err</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">empty</span> <span style=\"color: #000000\">or</span> <span style=\"color: #000000\">not</span> <span style=\"color: #000000\">a</span> <span style=\"color: #000000\">string</span> <span style=\"color: #000000\">at</span> <span style=\"color: #000000\">all</span><span style=\"color: #4e9a06\">\"} \"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000\">printLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Incomprehensibilities\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">printLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">printLength</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1000</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzc3NzEsICJpZCI6ICIxNDg3OTUxMDEyOTI5LTAwMSIsICJtZCI6ICJUaGUgKmlzKns6IC5rZXl3b3JkIH0gb3BlcmF0b3IgY2hlY2tzIGlmIGFuIGV4cHJlc3Npb24gaXMgYW4gaW5zdGFuY2Ugb2YgYSB0eXBlLlxuSWYgYW4gaW1tdXRhYmxlIGxvY2FsIHZhcmlhYmxlIG9yIHByb3BlcnR5IGlzIGNoZWNrZWQgZm9yIGEgc3BlY2lmaWMgdHlwZSwgdGhlcmUmYXBvcztzIG5vIG5lZWQgdG8gY2FzdCBpdCBleHBsaWNpdGx5OlxuICBcbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIGdldFN0cmluZ0xlbmd0aChvYmo6IEFueSk6IEludD8ge1xuICAgIGlmIChvYmogaXMgU3RyaW5nKSB7XG4gICAgICAgIC8vIGBvYmpgIGlzIGF1dG9tYXRpY2FsbHkgY2FzdCB0byBgU3RyaW5nYCBpbiB0aGlzIGJyYW5jaFxuICAgICAgICByZXR1cm4gb2JqLmxlbmd0aFxuICAgIH1cbiAgXG4gICAgLy8gYG9iamAgaXMgc3RpbGwgb2YgdHlwZSBgQW55YCBvdXRzaWRlIG9mIHRoZSB0eXBlLWNoZWNrZWQgYnJhbmNoXG4gICAgcmV0dXJuIG51bGxcbn1cbiAgXG4gIFxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIGZ1biBwcmludExlbmd0aChvYmo6IEFueSkge1xuICAgICAgICBwcmludGxuKCZxdW90OyZhcG9zOyRvYmomYXBvczsgc3RyaW5nIGxlbmd0aCBpcyAke2dldFN0cmluZ0xlbmd0aChvYmopID86ICZxdW90Oy4uLiBlcnIsIG5vdCBhIHN0cmluZyZxdW90O30gJnF1b3Q7KVxuICAgIH1cbiAgICBwcmludExlbmd0aCgmcXVvdDtJbmNvbXByZWhlbnNpYmlsaXRpZXMmcXVvdDspXG4gICAgcHJpbnRMZW5ndGgoMTAwMClcbiAgICBwcmludExlbmd0aChsaXN0T2YoQW55KCkpKVxufVxuYGBgXG4gIFxub3JcbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIGdldFN0cmluZ0xlbmd0aChvYmo6IEFueSk6IEludD8ge1xuICAgIGlmIChvYmogIWlzIFN0cmluZykgcmV0dXJuIG51bGxcbiAgXG4gICAgLy8gYG9iamAgaXMgYXV0b21hdGljYWxseSBjYXN0IHRvIGBTdHJpbmdgIGluIHRoaXMgYnJhbmNoXG4gICAgcmV0dXJuIG9iai5sZW5ndGhcbn1cbiAgXG4gIFxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIGZ1biBwcmludExlbmd0aChvYmo6IEFueSkge1xuICAgICAgICBwcmludGxuKCZxdW90OyZhcG9zOyRvYmomYXBvczsgc3RyaW5nIGxlbmd0aCBpcyAke2dldFN0cmluZ0xlbmd0aChvYmopID86ICZxdW90Oy4uLiBlcnIsIG5vdCBhIHN0cmluZyZxdW90O30gJnF1b3Q7KVxuICAgIH1cbiAgICBwcmludExlbmd0aCgmcXVvdDtJbmNvbXByZWhlbnNpYmlsaXRpZXMmcXVvdDspXG4gICAgcHJpbnRMZW5ndGgoMTAwMClcbiAgICBwcmludExlbmd0aChsaXN0T2YoQW55KCkpKVxufVxuYGBgXG4gIFxub3IgZXZlblxuICBcbiAgXG5gYGAga290bGluXG5mdW4gZ2V0U3RyaW5nTGVuZ3RoKG9iajogQW55KTogSW50PyB7XG4gICAgLy8gYG9iamAgaXMgYXV0b21hdGljYWxseSBjYXN0IHRvIGBTdHJpbmdgIG9uIHRoZSByaWdodC1oYW5kIHNpZGUgb2YgYCZhbXA7JmFtcDtgXG4gICAgaWYgKG9iaiBpcyBTdHJpbmcgJmFtcDsmYW1wOyBvYmoubGVuZ3RoICZndDsgMCkge1xuICAgICAgICByZXR1cm4gb2JqLmxlbmd0aFxuICAgIH1cbiAgXG4gICAgcmV0dXJuIG51bGxcbn1cbiAgXG4gIFxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIGZ1biBwcmludExlbmd0aChvYmo6IEFueSkge1xuICAgICAgICBwcmludGxuKCZxdW90OyZhcG9zOyRvYmomYXBvczsgc3RyaW5nIGxlbmd0aCBpcyAke2dldFN0cmluZ0xlbmd0aChvYmopID86ICZxdW90Oy4uLiBlcnIsIGlzIGVtcHR5IG9yIG5vdCBhIHN0cmluZyBhdCBhbGwmcXVvdDt9ICZxdW90OylcbiAgICB9XG4gICAgcHJpbnRMZW5ndGgoJnF1b3Q7SW5jb21wcmVoZW5zaWJpbGl0aWVzJnF1b3Q7KVxuICAgIHByaW50TGVuZ3RoKCZxdW90OyZxdW90OylcbiAgICBwcmludExlbmd0aCgxMDAwKVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#using-type-checks-and-automatic-casts"
            ],
            "flags": 0,
            "guid": "nybi]j5/,l",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using a <b>for</b> loop",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">items</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"apple\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"banana\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"kiwi\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">items</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>or</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">items</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"apple\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"banana\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"kiwi\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">index</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">items</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">indices</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"item at $index is ${items[index]}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzM2NjAsICJpZCI6ICIxNDg3OTUxMTgwOTA1LTAwMSIsICJtZCI6ICIgIFxuYGBgIGtvdGxpblxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhbCBpdGVtcyA9IGxpc3RPZigmcXVvdDthcHBsZSZxdW90OywgJnF1b3Q7YmFuYW5hJnF1b3Q7LCAmcXVvdDtraXdpJnF1b3Q7KVxuICAgIGZvciAoaXRlbSBpbiBpdGVtcykge1xuICAgICAgICBwcmludGxuKGl0ZW0pXG4gICAgfVxufVxuYGBgXG4gIFxub3JcbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhbCBpdGVtcyA9IGxpc3RPZigmcXVvdDthcHBsZSZxdW90OywgJnF1b3Q7YmFuYW5hJnF1b3Q7LCAmcXVvdDtraXdpJnF1b3Q7KVxuICAgIGZvciAoaW5kZXggaW4gaXRlbXMuaW5kaWNlcykge1xuICAgICAgICBwcmludGxuKCZxdW90O2l0ZW0gYXQgJGluZGV4IGlzICR7aXRlbXNbaW5kZXhdfSZxdW90OylcbiAgICB9XG59XG5gYGBcbiAgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#using-a-for-loop"
            ],
            "flags": 0,
            "guid": "gsZWWTFPd^",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using a <b>while</b> loop",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">items</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"apple\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"banana\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"kiwi\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">index</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n    <span style=\"color: #204a87; font-weight: bold\">while</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">index</span> <span style=\"color: #000000; font-weight: bold\">&lt;</span> <span style=\"color: #000000\">items</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"item at $index is ${items[index]}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000\">index</span><span style=\"color: #000000; font-weight: bold\">++</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzM2OTgsICJpZCI6ICIxNDg3OTUxMjQzNjE0LTAwMSIsICJtZCI6ICIgIFxuYGBgIGtvdGxpblxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhbCBpdGVtcyA9IGxpc3RPZigmcXVvdDthcHBsZSZxdW90OywgJnF1b3Q7YmFuYW5hJnF1b3Q7LCAmcXVvdDtraXdpJnF1b3Q7KVxuICAgIHZhciBpbmRleCA9IDBcbiAgICB3aGlsZSAoaW5kZXggJmx0OyBpdGVtcy5zaXplKSB7XG4gICAgICAgIHByaW50bG4oJnF1b3Q7aXRlbSBhdCAkaW5kZXggaXMgJHtpdGVtc1tpbmRleF19JnF1b3Q7KVxuICAgICAgICBpbmRleCsrXG4gICAgfVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#using-a-while-loop"
            ],
            "flags": 0,
            "guid": "yDC/I:]il8",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using <b>when</b> expression",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">describe</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span>\n    <span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #0000cf; font-weight: bold\">1</span>          <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #4e9a06\">\"One\"</span>\n        <span style=\"color: #4e9a06\">\"Hello\"</span>    <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #4e9a06\">\"Greeting\"</span>\n        <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">Long</span>    <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #4e9a06\">\"Long\"</span>\n        <span style=\"color: #000000; font-weight: bold\">!</span><span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #4e9a06\">\"Not a string\"</span>\n        <span style=\"color: #204a87; font-weight: bold\">else</span>       <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #4e9a06\">\"Unknown\"</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">describe</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">))</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">describe</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Hello\"</span><span style=\"color: #000000; font-weight: bold\">))</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">describe</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1000L</span><span style=\"color: #000000; font-weight: bold\">))</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">describe</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">))</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">describe</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"other\"</span><span style=\"color: #000000; font-weight: bold\">))</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzM3MjMsICJpZCI6ICIxNDg3OTUxMjYxMDE5LTAwMSIsICJtZCI6ICJgYGAga290bGluXG5mdW4gZGVzY3JpYmUob2JqOiBBbnkpOiBTdHJpbmcgPVxuICAgIHdoZW4gKG9iaikge1xuICAgICAgICAxICAgICAgICAgIC0mZ3Q7ICZxdW90O09uZSZxdW90O1xuICAgICAgICAmcXVvdDtIZWxsbyZxdW90OyAgICAtJmd0OyAmcXVvdDtHcmVldGluZyZxdW90O1xuICAgICAgICBpcyBMb25nICAgIC0mZ3Q7ICZxdW90O0xvbmcmcXVvdDtcbiAgICAgICAgIWlzIFN0cmluZyAtJmd0OyAmcXVvdDtOb3QgYSBzdHJpbmcmcXVvdDtcbiAgICAgICAgZWxzZSAgICAgICAtJmd0OyAmcXVvdDtVbmtub3duJnF1b3Q7XG4gICAgfVxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICBwcmludGxuKGRlc2NyaWJlKDEpKVxuICAgIHByaW50bG4oZGVzY3JpYmUoJnF1b3Q7SGVsbG8mcXVvdDspKVxuICAgIHByaW50bG4oZGVzY3JpYmUoMTAwMEwpKVxuICAgIHByaW50bG4oZGVzY3JpYmUoMikpXG4gICAgcHJpbnRsbihkZXNjcmliZSgmcXVvdDtvdGhlciZxdW90OykpXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#using-when-expression"
            ],
            "flags": 0,
            "guid": "p#9A;uHr=-",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using <b>ranges</b>",
                "<p>Check if a number is within a range using <em class=\"keyword\">in</em> operator:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">10</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">y</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">9</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">+</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"fits in range\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Check if a number is out of range:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">list</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"b\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"c\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(-</span><span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #000000; font-weight: bold\">!</span><span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">0.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">lastIndex</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"-1 is out of range\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span> <span style=\"color: #000000; font-weight: bold\">!</span><span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">indices</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"list size is out of valid list indices range too\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Iterating over a range:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">5</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>or over a progression:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">10</span> <span style=\"color: #000000\">step</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">9</span> <span style=\"color: #000000\">downTo</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> <span style=\"color: #000000\">step</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzM3NTQsICJpZCI6ICIxNDg3OTUxMjczMDc4LTAwMSIsICJtZCI6ICJDaGVjayBpZiBhIG51bWJlciBpcyB3aXRoaW4gYSByYW5nZSB1c2luZyAqaW4qezogLmtleXdvcmQgfSBvcGVyYXRvcjpcbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhbCB4ID0gMTBcbiAgICB2YWwgeSA9IDlcbiAgICBpZiAoeCBpbiAxLi55KzEpIHtcbiAgICAgICAgcHJpbnRsbigmcXVvdDtmaXRzIGluIHJhbmdlJnF1b3Q7KVxuICAgIH1cbn1cbmBgYFxuICBcbiAgXG5DaGVjayBpZiBhIG51bWJlciBpcyBvdXQgb2YgcmFuZ2U6XG4gIFxuICBcbmBgYCBrb3RsaW5cbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICB2YWwgbGlzdCA9IGxpc3RPZigmcXVvdDthJnF1b3Q7LCAmcXVvdDtiJnF1b3Q7LCAmcXVvdDtjJnF1b3Q7KVxuICAgIFxuICAgIGlmICgtMSAhaW4gMC4ubGlzdC5sYXN0SW5kZXgpIHtcbiAgICAgICAgcHJpbnRsbigmcXVvdDstMSBpcyBvdXQgb2YgcmFuZ2UmcXVvdDspXG4gICAgfVxuICAgIGlmIChsaXN0LnNpemUgIWluIGxpc3QuaW5kaWNlcykge1xuICAgICAgICBwcmludGxuKCZxdW90O2xpc3Qgc2l6ZSBpcyBvdXQgb2YgdmFsaWQgbGlzdCBpbmRpY2VzIHJhbmdlIHRvbyZxdW90OylcbiAgICB9XG59XG5gYGBcbiAgXG4gIFxuSXRlcmF0aW5nIG92ZXIgYSByYW5nZTpcbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIGZvciAoeCBpbiAxLi41KSB7XG4gICAgICAgIHByaW50KHgpXG4gICAgfVxufVxuYGBgXG4gIFxub3Igb3ZlciBhIHByb2dyZXNzaW9uOlxuICBcbiAgXG5gYGAga290bGluXG5mdW4gbWFpbihhcmdzOiBBcnJheSZsdDtTdHJpbmcmZ3Q7KSB7XG4gICAgZm9yICh4IGluIDEuLjEwIHN0ZXAgMikge1xuICAgICAgICBwcmludCh4KVxuICAgIH1cbiAgICBmb3IgKHggaW4gOSBkb3duVG8gMCBzdGVwIDMpIHtcbiAgICAgICAgcHJpbnQoeClcbiAgICB9XG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#using-ranges"
            ],
            "flags": 0,
            "guid": "cFXj|=,oim",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using <b>collections</b>",
                "<p>Iterating over a collection:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">items</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"apple\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"banana\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"kiwi\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">items</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Checking if a collection contains an object using <em class=\"keyword\">in</em> operator:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">items</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">setOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"apple\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"banana\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"kiwi\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #4e9a06\">\"orange\"</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">items</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"juicy\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #4e9a06\">\"apple\"</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">items</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"apple is fine too\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Using lambda expressions to filter and map collections:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">fruits</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"banana\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"avocado\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"apple\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"kiwi\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">fruits</span>\n        <span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">startsWith</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">sortedBy</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">map</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toUpperCase</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">forEach</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzM3ODMsICJpZCI6ICIxNDg3OTUxMjg3OTQyLTAwMSIsICJtZCI6ICJJdGVyYXRpbmcgb3ZlciBhIGNvbGxlY3Rpb246XG4gIFxuICBcbmBgYCBrb3RsaW5cbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICB2YWwgaXRlbXMgPSBsaXN0T2YoJnF1b3Q7YXBwbGUmcXVvdDssICZxdW90O2JhbmFuYSZxdW90OywgJnF1b3Q7a2l3aSZxdW90OylcbiAgICBmb3IgKGl0ZW0gaW4gaXRlbXMpIHtcbiAgICAgICAgcHJpbnRsbihpdGVtKVxuICAgIH1cbn1cbmBgYFxuICBcbiAgXG5DaGVja2luZyBpZiBhIGNvbGxlY3Rpb24gY29udGFpbnMgYW4gb2JqZWN0IHVzaW5nICppbip7OiAua2V5d29yZCB9IG9wZXJhdG9yOlxuICBcbiAgXG5gYGAga290bGluXG5mdW4gbWFpbihhcmdzOiBBcnJheSZsdDtTdHJpbmcmZ3Q7KSB7XG4gICAgdmFsIGl0ZW1zID0gc2V0T2YoJnF1b3Q7YXBwbGUmcXVvdDssICZxdW90O2JhbmFuYSZxdW90OywgJnF1b3Q7a2l3aSZxdW90OylcbiAgICB3aGVuIHtcbiAgICAgICAgJnF1b3Q7b3JhbmdlJnF1b3Q7IGluIGl0ZW1zIC0mZ3Q7IHByaW50bG4oJnF1b3Q7anVpY3kmcXVvdDspXG4gICAgICAgICZxdW90O2FwcGxlJnF1b3Q7IGluIGl0ZW1zIC0mZ3Q7IHByaW50bG4oJnF1b3Q7YXBwbGUgaXMgZmluZSB0b28mcXVvdDspXG4gICAgfVxufVxuYGBgXG4gIFxuICBcblVzaW5nIGxhbWJkYSBleHByZXNzaW9ucyB0byBmaWx0ZXIgYW5kIG1hcCBjb2xsZWN0aW9uczpcbiAgXG4gIFxuICBcbmBgYCBrb3RsaW5cbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICB2YWwgZnJ1aXRzID0gbGlzdE9mKCZxdW90O2JhbmFuYSZxdW90OywgJnF1b3Q7YXZvY2FkbyZxdW90OywgJnF1b3Q7YXBwbGUmcXVvdDssICZxdW90O2tpd2kmcXVvdDspXG4gICAgZnJ1aXRzXG4gICAgICAgIC5maWx0ZXIgeyBpdC5zdGFydHNXaXRoKCZxdW90O2EmcXVvdDspIH1cbiAgICAgICAgLnNvcnRlZEJ5IHsgaXQgfVxuICAgICAgICAubWFwIHsgaXQudG9VcHBlckNhc2UoKSB9XG4gICAgICAgIC5mb3JFYWNoIHsgcHJpbnRsbihpdCkgfVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/basic-syntax.html#using-collections"
            ],
            "flags": 0,
            "guid": "k*Sb:Bn$TV",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicSyntax",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Creating <b>DTOs</b> (POJOs/POCOs)",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Customer</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">email</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>provides a <code>Customer</code> class with the following functionality:</p>\n<ul>\n<li align=\"left\">getters (and setters in case of <em class=\"keyword\">var</em>s) for all properties</li>\n<li align=\"left\"><code>equals()</code></li>\n<li align=\"left\"><code>hashCode()</code></li>\n<li align=\"left\"><code>toString()</code></li>\n<li align=\"left\"><code>copy()</code></li>\n<li align=\"left\"><code>component1()</code>, <code>component2()</code>, ..., for all properties (see Data classes)</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzc5MDUsICJpZCI6ICIxNDg3OTUxNDY5NTE3LTAwMSIsICJtZCI6ICJgYGAga290bGluXG5kYXRhIGNsYXNzIEN1c3RvbWVyKHZhbCBuYW1lOiBTdHJpbmcsIHZhbCBlbWFpbDogU3RyaW5nKVxuYGBgXG4gIFxucHJvdmlkZXMgYSBgQ3VzdG9tZXJgIGNsYXNzIHdpdGggdGhlIGZvbGxvd2luZyBmdW5jdGlvbmFsaXR5OlxuICBcbiogZ2V0dGVycyAoYW5kIHNldHRlcnMgaW4gY2FzZSBvZiAqdmFyKns6IC5rZXl3b3JkIH1zKSBmb3IgYWxsIHByb3BlcnRpZXNcbiogYGVxdWFscygpYFxuKiBgaGFzaENvZGUoKWBcbiogYHRvU3RyaW5nKClgXG4qIGBjb3B5KClgXG4qIGBjb21wb25lbnQxKClgLCBgY29tcG9uZW50MigpYCwgLi4uLCBmb3IgYWxsIHByb3BlcnRpZXMgKHNlZSBEYXRhIGNsYXNzZXMpXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/idioms.html#creating-dtos-pojospocos"
            ],
            "flags": 0,
            "guid": "G+#g+DP_zP",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Default values for <b>function parameters</b>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzc5NjMsICJpZCI6ICIxNDg3OTUxNDk2NTMzLTAwMSIsICJtZCI6ICJgYGAga290bGluXG5mdW4gZm9vKGE6IEludCA9IDAsIGI6IFN0cmluZyA9ICZxdW90OyZxdW90OykgeyAuLi4gfVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/idioms.html#default-values-for-function-parameters"
            ],
            "flags": 0,
            "guid": "uRme+8Z&b[",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Filtering</b> a list",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">positives</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Or alternatively, even shorter:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">positives</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzc5ODQsICJpZCI6ICIxNDg3OTUxNTE4OTA3LTAwMSIsICJtZCI6ICJgYGAga290bGluXG52YWwgcG9zaXRpdmVzID0gbGlzdC5maWx0ZXIgeyB4IC0mZ3Q7IHggJmd0OyAwIH1cbmBgYFxuICBcbk9yIGFsdGVybmF0aXZlbHksIGV2ZW4gc2hvcnRlcjpcbiAgXG5gYGAga290bGluXG52YWwgcG9zaXRpdmVzID0gbGlzdC5maWx0ZXIgeyBpdCAmZ3Q7IDAgfVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/idioms.html#filtering-a-list"
            ],
            "flags": 0,
            "guid": "E(,L2#og{c",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>String <b>Interpolation</b></div>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Name $name\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgwMTMsICJpZCI6ICIxNDg3OTUxNjI1Mjg2LTAwMSIsICJtZCI6ICJgYGAga290bGluXG5wcmludGxuKCZxdW90O05hbWUgJG5hbWUmcXVvdDspXG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/idioms.html#string-interpolation"
            ],
            "flags": 0,
            "guid": "xp~nAPVa5l",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Instance Checks",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">Foo</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n    <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">Bar</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n    <span style=\"color: #204a87; font-weight: bold\">else</span>   <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgwMzIsICJpZCI6ICIxNDg3OTUxNjcxMjU2LTAwMSIsICJtZCI6ICJgYGAga290bGluXG53aGVuICh4KSB7XG4gICAgaXMgRm9vIC0mZ3Q7IC4uLlxuICAgIGlzIEJhciAtJmd0OyAuLi5cbiAgICBlbHNlICAgLSZndDsgLi4uXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/idioms.html#instance-checks"
            ],
            "flags": 0,
            "guid": "j:Q{d1MMdv",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Traversing</b> a map/list of pairs",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">((</span><span style=\"color: #000000\">k</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">v</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"$k -&gt; $v\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p><code>k</code>, <code>v</code> can be called anything.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgwNDgsICJpZCI6ICIxNDg3OTUxNjg4OTgxLTAwMSIsICJtZCI6ICJgYGAga290bGluXG5mb3IgKChrLCB2KSBpbiBtYXApIHtcbiAgICBwcmludGxuKCZxdW90OyRrIC0mZ3Q7ICR2JnF1b3Q7KVxufVxuYGBgXG4gIFxuYGtgLCBgdmAgY2FuIGJlIGNhbGxlZCBhbnl0aGluZy5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/idioms.html#traversing-a-maplist-of-pairs"
            ],
            "flags": 0,
            "guid": "En*,.gJ&uR",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using <b>ranges</b> example",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">100</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>  <span style=\"color: #8f5902; font-style: italic\">// closed range: includes 100</span>\n<span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #000000\">until</span> <span style=\"color: #0000cf; font-weight: bold\">100</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #8f5902; font-style: italic\">// half-open range: does not include 100</span>\n<span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">2.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">10</span> <span style=\"color: #000000\">step</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">10</span> <span style=\"color: #000000\">downTo</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">10</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgwOTQsICJpZCI6ICIxNDg3OTUxNzMzMTMzLTAwMSIsICJtZCI6ICJgYGAga290bGluXG5mb3IgKGkgaW4gMS4uMTAwKSB7IC4uLiB9ICAvLyBjbG9zZWQgcmFuZ2U6IGluY2x1ZGVzIDEwMFxuZm9yIChpIGluIDEgdW50aWwgMTAwKSB7IC4uLiB9IC8vIGhhbGYtb3BlbiByYW5nZTogZG9lcyBub3QgaW5jbHVkZSAxMDBcbmZvciAoeCBpbiAyLi4xMCBzdGVwIDIpIHsgLi4uIH1cbmZvciAoeCBpbiAxMCBkb3duVG8gMSkgeyAuLi4gfVxuaWYgKHggaW4gMS4uMTApIHsgLi4uIH1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/idioms.html#using-ranges"
            ],
            "flags": 0,
            "guid": "h%rTH0>axY",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Read-only <b>list</b>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">list</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"b\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"c\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgxMjEsICJpZCI6ICIxNDg3OTUxNzczMTY5LTAwMSIsICJtZCI6ICJgYGAga290bGluXG52YWwgbGlzdCA9IGxpc3RPZigmcXVvdDthJnF1b3Q7LCAmcXVvdDtiJnF1b3Q7LCAmcXVvdDtjJnF1b3Q7KVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/idioms.html#read-only-list"
            ],
            "flags": 0,
            "guid": "sxYCu$<nc8",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Read-only <b>map</b>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">map</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">mapOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span> <span style=\"color: #000000\">to</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"b\"</span> <span style=\"color: #000000\">to</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"c\"</span> <span style=\"color: #000000\">to</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgxNzYsICJpZCI6ICIxNDg3OTUxNzk0OTM4LTAwMSIsICJtZCI6ICJgYGAga290bGluXG52YWwgbWFwID0gbWFwT2YoJnF1b3Q7YSZxdW90OyB0byAxLCAmcXVvdDtiJnF1b3Q7IHRvIDIsICZxdW90O2MmcXVvdDsgdG8gMylcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/idioms.html#read-only-map"
            ],
            "flags": 0,
            "guid": "gt`NW*f1;T",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Accessing a <b>map</b>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #4e9a06\">\"key\"</span><span style=\"color: #000000; font-weight: bold\">])</span>\n<span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #4e9a06\">\"key\"</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">value</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgxOTQsICJpZCI6ICIxNDg3OTUxODEzMDQ1LTAwMSIsICJtZCI6ICJgYGAga290bGluXG5wcmludGxuKG1hcFsmcXVvdDtrZXkmcXVvdDtdKVxubWFwWyZxdW90O2tleSZxdW90O10gPSB2YWx1ZVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/idioms.html#accessing-a-map"
            ],
            "flags": 0,
            "guid": "kLvPs$cW<>",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Lazy</b> property",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">lazy</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// compute the string</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgyMTAsICJpZCI6ICIxNDg3OTUxODI2NjI5LTAwMSIsICJtZCI6ICJgYGAga290bGluXG52YWwgcDogU3RyaW5nIGJ5IGxhenkge1xuICAgIC8vIGNvbXB1dGUgdGhlIHN0cmluZ1xufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/idioms.html#lazy-property"
            ],
            "flags": 0,
            "guid": "feu)[$ft9K",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Extension</b> Function Idiom",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">spaceToCamelCase</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #4e9a06\">\"Convert this to camelcase\"</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">spaceToCamelCase</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgyMjksICJpZCI6ICIxNDg4MDIzMjkzMDkyLTAwMSIsICJtZCI6ICJgYGAga290bGluXG5mdW4gU3RyaW5nLnNwYWNlVG9DYW1lbENhc2UoKSB7IC4uLiB9XG4gIFxuJnF1b3Q7Q29udmVydCB0aGlzIHRvIGNhbWVsY2FzZSZxdW90Oy5zcGFjZVRvQ2FtZWxDYXNlKClcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/idioms.html#extension-functions"
            ],
            "flags": 0,
            "guid": "eW}OQ)$]FB",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Creating a <b>singleton</b>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">object</span> <span style=\"color: #000000\">Resource</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">name</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"Name\"</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgyNzgsICJpZCI6ICIxNDg4MDIzMzE3MTcyLTAwMSIsICJtZCI6ICJgYGAga290bGluXG5vYmplY3QgUmVzb3VyY2Uge1xuICAgIHZhbCBuYW1lID0gJnF1b3Q7TmFtZSZxdW90O1xufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/idioms.html#creating-a-singleton"
            ],
            "flags": 0,
            "guid": "wwE483.xPi",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If <b>not null</b> shorthand",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">files</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">File</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Test\"</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">listFiles</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">files</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">size</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgyOTQsICJpZCI6ICIxNDg4MDIzMzMxNzEzLTAwMSIsICJtZCI6ICJgYGAga290bGluXG52YWwgZmlsZXMgPSBGaWxlKCZxdW90O1Rlc3QmcXVvdDspLmxpc3RGaWxlcygpXG4gIFxucHJpbnRsbihmaWxlcz8uc2l6ZSlcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/idioms.html#if-not-null-shorthand"
            ],
            "flags": 0,
            "guid": "E?g^uKIo&l",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>Executing a statement <b>if null</b></div>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">data</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">email</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">data</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #4e9a06\">\"email\"</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IllegalStateException</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Email is missing!\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgzMzQsICJpZCI6ICIxNDg4MDIzMzUwMjY2LTAwMSIsICJtZCI6ICJgYGAga290bGluXG52YWwgZGF0YSA9IC4uLlxudmFsIGVtYWlsID0gZGF0YVsmcXVvdDtlbWFpbCZxdW90O10gPzogdGhyb3cgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKCZxdW90O0VtYWlsIGlzIG1pc3NpbmchJnF1b3Q7KVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/idioms.html#executing-a-statement-if-null"
            ],
            "flags": 0,
            "guid": "cwG+=(>OXV",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Execute if <b>not null</b>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">data</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n\n<span style=\"color: #000000\">data</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">let</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #8f5902; font-style: italic\">// execute this block if not null</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgzNTYsICJpZCI6ICIxNDg4MDIzMzkxNzg0LTAwMSIsICJtZCI6ICJgYGAga290bGluXG52YWwgZGF0YSA9IC4uLlxuICBcbmRhdGE/LmxldCB7XG4gICAgLi4uIC8vIGV4ZWN1dGUgdGhpcyBibG9jayBpZiBub3QgbnVsbFxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/idioms.html#execute-if-not-null"
            ],
            "flags": 0,
            "guid": "rYYx<Dw7zs",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Return on <b>when</b> statement",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">transform</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">color</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">color</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #4e9a06\">\"Red\"</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n        <span style=\"color: #4e9a06\">\"Green\"</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n        <span style=\"color: #4e9a06\">\"Blue\"</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">2</span>\n        <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IllegalArgumentException</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Invalid color param value\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgzOTMsICJpZCI6ICIxNDg4MDIzNDE3MTkyLTAwMSIsICJtZCI6ICJgYGAga290bGluXG5mdW4gdHJhbnNmb3JtKGNvbG9yOiBTdHJpbmcpOiBJbnQge1xuICAgIHJldHVybiB3aGVuIChjb2xvcikge1xuICAgICAgICAmcXVvdDtSZWQmcXVvdDsgLSZndDsgMFxuICAgICAgICAmcXVvdDtHcmVlbiZxdW90OyAtJmd0OyAxXG4gICAgICAgICZxdW90O0JsdWUmcXVvdDsgLSZndDsgMlxuICAgICAgICBlbHNlIC0mZ3Q7IHRocm93IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigmcXVvdDtJbnZhbGlkIGNvbG9yIHBhcmFtIHZhbHVlJnF1b3Q7KVxuICAgIH1cbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/idioms.html#return-on-when-statement"
            ],
            "flags": 0,
            "guid": "HbQ4Nkg7_%",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>'<b>try/catch</b>' expression</div>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">test</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">result</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">try</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">count</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #204a87; font-weight: bold\">catch</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ArithmeticException</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IllegalStateException</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #8f5902; font-style: italic\">// Working with result</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg0MTIsICJpZCI6ICIxNDg4MDIzNDQ0MDEzLTAwMSIsICJtZCI6ICJgYGAga290bGluXG5mdW4gdGVzdCgpIHtcbiAgICB2YWwgcmVzdWx0ID0gdHJ5IHtcbiAgICAgICAgY291bnQoKVxuICAgIH0gY2F0Y2ggKGU6IEFyaXRobWV0aWNFeGNlcHRpb24pIHtcbiAgICAgICAgdGhyb3cgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKGUpXG4gICAgfVxuICBcbiAgICAvLyBXb3JraW5nIHdpdGggcmVzdWx0XG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/idioms.html#trycatch-expression"
            ],
            "flags": 0,
            "guid": "y3-h0H)k&,",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "'<b>if</b>' expression",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">param</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">result</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">param</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #4e9a06\">\"one\"</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">param</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #4e9a06\">\"two\"</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #4e9a06\">\"three\"</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg0MzIsICJpZCI6ICIxNDg4MDIzNDgzNjgxLTAwMSIsICJtZCI6ICJgYGAga290bGluXG5mdW4gZm9vKHBhcmFtOiBJbnQpIHtcbiAgICB2YWwgcmVzdWx0ID0gaWYgKHBhcmFtID09IDEpIHtcbiAgICAgICAgJnF1b3Q7b25lJnF1b3Q7XG4gICAgfSBlbHNlIGlmIChwYXJhbSA9PSAyKSB7XG4gICAgICAgICZxdW90O3R3byZxdW90O1xuICAgIH0gZWxzZSB7XG4gICAgICAgICZxdW90O3RocmVlJnF1b3Q7XG4gICAgfVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/idioms.html#if-expression"
            ],
            "flags": 0,
            "guid": "QCQ}vRs8Cd",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Builder-style usage</b> of methods that return Unit",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">arrayOfMinusOnes</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">size</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">IntArray</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">IntArray</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">size</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">apply</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">fill</span><span style=\"color: #000000; font-weight: bold\">(-</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg0NTEsICJpZCI6ICIxNDg4MDIzNTAwNzIxLTAwMSIsICJtZCI6ICJgYGAga290bGluXG5mdW4gYXJyYXlPZk1pbnVzT25lcyhzaXplOiBJbnQpOiBJbnRBcnJheSB7XG4gICAgcmV0dXJuIEludEFycmF5KHNpemUpLmFwcGx5IHsgZmlsbCgtMSkgfVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/idioms.html#builder-style-usage-of-methods-that-return-unit"
            ],
            "flags": 0,
            "guid": "j_;O<94y+K",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Single-expression functions",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">theAnswer</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">42</span>\n</pre></div>\n<p>This is equivalent to</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">theAnswer</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #0000cf; font-weight: bold\">42</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>This can be effectively combined with other idioms, leading to shorter code. E.g. with the <em class=\"keyword\">when</em>-expression:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">transform</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">color</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">color</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #4e9a06\">\"Red\"</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n    <span style=\"color: #4e9a06\">\"Green\"</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n    <span style=\"color: #4e9a06\">\"Blue\"</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">2</span>\n    <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IllegalArgumentException</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Invalid color param value\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg0NzgsICJpZCI6ICIxNDg4MDIzNTQwNzcyLTAwMSIsICJtZCI6ICJgYGAga290bGluXG5mdW4gdGhlQW5zd2VyKCkgPSA0MlxuYGBgXG4gIFxuVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gIFxuYGBgIGtvdGxpblxuZnVuIHRoZUFuc3dlcigpOiBJbnQge1xuICAgIHJldHVybiA0MlxufVxuYGBgXG4gIFxuVGhpcyBjYW4gYmUgZWZmZWN0aXZlbHkgY29tYmluZWQgd2l0aCBvdGhlciBpZGlvbXMsIGxlYWRpbmcgdG8gc2hvcnRlciBjb2RlLiBFLmcuIHdpdGggdGhlICp3aGVuKns6IC5rZXl3b3JkIH0tZXhwcmVzc2lvbjpcbiAgXG5gYGAga290bGluXG5mdW4gdHJhbnNmb3JtKGNvbG9yOiBTdHJpbmcpOiBJbnQgPSB3aGVuIChjb2xvcikge1xuICAgICZxdW90O1JlZCZxdW90OyAtJmd0OyAwXG4gICAgJnF1b3Q7R3JlZW4mcXVvdDsgLSZndDsgMVxuICAgICZxdW90O0JsdWUmcXVvdDsgLSZndDsgMlxuICAgIGVsc2UgLSZndDsgdGhyb3cgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCZxdW90O0ludmFsaWQgY29sb3IgcGFyYW0gdmFsdWUmcXVvdDspXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/idioms.html#single-expression-functions"
            ],
            "flags": 0,
            "guid": "Oy~>U`e|c@",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Calling multiple methods on an object instance ('<b>with</b>')",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Turtle</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">penDown</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">penUp</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">turn</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">degrees</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Double</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">forward</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">pixels</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Double</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">myTurtle</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Turtle</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">with</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">myTurtle</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">//draw a 100 pix square</span>\n    <span style=\"color: #000000\">penDown</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">4</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">forward</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">100.0</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000\">turn</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">90.0</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000\">penUp</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg1MTcsICJpZCI6ICIxNDg4MDIzODE5Mzk4LTAwMSIsICJtZCI6ICJgYGAga290bGluXG5jbGFzcyBUdXJ0bGUge1xuICAgIGZ1biBwZW5Eb3duKClcbiAgICBmdW4gcGVuVXAoKVxuICAgIGZ1biB0dXJuKGRlZ3JlZXM6IERvdWJsZSlcbiAgICBmdW4gZm9yd2FyZChwaXhlbHM6IERvdWJsZSlcbn1cbiAgXG52YWwgbXlUdXJ0bGUgPSBUdXJ0bGUoKVxud2l0aChteVR1cnRsZSkgeyAvL2RyYXcgYSAxMDAgcGl4IHNxdWFyZVxuICAgIHBlbkRvd24oKVxuICAgIGZvcihpIGluIDEuLjQpIHtcbiAgICAgICAgZm9yd2FyZCgxMDAuMClcbiAgICAgICAgdHVybig5MC4wKVxuICAgIH1cbiAgICBwZW5VcCgpXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/idioms.html#calling-multiple-methods-on-an-object-instance-with"
            ],
            "flags": 0,
            "guid": "LZ2@wq8lK~",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Java 7's<b> try with resources</b>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">stream</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Files</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">newInputStream</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Paths</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"/some/file.txt\"</span><span style=\"color: #000000; font-weight: bold\">))</span>\n<span style=\"color: #000000\">stream</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">buffered</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">reader</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">use</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">reader</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">reader</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">readText</span><span style=\"color: #000000; font-weight: bold\">())</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg1MzIsICJpZCI6ICIxNDg4MDIzOTEwNzI4LTAwMSIsICJtZCI6ICJgYGAga290bGluXG52YWwgc3RyZWFtID0gRmlsZXMubmV3SW5wdXRTdHJlYW0oUGF0aHMuZ2V0KCZxdW90Oy9zb21lL2ZpbGUudHh0JnF1b3Q7KSlcbnN0cmVhbS5idWZmZXJlZCgpLnJlYWRlcigpLnVzZSB7IHJlYWRlciAtJmd0O1xuICAgIHByaW50bG4ocmVhZGVyLnJlYWRUZXh0KCkpXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/idioms.html#java-7s-try-with-resources"
            ],
            "flags": 0,
            "guid": "oT{)+]9-mo",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Convenient form for a generic function that <b>requires the generic type information</b>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">//  public final class Gson {</span>\n<span style=\"color: #8f5902; font-style: italic\">//     ...</span>\n<span style=\"color: #8f5902; font-style: italic\">//     public &lt;T&gt; T fromJson(JsonElement json, Class&lt;T&gt; classOfT) throws JsonSyntaxException {</span>\n<span style=\"color: #8f5902; font-style: italic\">//     ...</span>\n\n<span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">reified</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">Gson</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">fromJson</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">json</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">JsonElement</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">fromJson</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">json</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">T</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #204a87; font-weight: bold\">class</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">java</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzE4ODIsICJpZCI6ICIxNDg4MDIzOTMxMjcyLTAwMSIsICJtZCI6ICJgYGAga290bGluXG4vLyAgcHVibGljIGZpbmFsIGNsYXNzIEdzb24ge1xuLy8gICAgIC4uLlxuLy8gICAgIHB1YmxpYyAmbHQ7VCZndDsgVCBmcm9tSnNvbihKc29uRWxlbWVudCBqc29uLCBDbGFzcyZsdDtUJmd0OyBjbGFzc09mVCkgdGhyb3dzIEpzb25TeW50YXhFeGNlcHRpb24ge1xuLy8gICAgIC4uLlxuICBcbmlubGluZSBmdW4gJmx0O3JlaWZpZWQgVDogQW55Jmd0OyBHc29uLmZyb21Kc29uKGpzb246IEpzb25FbGVtZW50KTogVCA9IHRoaXMuZnJvbUpzb24oanNvbiwgVDo6Y2xhc3MuamF2YSlcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/idioms.html#convenient-form-for-a-generic-function-that-requires-the-generic-type-information"
            ],
            "flags": 0,
            "guid": "MH;F5%@|+t",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Consuming a <b>nullable</b> Boolean",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Boolean</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #204a87; font-weight: bold\">true</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// `b` is false or null</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg1NzQsICJpZCI6ICIxNDg4MDIzOTYxMDU0LTAwMSIsICJtZCI6ICJgYGAga290bGluXG52YWwgYjogQm9vbGVhbj8gPSAuLi5cbmlmIChiID09IHRydWUpIHtcbiAgICAuLi5cbn0gZWxzZSB7XG4gICAgLy8gYGJgIGlzIGZhbHNlIG9yIG51bGxcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/idioms.html#consuming-a-nullable-boolean"
            ],
            "flags": 0,
            "guid": "IDdfaw<Ux<",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Naming Style",
                "<p>If in doubt, default to the Java Coding Conventions such as:</p>\n<ul>\n<li align=\"left\">use of camelCase for names (and avoid underscore in names)</li>\n<li align=\"left\">types start with upper case</li>\n<li align=\"left\">methods and properties start with lower case</li>\n<li align=\"left\">use 4 space indentation</li>\n<li align=\"left\">public functions should have documentation such that it appears in Kotlin Doc</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTI3MTYxODAsICJpZCI6ICIxNDg4MDI0MDI0Njk1LTAwMSIsICJtZCI6ICJJZiBpbiBkb3VidCwgZGVmYXVsdCB0byB0aGUgSmF2YSBDb2RpbmcgQ29udmVudGlvbnMgc3VjaCBhczpcbiAgXG4qIHVzZSBvZiBjYW1lbENhc2UgZm9yIG5hbWVzIChhbmQgYXZvaWQgdW5kZXJzY29yZSBpbiBuYW1lcylcbiogdHlwZXMgc3RhcnQgd2l0aCB1cHBlciBjYXNlXG4qIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgc3RhcnQgd2l0aCBsb3dlciBjYXNlXG4qIHVzZSA0IHNwYWNlIGluZGVudGF0aW9uXG4qIHB1YmxpYyBmdW5jdGlvbnMgc2hvdWxkIGhhdmUgZG9jdW1lbnRhdGlvbiBzdWNoIHRoYXQgaXQgYXBwZWFycyBpbiBLb3RsaW4gRG9jXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/coding-conventions.html#naming-style"
            ],
            "flags": 0,
            "guid": "cQk8y`)lAF",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CodingConventions",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Colon</b> coding convention",
                "<p>There is a space before colon where colon separates type and supertype and there's no space where colon separates instance and type:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">Foo</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #204a87; font-weight: bold\">out</span> <span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Bar</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">T</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg2NzksICJpZCI6ICIxNDg4MDI0MTIwNjc2LTAwMSIsICJtZCI6ICJUaGVyZSBpcyBhIHNwYWNlIGJlZm9yZSBjb2xvbiB3aGVyZSBjb2xvbiBzZXBhcmF0ZXMgdHlwZSBhbmQgc3VwZXJ0eXBlIGFuZCB0aGVyZSZhcG9zO3Mgbm8gc3BhY2Ugd2hlcmUgY29sb24gc2VwYXJhdGVzIGluc3RhbmNlIGFuZCB0eXBlOlxuICBcbmBgYCBrb3RsaW5cbmludGVyZmFjZSBGb28mbHQ7b3V0IFQgOiBBbnkmZ3Q7IDogQmFyIHtcbiAgICBmdW4gZm9vKGE6IEludCk6IFRcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/coding-conventions.html#colon"
            ],
            "flags": 0,
            "guid": "jDSfYH`B:I",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CodingConventions",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Lambdas</b> coding convention",
                "<p>In lambda expressions, spaces should be used around the curly braces, as well as around the arrow which separates the parameters from the body. Whenever possible, a lambda should be passed outside of parentheses.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">10</span> <span style=\"color: #000000; font-weight: bold\">}.</span><span style=\"color: #000000\">map</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">element</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">element</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #0000cf; font-weight: bold\">2</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>In lambdas which are short and not nested, it's recommended to use the <code>it</code> convention instead of declaring the parameter explicitly. In nested lambdas with parameters, parameters should be always declared explicitly.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjAxMTIsICJpZCI6ICIxNDg4MDI0MTM0MzE0LTAwMSIsICJtZCI6ICJJbiBsYW1iZGEgZXhwcmVzc2lvbnMsIHNwYWNlcyBzaG91bGQgYmUgdXNlZCBhcm91bmQgdGhlIGN1cmx5IGJyYWNlcywgYXMgd2VsbCBhcyBhcm91bmQgdGhlIGFycm93IHdoaWNoIHNlcGFyYXRlcyB0aGUgcGFyYW1ldGVycyBmcm9tIHRoZSBib2R5LiBXaGVuZXZlciBwb3NzaWJsZSwgYSBsYW1iZGEgc2hvdWxkIGJlIHBhc3NlZCBvdXRzaWRlIG9mIHBhcmVudGhlc2VzLlxuICBcbmBgYCBrb3RsaW5cbmxpc3QuZmlsdGVyIHsgaXQgJmd0OyAxMCB9Lm1hcCB7IGVsZW1lbnQgLSZndDsgZWxlbWVudCAqIDIgfVxuYGBgXG4gIFxuSW4gbGFtYmRhcyB3aGljaCBhcmUgc2hvcnQgYW5kIG5vdCBuZXN0ZWQsIGl0JmFwb3M7cyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBpdGAgY29udmVudGlvbiBpbnN0ZWFkIG9mIGRlY2xhcmluZyB0aGUgcGFyYW1ldGVyIGV4cGxpY2l0bHkuIEluIG5lc3RlZCBsYW1iZGFzIHdpdGggcGFyYW1ldGVycywgcGFyYW1ldGVycyBzaG91bGQgYmUgYWx3YXlzIGRlY2xhcmVkIGV4cGxpY2l0bHkuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/coding-conventions.html#lambdas"
            ],
            "flags": 0,
            "guid": "F[sm4!WAJs",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CodingConventions",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Unit</b> coding convention",
                "<p>If a function returns Unit, the return type should be omitted:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// \": Unit\" is omitted here</span>\n\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg3MDgsICJpZCI6ICIxNDg4MDI0MTc0MDczLTAwMSIsICJtZCI6ICJJZiBhIGZ1bmN0aW9uIHJldHVybnMgVW5pdCwgdGhlIHJldHVybiB0eXBlIHNob3VsZCBiZSBvbWl0dGVkOlxuICBcbmBgYCBrb3RsaW5cbmZ1biBmb28oKSB7IC8vICZxdW90OzogVW5pdCZxdW90OyBpcyBvbWl0dGVkIGhlcmVcbiAgXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/coding-conventions.html#unit"
            ],
            "flags": 0,
            "guid": "yk7&/r$H_*",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CodingConventions",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Functions</b> vs <b>Properties</b>",
                "<p>In some cases functions with no arguments might be interchangeable with read-only properties. <br />\nAlthough the semantics are similar, there are some stylistic conventions on when to prefer one to another.</p>\n<p>Prefer a property over a function when the underlying algorithm:</p>\n<ul>\n<li align=\"left\">does not throw</li>\n<li align=\"left\">has a <code>O(1)</code> complexity</li>\n<li align=\"left\">is cheap to calculate (or caсhed on the first run)</li>\n<li align=\"left\">returns the same result over invocations </li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjAwMzksICJpZCI6ICIxNDg4MDI0MjAzNzc4LTAwMSIsICJtZCI6ICJJbiBzb21lIGNhc2VzIGZ1bmN0aW9ucyB3aXRoIG5vIGFyZ3VtZW50cyBtaWdodCBiZSBpbnRlcmNoYW5nZWFibGUgd2l0aCByZWFkLW9ubHkgcHJvcGVydGllcy4gXG5BbHRob3VnaCB0aGUgc2VtYW50aWNzIGFyZSBzaW1pbGFyLCB0aGVyZSBhcmUgc29tZSBzdHlsaXN0aWMgY29udmVudGlvbnMgb24gd2hlbiB0byBwcmVmZXIgb25lIHRvIGFub3RoZXIuXG4gIFxuUHJlZmVyIGEgcHJvcGVydHkgb3ZlciBhIGZ1bmN0aW9uIHdoZW4gdGhlIHVuZGVybHlpbmcgYWxnb3JpdGhtOlxuICBcbiogZG9lcyBub3QgdGhyb3dcbiogaGFzIGEgYE8oMSlgIGNvbXBsZXhpdHlcbiogaXMgY2hlYXAgdG8gY2FsY3VsYXRlIChvciBjYVx1MDQ0MWhlZCBvbiB0aGUgZmlyc3QgcnVuKVxuKiByZXR1cm5zIHRoZSBzYW1lIHJlc3VsdCBvdmVyIGludm9jYXRpb25zIFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/coding-conventions.html#functions-vs-properties"
            ],
            "flags": 0,
            "guid": "gVz.3gB(eh",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CodingConventions",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Basic Types overview",
                "<p>In Kotlin, <strong>everything is an object</strong> in the sense that we can call member functions and properties on any variable.<br />\nSome of the types can have a special internal representation - for example, numbers, characters and booleans can be represented as primitive values at runtime - but to the user they look like ordinary classes.<br />\nIn this section we describe the basic types used in Kotlin: numbers, characters, booleans, arrays, and strings.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzI5MDMsICJpZCI6ICIxNDg4MDI0ODE1NTc3LTAwMSIsICJtZCI6ICJJbiBLb3RsaW4sICoqZXZlcnl0aGluZyBpcyBhbiBvYmplY3QqKiBpbiB0aGUgc2Vuc2UgdGhhdCB3ZSBjYW4gY2FsbCBtZW1iZXIgZnVuY3Rpb25zIGFuZCBwcm9wZXJ0aWVzIG9uIGFueSB2YXJpYWJsZS5cblNvbWUgb2YgdGhlIHR5cGVzIGNhbiBoYXZlIGEgc3BlY2lhbCBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiAtIGZvciBleGFtcGxlLCBudW1iZXJzLCBjaGFyYWN0ZXJzIGFuZCBib29sZWFucyBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgcHJpbWl0aXZlIHZhbHVlcyBhdCBydW50aW1lIC0gYnV0IHRvIHRoZSB1c2VyIHRoZXkgbG9vayBsaWtlIG9yZGluYXJ5IGNsYXNzZXMuXG5JbiB0aGlzIHNlY3Rpb24gd2UgZGVzY3JpYmUgdGhlIGJhc2ljIHR5cGVzIHVzZWQgaW4gS290bGluOiBudW1iZXJzLCBjaGFyYWN0ZXJzLCBib29sZWFucywgYXJyYXlzLCBhbmQgc3RyaW5ncy5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#basic-types"
            ],
            "flags": 0,
            "guid": "iA,tiI#Aub",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicTypes",
                "Basics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Numbers basic types",
                "<p>Kotlin handles numbers in a way close to Java, but not exactly the same. For example, there are no implicit widening conversions for numbers, and literals are slightly different in some cases.</p>\n<p>Kotlin provides the following built-in types representing numbers (this is close to Java):</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Bit width</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Double</td>\n<td>64</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>32</td>\n</tr>\n<tr>\n<td>Long</td>\n<td>64</td>\n</tr>\n<tr>\n<td>Int</td>\n<td>32</td>\n</tr>\n<tr>\n<td>Short</td>\n<td>16</td>\n</tr>\n<tr>\n<td>Byte</td>\n<td>8</td>\n</tr>\n</tbody>\n</table>\n<p>Note that characters are not numbers in Kotlin.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MjU3MzksICJpZCI6ICIxNDg4MDI0ODY1OTk4LTAwMSIsICJtZCI6ICJLb3RsaW4gaGFuZGxlcyBudW1iZXJzIGluIGEgd2F5IGNsb3NlIHRvIEphdmEsIGJ1dCBub3QgZXhhY3RseSB0aGUgc2FtZS4gRm9yIGV4YW1wbGUsIHRoZXJlIGFyZSBubyBpbXBsaWNpdCB3aWRlbmluZyBjb252ZXJzaW9ucyBmb3IgbnVtYmVycywgYW5kIGxpdGVyYWxzIGFyZSBzbGlnaHRseSBkaWZmZXJlbnQgaW4gc29tZSBjYXNlcy5cbiAgXG5Lb3RsaW4gcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBidWlsdC1pbiB0eXBlcyByZXByZXNlbnRpbmcgbnVtYmVycyAodGhpcyBpcyBjbG9zZSB0byBKYXZhKTpcbiAgXG58IFR5cGUgfCBCaXQgd2lkdGh8XG58LS0tLS0tLS18LS0tLS0tLS0tLXxcbnwgRG91YmxlIHwgNjQgICAgICAgfFxufCBGbG9hdCB8IDMyICAgICAgIHxcbnwgTG9uZyB8IDY0ICAgICAgIHxcbnwgSW50IHwgMzIgICAgICAgfFxufCBTaG9ydCB8IDE2ICAgICAgIHxcbnwgQnl0ZSB8IDggICAgICAgIHxcbiAgXG5Ob3RlIHRoYXQgY2hhcmFjdGVycyBhcmUgbm90IG51bWJlcnMgaW4gS290bGluLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#numbers"
            ],
            "flags": 0,
            "guid": "h..@TmC%X3",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicTypes",
                "Basics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Literal <b>Constants</b>",
                "<p>There are the following kinds of literal constants for integral values:</p>\n<ul>\n<li align=\"left\">Decimals: <code>123</code><ul>\n<li align=\"left\">Longs are tagged by a capital <code>L</code>: <code>123L</code></li>\n</ul>\n</li>\n<li align=\"left\">Hexadecimals: <code>0x0F</code></li>\n<li align=\"left\">Binaries: <code>0b00001011</code></li>\n</ul>\n<p>NOTE: Octal literals are not supported.</p>\n<p>Kotlin also supports a conventional notation for floating-point numbers:</p>\n<ul>\n<li align=\"left\">Doubles by default: <code>123.5</code>, <code>123.5e10</code></li>\n<li align=\"left\">Floats are tagged by <code>f</code> or <code>F</code>: <code>123.5f</code></li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjAyMDYsICJpZCI6ICIxNDg4MDI0OTA3ODkwLTAwMSIsICJtZCI6ICJUaGVyZSBhcmUgdGhlIGZvbGxvd2luZyBraW5kcyBvZiBsaXRlcmFsIGNvbnN0YW50cyBmb3IgaW50ZWdyYWwgdmFsdWVzOlxuICBcbiogRGVjaW1hbHM6IGAxMjNgXG4gICAgKiBMb25ncyBhcmUgdGFnZ2VkIGJ5IGEgY2FwaXRhbCBgTGA6IGAxMjNMYFxuKiBIZXhhZGVjaW1hbHM6IGAweDBGYFxuKiBCaW5hcmllczogYDBiMDAwMDEwMTFgXG4gIFxuTk9URTogT2N0YWwgbGl0ZXJhbHMgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gIFxuS290bGluIGFsc28gc3VwcG9ydHMgYSBjb252ZW50aW9uYWwgbm90YXRpb24gZm9yIGZsb2F0aW5nLXBvaW50IG51bWJlcnM6XG4gIFxuKiBEb3VibGVzIGJ5IGRlZmF1bHQ6IGAxMjMuNWAsIGAxMjMuNWUxMGBcbiogRmxvYXRzIGFyZSB0YWdnZWQgYnkgYGZgIG9yIGBGYDogYDEyMy41ZmBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#literal-constants"
            ],
            "flags": 0,
            "guid": "u5k9(LzP~C",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicTypes",
                "Basics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Number <b>representation</b>",
                "<p>On the Java platform, numbers are physically stored as JVM primitive types, unless we need a nullable number reference (e.g. <code>Int?</code>) or generics are involved. <br />\nIn the latter cases numbers are boxed.</p>\n<p>Note that boxing of numbers does not necessarily preserve identity:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">10000</span>\n<span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">===</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// Prints 'true'</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">boxedA</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">a</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">anotherBoxedA</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">a</span>\n<span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">boxedA</span> <span style=\"color: #000000; font-weight: bold\">===</span> <span style=\"color: #000000\">anotherBoxedA</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// !!!Prints 'false'!!!</span>\n</pre></div>\n<p>On the other hand, it preserves equality:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">10000</span>\n<span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// Prints 'true'</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">boxedA</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">a</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">anotherBoxedA</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">a</span>\n<span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">boxedA</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #000000\">anotherBoxedA</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// Prints 'true'</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTE1NzM0MzgsICJpZCI6ICIxNDg4MDI0OTQ3ODQ3LTAwMSIsICJtZCI6ICJPbiB0aGUgSmF2YSBwbGF0Zm9ybSwgbnVtYmVycyBhcmUgcGh5c2ljYWxseSBzdG9yZWQgYXMgSlZNIHByaW1pdGl2ZSB0eXBlcywgdW5sZXNzIHdlIG5lZWQgYSBudWxsYWJsZSBudW1iZXIgcmVmZXJlbmNlIChlLmcuIGBJbnQ/YCkgb3IgZ2VuZXJpY3MgYXJlIGludm9sdmVkLiBcbkluIHRoZSBsYXR0ZXIgY2FzZXMgbnVtYmVycyBhcmUgYm94ZWQuXG4gIFxuTm90ZSB0aGF0IGJveGluZyBvZiBudW1iZXJzIGRvZXMgbm90IG5lY2Vzc2FyaWx5IHByZXNlcnZlIGlkZW50aXR5OlxuICBcbmBgYGtvdGxpblxudmFsIGE6IEludCA9IDEwMDAwXG5wcmludChhID09PSBhKSAvLyBQcmludHMgJmFwb3M7dHJ1ZSZhcG9zO1xudmFsIGJveGVkQTogSW50PyA9IGFcbnZhbCBhbm90aGVyQm94ZWRBOiBJbnQ/ID0gYVxucHJpbnQoYm94ZWRBID09PSBhbm90aGVyQm94ZWRBKSAvLyAhISFQcmludHMgJmFwb3M7ZmFsc2UmYXBvczshISFcbmBgYFxuICBcbk9uIHRoZSBvdGhlciBoYW5kLCBpdCBwcmVzZXJ2ZXMgZXF1YWxpdHk6XG4gIFxuYGBga290bGluXG52YWwgYTogSW50ID0gMTAwMDBcbnByaW50KGEgPT0gYSkgLy8gUHJpbnRzICZhcG9zO3RydWUmYXBvcztcbnZhbCBib3hlZEE6IEludD8gPSBhXG52YWwgYW5vdGhlckJveGVkQTogSW50PyA9IGFcbnByaW50KGJveGVkQSA9PSBhbm90aGVyQm94ZWRBKSAvLyBQcmludHMgJmFwb3M7dHJ1ZSZhcG9zO1xuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#representation"
            ],
            "flags": 0,
            "guid": "hFBZv,}[,@",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Basics",
                "BasicTypes",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Explicit Numeric&nbsp;Conversions",
                "<p>Due to different representations, smaller types are not subtypes of bigger ones.<br />\nIf they were, we would have troubles of the following sort:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">// Hypothetical code, does not actually compile:</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #8f5902; font-style: italic\">// A boxed Int (java.lang.Integer)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Long</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">a</span> <span style=\"color: #8f5902; font-style: italic\">// implicit conversion yields a boxed Long (java.lang.Long)</span>\n<span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// Surprise! This prints \"false\" as Long's equals() check for other part to be Long as well</span>\n</pre></div>\n<p>So not only identity, but even equality would have been lost silently all over the place.</p>\n<p>As a consequence, smaller types are NOT implicitly converted to bigger types.<br />\nThis means that we cannot assign a value of type <code>Byte</code> to an <code>Int</code> variable without an explicit conversion</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Byte</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #8f5902; font-style: italic\">// OK, literals are checked statically</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">b</span> <span style=\"color: #8f5902; font-style: italic\">// ERROR</span>\n</pre></div>\n<p>We can use explicit conversions to widen numbers</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toInt</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #8f5902; font-style: italic\">// OK: explicitly widened</span>\n</pre></div>\n<p>Every number type supports the following conversions:</p>\n<ul>\n<li align=\"left\"><code>toByte(): Byte</code></li>\n<li align=\"left\"><code>toShort(): Short</code></li>\n<li align=\"left\"><code>toInt(): Int</code></li>\n<li align=\"left\"><code>toLong(): Long</code></li>\n<li align=\"left\"><code>toFloat(): Float</code></li>\n<li align=\"left\"><code>toDouble(): Double</code></li>\n<li align=\"left\"><code>toChar(): Char</code></li>\n</ul>\n<p>Absence of implicit conversions is rarely noticeable because the type is inferred from the context, and arithmetical operations are overloaded for appropriate conversions, for example</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">l</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1L</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #0000cf; font-weight: bold\">3</span> <span style=\"color: #8f5902; font-style: italic\">// Long + Int =&gt; Long</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk4MTUsICJpZCI6ICIxNDg4MDI1MDQ5NTYxLTAwMSIsICJtZCI6ICJEdWUgdG8gZGlmZmVyZW50IHJlcHJlc2VudGF0aW9ucywgc21hbGxlciB0eXBlcyBhcmUgbm90IHN1YnR5cGVzIG9mIGJpZ2dlciBvbmVzLlxuSWYgdGhleSB3ZXJlLCB3ZSB3b3VsZCBoYXZlIHRyb3VibGVzIG9mIHRoZSBmb2xsb3dpbmcgc29ydDpcbiAgXG5gYGAga290bGluXG4vLyBIeXBvdGhldGljYWwgY29kZSwgZG9lcyBub3QgYWN0dWFsbHkgY29tcGlsZTpcbnZhbCBhOiBJbnQ/ID0gMSAvLyBBIGJveGVkIEludCAoamF2YS5sYW5nLkludGVnZXIpXG52YWwgYjogTG9uZz8gPSBhIC8vIGltcGxpY2l0IGNvbnZlcnNpb24geWllbGRzIGEgYm94ZWQgTG9uZyAoamF2YS5sYW5nLkxvbmcpXG5wcmludChhID09IGIpIC8vIFN1cnByaXNlISBUaGlzIHByaW50cyAmcXVvdDtmYWxzZSZxdW90OyBhcyBMb25nJmFwb3M7cyBlcXVhbHMoKSBjaGVjayBmb3Igb3RoZXIgcGFydCB0byBiZSBMb25nIGFzIHdlbGxcbmBgYFxuICBcblNvIG5vdCBvbmx5IGlkZW50aXR5LCBidXQgZXZlbiBlcXVhbGl0eSB3b3VsZCBoYXZlIGJlZW4gbG9zdCBzaWxlbnRseSBhbGwgb3ZlciB0aGUgcGxhY2UuXG4gIFxuQXMgYSBjb25zZXF1ZW5jZSwgc21hbGxlciB0eXBlcyBhcmUgTk9UIGltcGxpY2l0bHkgY29udmVydGVkIHRvIGJpZ2dlciB0eXBlcy5cblRoaXMgbWVhbnMgdGhhdCB3ZSBjYW5ub3QgYXNzaWduIGEgdmFsdWUgb2YgdHlwZSBgQnl0ZWAgdG8gYW4gYEludGAgdmFyaWFibGUgd2l0aG91dCBhbiBleHBsaWNpdCBjb252ZXJzaW9uXG4gIFxuYGBgIGtvdGxpblxudmFsIGI6IEJ5dGUgPSAxIC8vIE9LLCBsaXRlcmFscyBhcmUgY2hlY2tlZCBzdGF0aWNhbGx5XG52YWwgaTogSW50ID0gYiAvLyBFUlJPUlxuYGBgXG4gIFxuV2UgY2FuIHVzZSBleHBsaWNpdCBjb252ZXJzaW9ucyB0byB3aWRlbiBudW1iZXJzXG4gIFxuYGBgIGtvdGxpblxudmFsIGk6IEludCA9IGIudG9JbnQoKSAvLyBPSzogZXhwbGljaXRseSB3aWRlbmVkXG5gYGBcbiAgXG5FdmVyeSBudW1iZXIgdHlwZSBzdXBwb3J0cyB0aGUgZm9sbG93aW5nIGNvbnZlcnNpb25zOlxuICBcbiogYHRvQnl0ZSgpOiBCeXRlYFxuKiBgdG9TaG9ydCgpOiBTaG9ydGBcbiogYHRvSW50KCk6IEludGBcbiogYHRvTG9uZygpOiBMb25nYFxuKiBgdG9GbG9hdCgpOiBGbG9hdGBcbiogYHRvRG91YmxlKCk6IERvdWJsZWBcbiogYHRvQ2hhcigpOiBDaGFyYFxuICBcbkFic2VuY2Ugb2YgaW1wbGljaXQgY29udmVyc2lvbnMgaXMgcmFyZWx5IG5vdGljZWFibGUgYmVjYXVzZSB0aGUgdHlwZSBpcyBpbmZlcnJlZCBmcm9tIHRoZSBjb250ZXh0LCBhbmQgYXJpdGhtZXRpY2FsIG9wZXJhdGlvbnMgYXJlIG92ZXJsb2FkZWQgZm9yIGFwcHJvcHJpYXRlIGNvbnZlcnNpb25zLCBmb3IgZXhhbXBsZVxuICBcbmBgYCBrb3RsaW5cbnZhbCBsID0gMUwgKyAzIC8vIExvbmcgKyBJbnQgPSZndDsgTG9uZ1xuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#explicit-conversions"
            ],
            "flags": 0,
            "guid": "c;ON|,!hl+",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicTypes",
                "Basics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Operations on basic types",
                "<p>Kotlin supports the standard set of arithmetical operations over numbers, which are declared as members of appropriate classes (but the compiler optimizes the calls down to the corresponding instructions).<br />\nSee <a href=\"operator-overloading.html\">Operator overloading</a>.</p>\n<p>As of bitwise operations, there're no special characters for them, but just named functions that can be called in infix form, for example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #000000\">shl</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">and</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000\">x000FF000</span>\n</pre></div>\n<p>Here is the complete list of bitwise operations (available for <code>Int</code> and <code>Long</code> only):</p>\n<ul>\n<li align=\"left\"><code>shl(bits)</code> – signed shift left (Java's <code>&lt;&lt;</code>)</li>\n<li align=\"left\"><code>shr(bits)</code> – signed shift right (Java's <code>&gt;&gt;</code>)</li>\n<li align=\"left\"><code>ushr(bits)</code> – unsigned shift right (Java's <code>&gt;&gt;&gt;</code>)</li>\n<li align=\"left\"><code>and(bits)</code> – bitwise and</li>\n<li align=\"left\"><code>or(bits)</code> – bitwise or</li>\n<li align=\"left\"><code>xor(bits)</code> – bitwise xor</li>\n<li align=\"left\"><code>inv()</code> – bitwise inversion</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk4NDUsICJpZCI6ICIxNDg4MDI1MjA0MDM4LTAwMSIsICJtZCI6ICJLb3RsaW4gc3VwcG9ydHMgdGhlIHN0YW5kYXJkIHNldCBvZiBhcml0aG1ldGljYWwgb3BlcmF0aW9ucyBvdmVyIG51bWJlcnMsIHdoaWNoIGFyZSBkZWNsYXJlZCBhcyBtZW1iZXJzIG9mIGFwcHJvcHJpYXRlIGNsYXNzZXMgKGJ1dCB0aGUgY29tcGlsZXIgb3B0aW1pemVzIHRoZSBjYWxscyBkb3duIHRvIHRoZSBjb3JyZXNwb25kaW5nIGluc3RydWN0aW9ucykuXG5TZWUgW09wZXJhdG9yIG92ZXJsb2FkaW5nXShvcGVyYXRvci1vdmVybG9hZGluZy5odG1sKS5cbiAgXG5BcyBvZiBiaXR3aXNlIG9wZXJhdGlvbnMsIHRoZXJlJmFwb3M7cmUgbm8gc3BlY2lhbCBjaGFyYWN0ZXJzIGZvciB0aGVtLCBidXQganVzdCBuYW1lZCBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgY2FsbGVkIGluIGluZml4IGZvcm0sIGZvciBleGFtcGxlOlxuICBcbmBgYCBrb3RsaW5cbnZhbCB4ID0gKDEgc2hsIDIpIGFuZCAweDAwMEZGMDAwXG5gYGBcbiAgXG5IZXJlIGlzIHRoZSBjb21wbGV0ZSBsaXN0IG9mIGJpdHdpc2Ugb3BlcmF0aW9ucyAoYXZhaWxhYmxlIGZvciBgSW50YCBhbmQgYExvbmdgIG9ubHkpOlxuICBcbiogYHNobChiaXRzKWAgXHUyMDEzIHNpZ25lZCBzaGlmdCBsZWZ0IChKYXZhJmFwb3M7cyBgJmx0OyZsdDtgKVxuKiBgc2hyKGJpdHMpYCBcdTIwMTMgc2lnbmVkIHNoaWZ0IHJpZ2h0IChKYXZhJmFwb3M7cyBgJmd0OyZndDtgKVxuKiBgdXNocihiaXRzKWAgXHUyMDEzIHVuc2lnbmVkIHNoaWZ0IHJpZ2h0IChKYXZhJmFwb3M7cyBgJmd0OyZndDsmZ3Q7YClcbiogYGFuZChiaXRzKWAgXHUyMDEzIGJpdHdpc2UgYW5kXG4qIGBvcihiaXRzKWAgXHUyMDEzIGJpdHdpc2Ugb3JcbiogYHhvcihiaXRzKWAgXHUyMDEzIGJpdHdpc2UgeG9yXG4qIGBpbnYoKWAgXHUyMDEzIGJpdHdpc2UgaW52ZXJzaW9uXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#operations"
            ],
            "flags": 0,
            "guid": "qZ9Jq{q8-j",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicTypes",
                "Basics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Characters",
                "<p>Characters are represented by the type <code>Char</code>. They can not be treated directly as numbers</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">check</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">c</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Char</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">c</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// ERROR: incompatible types</span>\n        <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Character literals go in single quotes: <code>'1'</code>.<br />\nSpecial characters can be escaped using a backslash.<br />\nThe following escape sequences are supported: <code>\\t</code>, <code>\\b</code>, <code>\\n</code>, <code>\\r</code>, <code>\\'</code>, <code>\\\"</code>, <code>\\\\</code> and <code>\\$</code>.<br />\nTo encode any other character, use the Unicode escape sequence syntax: <code>'\\uFF00'</code>.</p>\n<p>We can explicitly convert a character to an <code>Int</code> number:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">decimalDigitValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">c</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Char</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">c</span> <span style=\"color: #000000; font-weight: bold\">!</span><span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #4e9a06\">'0'</span><span style=\"color: #000000; font-weight: bold\">..</span><span style=\"color: #4e9a06\">'9'</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IllegalArgumentException</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Out of range\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">c</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toInt</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">-</span> <span style=\"color: #4e9a06\">'0'</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toInt</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #8f5902; font-style: italic\">// Explicit conversions to numbers</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Like numbers, characters are boxed when a nullable reference is needed. Identity is not preserved by the boxing operation.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk4NjksICJpZCI6ICIxNDg4MDI3NzQwNTIzLTAwMSIsICJtZCI6ICJDaGFyYWN0ZXJzIGFyZSByZXByZXNlbnRlZCBieSB0aGUgdHlwZSBgQ2hhcmAuIFRoZXkgY2FuIG5vdCBiZSB0cmVhdGVkIGRpcmVjdGx5IGFzIG51bWJlcnNcbiAgXG5gYGAga290bGluXG5mdW4gY2hlY2soYzogQ2hhcikge1xuICAgIGlmIChjID09IDEpIHsgLy8gRVJST1I6IGluY29tcGF0aWJsZSB0eXBlc1xuICAgICAgICAvLyAuLi5cbiAgICB9XG59XG5gYGBcbiAgXG5DaGFyYWN0ZXIgbGl0ZXJhbHMgZ28gaW4gc2luZ2xlIHF1b3RlczogYCZhcG9zOzEmYXBvcztgLlxuU3BlY2lhbCBjaGFyYWN0ZXJzIGNhbiBiZSBlc2NhcGVkIHVzaW5nIGEgYmFja3NsYXNoLlxuVGhlIGZvbGxvd2luZyBlc2NhcGUgc2VxdWVuY2VzIGFyZSBzdXBwb3J0ZWQ6IGBcXHRgLCBgXFxiYCwgYFxcbmAsIGBcXHJgLCBgXFwmYXBvcztgLCBgXFwmcXVvdDtgLCBgXFxcXGAgYW5kIGBcXCRgLlxuVG8gZW5jb2RlIGFueSBvdGhlciBjaGFyYWN0ZXIsIHVzZSB0aGUgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2Ugc3ludGF4OiBgJmFwb3M7XFx1RkYwMCZhcG9zO2AuXG4gIFxuV2UgY2FuIGV4cGxpY2l0bHkgY29udmVydCBhIGNoYXJhY3RlciB0byBhbiBgSW50YCBudW1iZXI6XG4gIFxuYGBgIGtvdGxpblxuZnVuIGRlY2ltYWxEaWdpdFZhbHVlKGM6IENoYXIpOiBJbnQge1xuICAgIGlmIChjICFpbiAmYXBvczswJmFwb3M7Li4mYXBvczs5JmFwb3M7KVxuICAgICAgICB0aHJvdyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oJnF1b3Q7T3V0IG9mIHJhbmdlJnF1b3Q7KVxuICAgIHJldHVybiBjLnRvSW50KCkgLSAmYXBvczswJmFwb3M7LnRvSW50KCkgLy8gRXhwbGljaXQgY29udmVyc2lvbnMgdG8gbnVtYmVyc1xufVxuYGBgXG4gIFxuTGlrZSBudW1iZXJzLCBjaGFyYWN0ZXJzIGFyZSBib3hlZCB3aGVuIGEgbnVsbGFibGUgcmVmZXJlbmNlIGlzIG5lZWRlZC4gSWRlbnRpdHkgaXMgbm90IHByZXNlcnZlZCBieSB0aGUgYm94aW5nIG9wZXJhdGlvbi5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#characters"
            ],
            "flags": 0,
            "guid": "gj2R~UOhH(",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicTypes",
                "Basics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Booleans",
                "<p>The type <code>Boolean</code> represents booleans, and has two values: <em class=\"keyword\">true</em> and <em class=\"keyword\">false</em>.</p>\n<p>Booleans are boxed if a nullable reference is needed.</p>\n<p>Built-in operations on booleans include</p>\n<ul>\n<li align=\"left\"><code>||</code> – lazy disjunction</li>\n<li align=\"left\"><code>&amp;&amp;</code> – lazy conjunction</li>\n<li align=\"left\"><code>!</code> - negation</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk4ODEsICJpZCI6ICIxNDg4MDI4MDAwMzMwLTAwMSIsICJtZCI6ICJUaGUgdHlwZSBgQm9vbGVhbmAgcmVwcmVzZW50cyBib29sZWFucywgYW5kIGhhcyB0d28gdmFsdWVzOiAqdHJ1ZSp7OiAua2V5d29yZCB9IGFuZCAqZmFsc2UqezogLmtleXdvcmQgfS5cbiAgXG5Cb29sZWFucyBhcmUgYm94ZWQgaWYgYSBudWxsYWJsZSByZWZlcmVuY2UgaXMgbmVlZGVkLlxuICBcbkJ1aWx0LWluIG9wZXJhdGlvbnMgb24gYm9vbGVhbnMgaW5jbHVkZVxuICBcbiogYHx8YCBcdTIwMTMgbGF6eSBkaXNqdW5jdGlvblxuKiBgJmFtcDsmYW1wO2AgXHUyMDEzIGxhenkgY29uanVuY3Rpb25cbiogYCFgIC0gbmVnYXRpb25cbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#booleans"
            ],
            "flags": 0,
            "guid": "tjo99qRE-~",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicTypes",
                "Basics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Arrays",
                "<p>Arrays in Kotlin are represented by the <code>Array</code> class, that has <code>get</code> and <code>set</code> functions (that turn into <code>[]</code> by operator overloading conventions), and <code>size</code> property, along with a few other useful member functions:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #000000\">constructor</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">size</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span>\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">get</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">index</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">T</span>\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">set</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">index</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Unit</span>\n\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">iterator</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">Iterator</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>To create an array, we can use a library function <code>arrayOf()</code> and pass the item values to it, so that <code>arrayOf(1, 2, 3)</code> creates an array [1, 2, 3].<br />\nAlternatively, the <code>arrayOfNulls()</code> library function can be used to create an array of a given size filled with null elements.</p>\n<p>Another option is to use a factory function that takes the array size and the function that can return the initial value<br />\nof each array element given its index:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Creates an Array&lt;String&gt; with values [\"0\", \"1\", \"4\", \"9\", \"16\"]</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">asc</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">5</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">i</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">toString</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">})</span>\n</pre></div>\n<p>As we said above, the <code>[]</code> operation stands for calls to member functions <code>get()</code> and <code>set()</code>.</p>\n<p>Note: unlike Java, arrays in Kotlin are invariant. This means that Kotlin does not let us assign an <code>Array&lt;String&gt;</code><br />\nto an <code>Array&lt;Any&gt;</code>, which prevents a possible runtime failure (but you can use <code>Array&lt;out Any&gt;</code>, see <a href=\"generics.html#type-projections\">Type Projections</a>).</p>\n<p>Kotlin also has specialized classes to represent arrays of primitive types without boxing overhead: <code>ByteArray</code>,<br />\n<code>ShortArray</code>, <code>IntArray</code> and so on. These classes have no inheritance relation to the <code>Array</code> class, but they<br />\nhave the same set of methods and properties. Each of them also has a corresponding factory function:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">IntArray</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">intArrayOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">]</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjAxNjQsICJpZCI6ICIxNDg4MDI4MDE0NDEyLTAwMSIsICJtZCI6ICJBcnJheXMgaW4gS290bGluIGFyZSByZXByZXNlbnRlZCBieSB0aGUgYEFycmF5YCBjbGFzcywgdGhhdCBoYXMgYGdldGAgYW5kIGBzZXRgIGZ1bmN0aW9ucyAodGhhdCB0dXJuIGludG8gYFtdYCBieSBvcGVyYXRvciBvdmVybG9hZGluZyBjb252ZW50aW9ucyksIGFuZCBgc2l6ZWAgcHJvcGVydHksIGFsb25nIHdpdGggYSBmZXcgb3RoZXIgdXNlZnVsIG1lbWJlciBmdW5jdGlvbnM6XG4gIFxuYGBgIGtvdGxpblxuY2xhc3MgQXJyYXkmbHQ7VCZndDsgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB2YWwgc2l6ZTogSW50XG4gICAgb3BlcmF0b3IgZnVuIGdldChpbmRleDogSW50KTogVFxuICAgIG9wZXJhdG9yIGZ1biBzZXQoaW5kZXg6IEludCwgdmFsdWU6IFQpOiBVbml0XG4gIFxuICAgIG9wZXJhdG9yIGZ1biBpdGVyYXRvcigpOiBJdGVyYXRvciZsdDtUJmd0O1xuICAgIC8vIC4uLlxufVxuYGBgXG4gIFxuVG8gY3JlYXRlIGFuIGFycmF5LCB3ZSBjYW4gdXNlIGEgbGlicmFyeSBmdW5jdGlvbiBgYXJyYXlPZigpYCBhbmQgcGFzcyB0aGUgaXRlbSB2YWx1ZXMgdG8gaXQsIHNvIHRoYXQgYGFycmF5T2YoMSwgMiwgMylgIGNyZWF0ZXMgYW4gYXJyYXkgWzEsIDIsIDNdLlxuQWx0ZXJuYXRpdmVseSwgdGhlIGBhcnJheU9mTnVsbHMoKWAgbGlicmFyeSBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBjcmVhdGUgYW4gYXJyYXkgb2YgYSBnaXZlbiBzaXplIGZpbGxlZCB3aXRoIG51bGwgZWxlbWVudHMuXG4gIFxuQW5vdGhlciBvcHRpb24gaXMgdG8gdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHRha2VzIHRoZSBhcnJheSBzaXplIGFuZCB0aGUgZnVuY3Rpb24gdGhhdCBjYW4gcmV0dXJuIHRoZSBpbml0aWFsIHZhbHVlXG5vZiBlYWNoIGFycmF5IGVsZW1lbnQgZ2l2ZW4gaXRzIGluZGV4OlxuICBcbmBgYCBrb3RsaW5cbi8vIENyZWF0ZXMgYW4gQXJyYXkmbHQ7U3RyaW5nJmd0OyB3aXRoIHZhbHVlcyBbJnF1b3Q7MCZxdW90OywgJnF1b3Q7MSZxdW90OywgJnF1b3Q7NCZxdW90OywgJnF1b3Q7OSZxdW90OywgJnF1b3Q7MTYmcXVvdDtdXG52YWwgYXNjID0gQXJyYXkoNSwgeyBpIC0mZ3Q7IChpICogaSkudG9TdHJpbmcoKSB9KVxuYGBgXG4gIFxuQXMgd2Ugc2FpZCBhYm92ZSwgdGhlIGBbXWAgb3BlcmF0aW9uIHN0YW5kcyBmb3IgY2FsbHMgdG8gbWVtYmVyIGZ1bmN0aW9ucyBgZ2V0KClgIGFuZCBgc2V0KClgLlxuICBcbk5vdGU6IHVubGlrZSBKYXZhLCBhcnJheXMgaW4gS290bGluIGFyZSBpbnZhcmlhbnQuIFRoaXMgbWVhbnMgdGhhdCBLb3RsaW4gZG9lcyBub3QgbGV0IHVzIGFzc2lnbiBhbiBgQXJyYXkmbHQ7U3RyaW5nJmd0O2BcbnRvIGFuIGBBcnJheSZsdDtBbnkmZ3Q7YCwgd2hpY2ggcHJldmVudHMgYSBwb3NzaWJsZSBydW50aW1lIGZhaWx1cmUgKGJ1dCB5b3UgY2FuIHVzZSBgQXJyYXkmbHQ7b3V0IEFueSZndDtgLCBzZWUgW1R5cGUgUHJvamVjdGlvbnNdKGdlbmVyaWNzLmh0bWwjdHlwZS1wcm9qZWN0aW9ucykpLlxuICBcbktvdGxpbiBhbHNvIGhhcyBzcGVjaWFsaXplZCBjbGFzc2VzIHRvIHJlcHJlc2VudCBhcnJheXMgb2YgcHJpbWl0aXZlIHR5cGVzIHdpdGhvdXQgYm94aW5nIG92ZXJoZWFkOiBgQnl0ZUFycmF5YCxcbmBTaG9ydEFycmF5YCwgYEludEFycmF5YCBhbmQgc28gb24uIFRoZXNlIGNsYXNzZXMgaGF2ZSBubyBpbmhlcml0YW5jZSByZWxhdGlvbiB0byB0aGUgYEFycmF5YCBjbGFzcywgYnV0IHRoZXlcbmhhdmUgdGhlIHNhbWUgc2V0IG9mIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMuIEVhY2ggb2YgdGhlbSBhbHNvIGhhcyBhIGNvcnJlc3BvbmRpbmcgZmFjdG9yeSBmdW5jdGlvbjpcbiAgXG5gYGAga290bGluXG52YWwgeDogSW50QXJyYXkgPSBpbnRBcnJheU9mKDEsIDIsIDMpXG54WzBdID0geFsxXSArIHhbMl1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#arrays"
            ],
            "flags": 0,
            "guid": "hc]:[,Fp<,",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicTypes",
                "Basics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Strings basic info",
                "<p>Strings are represented by the type <code>String</code>. Strings are immutable.<br />\nElements of a string are characters that can be accessed by the indexing operation: <code>s[i]</code>.<br />\nA string can be iterated over with a <em class=\"keyword\">for</em>-loop:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">c</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">str</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">c</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk5NDMsICJpZCI6ICIxNDg4MDI4MDU0OTc1LTAwMSIsICJtZCI6ICJTdHJpbmdzIGFyZSByZXByZXNlbnRlZCBieSB0aGUgdHlwZSBgU3RyaW5nYC4gU3RyaW5ncyBhcmUgaW1tdXRhYmxlLlxuRWxlbWVudHMgb2YgYSBzdHJpbmcgYXJlIGNoYXJhY3RlcnMgdGhhdCBjYW4gYmUgYWNjZXNzZWQgYnkgdGhlIGluZGV4aW5nIG9wZXJhdGlvbjogYHNbaV1gLlxuQSBzdHJpbmcgY2FuIGJlIGl0ZXJhdGVkIG92ZXIgd2l0aCBhICpmb3IqezogLmtleXdvcmQgfS1sb29wOlxuICBcbmBgYCBrb3RsaW5cbmZvciAoYyBpbiBzdHIpIHtcbiAgICBwcmludGxuKGMpXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#strings"
            ],
            "flags": 0,
            "guid": "Blw&{_J[|$",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicTypes",
                "Basics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "String Literals",
                "<p>Kotlin has two types of string literals: escaped strings that may have escaped characters in them and raw strings that can contain newlines and arbitrary text. An escaped string is very much like a Java string:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">s</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"Hello, world!\\n\"</span>\n</pre></div>\n<p>Escaping is done in the conventional way, with a backslash. See <a href=\"#characters\">Characters</a> above for the list of supported escape sequences.</p>\n<p>A raw string is delimited by a triple quote (<code>\"\"\"</code>), contains no escaping and can contain newlines and any other characters:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">text</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"\"\"</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">c</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #4e9a06\">\"foo\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">c</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #4e9a06\">\"\"\"</span>\n</pre></div>\n<p>You can remove leading whitespace with <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html\"><code>trimMargin()</code></a> function:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">text</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"\"\"</span>\n    <span style=\"color: #000000; font-weight: bold\">|</span><span style=\"color: #000000\">Tell</span> <span style=\"color: #000000\">me</span> <span style=\"color: #000000\">and</span> <span style=\"color: #000000\">I</span> <span style=\"color: #000000\">forget</span><span style=\"color: #000000; font-weight: bold\">.</span>\n    <span style=\"color: #000000; font-weight: bold\">|</span><span style=\"color: #000000\">Teach</span> <span style=\"color: #000000\">me</span> <span style=\"color: #000000\">and</span> <span style=\"color: #000000\">I</span> <span style=\"color: #000000\">remember</span><span style=\"color: #000000; font-weight: bold\">.</span>\n    <span style=\"color: #000000; font-weight: bold\">|</span><span style=\"color: #000000\">Involve</span> <span style=\"color: #000000\">me</span> <span style=\"color: #000000\">and</span> <span style=\"color: #000000\">I</span> <span style=\"color: #000000\">learn</span><span style=\"color: #000000; font-weight: bold\">.</span>\n    <span style=\"color: #000000; font-weight: bold\">|(</span><span style=\"color: #000000\">Benjamin</span> <span style=\"color: #000000\">Franklin</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #4e9a06\">\"\"\".trimMargin()</span>\n</pre></div>\n<p>By default <code>|</code> is used as margin prefix, but you can choose another character and pass it as a parameter, like <code>trimMargin(\"&gt;\")</code>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk5NTksICJpZCI6ICIxNDg4MDI4MDgwOTMxLTAwMSIsICJtZCI6ICJLb3RsaW4gaGFzIHR3byB0eXBlcyBvZiBzdHJpbmcgbGl0ZXJhbHM6IGVzY2FwZWQgc3RyaW5ncyB0aGF0IG1heSBoYXZlIGVzY2FwZWQgY2hhcmFjdGVycyBpbiB0aGVtIGFuZCByYXcgc3RyaW5ncyB0aGF0IGNhbiBjb250YWluIG5ld2xpbmVzIGFuZCBhcmJpdHJhcnkgdGV4dC4gQW4gZXNjYXBlZCBzdHJpbmcgaXMgdmVyeSBtdWNoIGxpa2UgYSBKYXZhIHN0cmluZzpcbiAgXG5gYGAga290bGluXG52YWwgcyA9ICZxdW90O0hlbGxvLCB3b3JsZCFcXG4mcXVvdDtcbmBgYFxuICBcbkVzY2FwaW5nIGlzIGRvbmUgaW4gdGhlIGNvbnZlbnRpb25hbCB3YXksIHdpdGggYSBiYWNrc2xhc2guIFNlZSBbQ2hhcmFjdGVyc10oI2NoYXJhY3RlcnMpIGFib3ZlIGZvciB0aGUgbGlzdCBvZiBzdXBwb3J0ZWQgZXNjYXBlIHNlcXVlbmNlcy5cbiAgXG5BIHJhdyBzdHJpbmcgaXMgZGVsaW1pdGVkIGJ5IGEgdHJpcGxlIHF1b3RlIChgJnF1b3Q7JnF1b3Q7JnF1b3Q7YCksIGNvbnRhaW5zIG5vIGVzY2FwaW5nIGFuZCBjYW4gY29udGFpbiBuZXdsaW5lcyBhbmQgYW55IG90aGVyIGNoYXJhY3RlcnM6XG4gIFxuYGBgIGtvdGxpblxudmFsIHRleHQgPSAmcXVvdDsmcXVvdDsmcXVvdDtcbiAgICBmb3IgKGMgaW4gJnF1b3Q7Zm9vJnF1b3Q7KVxuICAgICAgICBwcmludChjKVxuJnF1b3Q7JnF1b3Q7JnF1b3Q7XG5gYGBcbiAgXG5Zb3UgY2FuIHJlbW92ZSBsZWFkaW5nIHdoaXRlc3BhY2Ugd2l0aCBbYHRyaW1NYXJnaW4oKWBdKGh0dHBzOi8va290bGlubGFuZy5vcmcvYXBpL2xhdGVzdC9qdm0vc3RkbGliL2tvdGxpbi50ZXh0L3RyaW0tbWFyZ2luLmh0bWwpIGZ1bmN0aW9uOlxuICBcbmBgYCBrb3RsaW5cbnZhbCB0ZXh0ID0gJnF1b3Q7JnF1b3Q7JnF1b3Q7XG4gICAgfFRlbGwgbWUgYW5kIEkgZm9yZ2V0LlxuICAgIHxUZWFjaCBtZSBhbmQgSSByZW1lbWJlci5cbiAgICB8SW52b2x2ZSBtZSBhbmQgSSBsZWFybi5cbiAgICB8KEJlbmphbWluIEZyYW5rbGluKVxuICAgICZxdW90OyZxdW90OyZxdW90Oy50cmltTWFyZ2luKClcbmBgYFxuICBcbkJ5IGRlZmF1bHQgYHxgIGlzIHVzZWQgYXMgbWFyZ2luIHByZWZpeCwgYnV0IHlvdSBjYW4gY2hvb3NlIGFub3RoZXIgY2hhcmFjdGVyIGFuZCBwYXNzIGl0IGFzIGEgcGFyYW1ldGVyLCBsaWtlIGB0cmltTWFyZ2luKCZxdW90OyZndDsmcXVvdDspYC5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#string-literals"
            ],
            "flags": 0,
            "guid": "Q]{G_?tt>}",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicTypes",
                "Basics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "String Templates",
                "<p>Strings may contain template expressions, i.e. pieces of code that are evaluated and whose results are concatenated into the string.<br />\nA template expression starts with a dollar sign ($) and consists of either a simple name:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">i</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">10</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">s</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"i = $i\"</span> <span style=\"color: #8f5902; font-style: italic\">// evaluates to \"i = 10\"</span>\n</pre></div>\n<p>or an arbitrary expression in curly braces:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">s</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"abc\"</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">str</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"$s.length is ${s.length}\"</span> <span style=\"color: #8f5902; font-style: italic\">// evaluates to \"abc.length is 3\"</span>\n</pre></div>\n<p>Templates are supported both inside raw strings and inside escaped strings.<br />\nIf you need to represent a literal <code>$</code> character in a raw string (which doesn't support backslash escaping), you can use the following syntax:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">price</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"\"\"</span>\n<span style=\"color: #a40000; border: 1px solid #ef2929\">$</span><span style=\"color: #000000; font-weight: bold\">{</span><span style=\"color: #4e9a06\">'$'</span><span style=\"color: #000000; font-weight: bold\">}</span><span style=\"color: #0000cf; font-weight: bold\">9.99</span>\n<span style=\"color: #4e9a06\">\"\"\"</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk5ODEsICJpZCI6ICIxNDg4MDI4MDk3MzQwLTAwMSIsICJtZCI6ICJTdHJpbmdzIG1heSBjb250YWluIHRlbXBsYXRlIGV4cHJlc3Npb25zLCBpLmUuIHBpZWNlcyBvZiBjb2RlIHRoYXQgYXJlIGV2YWx1YXRlZCBhbmQgd2hvc2UgcmVzdWx0cyBhcmUgY29uY2F0ZW5hdGVkIGludG8gdGhlIHN0cmluZy5cbkEgdGVtcGxhdGUgZXhwcmVzc2lvbiBzdGFydHMgd2l0aCBhIGRvbGxhciBzaWduICgkKSBhbmQgY29uc2lzdHMgb2YgZWl0aGVyIGEgc2ltcGxlIG5hbWU6XG4gIFxuYGBgIGtvdGxpblxudmFsIGkgPSAxMFxudmFsIHMgPSAmcXVvdDtpID0gJGkmcXVvdDsgLy8gZXZhbHVhdGVzIHRvICZxdW90O2kgPSAxMCZxdW90O1xuYGBgXG4gIFxub3IgYW4gYXJiaXRyYXJ5IGV4cHJlc3Npb24gaW4gY3VybHkgYnJhY2VzOlxuICBcbmBgYCBrb3RsaW5cbnZhbCBzID0gJnF1b3Q7YWJjJnF1b3Q7XG52YWwgc3RyID0gJnF1b3Q7JHMubGVuZ3RoIGlzICR7cy5sZW5ndGh9JnF1b3Q7IC8vIGV2YWx1YXRlcyB0byAmcXVvdDthYmMubGVuZ3RoIGlzIDMmcXVvdDtcbmBgYFxuICBcblRlbXBsYXRlcyBhcmUgc3VwcG9ydGVkIGJvdGggaW5zaWRlIHJhdyBzdHJpbmdzIGFuZCBpbnNpZGUgZXNjYXBlZCBzdHJpbmdzLlxuSWYgeW91IG5lZWQgdG8gcmVwcmVzZW50IGEgbGl0ZXJhbCBgJGAgY2hhcmFjdGVyIGluIGEgcmF3IHN0cmluZyAod2hpY2ggZG9lc24mYXBvczt0IHN1cHBvcnQgYmFja3NsYXNoIGVzY2FwaW5nKSwgeW91IGNhbiB1c2UgdGhlIGZvbGxvd2luZyBzeW50YXg6XG4gIFxuYGBgIGtvdGxpblxudmFsIHByaWNlID0gJnF1b3Q7JnF1b3Q7JnF1b3Q7XG4keyZhcG9zOyQmYXBvczt9OS45OVxuJnF1b3Q7JnF1b3Q7JnF1b3Q7XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#string-templates"
            ],
            "flags": 0,
            "guid": "N@%z0>D/l;",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicTypes",
                "Basics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Packages</b>",
                "<p>A source file may start with a package declaration:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">package</span> <span style=\"color: #000000\">foo.bar</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">baz</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Goo</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// ...</span>\n</pre></div>\n<p>All the contents (such as classes and functions) of the source file are contained by the package declared.<br />\nSo, in the example above, the full name of <code>baz()</code> is <code>foo.bar.baz</code>, and the full name of <code>Goo</code> is <code>foo.bar.Goo</code>. </p>\n<p>If the package is not specified, the contents of such a file belong to \"default\" package that has no name.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MjY3NTEsICJpZCI6ICIxNDg4MDM0NTUzMDA0LTAwMSIsICJtZCI6ICJBIHNvdXJjZSBmaWxlIG1heSBzdGFydCB3aXRoIGEgcGFja2FnZSBkZWNsYXJhdGlvbjpcbiAgXG5gYGAga290bGluXG5wYWNrYWdlIGZvby5iYXJcbiAgXG5mdW4gYmF6KCkge31cbiAgXG5jbGFzcyBHb28ge31cbiAgXG4vLyAuLi5cbmBgYFxuICBcbkFsbCB0aGUgY29udGVudHMgKHN1Y2ggYXMgY2xhc3NlcyBhbmQgZnVuY3Rpb25zKSBvZiB0aGUgc291cmNlIGZpbGUgYXJlIGNvbnRhaW5lZCBieSB0aGUgcGFja2FnZSBkZWNsYXJlZC5cblNvLCBpbiB0aGUgZXhhbXBsZSBhYm92ZSwgdGhlIGZ1bGwgbmFtZSBvZiBgYmF6KClgIGlzIGBmb28uYmFyLmJhemAsIGFuZCB0aGUgZnVsbCBuYW1lIG9mIGBHb29gIGlzIGBmb28uYmFyLkdvb2AuIFxuIFxuSWYgdGhlIHBhY2thZ2UgaXMgbm90IHNwZWNpZmllZCwgdGhlIGNvbnRlbnRzIG9mIHN1Y2ggYSBmaWxlIGJlbG9uZyB0byAmcXVvdDtkZWZhdWx0JnF1b3Q7IHBhY2thZ2UgdGhhdCBoYXMgbm8gbmFtZS5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/packages.html#packages"
            ],
            "flags": 0,
            "guid": "uXc3:6Asq.",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Basics",
                "Kotlin_1.1",
                "Packages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Imports</b>",
                "<p>Apart from the default imports, each file may contain its own import directives.<br />\nSyntax for imports is described in the <a href=\"grammar.html#import\">grammar</a>.</p>\n<p>We can import either a single name, e.g.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">import</span> <span style=\"color: #000000\">foo.Bar</span> <span style=\"color: #8f5902; font-style: italic\">// Bar is now accessible without qualification</span>\n</pre></div>\n<p>or all the accessible contents of a scope (package, class, object etc):</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">import</span> <span style=\"color: #000000\">foo.*</span> <span style=\"color: #8f5902; font-style: italic\">// everything in 'foo' becomes accessible</span>\n</pre></div>\n<p>If there is a name clash, we can disambiguate by using <em class=\"keyword\">as</em> keyword to locally rename the clashing entity:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">import</span> <span style=\"color: #000000\">foo.Bar</span> <span style=\"color: #8f5902; font-style: italic\">// Bar is accessible</span>\n<span style=\"color: #204a87; font-weight: bold\">import</span> <span style=\"color: #000000\">bar.Bar</span> <span style=\"color: #204a87; font-weight: bold\">as</span> <span style=\"color: #000000\">bBar</span> <span style=\"color: #8f5902; font-style: italic\">// bBar stands for 'bar.Bar'</span>\n</pre></div>\n<p>The <code>import</code> keyword is not restricted to importing classes; you can also use it to import other declarations:</p>\n<ul>\n<li align=\"left\">top-level functions and properties;</li>\n<li align=\"left\">functions and properties declared in <a href=\"object-declarations.html#object-declarations\">object declarations</a>;</li>\n<li align=\"left\"><a href=\"enum-classes.html\">enum constants</a></li>\n</ul>\n<p>Unlike Java, Kotlin does not have a separate <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/language/static-import.html\">\"import static\"</a> syntax; all of these declarations are imported using the regular <code class=\"keyword\">import</code> keyword.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzEzMTEsICJpZCI6ICIxNDg4MDM0NTgxNzYxLTAwMSIsICJtZCI6ICJBcGFydCBmcm9tIHRoZSBkZWZhdWx0IGltcG9ydHMsIGVhY2ggZmlsZSBtYXkgY29udGFpbiBpdHMgb3duIGltcG9ydCBkaXJlY3RpdmVzLlxuU3ludGF4IGZvciBpbXBvcnRzIGlzIGRlc2NyaWJlZCBpbiB0aGUgW2dyYW1tYXJdKGdyYW1tYXIuaHRtbCNpbXBvcnQpLlxuICBcbldlIGNhbiBpbXBvcnQgZWl0aGVyIGEgc2luZ2xlIG5hbWUsIGUuZy5cbiAgXG5gYGAga290bGluXG5pbXBvcnQgZm9vLkJhciAvLyBCYXIgaXMgbm93IGFjY2Vzc2libGUgd2l0aG91dCBxdWFsaWZpY2F0aW9uXG5gYGBcbiAgXG5vciBhbGwgdGhlIGFjY2Vzc2libGUgY29udGVudHMgb2YgYSBzY29wZSAocGFja2FnZSwgY2xhc3MsIG9iamVjdCBldGMpOlxuICBcbmBgYCBrb3RsaW5cbmltcG9ydCBmb28uKiAvLyBldmVyeXRoaW5nIGluICZhcG9zO2ZvbyZhcG9zOyBiZWNvbWVzIGFjY2Vzc2libGVcbmBgYFxuICBcbklmIHRoZXJlIGlzIGEgbmFtZSBjbGFzaCwgd2UgY2FuIGRpc2FtYmlndWF0ZSBieSB1c2luZyAqYXMqezogLmtleXdvcmQgfSBrZXl3b3JkIHRvIGxvY2FsbHkgcmVuYW1lIHRoZSBjbGFzaGluZyBlbnRpdHk6XG4gIFxuYGBgIGtvdGxpblxuaW1wb3J0IGZvby5CYXIgLy8gQmFyIGlzIGFjY2Vzc2libGVcbmltcG9ydCBiYXIuQmFyIGFzIGJCYXIgLy8gYkJhciBzdGFuZHMgZm9yICZhcG9zO2Jhci5CYXImYXBvcztcbmBgYFxuICBcblRoZSBgaW1wb3J0YCBrZXl3b3JkIGlzIG5vdCByZXN0cmljdGVkIHRvIGltcG9ydGluZyBjbGFzc2VzOyB5b3UgY2FuIGFsc28gdXNlIGl0IHRvIGltcG9ydCBvdGhlciBkZWNsYXJhdGlvbnM6XG4gIFxuICAqIHRvcC1sZXZlbCBmdW5jdGlvbnMgYW5kIHByb3BlcnRpZXM7XG4gICogZnVuY3Rpb25zIGFuZCBwcm9wZXJ0aWVzIGRlY2xhcmVkIGluIFtvYmplY3QgZGVjbGFyYXRpb25zXShvYmplY3QtZGVjbGFyYXRpb25zLmh0bWwjb2JqZWN0LWRlY2xhcmF0aW9ucyk7XG4gICogW2VudW0gY29uc3RhbnRzXShlbnVtLWNsYXNzZXMuaHRtbClcbiAgXG5Vbmxpa2UgSmF2YSwgS290bGluIGRvZXMgbm90IGhhdmUgYSBzZXBhcmF0ZSBbJnF1b3Q7aW1wb3J0IHN0YXRpYyZxdW90O10oaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy90ZWNobm90ZXMvZ3VpZGVzL2xhbmd1YWdlL3N0YXRpYy1pbXBvcnQuaHRtbCkgc3ludGF4OyBhbGwgb2YgdGhlc2UgZGVjbGFyYXRpb25zIGFyZSBpbXBvcnRlZCB1c2luZyB0aGUgcmVndWxhciBgaW1wb3J0YHs6IC5rZXl3b3JkIH0ga2V5d29yZC5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/packages.html#imports"
            ],
            "flags": 0,
            "guid": "OmrQ~WOKpu",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Basics",
                "Kotlin_1.1",
                "Packages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div><b>Visibility</b> of <b>Top-level</b> Declarations</div>",
                "<p>If a top-level declaration is marked <em class=\"keyword\">private</em>, it is private to the file it's declared in (see <a href=\"visibility-modifiers.html\">Visibility Modifiers</a>).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MjY4MzMsICJpZCI6ICIxNDg4MDM0NTk5NDQwLTAwMSIsICJtZCI6ICJJZiBhIHRvcC1sZXZlbCBkZWNsYXJhdGlvbiBpcyBtYXJrZWQgKnByaXZhdGUqezogLmtleXdvcmQgfSwgaXQgaXMgcHJpdmF0ZSB0byB0aGUgZmlsZSBpdCZhcG9zO3MgZGVjbGFyZWQgaW4gKHNlZSBbVmlzaWJpbGl0eSBNb2RpZmllcnNdKHZpc2liaWxpdHktbW9kaWZpZXJzLmh0bWwpKS5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/packages.html#visibility-of-top-level-declarations"
            ],
            "flags": 0,
            "guid": "h#=;-SlV#=",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Basics",
                "Kotlin_1.1",
                "Packages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>If</b> Expression",
                "<p>In Kotlin, <em class=\"keyword\">if</em> is an expression, i.e. it returns a value.<br />\nTherefore there is no ternary operator (condition ? then : else), because ordinary <em class=\"keyword\">if</em> works fine in this role.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">// Traditional usage </span>\n<span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">max</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">a</span> \n<span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">&lt;</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">max</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">b</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// With else </span>\n<span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">max</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span>\n<span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">max</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">a</span>\n<span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">max</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">b</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// As expression </span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">max</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">a</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000\">b</span>\n</pre></div>\n<p><em class=\"keyword\">if</em> branches can be blocks, and the last expression is the value of a block:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">max</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Choose a\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">a</span>\n<span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Choose b\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">b</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>If you're using <em class=\"keyword\">if</em> as an expression rather than a statement (for example, returning its value or assigning it to a variable), the expression is required to have an <code>else</code> branch.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjAzMDMsICJpZCI6ICIxNDg4MDM0NjE2OTc0LTAwMSIsICJtZCI6ICJJbiBLb3RsaW4sICppZip7OiAua2V5d29yZCB9IGlzIGFuIGV4cHJlc3Npb24sIGkuZS4gaXQgcmV0dXJucyBhIHZhbHVlLlxuVGhlcmVmb3JlIHRoZXJlIGlzIG5vIHRlcm5hcnkgb3BlcmF0b3IgKGNvbmRpdGlvbiA/IHRoZW4gOiBlbHNlKSwgYmVjYXVzZSBvcmRpbmFyeSAqaWYqezogLmtleXdvcmQgfSB3b3JrcyBmaW5lIGluIHRoaXMgcm9sZS5cbiAgXG5gYGAga290bGluXG4vLyBUcmFkaXRpb25hbCB1c2FnZSBcbnZhciBtYXggPSBhIFxuaWYgKGEgJmx0OyBiKSBtYXggPSBiXG4gIFxuLy8gV2l0aCBlbHNlIFxudmFyIG1heDogSW50XG5pZiAoYSAmZ3Q7IGIpIHtcbiAgICBtYXggPSBhXG59IGVsc2Uge1xuICAgIG1heCA9IGJcbn1cbiAgXG4vLyBBcyBleHByZXNzaW9uIFxudmFsIG1heCA9IGlmIChhICZndDsgYikgYSBlbHNlIGJcbmBgYFxuICBcbippZip7OiAua2V5d29yZCB9IGJyYW5jaGVzIGNhbiBiZSBibG9ja3MsIGFuZCB0aGUgbGFzdCBleHByZXNzaW9uIGlzIHRoZSB2YWx1ZSBvZiBhIGJsb2NrOlxuICBcbmBgYCBrb3RsaW5cbnZhbCBtYXggPSBpZiAoYSAmZ3Q7IGIpIHtcbiAgICBwcmludCgmcXVvdDtDaG9vc2UgYSZxdW90OylcbiAgICBhXG59IGVsc2Uge1xuICAgIHByaW50KCZxdW90O0Nob29zZSBiJnF1b3Q7KVxuICAgIGJcbn1cbmBgYFxuICBcbklmIHlvdSZhcG9zO3JlIHVzaW5nICppZip7OiAua2V5d29yZCB9IGFzIGFuIGV4cHJlc3Npb24gcmF0aGVyIHRoYW4gYSBzdGF0ZW1lbnQgKGZvciBleGFtcGxlLCByZXR1cm5pbmcgaXRzIHZhbHVlIG9yIGFzc2lnbmluZyBpdCB0byBhIHZhcmlhYmxlKSwgdGhlIGV4cHJlc3Npb24gaXMgcmVxdWlyZWQgdG8gaGF2ZSBhbiBgZWxzZWAgYnJhbmNoLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/control-flow.html#if-expression"
            ],
            "flags": 0,
            "guid": "PoF]dD.YI,",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Basics",
                "ControlFlow",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>When</b> Expression",
                "<p><em class=\"keyword\">when</em> replaces the switch operator of C-like languages. In the simplest form it looks like this</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x == 1\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #0000cf; font-weight: bold\">2</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x == 2\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// Note the block</span>\n        <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x is neither 1 nor 2\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p><em class=\"keyword\">when</em> matches its argument against all branches sequentially until some branch condition is satisfied.<br />\n<em class=\"keyword\">when</em> can be used either as an expression or as a statement. If it is used as an expression, the value of the satisfied branch becomes the value of the overall expression. If it is used as a statement, the values of individual branches are ignored. (Just like with <em class=\"keyword\">if</em>, each branch can be a block, and its value is the value of the last expression in the block.)</p>\n<p><strong><em>The </em><em class=\"keyword\">else</em> branch is evaluated if none of the other branch conditions are satisfied.</strong><br />\nIf <em class=\"keyword\">when</em> is used as an expression, the <em class=\"keyword\">else</em> branch is mandatory, unless the compiler can prove that all possible cases are covered with branch conditions.</p>\n<p>If many cases should be handled in the same way, the branch <strong><em>conditions may be combined with a comma</em></strong>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x == 0 or x == 1\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"otherwise\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>We can use arbitrary expressions (not only constants) as branch conditions</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">parseInt</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">s</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"s encodes x\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"s does not encode x\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>We can also check a value for being <em class=\"keyword\">in</em> or <em class=\"keyword\">!in</em> a <a href=\"ranges.html\">range</a> or a collection:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">10</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x is in the range\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">validNumbers</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x is valid\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">!</span><span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">10.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">20</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x is outside the range\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"none of the above\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Another possibility is to check that a value <em class=\"keyword\">is</em> or <em class=\"keyword\">!is</em> of a particular type. Note that, due to <a href=\"typecasts.html#smart-casts\">smart casts</a>, you can access the methods and properties of the type without any extra checks.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">hasPrefix</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">when</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">startsWith</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"prefix\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #204a87; font-weight: bold\">false</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p><em class=\"keyword\">when</em> can also be used as a replacement for an <em class=\"keyword\">if</em>-<em class=\"keyword\">else</em> <em class=\"keyword\">if</em> chain.<br />\n<strong>If no argument is supplied, the branch conditions are simply boolean expressions, and a branch is executed when its condition is true:</strong></p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">isOdd</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x is odd\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">isEven</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x is even\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x is funny\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNzU1OTksICJpZCI6ICIxNDg4MDM1NDM2NTE5LTAwMSIsICJtZCI6ICIqd2hlbip7OiAua2V5d29yZCB9IHJlcGxhY2VzIHRoZSBzd2l0Y2ggb3BlcmF0b3Igb2YgQy1saWtlIGxhbmd1YWdlcy4gSW4gdGhlIHNpbXBsZXN0IGZvcm0gaXQgbG9va3MgbGlrZSB0aGlzXG4gIFxuYGBgIGtvdGxpblxud2hlbiAoeCkge1xuICAgIDEgLSZndDsgcHJpbnQoJnF1b3Q7eCA9PSAxJnF1b3Q7KVxuICAgIDIgLSZndDsgcHJpbnQoJnF1b3Q7eCA9PSAyJnF1b3Q7KVxuICAgIGVsc2UgLSZndDsgeyAvLyBOb3RlIHRoZSBibG9ja1xuICAgICAgICBwcmludCgmcXVvdDt4IGlzIG5laXRoZXIgMSBub3IgMiZxdW90OylcbiAgICB9XG59XG5gYGBcbiAgXG4qd2hlbip7OiAua2V5d29yZCB9IG1hdGNoZXMgaXRzIGFyZ3VtZW50IGFnYWluc3QgYWxsIGJyYW5jaGVzIHNlcXVlbnRpYWxseSB1bnRpbCBzb21lIGJyYW5jaCBjb25kaXRpb24gaXMgc2F0aXNmaWVkLlxuKndoZW4qezogLmtleXdvcmQgfSBjYW4gYmUgdXNlZCBlaXRoZXIgYXMgYW4gZXhwcmVzc2lvbiBvciBhcyBhIHN0YXRlbWVudC4gSWYgaXQgaXMgdXNlZCBhcyBhbiBleHByZXNzaW9uLCB0aGUgdmFsdWUgb2YgdGhlIHNhdGlzZmllZCBicmFuY2ggYmVjb21lcyB0aGUgdmFsdWUgb2YgdGhlIG92ZXJhbGwgZXhwcmVzc2lvbi4gSWYgaXQgaXMgdXNlZCBhcyBhIHN0YXRlbWVudCwgdGhlIHZhbHVlcyBvZiBpbmRpdmlkdWFsIGJyYW5jaGVzIGFyZSBpZ25vcmVkLiAoSnVzdCBsaWtlIHdpdGggKmlmKns6IC5rZXl3b3JkIH0sIGVhY2ggYnJhbmNoIGNhbiBiZSBhIGJsb2NrLCBhbmQgaXRzIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGUgbGFzdCBleHByZXNzaW9uIGluIHRoZSBibG9jay4pXG4gIFxuKipfVGhlICplbHNlKns6IC5rZXl3b3JkIH0gYnJhbmNoIGlzIGV2YWx1YXRlZCBpZiBub25lIG9mIHRoZSBvdGhlciBicmFuY2ggY29uZGl0aW9ucyBhcmUgc2F0aXNmaWVkLl8qKlxuSWYgKndoZW4qezogLmtleXdvcmQgfSBpcyB1c2VkIGFzIGFuIGV4cHJlc3Npb24sIHRoZSAqZWxzZSp7OiAua2V5d29yZCB9IGJyYW5jaCBpcyBtYW5kYXRvcnksIHVubGVzcyB0aGUgY29tcGlsZXIgY2FuIHByb3ZlIHRoYXQgYWxsIHBvc3NpYmxlIGNhc2VzIGFyZSBjb3ZlcmVkIHdpdGggYnJhbmNoIGNvbmRpdGlvbnMuXG4gIFxuSWYgbWFueSBjYXNlcyBzaG91bGQgYmUgaGFuZGxlZCBpbiB0aGUgc2FtZSB3YXksIHRoZSBicmFuY2ggKipfY29uZGl0aW9ucyBtYXkgYmUgY29tYmluZWQgd2l0aCBhIGNvbW1hXyoqOlxuICBcbmBgYCBrb3RsaW5cbndoZW4gKHgpIHtcbiAgICAwLCAxIC0mZ3Q7IHByaW50KCZxdW90O3ggPT0gMCBvciB4ID09IDEmcXVvdDspXG4gICAgZWxzZSAtJmd0OyBwcmludCgmcXVvdDtvdGhlcndpc2UmcXVvdDspXG59XG5gYGBcbiAgXG5XZSBjYW4gdXNlIGFyYml0cmFyeSBleHByZXNzaW9ucyAobm90IG9ubHkgY29uc3RhbnRzKSBhcyBicmFuY2ggY29uZGl0aW9uc1xuICBcbmBgYCBrb3RsaW5cbndoZW4gKHgpIHtcbiAgICBwYXJzZUludChzKSAtJmd0OyBwcmludCgmcXVvdDtzIGVuY29kZXMgeCZxdW90OylcbiAgICBlbHNlIC0mZ3Q7IHByaW50KCZxdW90O3MgZG9lcyBub3QgZW5jb2RlIHgmcXVvdDspXG59XG5gYGBcbiAgXG5XZSBjYW4gYWxzbyBjaGVjayBhIHZhbHVlIGZvciBiZWluZyAqaW4qezogLmtleXdvcmQgfSBvciAqIWluKns6IC5rZXl3b3JkIH0gYSBbcmFuZ2VdKHJhbmdlcy5odG1sKSBvciBhIGNvbGxlY3Rpb246XG4gIFxuYGBgIGtvdGxpblxud2hlbiAoeCkge1xuICAgIGluIDEuLjEwIC0mZ3Q7IHByaW50KCZxdW90O3ggaXMgaW4gdGhlIHJhbmdlJnF1b3Q7KVxuICAgIGluIHZhbGlkTnVtYmVycyAtJmd0OyBwcmludCgmcXVvdDt4IGlzIHZhbGlkJnF1b3Q7KVxuICAgICFpbiAxMC4uMjAgLSZndDsgcHJpbnQoJnF1b3Q7eCBpcyBvdXRzaWRlIHRoZSByYW5nZSZxdW90OylcbiAgICBlbHNlIC0mZ3Q7IHByaW50KCZxdW90O25vbmUgb2YgdGhlIGFib3ZlJnF1b3Q7KVxufVxuYGBgXG4gIFxuQW5vdGhlciBwb3NzaWJpbGl0eSBpcyB0byBjaGVjayB0aGF0IGEgdmFsdWUgKmlzKns6IC5rZXl3b3JkIH0gb3IgKiFpcyp7OiAua2V5d29yZCB9IG9mIGEgcGFydGljdWxhciB0eXBlLiBOb3RlIHRoYXQsIGR1ZSB0byBbc21hcnQgY2FzdHNdKHR5cGVjYXN0cy5odG1sI3NtYXJ0LWNhc3RzKSwgeW91IGNhbiBhY2Nlc3MgdGhlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgb2YgdGhlIHR5cGUgd2l0aG91dCBhbnkgZXh0cmEgY2hlY2tzLlxuICBcbmBgYGtvdGxpblxuZnVuIGhhc1ByZWZpeCh4OiBBbnkpID0gd2hlbih4KSB7XG4gICAgaXMgU3RyaW5nIC0mZ3Q7IHguc3RhcnRzV2l0aCgmcXVvdDtwcmVmaXgmcXVvdDspXG4gICAgZWxzZSAtJmd0OyBmYWxzZVxufVxuYGBgXG4gIFxuKndoZW4qezogLmtleXdvcmQgfSBjYW4gYWxzbyBiZSB1c2VkIGFzIGEgcmVwbGFjZW1lbnQgZm9yIGFuICppZip7OiAua2V5d29yZCB9LSplbHNlKns6IC5rZXl3b3JkIH0gKmlmKns6IC5rZXl3b3JkIH0gY2hhaW4uXG4qKklmIG5vIGFyZ3VtZW50IGlzIHN1cHBsaWVkLCB0aGUgYnJhbmNoIGNvbmRpdGlvbnMgYXJlIHNpbXBseSBib29sZWFuIGV4cHJlc3Npb25zLCBhbmQgYSBicmFuY2ggaXMgZXhlY3V0ZWQgd2hlbiBpdHMgY29uZGl0aW9uIGlzIHRydWU6KipcbiAgXG5gYGAga290bGluXG53aGVuIHtcbiAgICB4LmlzT2RkKCkgLSZndDsgcHJpbnQoJnF1b3Q7eCBpcyBvZGQmcXVvdDspXG4gICAgeC5pc0V2ZW4oKSAtJmd0OyBwcmludCgmcXVvdDt4IGlzIGV2ZW4mcXVvdDspXG4gICAgZWxzZSAtJmd0OyBwcmludCgmcXVvdDt4IGlzIGZ1bm55JnF1b3Q7KVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/control-flow.html#when-expression"
            ],
            "flags": 0,
            "guid": "mQ`;]Yu-{G",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Basics",
                "ControlFlow",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>For</b> Loops",
                "<p><em class=\"keyword\">for</em> loop iterates through anything that provides an iterator. The syntax is as follows:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">collection</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>The body can be a block.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>As mentioned before, <em class=\"keyword\">for</em> iterates through anything that provides an iterator, i.e.</p>\n<ul>\n<li align=\"left\">has a member- or extension-function <code>iterator()</code>, whose return type<ul>\n<li align=\"left\">has a member- or extension-function <code>next()</code>, and</li>\n<li align=\"left\">has a member- or extension-function <code>hasNext()</code> that returns <code>Boolean</code>.</li>\n</ul>\n</li>\n</ul>\n<p>All of these three functions need to be marked as <code>operator</code>.</p>\n<p>A <code>for</code> loop over an array is compiled to an index-based loop that does not create an iterator object.</p>\n<p>If you want to iterate through an array or a list with an index, you can do it this way:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">indices</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">])</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Note that this \"iteration through a range\" is compiled down to optimal implementation with no extra objects created.</p>\n<p>Alternatively, you can use the <code>withIndex</code> library function:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">((</span><span style=\"color: #000000\">index</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">withIndex</span><span style=\"color: #000000; font-weight: bold\">())</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"the element at $index is $value\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4Mjc1NzIsICJpZCI6ICIxNDg4MDM1NzIxMzUzLTAwMSIsICJtZCI6ICIqZm9yKns6IC5rZXl3b3JkIH0gbG9vcCBpdGVyYXRlcyB0aHJvdWdoIGFueXRoaW5nIHRoYXQgcHJvdmlkZXMgYW4gaXRlcmF0b3IuIFRoZSBzeW50YXggaXMgYXMgZm9sbG93czpcbiAgXG5gYGAga290bGluXG5mb3IgKGl0ZW0gaW4gY29sbGVjdGlvbikgcHJpbnQoaXRlbSlcbmBgYFxuICBcblRoZSBib2R5IGNhbiBiZSBhIGJsb2NrLlxuICBcbmBgYCBrb3RsaW5cbmZvciAoaXRlbTogSW50IGluIGludHMpIHtcbiAgICAvLyAuLi5cbn1cbmBgYFxuICBcbkFzIG1lbnRpb25lZCBiZWZvcmUsICpmb3IqezogLmtleXdvcmQgfSBpdGVyYXRlcyB0aHJvdWdoIGFueXRoaW5nIHRoYXQgcHJvdmlkZXMgYW4gaXRlcmF0b3IsIGkuZS5cbiAgXG4qIGhhcyBhIG1lbWJlci0gb3IgZXh0ZW5zaW9uLWZ1bmN0aW9uIGBpdGVyYXRvcigpYCwgd2hvc2UgcmV0dXJuIHR5cGVcbiAgICAqIGhhcyBhIG1lbWJlci0gb3IgZXh0ZW5zaW9uLWZ1bmN0aW9uIGBuZXh0KClgLCBhbmRcbiAgICAqIGhhcyBhIG1lbWJlci0gb3IgZXh0ZW5zaW9uLWZ1bmN0aW9uIGBoYXNOZXh0KClgIHRoYXQgcmV0dXJucyBgQm9vbGVhbmAuXG4gIFxuQWxsIG9mIHRoZXNlIHRocmVlIGZ1bmN0aW9ucyBuZWVkIHRvIGJlIG1hcmtlZCBhcyBgb3BlcmF0b3JgLlxuICBcbkEgYGZvcmAgbG9vcCBvdmVyIGFuIGFycmF5IGlzIGNvbXBpbGVkIHRvIGFuIGluZGV4LWJhc2VkIGxvb3AgdGhhdCBkb2VzIG5vdCBjcmVhdGUgYW4gaXRlcmF0b3Igb2JqZWN0LlxuICBcbklmIHlvdSB3YW50IHRvIGl0ZXJhdGUgdGhyb3VnaCBhbiBhcnJheSBvciBhIGxpc3Qgd2l0aCBhbiBpbmRleCwgeW91IGNhbiBkbyBpdCB0aGlzIHdheTpcbiAgXG5gYGAga290bGluXG5mb3IgKGkgaW4gYXJyYXkuaW5kaWNlcykge1xuICAgIHByaW50KGFycmF5W2ldKVxufVxuYGBgXG4gIFxuTm90ZSB0aGF0IHRoaXMgJnF1b3Q7aXRlcmF0aW9uIHRocm91Z2ggYSByYW5nZSZxdW90OyBpcyBjb21waWxlZCBkb3duIHRvIG9wdGltYWwgaW1wbGVtZW50YXRpb24gd2l0aCBubyBleHRyYSBvYmplY3RzIGNyZWF0ZWQuXG4gIFxuQWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIGB3aXRoSW5kZXhgIGxpYnJhcnkgZnVuY3Rpb246XG4gIFxuYGBgIGtvdGxpblxuZm9yICgoaW5kZXgsIHZhbHVlKSBpbiBhcnJheS53aXRoSW5kZXgoKSkge1xuICAgIHByaW50bG4oJnF1b3Q7dGhlIGVsZW1lbnQgYXQgJGluZGV4IGlzICR2YWx1ZSZxdW90Oylcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/control-flow.html#for-loops"
            ],
            "flags": 0,
            "guid": "fqOPx7!17?",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Basics",
                "ControlFlow",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>While</b> Loops",
                "<p><em class=\"keyword\">while</em> and <em class=\"keyword\">do</em>..<em class=\"keyword\">while</em> work as usual</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">while</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">--</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">do</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">y</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">retrieveData</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #204a87; font-weight: bold\">while</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">y</span> <span style=\"color: #000000; font-weight: bold\">!=</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// y is visible here!</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4Mjc2MTAsICJpZCI6ICIxNDg4MDM2NTA0MzM3LTAwMSIsICJtZCI6ICIqd2hpbGUqezogLmtleXdvcmQgfSBhbmQgKmRvKns6IC5rZXl3b3JkIH0uLip3aGlsZSp7OiAua2V5d29yZCB9IHdvcmsgYXMgdXN1YWxcbiAgXG5gYGAga290bGluXG53aGlsZSAoeCAmZ3Q7IDApIHtcbiAgICB4LS1cbn1cbiAgXG5kbyB7XG4gICAgdmFsIHkgPSByZXRyaWV2ZURhdGEoKVxufSB3aGlsZSAoeSAhPSBudWxsKSAvLyB5IGlzIHZpc2libGUgaGVyZSFcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/control-flow.html#while-loops"
            ],
            "flags": 0,
            "guid": "d1MArHHvd[",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Basics",
                "ControlFlow",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>Returns</i> and <i>Jumps</i>",
                "<p>Kotlin has three structural jump expressions:</p>\n<ul>\n<li align=\"left\"><em class=\"keyword\">return</em>. By default returns from the nearest enclosing function or <a href=\"lambdas.html#anonymous-functions\">anonymous function</a>.</li>\n<li align=\"left\"><em class=\"keyword\">break</em>. Terminates the nearest enclosing loop.</li>\n<li align=\"left\"><em class=\"keyword\">continue</em>. Proceeds to the next step of the nearest enclosing loop.</li>\n</ul>\n<p>All of these expressions can be used as part of larger expressions:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">s</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">person</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #204a87; font-weight: bold\">return</span>\n</pre></div>\n<p>The type of these expressions is the <a href=\"exceptions.html#the-nothing-type\">Nothing type</a>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4Mjc2ODIsICJpZCI6ICIxNDg4MDM2NTMwMjYyLTAwMSIsICJtZCI6ICJLb3RsaW4gaGFzIHRocmVlIHN0cnVjdHVyYWwganVtcCBleHByZXNzaW9uczpcbiAgXG4qICpyZXR1cm4qezogLmtleXdvcmQgfS4gQnkgZGVmYXVsdCByZXR1cm5zIGZyb20gdGhlIG5lYXJlc3QgZW5jbG9zaW5nIGZ1bmN0aW9uIG9yIFthbm9ueW1vdXMgZnVuY3Rpb25dKGxhbWJkYXMuaHRtbCNhbm9ueW1vdXMtZnVuY3Rpb25zKS5cbiogKmJyZWFrKns6IC5rZXl3b3JkIH0uIFRlcm1pbmF0ZXMgdGhlIG5lYXJlc3QgZW5jbG9zaW5nIGxvb3AuXG4qICpjb250aW51ZSp7OiAua2V5d29yZCB9LiBQcm9jZWVkcyB0byB0aGUgbmV4dCBzdGVwIG9mIHRoZSBuZWFyZXN0IGVuY2xvc2luZyBsb29wLlxuICBcbkFsbCBvZiB0aGVzZSBleHByZXNzaW9ucyBjYW4gYmUgdXNlZCBhcyBwYXJ0IG9mIGxhcmdlciBleHByZXNzaW9uczpcbiAgXG5gYGAga290bGluXG52YWwgcyA9IHBlcnNvbi5uYW1lID86IHJldHVyblxuYGBgXG4gIFxuVGhlIHR5cGUgb2YgdGhlc2UgZXhwcmVzc2lvbnMgaXMgdGhlIFtOb3RoaW5nIHR5cGVdKGV4Y2VwdGlvbnMuaHRtbCN0aGUtbm90aGluZy10eXBlKS5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/returns.html#returns-and-jumps"
            ],
            "flags": 0,
            "guid": "Mim,i`+l(S",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Basics",
                "Kotlin_1.1",
                "ReturnsAndJumps"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Break</b> and <b>Continue</b> Labels",
                "<p>Any expression in Kotlin may be marked with a <em class=\"keyword\">label</em>.<br />\nLabels have the form of an identifier followed by the <code>@</code> sign, for example: <code>abc@</code>, <code>fooBar@</code> are valid labels (see the <a href=\"grammar.html#labelReference\">grammar</a>).<br />\nTo label an expression, we just put a label in front of it</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">loop</span><span style=\"color: #a40000; border: 1px solid #ef2929\">@</span> <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">100</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Now, we can qualify a <em class=\"keyword\">break</em> or a <em class=\"keyword\">continue</em> with a label:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">loop</span><span style=\"color: #a40000; border: 1px solid #ef2929\">@</span> <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">100</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">j</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">100</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(...)</span> <span style=\"color: #204a87; font-weight: bold\">break</span><span style=\"color: #000000\">@loop</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>A <em class=\"keyword\">break</em> qualified with a label jumps to the execution point right after the loop marked with that label.<br />\nA <em class=\"keyword\">continue</em> proceeds to the next iteration of that loop.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjAyMjEsICJpZCI6ICIxNDg4MDM2Njc3MTU5LTAwMSIsICJtZCI6ICJBbnkgZXhwcmVzc2lvbiBpbiBLb3RsaW4gbWF5IGJlIG1hcmtlZCB3aXRoIGEgKmxhYmVsKns6IC5rZXl3b3JkIH0uXG5MYWJlbHMgaGF2ZSB0aGUgZm9ybSBvZiBhbiBpZGVudGlmaWVyIGZvbGxvd2VkIGJ5IHRoZSBgQGAgc2lnbiwgZm9yIGV4YW1wbGU6IGBhYmNAYCwgYGZvb0JhckBgIGFyZSB2YWxpZCBsYWJlbHMgKHNlZSB0aGUgW2dyYW1tYXJdKGdyYW1tYXIuaHRtbCNsYWJlbFJlZmVyZW5jZSkpLlxuVG8gbGFiZWwgYW4gZXhwcmVzc2lvbiwgd2UganVzdCBwdXQgYSBsYWJlbCBpbiBmcm9udCBvZiBpdFxuICBcbmBgYCBrb3RsaW5cbmxvb3BAIGZvciAoaSBpbiAxLi4xMDApIHtcbiAgICAvLyAuLi5cbn1cbmBgYFxuICBcbk5vdywgd2UgY2FuIHF1YWxpZnkgYSAqYnJlYWsqezogLmtleXdvcmQgfSBvciBhICpjb250aW51ZSp7OiAua2V5d29yZCB9IHdpdGggYSBsYWJlbDpcbiAgXG5gYGAga290bGluXG5sb29wQCBmb3IgKGkgaW4gMS4uMTAwKSB7XG4gICAgZm9yIChqIGluIDEuLjEwMCkge1xuICAgICAgICBpZiAoLi4uKSBicmVha0Bsb29wXG4gICAgfVxufVxuYGBgXG4gIFxuQSAqYnJlYWsqezogLmtleXdvcmQgfSBxdWFsaWZpZWQgd2l0aCBhIGxhYmVsIGp1bXBzIHRvIHRoZSBleGVjdXRpb24gcG9pbnQgcmlnaHQgYWZ0ZXIgdGhlIGxvb3AgbWFya2VkIHdpdGggdGhhdCBsYWJlbC5cbkEgKmNvbnRpbnVlKns6IC5rZXl3b3JkIH0gcHJvY2VlZHMgdG8gdGhlIG5leHQgaXRlcmF0aW9uIG9mIHRoYXQgbG9vcC5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/returns.html#break-and-continue-labels"
            ],
            "flags": 0,
            "guid": "HIA?`Gg2t3",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Basics",
                "Kotlin_1.1",
                "ReturnsAndJumps"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Return</b> at Labels",
                "<p>With function literals, local functions and object expression, <strong>functions can be nested in Kotlin</strong>. <br />\nQualified <em class=\"keyword\">return</em>s allow us to return from an outer function. <br />\nThe most important use case is returning from a lambda expression. Recall that when we write this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">forEach</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">return</span>  <span style=\"color: #8f5902; font-style: italic\">// nonlocal return from inside lambda directly to the caller of foo()</span>\n        <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p><strong class=\"kbd\">The <em class=\"keyword\">return</em>-expression returns from the nearest enclosing function, i.e. <code>foo</code>.</strong><br />\n<em>(Note that such non-local returns are supported only for lambda expressions passed to <a href=\"inline-functions.html\">inline functions</a>.)</em></p>\n<p>If we need to return from a lambda expression, we have to label it and qualify the <em class=\"keyword\">return</em>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">forEach</span> <span style=\"color: #000000\">lit</span><span style=\"color: #a40000; border: 1px solid #ef2929\">@</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">return</span><span style=\"color: #000000\">@lit</span>\n        <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Now, it returns only from the lambda expression. Oftentimes it is more convenient to use implicits labels:<br />\nsuch a label has the same name as the function to which the lambda is passed.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">forEach</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">return</span><span style=\"color: #000000\">@forEach</span>\n        <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Alternatively, we can replace the lambda expression with an <a href=\"lambdas.html#anonymous-functions\">anonymous function</a>.</p>\n<p><strong class=\"kbd\">A <em class=\"keyword\">return</em> statement in an anonymous function will return from the anonymous function itself.</strong></p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">forEach</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">fun</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">return</span>  <span style=\"color: #8f5902; font-style: italic\">// local return to the caller of the anonymous fun, i.e. the forEach loop</span>\n        <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">})</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>When returning a value, the parser gives preference to the qualified return, i.e.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">return</span><span style=\"color: #000000\">@a</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n</pre></div>\n<p><em>means \"return <code>1</code> at label <code>@a</code>\" and not \"return a labeled expression <code>(@a 1)</code>.\"</em></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzEyMTksICJpZCI6ICIxNDg4MDM2Njk2ODgyLTAwMSIsICJtZCI6ICJXaXRoIGZ1bmN0aW9uIGxpdGVyYWxzLCBsb2NhbCBmdW5jdGlvbnMgYW5kIG9iamVjdCBleHByZXNzaW9uLCAqKmZ1bmN0aW9ucyBjYW4gYmUgbmVzdGVkIGluIEtvdGxpbioqLiBcblF1YWxpZmllZCAqcmV0dXJuKns6IC5rZXl3b3JkIH1zIGFsbG93IHVzIHRvIHJldHVybiBmcm9tIGFuIG91dGVyIGZ1bmN0aW9uLiBcblRoZSBtb3N0IGltcG9ydGFudCB1c2UgY2FzZSBpcyByZXR1cm5pbmcgZnJvbSBhIGxhbWJkYSBleHByZXNzaW9uLiBSZWNhbGwgdGhhdCB3aGVuIHdlIHdyaXRlIHRoaXM6XG4gIFxuYGBga290bGluXG5mdW4gZm9vKCkge1xuICAgIGludHMuZm9yRWFjaCB7XG4gICAgICAgIGlmIChpdCA9PSAwKSByZXR1cm4gIC8vIG5vbmxvY2FsIHJldHVybiBmcm9tIGluc2lkZSBsYW1iZGEgZGlyZWN0bHkgdG8gdGhlIGNhbGxlciBvZiBmb28oKVxuICAgICAgICBwcmludChpdClcbiAgICB9XG59XG5gYGBcbiAgXG4qKlRoZSAqcmV0dXJuKns6IC5rZXl3b3JkIH0tZXhwcmVzc2lvbiByZXR1cm5zIGZyb20gdGhlIG5lYXJlc3QgZW5jbG9zaW5nIGZ1bmN0aW9uLCBpLmUuIGBmb29gLioqezogLmtiZCB9XG5fKE5vdGUgdGhhdCBzdWNoIG5vbi1sb2NhbCByZXR1cm5zIGFyZSBzdXBwb3J0ZWQgb25seSBmb3IgbGFtYmRhIGV4cHJlc3Npb25zIHBhc3NlZCB0byBbaW5saW5lIGZ1bmN0aW9uc10oaW5saW5lLWZ1bmN0aW9ucy5odG1sKS4pX1xuICBcbklmIHdlIG5lZWQgdG8gcmV0dXJuIGZyb20gYSBsYW1iZGEgZXhwcmVzc2lvbiwgd2UgaGF2ZSB0byBsYWJlbCBpdCBhbmQgcXVhbGlmeSB0aGUgKnJldHVybip7OiAua2V5d29yZCB9OlxuICBcbmBgYCBrb3RsaW5cbmZ1biBmb28oKSB7XG4gICAgaW50cy5mb3JFYWNoIGxpdEAge1xuICAgICAgICBpZiAoaXQgPT0gMCkgcmV0dXJuQGxpdFxuICAgICAgICBwcmludChpdClcbiAgICB9XG59XG5gYGBcbiAgXG5Ob3csIGl0IHJldHVybnMgb25seSBmcm9tIHRoZSBsYW1iZGEgZXhwcmVzc2lvbi4gT2Z0ZW50aW1lcyBpdCBpcyBtb3JlIGNvbnZlbmllbnQgdG8gdXNlIGltcGxpY2l0cyBsYWJlbHM6XG5zdWNoIGEgbGFiZWwgaGFzIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGZ1bmN0aW9uIHRvIHdoaWNoIHRoZSBsYW1iZGEgaXMgcGFzc2VkLlxuICBcbmBgYCBrb3RsaW5cbmZ1biBmb28oKSB7XG4gICAgaW50cy5mb3JFYWNoIHtcbiAgICAgICAgaWYgKGl0ID09IDApIHJldHVybkBmb3JFYWNoXG4gICAgICAgIHByaW50KGl0KVxuICAgIH1cbn1cbmBgYFxuICBcbkFsdGVybmF0aXZlbHksIHdlIGNhbiByZXBsYWNlIHRoZSBsYW1iZGEgZXhwcmVzc2lvbiB3aXRoIGFuIFthbm9ueW1vdXMgZnVuY3Rpb25dKGxhbWJkYXMuaHRtbCNhbm9ueW1vdXMtZnVuY3Rpb25zKS5cbiAgXG4qKkEgKnJldHVybip7OiAua2V5d29yZCB9IHN0YXRlbWVudCBpbiBhbiBhbm9ueW1vdXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gZnJvbSB0aGUgYW5vbnltb3VzIGZ1bmN0aW9uIGl0c2VsZi4qKns6IC5rYmQgfVxuICBcbmBgYGtvdGxpblxuZnVuIGZvbygpIHtcbiAgICBpbnRzLmZvckVhY2goZnVuKHZhbHVlOiBJbnQpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IDApIHJldHVybiAgLy8gbG9jYWwgcmV0dXJuIHRvIHRoZSBjYWxsZXIgb2YgdGhlIGFub255bW91cyBmdW4sIGkuZS4gdGhlIGZvckVhY2ggbG9vcFxuICAgICAgICBwcmludCh2YWx1ZSlcbiAgICB9KVxufVxuYGBgXG4gIFxuV2hlbiByZXR1cm5pbmcgYSB2YWx1ZSwgdGhlIHBhcnNlciBnaXZlcyBwcmVmZXJlbmNlIHRvIHRoZSBxdWFsaWZpZWQgcmV0dXJuLCBpLmUuXG4gIFxuYGBgIGtvdGxpblxucmV0dXJuQGEgMVxuYGBgXG4gIFxuX21lYW5zICZxdW90O3JldHVybiBgMWAgYXQgbGFiZWwgYEBhYCZxdW90OyBhbmQgbm90ICZxdW90O3JldHVybiBhIGxhYmVsZWQgZXhwcmVzc2lvbiBgKEBhIDEpYC4mcXVvdDtfXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/returns.html#return-at-labels"
            ],
            "flags": 0,
            "guid": "k]`T+XrCv_",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Basics",
                "Kotlin_1.1",
                "ReturnsAndJumps"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Function Declarations",
                "<p>Functions in Kotlin are declared using the <em class=\"keyword\">fun</em> keyword</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">double</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">*</span><span style=\"color: #000000\">x</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzIyNDEsICJpZCI6ICIxNDg4MDM3MjExMTM4LTAwMSIsICJtZCI6ICJGdW5jdGlvbnMgaW4gS290bGluIGFyZSBkZWNsYXJlZCB1c2luZyB0aGUgKmZ1bip7OiAua2V5d29yZCB9IGtleXdvcmRcbiAgXG5gYGBrb3RsaW5cbmZ1biBkb3VibGUoeDogSW50KTogSW50IHtcbiAgICByZXR1cm4gMip4XG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/functions.html#function-declarations"
            ],
            "flags": 0,
            "guid": "hNs%y)F~mu",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Function Usage",
                "<p>Calling functions uses the traditional approach</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">result</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">double</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>Calling member functions uses the dot notation</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">Sample</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #8f5902; font-style: italic\">// create instance of class Sample and call foo</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzIyNjIsICJpZCI6ICIxNDg4MDM3MjUwMjExLTAwMSIsICJtZCI6ICJDYWxsaW5nIGZ1bmN0aW9ucyB1c2VzIHRoZSB0cmFkaXRpb25hbCBhcHByb2FjaFxuICBcbmBgYGtvdGxpblxudmFsIHJlc3VsdCA9IGRvdWJsZSgyKVxuYGBgXG4gIFxuICBcbkNhbGxpbmcgbWVtYmVyIGZ1bmN0aW9ucyB1c2VzIHRoZSBkb3Qgbm90YXRpb25cbiAgXG5gYGBrb3RsaW5cblNhbXBsZSgpLmZvbygpIC8vIGNyZWF0ZSBpbnN0YW5jZSBvZiBjbGFzcyBTYW1wbGUgYW5kIGNhbGwgZm9vXG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/functions.html#function-usage"
            ],
            "flags": 0,
            "guid": "OTYp+XuSH#",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Function&nbsp;<b>Infix</b> notation",
                "<p>Functions can also be called using infix notations when</p>\n<ul>\n<li align=\"left\">They are member functions or <a href=\"extensions.html\">extension functions</a></li>\n<li align=\"left\">They have a single parameter</li>\n<li align=\"left\">They are marked with the <code>infix</code> keyword</li>\n</ul>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">// Define extension to Int</span>\n<span style=\"color: #000000\">infix</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">shl</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// call extension function using infix notation</span>\n\n<span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #000000\">shl</span> <span style=\"color: #0000cf; font-weight: bold\">2</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// is the same as</span>\n\n<span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000\">shl</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDcxNzcsICJpZCI6ICIxNDg4MDM3Mjc0ODA1LTAwMSIsICJtZCI6ICJGdW5jdGlvbnMgY2FuIGFsc28gYmUgY2FsbGVkIHVzaW5nIGluZml4IG5vdGF0aW9ucyB3aGVuXG4gIFxuKiBUaGV5IGFyZSBtZW1iZXIgZnVuY3Rpb25zIG9yIFtleHRlbnNpb24gZnVuY3Rpb25zXShleHRlbnNpb25zLmh0bWwpXG4qIFRoZXkgaGF2ZSBhIHNpbmdsZSBwYXJhbWV0ZXJcbiogVGhleSBhcmUgbWFya2VkIHdpdGggdGhlIGBpbmZpeGAga2V5d29yZFxuICBcbmBgYCBrb3RsaW5cbi8vIERlZmluZSBleHRlbnNpb24gdG8gSW50XG5pbmZpeCBmdW4gSW50LnNobCh4OiBJbnQpOiBJbnQge1xuLi4uXG59XG4gIFxuLy8gY2FsbCBleHRlbnNpb24gZnVuY3Rpb24gdXNpbmcgaW5maXggbm90YXRpb25cbiAgXG4xIHNobCAyXG4gIFxuLy8gaXMgdGhlIHNhbWUgYXNcbiAgXG4xLnNobCgyKVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/functions.html#infix-notation"
            ],
            "flags": 0,
            "guid": "FwDwIjHMB3",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Function&nbsp;<b>Parameters</b>",
                "<p>Function parameters are defined using Pascal notation, i.e. <em>name</em>: <em>type</em>. <br />\nParameters are separated using commas. Each parameter must be explicitly typed.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">powerOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">number</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">exponent</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDcyMDIsICJpZCI6ICIxNDg4MDM3Mjk4NTE1LTAwMSIsICJtZCI6ICJGdW5jdGlvbiBwYXJhbWV0ZXJzIGFyZSBkZWZpbmVkIHVzaW5nIFBhc2NhbCBub3RhdGlvbiwgaS5lLiAqbmFtZSo6ICp0eXBlKi4gXG5QYXJhbWV0ZXJzIGFyZSBzZXBhcmF0ZWQgdXNpbmcgY29tbWFzLiBFYWNoIHBhcmFtZXRlciBtdXN0IGJlIGV4cGxpY2l0bHkgdHlwZWQuXG4gIFxuYGBgIGtvdGxpblxuZnVuIHBvd2VyT2YobnVtYmVyOiBJbnQsIGV4cG9uZW50OiBJbnQpIHtcbi4uLlxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/functions.html#parameters"
            ],
            "flags": 0,
            "guid": "y.s00f7La7",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Function&nbsp;<b>Default Arguments</b>",
                "<p>Function parameters can have default values, which are used when a corresponding argument is omitted. This allows for a reduced number of overloads compared to other languages.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">read</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Byte</span><span style=\"color: #000000; font-weight: bold\">&gt;,</span> <span style=\"color: #000000\">off</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">len</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Default values are defined using the <strong>=</strong> after type along with the value.</p>\n<p>Overriding methods always use the same default parameter values as the base method.<br />\n<strong>When overriding a method with default parameters values, the default parameter values must be omitted from the signature:</strong></p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">A</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">10</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">B</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>  <span style=\"color: #8f5902; font-style: italic\">// no default value allowed</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzIyOTMsICJpZCI6ICIxNDg4MDM3MzE0ODk0LTAwMSIsICJtZCI6ICJGdW5jdGlvbiBwYXJhbWV0ZXJzIGNhbiBoYXZlIGRlZmF1bHQgdmFsdWVzLCB3aGljaCBhcmUgdXNlZCB3aGVuIGEgY29ycmVzcG9uZGluZyBhcmd1bWVudCBpcyBvbWl0dGVkLiBUaGlzIGFsbG93cyBmb3IgYSByZWR1Y2VkIG51bWJlciBvZiBvdmVybG9hZHMgY29tcGFyZWQgdG8gb3RoZXIgbGFuZ3VhZ2VzLlxuICBcbmBgYCBrb3RsaW5cbmZ1biByZWFkKGI6IEFycmF5Jmx0O0J5dGUmZ3Q7LCBvZmY6IEludCA9IDAsIGxlbjogSW50ID0gYi5zaXplKSB7XG4uLi5cbn1cbmBgYFxuICBcbkRlZmF1bHQgdmFsdWVzIGFyZSBkZWZpbmVkIHVzaW5nIHRoZSAqKj0qKiBhZnRlciB0eXBlIGFsb25nIHdpdGggdGhlIHZhbHVlLlxuICBcbk92ZXJyaWRpbmcgbWV0aG9kcyBhbHdheXMgdXNlIHRoZSBzYW1lIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlcyBhcyB0aGUgYmFzZSBtZXRob2QuXG4qKldoZW4gb3ZlcnJpZGluZyBhIG1ldGhvZCB3aXRoIGRlZmF1bHQgcGFyYW1ldGVycyB2YWx1ZXMsIHRoZSBkZWZhdWx0IHBhcmFtZXRlciB2YWx1ZXMgbXVzdCBiZSBvbWl0dGVkIGZyb20gdGhlIHNpZ25hdHVyZToqKlxuICBcbmBgYCBrb3RsaW5cbm9wZW4gY2xhc3MgQSB7XG4gICAgb3BlbiBmdW4gZm9vKGk6IEludCA9IDEwKSB7IC4uLiB9XG59XG4gIFxuY2xhc3MgQiA6IEEoKSB7XG4gICAgb3ZlcnJpZGUgZnVuIGZvbyhpOiBJbnQpIHsgLi4uIH0gIC8vIG5vIGRlZmF1bHQgdmFsdWUgYWxsb3dlZFxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/functions.html#default-arguments"
            ],
            "flags": 0,
            "guid": "QFYR(Rc8[H",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Function&nbsp;<b>Named Arguments</b>",
                "<p>Function parameters can be named when calling functions.<br />\nThis is very convenient when a function has a high number of parameters or default ones.</p>\n<p>Given the following function</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">reformat</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">str</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span>\n             <span style=\"color: #000000\">normalizeCase</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Boolean</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">true</span><span style=\"color: #000000; font-weight: bold\">,</span>\n             <span style=\"color: #000000\">upperCaseFirstLetter</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Boolean</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">true</span><span style=\"color: #000000; font-weight: bold\">,</span>\n             <span style=\"color: #000000\">divideByCamelHumps</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Boolean</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">false</span><span style=\"color: #000000; font-weight: bold\">,</span>\n             <span style=\"color: #000000\">wordSeparator</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Char</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">' '</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>we could call this using default arguments</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">reformat</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">str</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>However, when calling it with non-default, the call would look something like</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">reformat</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">str</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">true</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">true</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">false</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">'_'</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>With named arguments we can make the code much more readable</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">reformat</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">str</span><span style=\"color: #000000; font-weight: bold\">,</span>\n    <span style=\"color: #000000\">normalizeCase</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">true</span><span style=\"color: #000000; font-weight: bold\">,</span>\n    <span style=\"color: #000000\">upperCaseFirstLetter</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">true</span><span style=\"color: #000000; font-weight: bold\">,</span>\n    <span style=\"color: #000000\">divideByCamelHumps</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">false</span><span style=\"color: #000000; font-weight: bold\">,</span>\n    <span style=\"color: #000000\">wordSeparator</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">'_'</span>\n<span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>and if we do not need all arguments</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">reformat</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">str</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">wordSeparator</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">'_'</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p><strong>Note that the named argument syntax cannot be used when calling Java functions, because Java bytecode does not always preserve names of function parameters.</strong></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTI5NjQwMTAsICJpZCI6ICIxNDg4MDM3MzM1MDUzLTAwMSIsICJtZCI6ICJGdW5jdGlvbiBwYXJhbWV0ZXJzIGNhbiBiZSBuYW1lZCB3aGVuIGNhbGxpbmcgZnVuY3Rpb25zLlxuVGhpcyBpcyB2ZXJ5IGNvbnZlbmllbnQgd2hlbiBhIGZ1bmN0aW9uIGhhcyBhIGhpZ2ggbnVtYmVyIG9mIHBhcmFtZXRlcnMgb3IgZGVmYXVsdCBvbmVzLlxuICBcbkdpdmVuIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25cbiAgXG5gYGBrb3RsaW5cbmZ1biByZWZvcm1hdChzdHI6IFN0cmluZyxcbiAgICAgICAgICAgICBub3JtYWxpemVDYXNlOiBCb29sZWFuID0gdHJ1ZSxcbiAgICAgICAgICAgICB1cHBlckNhc2VGaXJzdExldHRlcjogQm9vbGVhbiA9IHRydWUsXG4gICAgICAgICAgICAgZGl2aWRlQnlDYW1lbEh1bXBzOiBCb29sZWFuID0gZmFsc2UsXG4gICAgICAgICAgICAgd29yZFNlcGFyYXRvcjogQ2hhciA9ICZhcG9zOyAmYXBvczspIHtcbi4uLlxufVxuYGBgXG4gIFxud2UgY291bGQgY2FsbCB0aGlzIHVzaW5nIGRlZmF1bHQgYXJndW1lbnRzXG4gIFxuYGBga290bGluXG5yZWZvcm1hdChzdHIpXG5gYGBcbiAgXG5Ib3dldmVyLCB3aGVuIGNhbGxpbmcgaXQgd2l0aCBub24tZGVmYXVsdCwgdGhlIGNhbGwgd291bGQgbG9vayBzb21ldGhpbmcgbGlrZVxuICBcbmBgYGtvdGxpblxucmVmb3JtYXQoc3RyLCB0cnVlLCB0cnVlLCBmYWxzZSwgJmFwb3M7XyZhcG9zOylcbmBgYFxuICBcbldpdGggbmFtZWQgYXJndW1lbnRzIHdlIGNhbiBtYWtlIHRoZSBjb2RlIG11Y2ggbW9yZSByZWFkYWJsZVxuICBcbmBgYGtvdGxpblxucmVmb3JtYXQoc3RyLFxuICAgIG5vcm1hbGl6ZUNhc2UgPSB0cnVlLFxuICAgIHVwcGVyQ2FzZUZpcnN0TGV0dGVyID0gdHJ1ZSxcbiAgICBkaXZpZGVCeUNhbWVsSHVtcHMgPSBmYWxzZSxcbiAgICB3b3JkU2VwYXJhdG9yID0gJmFwb3M7XyZhcG9zO1xuKVxuYGBgXG4gIFxuYW5kIGlmIHdlIGRvIG5vdCBuZWVkIGFsbCBhcmd1bWVudHNcbiAgXG5gYGBrb3RsaW5cbnJlZm9ybWF0KHN0ciwgd29yZFNlcGFyYXRvciA9ICZhcG9zO18mYXBvczspXG5gYGBcbiAgXG4qKk5vdGUgdGhhdCB0aGUgbmFtZWQgYXJndW1lbnQgc3ludGF4IGNhbm5vdCBiZSB1c2VkIHdoZW4gY2FsbGluZyBKYXZhIGZ1bmN0aW9ucywgYmVjYXVzZSBKYXZhIGJ5dGVjb2RlIGRvZXMgbm90IGFsd2F5cyBwcmVzZXJ2ZSBuYW1lcyBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzLioqXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/functions.html#named-arguments"
            ],
            "flags": 0,
            "guid": "wHyb>uow(a",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Unit-returning</b> functions",
                "<p>If a function does not return any useful value, its return type is <code>Unit</code>. <br />\n<em><code>Unit</code> is a type with only one value - <code>Unit</code>.</em> This value does not have to be returned explicitly</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">printHello</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">?):</span> <span style=\"color: #000000\">Unit</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span> <span style=\"color: #000000; font-weight: bold\">!=</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Hello ${name}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">else</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Hi there!\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #8f5902; font-style: italic\">// `return Unit` or `return` is optional</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The <code>Unit</code> return type declaration is also optional. The above code is equivalent to</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">printHello</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">?)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDc0MDYsICJpZCI6ICIxNDg4MDM3MzgyMDE4LTAwMSIsICJtZCI6ICJJZiBhIGZ1bmN0aW9uIGRvZXMgbm90IHJldHVybiBhbnkgdXNlZnVsIHZhbHVlLCBpdHMgcmV0dXJuIHR5cGUgaXMgYFVuaXRgLiBcbl9gVW5pdGAgaXMgYSB0eXBlIHdpdGggb25seSBvbmUgdmFsdWUgLSBgVW5pdGAuXyBUaGlzIHZhbHVlIGRvZXMgbm90IGhhdmUgdG8gYmUgcmV0dXJuZWQgZXhwbGljaXRseVxuICBcbmBgYCBrb3RsaW5cbmZ1biBwcmludEhlbGxvKG5hbWU6IFN0cmluZz8pOiBVbml0IHtcbiAgICBpZiAobmFtZSAhPSBudWxsKVxuICAgICAgICBwcmludGxuKCZxdW90O0hlbGxvICR7bmFtZX0mcXVvdDspXG4gICAgZWxzZVxuICAgICAgICBwcmludGxuKCZxdW90O0hpIHRoZXJlISZxdW90OylcbiAgICAvLyBgcmV0dXJuIFVuaXRgIG9yIGByZXR1cm5gIGlzIG9wdGlvbmFsXG59XG5gYGBcbiAgXG5UaGUgYFVuaXRgIHJldHVybiB0eXBlIGRlY2xhcmF0aW9uIGlzIGFsc28gb3B0aW9uYWwuIFRoZSBhYm92ZSBjb2RlIGlzIGVxdWl2YWxlbnQgdG9cbiAgXG5gYGAga290bGluXG5mdW4gcHJpbnRIZWxsbyhuYW1lOiBTdHJpbmc/KSB7XG4gICAgLi4uXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/functions.html#unit-returning-functions"
            ],
            "flags": 0,
            "guid": "LFO-nxf[;3",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Single-Expression</b> functions",
                "<p>When a function returns a single expression, the curly braces can be omitted and the body is specified after a <strong>=</strong> symbol</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">double</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #0000cf; font-weight: bold\">2</span>\n</pre></div>\n<p>Explicitly declaring the return type is <a href=\"#explicit-return-types\">optional</a> when this can be inferred by the compiler</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">double</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #0000cf; font-weight: bold\">2</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDc0MzcsICJpZCI6ICIxNDg4MDM3NDAzNzM0LTAwMSIsICJtZCI6ICJXaGVuIGEgZnVuY3Rpb24gcmV0dXJucyBhIHNpbmdsZSBleHByZXNzaW9uLCB0aGUgY3VybHkgYnJhY2VzIGNhbiBiZSBvbWl0dGVkIGFuZCB0aGUgYm9keSBpcyBzcGVjaWZpZWQgYWZ0ZXIgYSAqKj0qKiBzeW1ib2xcbiAgXG5gYGAga290bGluXG5mdW4gZG91YmxlKHg6IEludCk6IEludCA9IHggKiAyXG5gYGBcbiAgXG5FeHBsaWNpdGx5IGRlY2xhcmluZyB0aGUgcmV0dXJuIHR5cGUgaXMgW29wdGlvbmFsXSgjZXhwbGljaXQtcmV0dXJuLXR5cGVzKSB3aGVuIHRoaXMgY2FuIGJlIGluZmVycmVkIGJ5IHRoZSBjb21waWxlclxuICBcbmBgYCBrb3RsaW5cbmZ1biBkb3VibGUoeDogSW50KSA9IHggKiAyXG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/functions.html#single-expression-functions"
            ],
            "flags": 0,
            "guid": "L&OeqG!%ki",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Function&nbsp;<b>Explicit return</b> types",
                "<p>Functions with block body must always specify return types explicitly, unless it's intended for them to return <code>Unit</code>, <a href=\"#unit-returning-functions\">in which case it is optional</a>.<br />\nKotlin does not infer return types for functions with block bodies because such functions may have complex control flow in the body, and the return type will be non-obvious to the reader (and sometimes even for the compiler).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDc0NzgsICJpZCI6ICIxNDg4MDM3NDI1NTk1LTAwMSIsICJtZCI6ICJGdW5jdGlvbnMgd2l0aCBibG9jayBib2R5IG11c3QgYWx3YXlzIHNwZWNpZnkgcmV0dXJuIHR5cGVzIGV4cGxpY2l0bHksIHVubGVzcyBpdCZhcG9zO3MgaW50ZW5kZWQgZm9yIHRoZW0gdG8gcmV0dXJuIGBVbml0YCwgW2luIHdoaWNoIGNhc2UgaXQgaXMgb3B0aW9uYWxdKCN1bml0LXJldHVybmluZy1mdW5jdGlvbnMpLlxuS290bGluIGRvZXMgbm90IGluZmVyIHJldHVybiB0eXBlcyBmb3IgZnVuY3Rpb25zIHdpdGggYmxvY2sgYm9kaWVzIGJlY2F1c2Ugc3VjaCBmdW5jdGlvbnMgbWF5IGhhdmUgY29tcGxleCBjb250cm9sIGZsb3cgaW4gdGhlIGJvZHksIGFuZCB0aGUgcmV0dXJuIHR5cGUgd2lsbCBiZSBub24tb2J2aW91cyB0byB0aGUgcmVhZGVyIChhbmQgc29tZXRpbWVzIGV2ZW4gZm9yIHRoZSBjb21waWxlcikuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/functions.html#explicit-return-types"
            ],
            "flags": 0,
            "guid": "GH{lG-_9Ar",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Functions with&nbsp;<b>Variable number of arguments</b> (<i>Varargs</i>)",
                "<p>A parameter of a function (normally the last one) may be marked with <code>vararg</code> modifier:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">asList</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">vararg</span> <span style=\"color: #000000\">ts</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">result</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ArrayList</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;()</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">t</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">ts</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// ts is an Array</span>\n        <span style=\"color: #000000\">result</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">t</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">result</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>allowing a variable number of arguments to be passed to the function:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">list</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">asList</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>Inside a function a <code>vararg</code>-parameter of type <code>T</code> is visible as an array of <code>T</code>, i.e. the <code>ts</code> variable in the example above has type <code>Array&lt;out T&gt;</code>.</p>\n<p>Only one parameter may be marked as <code>vararg</code>. If a <code>vararg</code> parameter is not the last one in the list, values for the<br />\nfollowing parameters can be passed using the named argument syntax, or, if the parameter has a function type, by passing a lambda outside parentheses.</p>\n<p>When we call a <code>vararg</code>-function, we can pass arguments one-by-one, e.g. <code>asList(1, 2, 3)</code>, or, if we already have an array and want to pass its contents to the function, we use the <strong>spread</strong> operator (prefix the array with <code>*</code>):</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">arrayOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">list</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">asList</span><span style=\"color: #000000; font-weight: bold\">(-</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000; font-weight: bold\">*</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">4</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDc1NDksICJpZCI6ICIxNDg4MDM3NDQ1MzUyLTAwMSIsICJtZCI6ICJBIHBhcmFtZXRlciBvZiBhIGZ1bmN0aW9uIChub3JtYWxseSB0aGUgbGFzdCBvbmUpIG1heSBiZSBtYXJrZWQgd2l0aCBgdmFyYXJnYCBtb2RpZmllcjpcbiAgXG5gYGBrb3RsaW5cbmZ1biAmbHQ7VCZndDsgYXNMaXN0KHZhcmFyZyB0czogVCk6IExpc3QmbHQ7VCZndDsge1xuICAgIHZhbCByZXN1bHQgPSBBcnJheUxpc3QmbHQ7VCZndDsoKVxuICAgIGZvciAodCBpbiB0cykgLy8gdHMgaXMgYW4gQXJyYXlcbiAgICAgICAgcmVzdWx0LmFkZCh0KVxuICAgIHJldHVybiByZXN1bHRcbn1cbmBgYFxuICBcbmFsbG93aW5nIGEgdmFyaWFibGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdG8gdGhlIGZ1bmN0aW9uOlxuICBcbmBgYGtvdGxpblxudmFsIGxpc3QgPSBhc0xpc3QoMSwgMiwgMylcbmBgYFxuICBcbkluc2lkZSBhIGZ1bmN0aW9uIGEgYHZhcmFyZ2AtcGFyYW1ldGVyIG9mIHR5cGUgYFRgIGlzIHZpc2libGUgYXMgYW4gYXJyYXkgb2YgYFRgLCBpLmUuIHRoZSBgdHNgIHZhcmlhYmxlIGluIHRoZSBleGFtcGxlIGFib3ZlIGhhcyB0eXBlIGBBcnJheSZsdDtvdXQgVCZndDtgLlxuICBcbk9ubHkgb25lIHBhcmFtZXRlciBtYXkgYmUgbWFya2VkIGFzIGB2YXJhcmdgLiBJZiBhIGB2YXJhcmdgIHBhcmFtZXRlciBpcyBub3QgdGhlIGxhc3Qgb25lIGluIHRoZSBsaXN0LCB2YWx1ZXMgZm9yIHRoZVxuZm9sbG93aW5nIHBhcmFtZXRlcnMgY2FuIGJlIHBhc3NlZCB1c2luZyB0aGUgbmFtZWQgYXJndW1lbnQgc3ludGF4LCBvciwgaWYgdGhlIHBhcmFtZXRlciBoYXMgYSBmdW5jdGlvbiB0eXBlLCBieSBwYXNzaW5nIGEgbGFtYmRhIG91dHNpZGUgcGFyZW50aGVzZXMuXG4gIFxuV2hlbiB3ZSBjYWxsIGEgYHZhcmFyZ2AtZnVuY3Rpb24sIHdlIGNhbiBwYXNzIGFyZ3VtZW50cyBvbmUtYnktb25lLCBlLmcuIGBhc0xpc3QoMSwgMiwgMylgLCBvciwgaWYgd2UgYWxyZWFkeSBoYXZlIGFuIGFycmF5IGFuZCB3YW50IHRvIHBhc3MgaXRzIGNvbnRlbnRzIHRvIHRoZSBmdW5jdGlvbiwgd2UgdXNlIHRoZSAqKnNwcmVhZCoqIG9wZXJhdG9yIChwcmVmaXggdGhlIGFycmF5IHdpdGggYCpgKTpcbiAgXG5gYGBrb3RsaW5cbnZhbCBhID0gYXJyYXlPZigxLCAyLCAzKVxudmFsIGxpc3QgPSBhc0xpc3QoLTEsIDAsICphLCA0KVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/functions.html#variable-number-of-arguments-varargs"
            ],
            "flags": 0,
            "guid": "mG!4|V]:gL",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Function Scope",
                "<p>In Kotlin functions can be declared at top level in a file, <em>meaning you do not need to create a class to hold a function</em>, like languages such as Java, C# or Scala.<br />\nIn addition to top level functions, Kotlin functions can also be declared local, as member functions and extension functions.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDc4ODEsICJpZCI6ICIxNDg4MDM3NDc1Mzk1LTAwMSIsICJtZCI6ICJJbiBLb3RsaW4gZnVuY3Rpb25zIGNhbiBiZSBkZWNsYXJlZCBhdCB0b3AgbGV2ZWwgaW4gYSBmaWxlLCBfbWVhbmluZyB5b3UgZG8gbm90IG5lZWQgdG8gY3JlYXRlIGEgY2xhc3MgdG8gaG9sZCBhIGZ1bmN0aW9uXywgbGlrZSBsYW5ndWFnZXMgc3VjaCBhcyBKYXZhLCBDIyBvciBTY2FsYS5cbkluIGFkZGl0aW9uIHRvIHRvcCBsZXZlbCBmdW5jdGlvbnMsIEtvdGxpbiBmdW5jdGlvbnMgY2FuIGFsc28gYmUgZGVjbGFyZWQgbG9jYWwsIGFzIG1lbWJlciBmdW5jdGlvbnMgYW5kIGV4dGVuc2lvbiBmdW5jdGlvbnMuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/functions.html#function-scope"
            ],
            "flags": 0,
            "guid": "GQ2$qh)0dy",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Local Functions</b> scope",
                "<p>Kotlin supports local functions, i.e. a function inside another function</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">dfs</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">graph</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Graph</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">dfs</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">current</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Vertex</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">visited</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Set</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Vertex</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(!</span><span style=\"color: #000000\">visited</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">current</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #204a87; font-weight: bold\">return</span>\n        <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">v</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">current</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">neighbors</span><span style=\"color: #000000; font-weight: bold\">)</span>\n            <span style=\"color: #000000\">dfs</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">v</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">visited</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #000000\">dfs</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">graph</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">vertices</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">],</span> <span style=\"color: #000000\">HashSet</span><span style=\"color: #000000; font-weight: bold\">())</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Local function can access local variables of outer functions (i.e. the closure), so in the case above, the <em>visited</em> can be a local variable</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">dfs</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">graph</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Graph</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">visited</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">HashSet</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Vertex</span><span style=\"color: #000000; font-weight: bold\">&gt;()</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">dfs</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">current</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Vertex</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(!</span><span style=\"color: #000000\">visited</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">current</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #204a87; font-weight: bold\">return</span>\n        <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">v</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">current</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">neighbors</span><span style=\"color: #000000; font-weight: bold\">)</span>\n            <span style=\"color: #000000\">dfs</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">v</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #000000\">dfs</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">graph</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">vertices</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">])</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDc5MTUsICJpZCI6ICIxNDg4MDM3NDk0OTE0LTAwMSIsICJtZCI6ICJLb3RsaW4gc3VwcG9ydHMgbG9jYWwgZnVuY3Rpb25zLCBpLmUuIGEgZnVuY3Rpb24gaW5zaWRlIGFub3RoZXIgZnVuY3Rpb25cbiAgXG5gYGBrb3RsaW5cbmZ1biBkZnMoZ3JhcGg6IEdyYXBoKSB7XG4gICAgZnVuIGRmcyhjdXJyZW50OiBWZXJ0ZXgsIHZpc2l0ZWQ6IFNldCZsdDtWZXJ0ZXgmZ3Q7KSB7XG4gICAgICAgIGlmICghdmlzaXRlZC5hZGQoY3VycmVudCkpIHJldHVyblxuICAgICAgICBmb3IgKHYgaW4gY3VycmVudC5uZWlnaGJvcnMpXG4gICAgICAgICAgICBkZnModiwgdmlzaXRlZClcbiAgICB9XG4gIFxuICAgIGRmcyhncmFwaC52ZXJ0aWNlc1swXSwgSGFzaFNldCgpKVxufVxuYGBgXG4gIFxuTG9jYWwgZnVuY3Rpb24gY2FuIGFjY2VzcyBsb2NhbCB2YXJpYWJsZXMgb2Ygb3V0ZXIgZnVuY3Rpb25zIChpLmUuIHRoZSBjbG9zdXJlKSwgc28gaW4gdGhlIGNhc2UgYWJvdmUsIHRoZSAqdmlzaXRlZCogY2FuIGJlIGEgbG9jYWwgdmFyaWFibGVcbiAgXG5gYGBrb3RsaW5cbmZ1biBkZnMoZ3JhcGg6IEdyYXBoKSB7XG4gICAgdmFsIHZpc2l0ZWQgPSBIYXNoU2V0Jmx0O1ZlcnRleCZndDsoKVxuICAgIGZ1biBkZnMoY3VycmVudDogVmVydGV4KSB7XG4gICAgICAgIGlmICghdmlzaXRlZC5hZGQoY3VycmVudCkpIHJldHVyblxuICAgICAgICBmb3IgKHYgaW4gY3VycmVudC5uZWlnaGJvcnMpXG4gICAgICAgICAgICBkZnModilcbiAgICB9XG4gIFxuICAgIGRmcyhncmFwaC52ZXJ0aWNlc1swXSlcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/functions.html#local-functions"
            ],
            "flags": 0,
            "guid": "P$VKW.R{5?",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Member Functions</b> scope",
                "<p>A member function is a function that is defined inside a class or object</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Sample</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Foo\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Member functions are called with dot notation</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">Sample</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #8f5902; font-style: italic\">// creates instance of class Sample and calls foo</span>\n</pre></div>\n<p>For more information on classes and overriding members see <a href=\"classes.html\">Classes</a> and <a href=\"classes.html#inheritance\">Inheritance</a></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDc5MjcsICJpZCI6ICIxNDg4MDM3NTIwNDg0LTAwMSIsICJtZCI6ICJBIG1lbWJlciBmdW5jdGlvbiBpcyBhIGZ1bmN0aW9uIHRoYXQgaXMgZGVmaW5lZCBpbnNpZGUgYSBjbGFzcyBvciBvYmplY3RcbiAgXG5gYGBrb3RsaW5cbmNsYXNzIFNhbXBsZSgpIHtcbiAgICBmdW4gZm9vKCkgeyBwcmludCgmcXVvdDtGb28mcXVvdDspIH1cbn1cbmBgYFxuICBcbk1lbWJlciBmdW5jdGlvbnMgYXJlIGNhbGxlZCB3aXRoIGRvdCBub3RhdGlvblxuICBcbmBgYGtvdGxpblxuU2FtcGxlKCkuZm9vKCkgLy8gY3JlYXRlcyBpbnN0YW5jZSBvZiBjbGFzcyBTYW1wbGUgYW5kIGNhbGxzIGZvb1xuYGBgXG4gIFxuRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gY2xhc3NlcyBhbmQgb3ZlcnJpZGluZyBtZW1iZXJzIHNlZSBbQ2xhc3Nlc10oY2xhc3Nlcy5odG1sKSBhbmQgW0luaGVyaXRhbmNlXShjbGFzc2VzLmh0bWwjaW5oZXJpdGFuY2UpXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/functions.html#member-functions"
            ],
            "flags": 0,
            "guid": "l<(kr=`~z2",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Generic</b> Functions",
                "<p>Functions can have generic parameters which are specified using angle brackets before the function name</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">singletonList</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>For more information on generic functions see <a href=\"generics.html\">Generics</a></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDc5NTYsICJpZCI6ICIxNDg4MDM3NTQ0MjIyLTAwMSIsICJtZCI6ICJGdW5jdGlvbnMgY2FuIGhhdmUgZ2VuZXJpYyBwYXJhbWV0ZXJzIHdoaWNoIGFyZSBzcGVjaWZpZWQgdXNpbmcgYW5nbGUgYnJhY2tldHMgYmVmb3JlIHRoZSBmdW5jdGlvbiBuYW1lXG4gIFxuYGBga290bGluXG5mdW4gJmx0O1QmZ3Q7IHNpbmdsZXRvbkxpc3QoaXRlbTogVCk6IExpc3QmbHQ7VCZndDsge1xuICAgIC8vIC4uLlxufVxuYGBgXG4gIFxuRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gZ2VuZXJpYyBmdW5jdGlvbnMgc2VlIFtHZW5lcmljc10oZ2VuZXJpY3MuaHRtbClcbiJ9---->",
                "https://kotlinlang.org/docs/reference/functions.html#generic-functions"
            ],
            "flags": 0,
            "guid": "La9n+rqW(m",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Tail recursive</b> functions",
                "<p>Kotlin supports a style of functional programming known as <a href=\"https://en.wikipedia.org/wiki/Tail_call\">tail recursion</a>.<br />\nThis allows some algorithms that would normally be written using loops to instead be written using a recursive function, but without the risk of stack overflow.</p>\n<p>When a function is marked with the <code>tailrec</code> modifier and meets the required form, the compiler optimises out the recursion, leaving behind a fast and efficient loop based version instead.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">tailrec</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">findFixPoint</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Double</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1.0</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Double</span>\n        <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #000000\">Math</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">cos</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #000000\">x</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000\">findFixPoint</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Math</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">cos</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">))</span>\n</pre></div>\n<p>This code calculates the fixpoint of cosine, which is a mathematical constant. It simply calls Math.cos repeatedly starting at 1.0 until the result doesn't change any more, yielding a result of 0.7390851332151607. The resulting code is equivalent to this more traditional style:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">findFixPoint</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">Double</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1.0</span>\n    <span style=\"color: #204a87; font-weight: bold\">while</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">true</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">y</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Math</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">cos</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">y</span>\n        <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">y</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>To be eligible for the <code>tailrec</code> modifier, a function must call itself as the last operation it performs.<br />\nYou cannot use tail recursion when there is more code after the recursive call, and you cannot use it within <code>try/catch/finally</code> blocks.<br />\nCurrently tail recursion is only supported in the JVM backend.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTQ2NjI2NjIsICJpZCI6ICIxNDg4MDM3NTYzNjQ1LTAwMSIsICJtZCI6ICJLb3RsaW4gc3VwcG9ydHMgYSBzdHlsZSBvZiBmdW5jdGlvbmFsIHByb2dyYW1taW5nIGtub3duIGFzIFt0YWlsIHJlY3Vyc2lvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGFpbF9jYWxsKS5cblRoaXMgYWxsb3dzIHNvbWUgYWxnb3JpdGhtcyB0aGF0IHdvdWxkIG5vcm1hbGx5IGJlIHdyaXR0ZW4gdXNpbmcgbG9vcHMgdG8gaW5zdGVhZCBiZSB3cml0dGVuIHVzaW5nIGEgcmVjdXJzaXZlIGZ1bmN0aW9uLCBidXQgd2l0aG91dCB0aGUgcmlzayBvZiBzdGFjayBvdmVyZmxvdy5cbiAgXG5XaGVuIGEgZnVuY3Rpb24gaXMgbWFya2VkIHdpdGggdGhlIGB0YWlscmVjYCBtb2RpZmllciBhbmQgbWVldHMgdGhlIHJlcXVpcmVkIGZvcm0sIHRoZSBjb21waWxlciBvcHRpbWlzZXMgb3V0IHRoZSByZWN1cnNpb24sIGxlYXZpbmcgYmVoaW5kIGEgZmFzdCBhbmQgZWZmaWNpZW50IGxvb3AgYmFzZWQgdmVyc2lvbiBpbnN0ZWFkLlxuICBcbmBgYGtvdGxpblxudGFpbHJlYyBmdW4gZmluZEZpeFBvaW50KHg6IERvdWJsZSA9IDEuMCk6IERvdWJsZVxuICAgICAgICA9IGlmICh4ID09IE1hdGguY29zKHgpKSB4IGVsc2UgZmluZEZpeFBvaW50KE1hdGguY29zKHgpKVxuYGBgXG4gIFxuVGhpcyBjb2RlIGNhbGN1bGF0ZXMgdGhlIGZpeHBvaW50IG9mIGNvc2luZSwgd2hpY2ggaXMgYSBtYXRoZW1hdGljYWwgY29uc3RhbnQuIEl0IHNpbXBseSBjYWxscyBNYXRoLmNvcyByZXBlYXRlZGx5IHN0YXJ0aW5nIGF0IDEuMCB1bnRpbCB0aGUgcmVzdWx0IGRvZXNuJmFwb3M7dCBjaGFuZ2UgYW55IG1vcmUsIHlpZWxkaW5nIGEgcmVzdWx0IG9mIDAuNzM5MDg1MTMzMjE1MTYwNy4gVGhlIHJlc3VsdGluZyBjb2RlIGlzIGVxdWl2YWxlbnQgdG8gdGhpcyBtb3JlIHRyYWRpdGlvbmFsIHN0eWxlOlxuICBcbmBgYGtvdGxpblxucHJpdmF0ZSBmdW4gZmluZEZpeFBvaW50KCk6IERvdWJsZSB7XG4gICAgdmFyIHggPSAxLjBcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YWwgeSA9IE1hdGguY29zKHgpXG4gICAgICAgIGlmICh4ID09IHkpIHJldHVybiB5XG4gICAgICAgIHggPSB5XG4gICAgfVxufVxuYGBgXG4gIFxuVG8gYmUgZWxpZ2libGUgZm9yIHRoZSBgdGFpbHJlY2AgbW9kaWZpZXIsIGEgZnVuY3Rpb24gbXVzdCBjYWxsIGl0c2VsZiBhcyB0aGUgbGFzdCBvcGVyYXRpb24gaXQgcGVyZm9ybXMuXG5Zb3UgY2Fubm90IHVzZSB0YWlsIHJlY3Vyc2lvbiB3aGVuIHRoZXJlIGlzIG1vcmUgY29kZSBhZnRlciB0aGUgcmVjdXJzaXZlIGNhbGwsIGFuZCB5b3UgY2Fubm90IHVzZSBpdCB3aXRoaW4gYHRyeS9jYXRjaC9maW5hbGx5YCBibG9ja3MuXG5DdXJyZW50bHkgdGFpbCByZWN1cnNpb24gaXMgb25seSBzdXBwb3J0ZWQgaW4gdGhlIEpWTSBiYWNrZW5kLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/functions.html#tail-recursive-functions"
            ],
            "flags": 0,
            "guid": "OHzeM03Y1!",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Functions",
                "FunctionsAndLambdas",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Higher-Order</b> Functions",
                "<p>A higher-order function is a function that takes functions as parameters, or returns a function.<br />\nA good example of such a function is <code>lock()</code> that takes a lock object and a function, acquires the lock, runs the function and releases the lock:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Lock</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">body</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #204a87; font-weight: bold\">try</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">body</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">finally</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">unlock</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Let's examine the code above: <code>body</code> has a <a href=\"#function-types\">function type</a>: <code>() -&gt; T</code>, so it's supposed to be a function that takes no parameters and returns a value of type <code>T</code>.<br />\nIt is invoked inside the <em class=\"keyword\">try</em>-block, while protected by the <code>lock</code>, and its result is returned by the <code>lock()</code> function.</p>\n<p>If we want to call <code>lock()</code>, we can pass another function to it as an argument (see <a href=\"reflection.html#function-references\">function references</a>):</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">toBeSynchronized</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">sharedResource</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">operation</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">result</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">toBeSynchronized</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>Another, often more convenient way is to pass a <a href=\"#lambda-expressions-and-anonymous-functions\">lambda expression</a>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">result</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">sharedResource</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">operation</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">})</span>\n</pre></div>\n<p>Lambda expressions are described in more <a href=\"#lambda-expressions-and-anonymous-functions\">detail below</a>, but for purposes of continuing this section, let's see a brief overview:</p>\n<ul>\n<li align=\"left\">A lambda expression is always surrounded by curly braces,</li>\n<li align=\"left\">Its parameters (if any) are declared before <code>-&gt;</code> (parameter types may be omitted),</li>\n<li align=\"left\">The body goes after <code>-&gt;</code> (when present).</li>\n</ul>\n<p>In Kotlin, there is a convention that if the last parameter to a function is a function, and you're passing a lambda expression as the corresponding argument, you can specify it outside of parentheses:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">lock</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">sharedResource</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">operation</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Another example of a higher-order function would be <code>map()</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">R</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">transform</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">R</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">R</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">result</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">arrayListOf</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">R</span><span style=\"color: #000000; font-weight: bold\">&gt;()</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000\">result</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">transform</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span><span style=\"color: #000000; font-weight: bold\">))</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">result</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>This function can be called as follows:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">doubled</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">map</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">value</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">value</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #0000cf; font-weight: bold\">2</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Note that the parentheses in a call can be omitted entirely if the lambda is the only argument to that call.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTE1NzMwMDUsICJpZCI6ICIxNDg4MDM3NTk2NTEyLTAwMSIsICJtZCI6ICJBIGhpZ2hlci1vcmRlciBmdW5jdGlvbiBpcyBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgZnVuY3Rpb25zIGFzIHBhcmFtZXRlcnMsIG9yIHJldHVybnMgYSBmdW5jdGlvbi5cbkEgZ29vZCBleGFtcGxlIG9mIHN1Y2ggYSBmdW5jdGlvbiBpcyBgbG9jaygpYCB0aGF0IHRha2VzIGEgbG9jayBvYmplY3QgYW5kIGEgZnVuY3Rpb24sIGFjcXVpcmVzIHRoZSBsb2NrLCBydW5zIHRoZSBmdW5jdGlvbiBhbmQgcmVsZWFzZXMgdGhlIGxvY2s6XG4gIFxuYGBga290bGluXG5mdW4gJmx0O1QmZ3Q7IGxvY2sobG9jazogTG9jaywgYm9keTogKCkgLSZndDsgVCk6IFQge1xuICAgIGxvY2subG9jaygpXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGJvZHkoKVxuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgbG9jay51bmxvY2soKVxuICAgIH1cbn1cbmBgYFxuICBcbkxldCZhcG9zO3MgZXhhbWluZSB0aGUgY29kZSBhYm92ZTogYGJvZHlgIGhhcyBhIFtmdW5jdGlvbiB0eXBlXSgjZnVuY3Rpb24tdHlwZXMpOiBgKCkgLSZndDsgVGAsIHNvIGl0JmFwb3M7cyBzdXBwb3NlZCB0byBiZSBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgbm8gcGFyYW1ldGVycyBhbmQgcmV0dXJucyBhIHZhbHVlIG9mIHR5cGUgYFRgLlxuSXQgaXMgaW52b2tlZCBpbnNpZGUgdGhlICp0cnkqezogLmtleXdvcmQgfS1ibG9jaywgd2hpbGUgcHJvdGVjdGVkIGJ5IHRoZSBgbG9ja2AsIGFuZCBpdHMgcmVzdWx0IGlzIHJldHVybmVkIGJ5IHRoZSBgbG9jaygpYCBmdW5jdGlvbi5cbiAgXG5JZiB3ZSB3YW50IHRvIGNhbGwgYGxvY2soKWAsIHdlIGNhbiBwYXNzIGFub3RoZXIgZnVuY3Rpb24gdG8gaXQgYXMgYW4gYXJndW1lbnQgKHNlZSBbZnVuY3Rpb24gcmVmZXJlbmNlc10ocmVmbGVjdGlvbi5odG1sI2Z1bmN0aW9uLXJlZmVyZW5jZXMpKTpcbiAgXG5gYGBrb3RsaW5cbmZ1biB0b0JlU3luY2hyb25pemVkKCkgPSBzaGFyZWRSZXNvdXJjZS5vcGVyYXRpb24oKVxuICBcbnZhbCByZXN1bHQgPSBsb2NrKGxvY2ssIDo6dG9CZVN5bmNocm9uaXplZClcbmBgYFxuICBcbkFub3RoZXIsIG9mdGVuIG1vcmUgY29udmVuaWVudCB3YXkgaXMgdG8gcGFzcyBhIFtsYW1iZGEgZXhwcmVzc2lvbl0oI2xhbWJkYS1leHByZXNzaW9ucy1hbmQtYW5vbnltb3VzLWZ1bmN0aW9ucyk6XG4gIFxuYGBga290bGluXG52YWwgcmVzdWx0ID0gbG9jayhsb2NrLCB7IHNoYXJlZFJlc291cmNlLm9wZXJhdGlvbigpIH0pXG5gYGBcbiAgXG5MYW1iZGEgZXhwcmVzc2lvbnMgYXJlIGRlc2NyaWJlZCBpbiBtb3JlIFtkZXRhaWwgYmVsb3ddKCNsYW1iZGEtZXhwcmVzc2lvbnMtYW5kLWFub255bW91cy1mdW5jdGlvbnMpLCBidXQgZm9yIHB1cnBvc2VzIG9mIGNvbnRpbnVpbmcgdGhpcyBzZWN0aW9uLCBsZXQmYXBvcztzIHNlZSBhIGJyaWVmIG92ZXJ2aWV3OlxuICBcbiogQSBsYW1iZGEgZXhwcmVzc2lvbiBpcyBhbHdheXMgc3Vycm91bmRlZCBieSBjdXJseSBicmFjZXMsXG4qIEl0cyBwYXJhbWV0ZXJzIChpZiBhbnkpIGFyZSBkZWNsYXJlZCBiZWZvcmUgYC0mZ3Q7YCAocGFyYW1ldGVyIHR5cGVzIG1heSBiZSBvbWl0dGVkKSxcbiogVGhlIGJvZHkgZ29lcyBhZnRlciBgLSZndDtgICh3aGVuIHByZXNlbnQpLlxuICBcbkluIEtvdGxpbiwgdGhlcmUgaXMgYSBjb252ZW50aW9uIHRoYXQgaWYgdGhlIGxhc3QgcGFyYW1ldGVyIHRvIGEgZnVuY3Rpb24gaXMgYSBmdW5jdGlvbiwgYW5kIHlvdSZhcG9zO3JlIHBhc3NpbmcgYSBsYW1iZGEgZXhwcmVzc2lvbiBhcyB0aGUgY29ycmVzcG9uZGluZyBhcmd1bWVudCwgeW91IGNhbiBzcGVjaWZ5IGl0IG91dHNpZGUgb2YgcGFyZW50aGVzZXM6XG4gIFxuYGBga290bGluXG5sb2NrIChsb2NrKSB7XG4gICAgc2hhcmVkUmVzb3VyY2Uub3BlcmF0aW9uKClcbn1cbmBgYFxuICBcbkFub3RoZXIgZXhhbXBsZSBvZiBhIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB3b3VsZCBiZSBgbWFwKClgOlxuICBcbmBgYGtvdGxpblxuZnVuICZsdDtULCBSJmd0OyBMaXN0Jmx0O1QmZ3Q7Lm1hcCh0cmFuc2Zvcm06IChUKSAtJmd0OyBSKTogTGlzdCZsdDtSJmd0OyB7XG4gICAgdmFsIHJlc3VsdCA9IGFycmF5TGlzdE9mJmx0O1ImZ3Q7KClcbiAgICBmb3IgKGl0ZW0gaW4gdGhpcylcbiAgICAgICAgcmVzdWx0LmFkZCh0cmFuc2Zvcm0oaXRlbSkpXG4gICAgcmV0dXJuIHJlc3VsdFxufVxuYGBgXG4gIFxuVGhpcyBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGFzIGZvbGxvd3M6XG4gIFxuYGBga290bGluXG52YWwgZG91YmxlZCA9IGludHMubWFwIHsgdmFsdWUgLSZndDsgdmFsdWUgKiAyIH1cbmBgYFxuICBcbk5vdGUgdGhhdCB0aGUgcGFyZW50aGVzZXMgaW4gYSBjYWxsIGNhbiBiZSBvbWl0dGVkIGVudGlyZWx5IGlmIHRoZSBsYW1iZGEgaXMgdGhlIG9ubHkgYXJndW1lbnQgdG8gdGhhdCBjYWxsLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/lambdas.html#higher-order-functions"
            ],
            "flags": 0,
            "guid": "XEw#;qv0p",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "Kotlin_1.1",
                "Lambdas"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>it</b>: <i>implicit name</i> of a single parameter",
                "<p>One other helpful convention is that if a function literal has only one parameter, its declaration may be omitted (along with the <code>-&gt;</code>), and its name will be <code>it</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">map</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #0000cf; font-weight: bold\">2</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>These conventions allow to write <a href=\"http://msdn.microsoft.com/en-us/library/bb308959.aspx\">LINQ-style</a> code:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">strings</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">5</span> <span style=\"color: #000000; font-weight: bold\">}.</span><span style=\"color: #000000\">sortBy</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">}.</span><span style=\"color: #000000\">map</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toUpperCase</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDk5MTgsICJpZCI6ICIxNDg4MDM3NzAzMDQxLTAwMSIsICJtZCI6ICJPbmUgb3RoZXIgaGVscGZ1bCBjb252ZW50aW9uIGlzIHRoYXQgaWYgYSBmdW5jdGlvbiBsaXRlcmFsIGhhcyBvbmx5IG9uZSBwYXJhbWV0ZXIsIGl0cyBkZWNsYXJhdGlvbiBtYXkgYmUgb21pdHRlZCAoYWxvbmcgd2l0aCB0aGUgYC0mZ3Q7YCksIGFuZCBpdHMgbmFtZSB3aWxsIGJlIGBpdGA6XG4gIFxuYGBga290bGluXG5pbnRzLm1hcCB7IGl0ICogMiB9XG5gYGBcbiAgXG5UaGVzZSBjb252ZW50aW9ucyBhbGxvdyB0byB3cml0ZSBbTElOUS1zdHlsZV0oaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2JiMzA4OTU5LmFzcHgpIGNvZGU6XG4gIFxuYGBga290bGluXG5zdHJpbmdzLmZpbHRlciB7IGl0Lmxlbmd0aCA9PSA1IH0uc29ydEJ5IHsgaXQgfS5tYXAgeyBpdC50b1VwcGVyQ2FzZSgpIH1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/lambdas.html#it-implicit-name-of-a-single-parameter"
            ],
            "flags": 0,
            "guid": "t&N<uEpuho",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "Kotlin_1.1",
                "Lambdas"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Lambda Expressions</b> and <b>Anonymous Functions</b>",
                "<p>A lambda expression or an anonymous function is a \"function literal\", i.e. a function that is not declared, but passed immediately as an expression.<br />\nConsider the following example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">max</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">strings</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #000000; font-weight: bold\">&lt;</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #000000; font-weight: bold\">})</span>\n</pre></div>\n<p>Function <code>max</code> is a higher-order function, i.e. it takes a function value as the second argument.<br />\nThis second argument is an expression that is itself a function, i.e. a function literal. As a function, it is equivalent to</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">compare</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Boolean</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #000000; font-weight: bold\">&lt;</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDk5NzgsICJpZCI6ICIxNDg4MDM3NzI3NTI3LTAwMSIsICJtZCI6ICJBIGxhbWJkYSBleHByZXNzaW9uIG9yIGFuIGFub255bW91cyBmdW5jdGlvbiBpcyBhICZxdW90O2Z1bmN0aW9uIGxpdGVyYWwmcXVvdDssIGkuZS4gYSBmdW5jdGlvbiB0aGF0IGlzIG5vdCBkZWNsYXJlZCwgYnV0IHBhc3NlZCBpbW1lZGlhdGVseSBhcyBhbiBleHByZXNzaW9uLlxuQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBleGFtcGxlOlxuICBcbmBgYGtvdGxpblxubWF4KHN0cmluZ3MsIHsgYSwgYiAtJmd0OyBhLmxlbmd0aCAmbHQ7IGIubGVuZ3RoIH0pXG5gYGBcbiAgXG5GdW5jdGlvbiBgbWF4YCBpcyBhIGhpZ2hlci1vcmRlciBmdW5jdGlvbiwgaS5lLiBpdCB0YWtlcyBhIGZ1bmN0aW9uIHZhbHVlIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG5UaGlzIHNlY29uZCBhcmd1bWVudCBpcyBhbiBleHByZXNzaW9uIHRoYXQgaXMgaXRzZWxmIGEgZnVuY3Rpb24sIGkuZS4gYSBmdW5jdGlvbiBsaXRlcmFsLiBBcyBhIGZ1bmN0aW9uLCBpdCBpcyBlcXVpdmFsZW50IHRvXG4gIFxuYGBga290bGluXG5mdW4gY29tcGFyZShhOiBTdHJpbmcsIGI6IFN0cmluZyk6IEJvb2xlYW4gPSBhLmxlbmd0aCAmbHQ7IGIubGVuZ3RoXG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/lambdas.html#lambda-expressions-and-anonymous-functions"
            ],
            "flags": 0,
            "guid": "oZH0K8%1]R",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "Kotlin_1.1",
                "Lambdas"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Function <b>Types</b>",
                "<p>For a function to accept another function as a parameter, we have to specify a function type for that parameter.</p>\n<p>For example the abovementioned function <code>max</code> is defined as follows:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">max</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">collection</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Collection</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;,</span> <span style=\"color: #000000\">less</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Boolean</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">max</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">collection</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">max</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #204a87; font-weight: bold\">null</span> <span style=\"color: #000000; font-weight: bold\">||</span> <span style=\"color: #000000\">less</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">max</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">))</span>\n            <span style=\"color: #000000\">max</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">it</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">max</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The parameter <code>less</code> is of type <code>(T, T) -&gt; Boolean</code>, i.e. a function that takes two parameters of type <code>T</code> and returns a <code>Boolean</code>: true if the first one is smaller than the second one.</p>\n<p>In the body, line 4, <code>less</code> is used as a function: it is called by passing two arguments of type <code>T</code>.</p>\n<p>A function type is written as above, or may have named parameters, if you want to document the meaning of each parameter.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">compare</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTAwMjksICJpZCI6ICIxNDg4MDM3NzY1NjAwLTAwMSIsICJtZCI6ICJGb3IgYSBmdW5jdGlvbiB0byBhY2NlcHQgYW5vdGhlciBmdW5jdGlvbiBhcyBhIHBhcmFtZXRlciwgd2UgaGF2ZSB0byBzcGVjaWZ5IGEgZnVuY3Rpb24gdHlwZSBmb3IgdGhhdCBwYXJhbWV0ZXIuXG4gIFxuRm9yIGV4YW1wbGUgdGhlIGFib3ZlbWVudGlvbmVkIGZ1bmN0aW9uIGBtYXhgIGlzIGRlZmluZWQgYXMgZm9sbG93czpcbiAgXG5gYGBrb3RsaW5cbmZ1biAmbHQ7VCZndDsgbWF4KGNvbGxlY3Rpb246IENvbGxlY3Rpb24mbHQ7VCZndDssIGxlc3M6IChULCBUKSAtJmd0OyBCb29sZWFuKTogVD8ge1xuICAgIHZhciBtYXg6IFQ/ID0gbnVsbFxuICAgIGZvciAoaXQgaW4gY29sbGVjdGlvbilcbiAgICAgICAgaWYgKG1heCA9PSBudWxsIHx8IGxlc3MobWF4LCBpdCkpXG4gICAgICAgICAgICBtYXggPSBpdFxuICAgIHJldHVybiBtYXhcbn1cbmBgYFxuICBcblRoZSBwYXJhbWV0ZXIgYGxlc3NgIGlzIG9mIHR5cGUgYChULCBUKSAtJmd0OyBCb29sZWFuYCwgaS5lLiBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdHdvIHBhcmFtZXRlcnMgb2YgdHlwZSBgVGAgYW5kIHJldHVybnMgYSBgQm9vbGVhbmA6IHRydWUgaWYgdGhlIGZpcnN0IG9uZSBpcyBzbWFsbGVyIHRoYW4gdGhlIHNlY29uZCBvbmUuXG4gIFxuSW4gdGhlIGJvZHksIGxpbmUgNCwgYGxlc3NgIGlzIHVzZWQgYXMgYSBmdW5jdGlvbjogaXQgaXMgY2FsbGVkIGJ5IHBhc3NpbmcgdHdvIGFyZ3VtZW50cyBvZiB0eXBlIGBUYC5cbiAgXG5BIGZ1bmN0aW9uIHR5cGUgaXMgd3JpdHRlbiBhcyBhYm92ZSwgb3IgbWF5IGhhdmUgbmFtZWQgcGFyYW1ldGVycywgaWYgeW91IHdhbnQgdG8gZG9jdW1lbnQgdGhlIG1lYW5pbmcgb2YgZWFjaCBwYXJhbWV0ZXIuXG4gIFxuYGBga290bGluXG52YWwgY29tcGFyZTogKHg6IFQsIHk6IFQpIC0mZ3Q7IEludCA9IC4uLlxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/lambdas.html#function-types"
            ],
            "flags": 0,
            "guid": "LErl?<e15y",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "Kotlin_1.1",
                "Lambdas"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div><b>Lambda Expression</b> Syntax</div>",
                "<p>The full syntactic form of lambda expressions, i.e. literals of function types, is as follows:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">sum</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">y</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>A lambda expression is always surrounded by curly braces, parameter declarations in the full syntactic form go inside parentheses and have optional type annotations, the body goes after an <code>-&gt;</code> sign. <br />\nIf the inferred return type of the lambda is not <code>Unit</code>, the last (or possibly single) expression inside the lambda body is treated as the return value.</p>\n<p>If we leave all the optional annotations out, what's left looks like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">sum</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">y</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">y</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>It's very common that a lambda expression has only one parameter.<br />\nIf Kotlin can figure the signature out itself, it allows us not to declare the only parameter, and will implicitly declare it for us under the name <code>it</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #8f5902; font-style: italic\">// this literal is of type '(it: Int) -&gt; Boolean'</span>\n</pre></div>\n<p>We can explicitly return a value from the lambda using the <a href=\"returns.html#return-at-labels\">qualified return</a> syntax. Otherwise, the value of the last expression is implicitly returned.<br />\nTherefore, the two following <strong>snippets are equivalent</strong>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">shouldFilter</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> \n    <span style=\"color: #000000\">shouldFilter</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">shouldFilter</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> \n    <span style=\"color: #204a87; font-weight: bold\">return</span><span style=\"color: #000000\">@filter</span> <span style=\"color: #000000\">shouldFilter</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p><strong>Note that if a function takes another function as the last parameter, the lambda expression argument can be passed outside the parenthesized argument list.</strong></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzE2MTksICJpZCI6ICIxNDg4MDM3Nzk2OTIxLTAwMSIsICJtZCI6ICJUaGUgZnVsbCBzeW50YWN0aWMgZm9ybSBvZiBsYW1iZGEgZXhwcmVzc2lvbnMsIGkuZS4gbGl0ZXJhbHMgb2YgZnVuY3Rpb24gdHlwZXMsIGlzIGFzIGZvbGxvd3M6XG4gIFxuYGBga290bGluXG52YWwgc3VtID0geyB4OiBJbnQsIHk6IEludCAtJmd0OyB4ICsgeSB9XG5gYGBcbiAgXG5BIGxhbWJkYSBleHByZXNzaW9uIGlzIGFsd2F5cyBzdXJyb3VuZGVkIGJ5IGN1cmx5IGJyYWNlcywgcGFyYW1ldGVyIGRlY2xhcmF0aW9ucyBpbiB0aGUgZnVsbCBzeW50YWN0aWMgZm9ybSBnbyBpbnNpZGUgcGFyZW50aGVzZXMgYW5kIGhhdmUgb3B0aW9uYWwgdHlwZSBhbm5vdGF0aW9ucywgdGhlIGJvZHkgZ29lcyBhZnRlciBhbiBgLSZndDtgIHNpZ24uIFxuSWYgdGhlIGluZmVycmVkIHJldHVybiB0eXBlIG9mIHRoZSBsYW1iZGEgaXMgbm90IGBVbml0YCwgdGhlIGxhc3QgKG9yIHBvc3NpYmx5IHNpbmdsZSkgZXhwcmVzc2lvbiBpbnNpZGUgdGhlIGxhbWJkYSBib2R5IGlzIHRyZWF0ZWQgYXMgdGhlIHJldHVybiB2YWx1ZS5cbiAgXG5JZiB3ZSBsZWF2ZSBhbGwgdGhlIG9wdGlvbmFsIGFubm90YXRpb25zIG91dCwgd2hhdCZhcG9zO3MgbGVmdCBsb29rcyBsaWtlIHRoaXM6XG4gIFxuYGBga290bGluXG52YWwgc3VtOiAoSW50LCBJbnQpIC0mZ3Q7IEludCA9IHsgeCwgeSAtJmd0OyB4ICsgeSB9XG5gYGBcbiAgXG5JdCZhcG9zO3MgdmVyeSBjb21tb24gdGhhdCBhIGxhbWJkYSBleHByZXNzaW9uIGhhcyBvbmx5IG9uZSBwYXJhbWV0ZXIuXG5JZiBLb3RsaW4gY2FuIGZpZ3VyZSB0aGUgc2lnbmF0dXJlIG91dCBpdHNlbGYsIGl0IGFsbG93cyB1cyBub3QgdG8gZGVjbGFyZSB0aGUgb25seSBwYXJhbWV0ZXIsIGFuZCB3aWxsIGltcGxpY2l0bHkgZGVjbGFyZSBpdCBmb3IgdXMgdW5kZXIgdGhlIG5hbWUgYGl0YDpcbiAgXG5gYGBrb3RsaW5cbmludHMuZmlsdGVyIHsgaXQgJmd0OyAwIH0gLy8gdGhpcyBsaXRlcmFsIGlzIG9mIHR5cGUgJmFwb3M7KGl0OiBJbnQpIC0mZ3Q7IEJvb2xlYW4mYXBvcztcbmBgYFxuICBcbldlIGNhbiBleHBsaWNpdGx5IHJldHVybiBhIHZhbHVlIGZyb20gdGhlIGxhbWJkYSB1c2luZyB0aGUgW3F1YWxpZmllZCByZXR1cm5dKHJldHVybnMuaHRtbCNyZXR1cm4tYXQtbGFiZWxzKSBzeW50YXguIE90aGVyd2lzZSwgdGhlIHZhbHVlIG9mIHRoZSBsYXN0IGV4cHJlc3Npb24gaXMgaW1wbGljaXRseSByZXR1cm5lZC5cblRoZXJlZm9yZSwgdGhlIHR3byBmb2xsb3dpbmcgKipzbmlwcGV0cyBhcmUgZXF1aXZhbGVudCoqOlxuICBcbmBgYGtvdGxpblxuaW50cy5maWx0ZXIge1xuICAgIHZhbCBzaG91bGRGaWx0ZXIgPSBpdCAmZ3Q7IDAgXG4gICAgc2hvdWxkRmlsdGVyXG59XG4gIFxuaW50cy5maWx0ZXIge1xuICAgIHZhbCBzaG91bGRGaWx0ZXIgPSBpdCAmZ3Q7IDAgXG4gICAgcmV0dXJuQGZpbHRlciBzaG91bGRGaWx0ZXJcbn1cbmBgYFxuICBcbioqTm90ZSB0aGF0IGlmIGEgZnVuY3Rpb24gdGFrZXMgYW5vdGhlciBmdW5jdGlvbiBhcyB0aGUgbGFzdCBwYXJhbWV0ZXIsIHRoZSBsYW1iZGEgZXhwcmVzc2lvbiBhcmd1bWVudCBjYW4gYmUgcGFzc2VkIG91dHNpZGUgdGhlIHBhcmVudGhlc2l6ZWQgYXJndW1lbnQgbGlzdC4qKlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/lambdas.html#lambda-expression-syntax"
            ],
            "flags": 0,
            "guid": "z9`ZcF]mnL",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "Kotlin_1.1",
                "Lambdas"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Anonymous</b> Functions",
                "<p>One thing missing from the lambda expression syntax presented above is the ability to specify the return type of the function. In most cases, this is unnecessary because the return type can be inferred automatically.<br />\n<strong>However, if you do need to specify it explicitly, you can use an alternative syntax: an <em>anonymous function</em>.</strong></p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">y</span>\n</pre></div>\n<p>An anonymous function looks very much like a regular function declaration, except that its name is omitted. <br />\nIts body can be either an expression (as shown above) or a block:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">y</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The parameters and the return type are specified in the same way as for regular functions, <strong>except that the parameter</strong><br />\n<strong>types can be omitted</strong> if they can be inferred from context:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">fun</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">item</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p><em>The return type inference for anonymous functions works just like for normal functions:</em> the return type is inferred automatically for anonymous functions with an expression body and has to be specified explicitly (or is assumed to be <code>Unit</code>) for anonymous functions with a block body.</p>\n<p>Note that anonymous function parameters are always passed inside the parentheses. The shorthand syntax allowing to leave the function outside the parentheses works only for lambda expressions.</p>\n<p>One other difference between lambda expressions and anonymous functions is the behavior of <a href=\"inline-functions.html#non-local-returns\">non-local returns</a>. A <em class=\"keyword\">return</em>  statement without a label always returns from the function declared with the <em class=\"keyword\">fun</em> keyword.<br />\nThis means that a <em class=\"keyword\">return</em> inside a lambda expression will return from the enclosing function, whereas a <em class=\"keyword\">return</em> inside an anonymous function will return from the anonymous function itself.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTI5NjMxNTYsICJpZCI6ICIxNDg4MDM3ODQzNDc2LTAwMSIsICJtZCI6ICJPbmUgdGhpbmcgbWlzc2luZyBmcm9tIHRoZSBsYW1iZGEgZXhwcmVzc2lvbiBzeW50YXggcHJlc2VudGVkIGFib3ZlIGlzIHRoZSBhYmlsaXR5IHRvIHNwZWNpZnkgdGhlIHJldHVybiB0eXBlIG9mIHRoZSBmdW5jdGlvbi4gSW4gbW9zdCBjYXNlcywgdGhpcyBpcyB1bm5lY2Vzc2FyeSBiZWNhdXNlIHRoZSByZXR1cm4gdHlwZSBjYW4gYmUgaW5mZXJyZWQgYXV0b21hdGljYWxseS5cbioqSG93ZXZlciwgaWYgeW91IGRvIG5lZWQgdG8gc3BlY2lmeSBpdCBleHBsaWNpdGx5LCB5b3UgY2FuIHVzZSBhbiBhbHRlcm5hdGl2ZSBzeW50YXg6IGFuIF9hbm9ueW1vdXMgZnVuY3Rpb25fLioqXG4gIFxuYGBga290bGluXG5mdW4oeDogSW50LCB5OiBJbnQpOiBJbnQgPSB4ICsgeVxuYGBgXG4gIFxuQW4gYW5vbnltb3VzIGZ1bmN0aW9uIGxvb2tzIHZlcnkgbXVjaCBsaWtlIGEgcmVndWxhciBmdW5jdGlvbiBkZWNsYXJhdGlvbiwgZXhjZXB0IHRoYXQgaXRzIG5hbWUgaXMgb21pdHRlZC4gXG5JdHMgYm9keSBjYW4gYmUgZWl0aGVyIGFuIGV4cHJlc3Npb24gKGFzIHNob3duIGFib3ZlKSBvciBhIGJsb2NrOlxuICBcbmBgYGtvdGxpblxuZnVuKHg6IEludCwgeTogSW50KTogSW50IHtcbiAgICByZXR1cm4geCArIHlcbn1cbmBgYFxuICBcblRoZSBwYXJhbWV0ZXJzIGFuZCB0aGUgcmV0dXJuIHR5cGUgYXJlIHNwZWNpZmllZCBpbiB0aGUgc2FtZSB3YXkgYXMgZm9yIHJlZ3VsYXIgZnVuY3Rpb25zLCAqKmV4Y2VwdCB0aGF0IHRoZSBwYXJhbWV0ZXIqKlxuKip0eXBlcyBjYW4gYmUgb21pdHRlZCoqIGlmIHRoZXkgY2FuIGJlIGluZmVycmVkIGZyb20gY29udGV4dDpcbiAgXG5gYGBrb3RsaW5cbmludHMuZmlsdGVyKGZ1bihpdGVtKSA9IGl0ZW0gJmd0OyAwKVxuYGBgXG4gIFxuX1RoZSByZXR1cm4gdHlwZSBpbmZlcmVuY2UgZm9yIGFub255bW91cyBmdW5jdGlvbnMgd29ya3MganVzdCBsaWtlIGZvciBub3JtYWwgZnVuY3Rpb25zOl8gdGhlIHJldHVybiB0eXBlIGlzIGluZmVycmVkIGF1dG9tYXRpY2FsbHkgZm9yIGFub255bW91cyBmdW5jdGlvbnMgd2l0aCBhbiBleHByZXNzaW9uIGJvZHkgYW5kIGhhcyB0byBiZSBzcGVjaWZpZWQgZXhwbGljaXRseSAob3IgaXMgYXNzdW1lZCB0byBiZSBgVW5pdGApIGZvciBhbm9ueW1vdXMgZnVuY3Rpb25zIHdpdGggYSBibG9jayBib2R5LlxuICBcbk5vdGUgdGhhdCBhbm9ueW1vdXMgZnVuY3Rpb24gcGFyYW1ldGVycyBhcmUgYWx3YXlzIHBhc3NlZCBpbnNpZGUgdGhlIHBhcmVudGhlc2VzLiBUaGUgc2hvcnRoYW5kIHN5bnRheCBhbGxvd2luZyB0byBsZWF2ZSB0aGUgZnVuY3Rpb24gb3V0c2lkZSB0aGUgcGFyZW50aGVzZXMgd29ya3Mgb25seSBmb3IgbGFtYmRhIGV4cHJlc3Npb25zLlxuICBcbk9uZSBvdGhlciBkaWZmZXJlbmNlIGJldHdlZW4gbGFtYmRhIGV4cHJlc3Npb25zIGFuZCBhbm9ueW1vdXMgZnVuY3Rpb25zIGlzIHRoZSBiZWhhdmlvciBvZiBbbm9uLWxvY2FsIHJldHVybnNdKGlubGluZS1mdW5jdGlvbnMuaHRtbCNub24tbG9jYWwtcmV0dXJucykuIEEgKnJldHVybip7OiAua2V5d29yZCB9ICBzdGF0ZW1lbnQgd2l0aG91dCBhIGxhYmVsIGFsd2F5cyByZXR1cm5zIGZyb20gdGhlIGZ1bmN0aW9uIGRlY2xhcmVkIHdpdGggdGhlICpmdW4qezogLmtleXdvcmQgfSBrZXl3b3JkLlxuVGhpcyBtZWFucyB0aGF0IGEgKnJldHVybip7OiAua2V5d29yZCB9IGluc2lkZSBhIGxhbWJkYSBleHByZXNzaW9uIHdpbGwgcmV0dXJuIGZyb20gdGhlIGVuY2xvc2luZyBmdW5jdGlvbiwgd2hlcmVhcyBhICpyZXR1cm4qezogLmtleXdvcmQgfSBpbnNpZGUgYW4gYW5vbnltb3VzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZyb20gdGhlIGFub255bW91cyBmdW5jdGlvbiBpdHNlbGYuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/lambdas.html#anonymous-functions"
            ],
            "flags": 0,
            "guid": "G>6PqXc[CG",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "Kotlin_1.1",
                "Lambdas"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Closures</b>",
                "<p>A lambda expression or anonymous function (as well as a <a href=\"functions.html#local-functions\">local function</a> and an <a href=\"object-declarations.html#object-expressions\">object expression</a>) can access its <em>closure</em>, i.e. the variables declared in the outer scope.<br />\nUnlike Java, the variables captured in the closure can be modified:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">var</span> <span style=\"color: #000000\">sum</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n<span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> <span style=\"color: #000000; font-weight: bold\">}.</span><span style=\"color: #000000\">forEach</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">sum</span> <span style=\"color: #000000; font-weight: bold\">+=</span> <span style=\"color: #000000\">it</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">sum</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk5NTU2MDcsICJpZCI6ICIxNDg4MDM3ODY5ODExLTAwMSIsICJtZCI6ICJBIGxhbWJkYSBleHByZXNzaW9uIG9yIGFub255bW91cyBmdW5jdGlvbiAoYXMgd2VsbCBhcyBhIFtsb2NhbCBmdW5jdGlvbl0oZnVuY3Rpb25zLmh0bWwjbG9jYWwtZnVuY3Rpb25zKSBhbmQgYW4gW29iamVjdCBleHByZXNzaW9uXShvYmplY3QtZGVjbGFyYXRpb25zLmh0bWwjb2JqZWN0LWV4cHJlc3Npb25zKSkgY2FuIGFjY2VzcyBpdHMgX2Nsb3N1cmVfLCBpLmUuIHRoZSB2YXJpYWJsZXMgZGVjbGFyZWQgaW4gdGhlIG91dGVyIHNjb3BlLlxuVW5saWtlIEphdmEsIHRoZSB2YXJpYWJsZXMgY2FwdHVyZWQgaW4gdGhlIGNsb3N1cmUgY2FuIGJlIG1vZGlmaWVkOlxuICBcbmBgYGtvdGxpblxudmFyIHN1bSA9IDBcbmludHMuZmlsdGVyIHsgaXQgJmd0OyAwIH0uZm9yRWFjaCB7XG4gICAgc3VtICs9IGl0XG59XG5wcmludChzdW0pXG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/lambdas.html#closures"
            ],
            "flags": 0,
            "guid": "kTZ_:i.|:x",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "Kotlin_1.1",
                "Lambdas"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>Function Literals</i> <b>with Receiver</b>",
                "<p>Kotlin provides the ability to call a function literal with a specified <em>receiver object</em>.<br />\nInside the body of the function literal, you can call methods on that receiver object without any additional qualifiers.</p>\n<p>This is similar to extension functions, which allow you to access members of the receiver object inside the body of the function.<br />\nOne of the most important examples of their usage is <a href=\"type-safe-builders.html\">Type-safe Groovy-style builders</a>.</p>\n<p>The type of such a function literal is a function type with receiver:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">sum</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">.(</span><span style=\"color: #000000\">other</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Int</span>\n</pre></div>\n<p>The function literal can be called as if it were a method on the receiver object:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000\">sum</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>The anonymous function syntax allows you to specify the receiver type of a function literal directly.<br />\nThis can be useful if you need to declare a variable of a function type with receiver, and to use it later.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">sum</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">.(</span><span style=\"color: #000000\">other</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">other</span>\n</pre></div>\n<p>Lambda expressions can be used as function literals with receiver when the receiver type can be inferred from context.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">HTML</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">body</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">html</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">HTML</span><span style=\"color: #000000; font-weight: bold\">.()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">HTML</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">html</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">HTML</span><span style=\"color: #000000; font-weight: bold\">()</span>  <span style=\"color: #8f5902; font-style: italic\">// create the receiver object</span>\n    <span style=\"color: #000000\">html</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">()</span>        <span style=\"color: #8f5902; font-style: italic\">// pass the receiver object to the lambda</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">html</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n\n<span style=\"color: #000000\">html</span> <span style=\"color: #000000; font-weight: bold\">{</span>       <span style=\"color: #8f5902; font-style: italic\">// lambda with receiver begins here</span>\n    <span style=\"color: #000000\">body</span><span style=\"color: #000000; font-weight: bold\">()</span>   <span style=\"color: #8f5902; font-style: italic\">// calling a method on the receiver object</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjE0NzYsICJpZCI6ICIxNDg4MDM3ODg4MTgyLTAwMSIsICJtZCI6ICJLb3RsaW4gcHJvdmlkZXMgdGhlIGFiaWxpdHkgdG8gY2FsbCBhIGZ1bmN0aW9uIGxpdGVyYWwgd2l0aCBhIHNwZWNpZmllZCBfcmVjZWl2ZXIgb2JqZWN0Xy5cbkluc2lkZSB0aGUgYm9keSBvZiB0aGUgZnVuY3Rpb24gbGl0ZXJhbCwgeW91IGNhbiBjYWxsIG1ldGhvZHMgb24gdGhhdCByZWNlaXZlciBvYmplY3Qgd2l0aG91dCBhbnkgYWRkaXRpb25hbCBxdWFsaWZpZXJzLlxuICBcblRoaXMgaXMgc2ltaWxhciB0byBleHRlbnNpb24gZnVuY3Rpb25zLCB3aGljaCBhbGxvdyB5b3UgdG8gYWNjZXNzIG1lbWJlcnMgb2YgdGhlIHJlY2VpdmVyIG9iamVjdCBpbnNpZGUgdGhlIGJvZHkgb2YgdGhlIGZ1bmN0aW9uLlxuT25lIG9mIHRoZSBtb3N0IGltcG9ydGFudCBleGFtcGxlcyBvZiB0aGVpciB1c2FnZSBpcyBbVHlwZS1zYWZlIEdyb292eS1zdHlsZSBidWlsZGVyc10odHlwZS1zYWZlLWJ1aWxkZXJzLmh0bWwpLlxuICBcblRoZSB0eXBlIG9mIHN1Y2ggYSBmdW5jdGlvbiBsaXRlcmFsIGlzIGEgZnVuY3Rpb24gdHlwZSB3aXRoIHJlY2VpdmVyOlxuICBcbmBgYGtvdGxpblxuc3VtIDogSW50LihvdGhlcjogSW50KSAtJmd0OyBJbnRcbmBgYFxuICBcblRoZSBmdW5jdGlvbiBsaXRlcmFsIGNhbiBiZSBjYWxsZWQgYXMgaWYgaXQgd2VyZSBhIG1ldGhvZCBvbiB0aGUgcmVjZWl2ZXIgb2JqZWN0OlxuICBcbmBgYGtvdGxpblxuMS5zdW0oMilcbmBgYFxuICBcblRoZSBhbm9ueW1vdXMgZnVuY3Rpb24gc3ludGF4IGFsbG93cyB5b3UgdG8gc3BlY2lmeSB0aGUgcmVjZWl2ZXIgdHlwZSBvZiBhIGZ1bmN0aW9uIGxpdGVyYWwgZGlyZWN0bHkuXG5UaGlzIGNhbiBiZSB1c2VmdWwgaWYgeW91IG5lZWQgdG8gZGVjbGFyZSBhIHZhcmlhYmxlIG9mIGEgZnVuY3Rpb24gdHlwZSB3aXRoIHJlY2VpdmVyLCBhbmQgdG8gdXNlIGl0IGxhdGVyLlxuICBcbmBgYGtvdGxpblxudmFsIHN1bSA9IGZ1biBJbnQuKG90aGVyOiBJbnQpOiBJbnQgPSB0aGlzICsgb3RoZXJcbmBgYFxuICBcbkxhbWJkYSBleHByZXNzaW9ucyBjYW4gYmUgdXNlZCBhcyBmdW5jdGlvbiBsaXRlcmFscyB3aXRoIHJlY2VpdmVyIHdoZW4gdGhlIHJlY2VpdmVyIHR5cGUgY2FuIGJlIGluZmVycmVkIGZyb20gY29udGV4dC5cbiAgXG5gYGBrb3RsaW5cbmNsYXNzIEhUTUwge1xuICAgIGZ1biBib2R5KCkgeyAuLi4gfVxufVxuICBcbmZ1biBodG1sKGluaXQ6IEhUTUwuKCkgLSZndDsgVW5pdCk6IEhUTUwge1xuICAgIHZhbCBodG1sID0gSFRNTCgpICAvLyBjcmVhdGUgdGhlIHJlY2VpdmVyIG9iamVjdFxuICAgIGh0bWwuaW5pdCgpICAgICAgICAvLyBwYXNzIHRoZSByZWNlaXZlciBvYmplY3QgdG8gdGhlIGxhbWJkYVxuICAgIHJldHVybiBodG1sXG59XG4gIFxuICBcbmh0bWwgeyAgICAgICAvLyBsYW1iZGEgd2l0aCByZWNlaXZlciBiZWdpbnMgaGVyZVxuICAgIGJvZHkoKSAgIC8vIGNhbGxpbmcgYSBtZXRob2Qgb24gdGhlIHJlY2VpdmVyIG9iamVjdFxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver"
            ],
            "flags": 0,
            "guid": "d(G]5Oi~Lx",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "Kotlin_1.1",
                "Lambdas"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Inline</b> Functions",
                "<p>Using <a href=\"lambdas.html\">higher-order functions</a> imposes certain runtime penalties: each function is an object, and it captures a closure, i.e. those variables that are accessed in the body of the function.<br />\nMemory allocations (both for function objects and classes) and virtual calls introduce runtime overhead.</p>\n<p>But it appears that in many cases this kind of overhead can be eliminated by inlining the lambda expressions.<br />\nThe functions shown below are good examples of this situation. I.e., the <code>lock()</code> function could be easily inlined at call-sites.<br />\nConsider the following case:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">l</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Instead of creating a function object for the parameter and generating a call, the compiler could emit the following code</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">l</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #204a87; font-weight: bold\">try</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">finally</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">l</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">unlock</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Isn't it what we wanted from the very beginning?</p>\n<p>To make the compiler do this, we need to mark the <code>lock()</code> function with the <code>inline</code> modifier:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;(</span><span style=\"color: #000000\">lock</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Lock</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">body</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The <code>inline</code> modifier affects both the function itself and the lambdas passed to it: all of those will be inlined into the call site.</p>\n<p>Inlining may cause the generated code to grow, but if we do it in a reasonable way (do not inline big functions it will pay off in performance, especially at \"megamorphic\" call-sites inside loops.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTAzNzgsICJpZCI6ICIxNDg4MDM3OTQwMzU1LTAwMSIsICJtZCI6ICJVc2luZyBbaGlnaGVyLW9yZGVyIGZ1bmN0aW9uc10obGFtYmRhcy5odG1sKSBpbXBvc2VzIGNlcnRhaW4gcnVudGltZSBwZW5hbHRpZXM6IGVhY2ggZnVuY3Rpb24gaXMgYW4gb2JqZWN0LCBhbmQgaXQgY2FwdHVyZXMgYSBjbG9zdXJlLCBpLmUuIHRob3NlIHZhcmlhYmxlcyB0aGF0IGFyZSBhY2Nlc3NlZCBpbiB0aGUgYm9keSBvZiB0aGUgZnVuY3Rpb24uXG5NZW1vcnkgYWxsb2NhdGlvbnMgKGJvdGggZm9yIGZ1bmN0aW9uIG9iamVjdHMgYW5kIGNsYXNzZXMpIGFuZCB2aXJ0dWFsIGNhbGxzIGludHJvZHVjZSBydW50aW1lIG92ZXJoZWFkLlxuICBcbkJ1dCBpdCBhcHBlYXJzIHRoYXQgaW4gbWFueSBjYXNlcyB0aGlzIGtpbmQgb2Ygb3ZlcmhlYWQgY2FuIGJlIGVsaW1pbmF0ZWQgYnkgaW5saW5pbmcgdGhlIGxhbWJkYSBleHByZXNzaW9ucy5cblRoZSBmdW5jdGlvbnMgc2hvd24gYmVsb3cgYXJlIGdvb2QgZXhhbXBsZXMgb2YgdGhpcyBzaXR1YXRpb24uIEkuZS4sIHRoZSBgbG9jaygpYCBmdW5jdGlvbiBjb3VsZCBiZSBlYXNpbHkgaW5saW5lZCBhdCBjYWxsLXNpdGVzLlxuQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBjYXNlOlxuICBcbmBgYGtvdGxpblxubG9jayhsKSB7IGZvbygpIH1cbmBgYFxuICBcbkluc3RlYWQgb2YgY3JlYXRpbmcgYSBmdW5jdGlvbiBvYmplY3QgZm9yIHRoZSBwYXJhbWV0ZXIgYW5kIGdlbmVyYXRpbmcgYSBjYWxsLCB0aGUgY29tcGlsZXIgY291bGQgZW1pdCB0aGUgZm9sbG93aW5nIGNvZGVcbiAgXG5gYGBrb3RsaW5cbmwubG9jaygpXG50cnkge1xuICAgIGZvbygpXG59XG5maW5hbGx5IHtcbiAgICBsLnVubG9jaygpXG59XG5gYGBcbiAgXG5Jc24mYXBvczt0IGl0IHdoYXQgd2Ugd2FudGVkIGZyb20gdGhlIHZlcnkgYmVnaW5uaW5nP1xuICBcblRvIG1ha2UgdGhlIGNvbXBpbGVyIGRvIHRoaXMsIHdlIG5lZWQgdG8gbWFyayB0aGUgYGxvY2soKWAgZnVuY3Rpb24gd2l0aCB0aGUgYGlubGluZWAgbW9kaWZpZXI6XG4gIFxuYGBga290bGluXG5pbmxpbmUgZnVuIGxvY2smbHQ7VCZndDsobG9jazogTG9jaywgYm9keTogKCkgLSZndDsgVCk6IFQge1xuICAgIC8vIC4uLlxufVxuYGBgXG4gIFxuVGhlIGBpbmxpbmVgIG1vZGlmaWVyIGFmZmVjdHMgYm90aCB0aGUgZnVuY3Rpb24gaXRzZWxmIGFuZCB0aGUgbGFtYmRhcyBwYXNzZWQgdG8gaXQ6IGFsbCBvZiB0aG9zZSB3aWxsIGJlIGlubGluZWQgaW50byB0aGUgY2FsbCBzaXRlLlxuICBcbklubGluaW5nIG1heSBjYXVzZSB0aGUgZ2VuZXJhdGVkIGNvZGUgdG8gZ3JvdywgYnV0IGlmIHdlIGRvIGl0IGluIGEgcmVhc29uYWJsZSB3YXkgKGRvIG5vdCBpbmxpbmUgYmlnIGZ1bmN0aW9ucyBpdCB3aWxsIHBheSBvZmYgaW4gcGVyZm9ybWFuY2UsIGVzcGVjaWFsbHkgYXQgJnF1b3Q7bWVnYW1vcnBoaWMmcXVvdDsgY2FsbC1zaXRlcyBpbnNpZGUgbG9vcHMuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/inline-functions.html#inline-functions"
            ],
            "flags": 0,
            "guid": "KT{_[*#I]t",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "InlineFunctions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>noinline</b>&nbsp;modifier",
                "<p>In case you want only some of the lambdas passed to an inline function to be inlined, you can mark some of your function parameters with the <code>noinline</code> modifier:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">inlined</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">noinline</span> <span style=\"color: #000000\">notInlined</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p><strong>Inlinable lambdas can only be called inside the inline functions or passed as inlinable arguments, but <code>noinline</code> ones can be manipulated in any way we like: stored in fields, passed around etc.</strong></p>\n<p>Note that if an inline function has no inlinable function parameters and no <a href=\"#reified-type-parameters\">reified type parameters</a>, the compiler will issue a warning, since inlining such functions is very unlikely to be beneficial (you can suppress the warning if you are sure the inlining is needed).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTI1OTUyMDAsICJpZCI6ICIxNDg4MDM3OTk5NDc4LTAwMSIsICJtZCI6ICJJbiBjYXNlIHlvdSB3YW50IG9ubHkgc29tZSBvZiB0aGUgbGFtYmRhcyBwYXNzZWQgdG8gYW4gaW5saW5lIGZ1bmN0aW9uIHRvIGJlIGlubGluZWQsIHlvdSBjYW4gbWFyayBzb21lIG9mIHlvdXIgZnVuY3Rpb24gcGFyYW1ldGVycyB3aXRoIHRoZSBgbm9pbmxpbmVgIG1vZGlmaWVyOlxuICBcbmBgYGtvdGxpblxuaW5saW5lIGZ1biBmb28oaW5saW5lZDogKCkgLSZndDsgVW5pdCwgbm9pbmxpbmUgbm90SW5saW5lZDogKCkgLSZndDsgVW5pdCkge1xuICAgIC8vIC4uLlxufVxuYGBgXG4gIFxuKipJbmxpbmFibGUgbGFtYmRhcyBjYW4gb25seSBiZSBjYWxsZWQgaW5zaWRlIHRoZSBpbmxpbmUgZnVuY3Rpb25zIG9yIHBhc3NlZCBhcyBpbmxpbmFibGUgYXJndW1lbnRzLCBidXQgYG5vaW5saW5lYCBvbmVzIGNhbiBiZSBtYW5pcHVsYXRlZCBpbiBhbnkgd2F5IHdlIGxpa2U6IHN0b3JlZCBpbiBmaWVsZHMsIHBhc3NlZCBhcm91bmQgZXRjLioqXG4gIFxuTm90ZSB0aGF0IGlmIGFuIGlubGluZSBmdW5jdGlvbiBoYXMgbm8gaW5saW5hYmxlIGZ1bmN0aW9uIHBhcmFtZXRlcnMgYW5kIG5vIFtyZWlmaWVkIHR5cGUgcGFyYW1ldGVyc10oI3JlaWZpZWQtdHlwZS1wYXJhbWV0ZXJzKSwgdGhlIGNvbXBpbGVyIHdpbGwgaXNzdWUgYSB3YXJuaW5nLCBzaW5jZSBpbmxpbmluZyBzdWNoIGZ1bmN0aW9ucyBpcyB2ZXJ5IHVubGlrZWx5IHRvIGJlIGJlbmVmaWNpYWwgKHlvdSBjYW4gc3VwcHJlc3MgdGhlIHdhcm5pbmcgaWYgeW91IGFyZSBzdXJlIHRoZSBpbmxpbmluZyBpcyBuZWVkZWQpLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/inline-functions.html#noinline"
            ],
            "flags": 0,
            "guid": "jL0c9da0b7",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "InlineFunctions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Non-local</b> returns",
                "<p>In Kotlin, we can only use a normal, unqualified <code>return</code> to exit a named function or an anonymous function.<br />\nThis means that to exit a lambda, we have to use a <a href=\"returns.html#return-at-labels\">label</a>, and a bare <code>return</code> is forbidden inside a lambda, because a lambda can not make the enclosing function return:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">ordinaryFunction</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #8f5902; font-style: italic\">// ERROR: can not make `foo` return here</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>But if the function the lambda is passed to is inlined, the return can be inlined as well, so it is allowed:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">inlineFunction</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #8f5902; font-style: italic\">// OK: the lambda is inlined</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Such returns (located in a lambda, but exiting the enclosing function) are called <em>non-local</em> returns.<br />\nWe are used to this sort of constructs in loops, which inline functions often enclose:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">hasZeros</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;):</span> <span style=\"color: #000000\">Boolean</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">forEach</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #204a87; font-weight: bold\">true</span> <span style=\"color: #8f5902; font-style: italic\">// returns from hasZeros</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #204a87; font-weight: bold\">false</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Note that some inline functions may call the lambdas passed to them as parameters not directly from the function body, but from another execution context, such as a local object or a nested function. In such cases, non-local control flow is also not allowed in the lambdas. To indicate that, the lambda parameter needs to be marked with<br />\nthe <code>crossinline</code> modifier:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">crossinline</span> <span style=\"color: #000000\">body</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">f</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">object</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Runnable</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">run</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">body</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<blockquote>\n<p><code>break</code> and <code>continue</code> are not yet available in inlined lambdas, but we are planning to support them too</p>\n</blockquote><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk5NTU2MzMsICJpZCI6ICIxNDg4MDM4MDI2ODUwLTAwMSIsICJtZCI6ICJJbiBLb3RsaW4sIHdlIGNhbiBvbmx5IHVzZSBhIG5vcm1hbCwgdW5xdWFsaWZpZWQgYHJldHVybmAgdG8gZXhpdCBhIG5hbWVkIGZ1bmN0aW9uIG9yIGFuIGFub255bW91cyBmdW5jdGlvbi5cblRoaXMgbWVhbnMgdGhhdCB0byBleGl0IGEgbGFtYmRhLCB3ZSBoYXZlIHRvIHVzZSBhIFtsYWJlbF0ocmV0dXJucy5odG1sI3JldHVybi1hdC1sYWJlbHMpLCBhbmQgYSBiYXJlIGByZXR1cm5gIGlzIGZvcmJpZGRlbiBpbnNpZGUgYSBsYW1iZGEsIGJlY2F1c2UgYSBsYW1iZGEgY2FuIG5vdCBtYWtlIHRoZSBlbmNsb3NpbmcgZnVuY3Rpb24gcmV0dXJuOlxuICBcbmBgYGtvdGxpblxuZnVuIGZvbygpIHtcbiAgICBvcmRpbmFyeUZ1bmN0aW9uIHtcbiAgICAgICAgcmV0dXJuIC8vIEVSUk9SOiBjYW4gbm90IG1ha2UgYGZvb2AgcmV0dXJuIGhlcmVcbiAgICB9XG59XG5gYGBcbiAgXG5CdXQgaWYgdGhlIGZ1bmN0aW9uIHRoZSBsYW1iZGEgaXMgcGFzc2VkIHRvIGlzIGlubGluZWQsIHRoZSByZXR1cm4gY2FuIGJlIGlubGluZWQgYXMgd2VsbCwgc28gaXQgaXMgYWxsb3dlZDpcbiAgXG5gYGBrb3RsaW5cbmZ1biBmb28oKSB7XG4gICAgaW5saW5lRnVuY3Rpb24ge1xuICAgICAgICByZXR1cm4gLy8gT0s6IHRoZSBsYW1iZGEgaXMgaW5saW5lZFxuICAgIH1cbn1cbmBgYFxuICBcblN1Y2ggcmV0dXJucyAobG9jYXRlZCBpbiBhIGxhbWJkYSwgYnV0IGV4aXRpbmcgdGhlIGVuY2xvc2luZyBmdW5jdGlvbikgYXJlIGNhbGxlZCAqbm9uLWxvY2FsKiByZXR1cm5zLlxuV2UgYXJlIHVzZWQgdG8gdGhpcyBzb3J0IG9mIGNvbnN0cnVjdHMgaW4gbG9vcHMsIHdoaWNoIGlubGluZSBmdW5jdGlvbnMgb2Z0ZW4gZW5jbG9zZTpcbiAgXG5gYGBrb3RsaW5cbmZ1biBoYXNaZXJvcyhpbnRzOiBMaXN0Jmx0O0ludCZndDspOiBCb29sZWFuIHtcbiAgICBpbnRzLmZvckVhY2gge1xuICAgICAgICBpZiAoaXQgPT0gMCkgcmV0dXJuIHRydWUgLy8gcmV0dXJucyBmcm9tIGhhc1plcm9zXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxufVxuYGBgXG4gIFxuTm90ZSB0aGF0IHNvbWUgaW5saW5lIGZ1bmN0aW9ucyBtYXkgY2FsbCB0aGUgbGFtYmRhcyBwYXNzZWQgdG8gdGhlbSBhcyBwYXJhbWV0ZXJzIG5vdCBkaXJlY3RseSBmcm9tIHRoZSBmdW5jdGlvbiBib2R5LCBidXQgZnJvbSBhbm90aGVyIGV4ZWN1dGlvbiBjb250ZXh0LCBzdWNoIGFzIGEgbG9jYWwgb2JqZWN0IG9yIGEgbmVzdGVkIGZ1bmN0aW9uLiBJbiBzdWNoIGNhc2VzLCBub24tbG9jYWwgY29udHJvbCBmbG93IGlzIGFsc28gbm90IGFsbG93ZWQgaW4gdGhlIGxhbWJkYXMuIFRvIGluZGljYXRlIHRoYXQsIHRoZSBsYW1iZGEgcGFyYW1ldGVyIG5lZWRzIHRvIGJlIG1hcmtlZCB3aXRoXG50aGUgYGNyb3NzaW5saW5lYCBtb2RpZmllcjpcbiAgXG5gYGBrb3RsaW5cbmlubGluZSBmdW4gZihjcm9zc2lubGluZSBib2R5OiAoKSAtJmd0OyBVbml0KSB7XG4gICAgdmFsIGYgPSBvYmplY3Q6IFJ1bm5hYmxlIHtcbiAgICAgICAgb3ZlcnJpZGUgZnVuIHJ1bigpID0gYm9keSgpXG4gICAgfVxuICAgIC8vIC4uLlxufVxuYGBgXG4gIFxuJmd0OyBgYnJlYWtgIGFuZCBgY29udGludWVgIGFyZSBub3QgeWV0IGF2YWlsYWJsZSBpbiBpbmxpbmVkIGxhbWJkYXMsIGJ1dCB3ZSBhcmUgcGxhbm5pbmcgdG8gc3VwcG9ydCB0aGVtIHRvb1xuIn0=---->",
                "https://kotlinlang.org/docs/reference/inline-functions.html#non-local-returns"
            ],
            "flags": 0,
            "guid": "vc.Gz.T[1[",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "InlineFunctions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Reified</b> <i>type parameters</i>",
                "<p>Sometimes we need to access a type passed to us as a parameter:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">TreeNode</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">findParentOfType</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">clazz</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Class</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;):</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">p</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">parent</span>\n    <span style=\"color: #204a87; font-weight: bold\">while</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">p</span> <span style=\"color: #000000; font-weight: bold\">!=</span> <span style=\"color: #204a87; font-weight: bold\">null</span> <span style=\"color: #000000; font-weight: bold\">&amp;&amp;</span> <span style=\"color: #000000; font-weight: bold\">!</span><span style=\"color: #000000\">clazz</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">isInstance</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">p</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">parent</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000\">@Suppress</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"UNCHECKED_CAST\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">p</span> <span style=\"color: #204a87; font-weight: bold\">as</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">?</span>\n</pre></div>\n<p>Here, we walk up a tree and use reflection to check if a node has a certain type.<br />\nIt’s all fine, but the call site is not very pretty:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">treeNode</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">findParentOfType</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">MyTreeNode</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #204a87; font-weight: bold\">class</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">java</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>What we actually want is simply pass a type to this function, i.e. call it like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">treeNode</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">findParentOfType</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">MyTreeNode</span><span style=\"color: #000000; font-weight: bold\">&gt;()</span>\n</pre></div>\n<p>To enable this, inline functions support <em>reified type parameters</em>, so we can write something like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">reified</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">TreeNode</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">findParentOfType</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">p</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">parent</span>\n    <span style=\"color: #204a87; font-weight: bold\">while</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">p</span> <span style=\"color: #000000; font-weight: bold\">!=</span> <span style=\"color: #204a87; font-weight: bold\">null</span> <span style=\"color: #000000; font-weight: bold\">&amp;&amp;</span> <span style=\"color: #000000\">p</span> <span style=\"color: #000000; font-weight: bold\">!</span><span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">p</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">parent</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">p</span> <span style=\"color: #204a87; font-weight: bold\">as</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">?</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>We qualified the type parameter with the <em class=\"keyword\">reified</em> modifier, now it’s accessible inside the function, almost as if it were a normal class. Since the function is inlined, <strong>no reflection is needed, normal operators like <code>!is</code> and <code>as</code> are working now</strong>. Also, we can call it as mentioned above: <code>myTree.findParentOfType&lt;MyTreeNodeType&gt;()</code>.</p>\n<p>Though reflection may not be needed in many cases, we can still use it with a reified type parameter:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">reified</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">membersOf</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">T</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #204a87; font-weight: bold\">class</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">members</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">s</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">membersOf</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">StringBuilder</span><span style=\"color: #000000; font-weight: bold\">&gt;().</span><span style=\"color: #000000\">joinToString</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"\\n\"</span><span style=\"color: #000000; font-weight: bold\">))</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Normal functions (not marked as <em class=\"keyword\">inline</em>) can not have reified parameters.<br />\nA type that does not have a run-time representation (e.g. a non-reified type parameter or a fictitious type like <code>Nothing</code>) can not be used as an argument for a reified type parameter.</p>\n<p>For a low-level description, see the <a href=\"https://github.com/JetBrains/kotlin/blob/master/spec-docs/reified-type-parameters.md\">spec document</a>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTQ2NjM2MjEsICJpZCI6ICIxNDg4MDM4MDY2MzQyLTAwMSIsICJtZCI6ICJTb21ldGltZXMgd2UgbmVlZCB0byBhY2Nlc3MgYSB0eXBlIHBhc3NlZCB0byB1cyBhcyBhIHBhcmFtZXRlcjpcbiAgXG5gYGBrb3RsaW5cbmZ1biAmbHQ7VCZndDsgVHJlZU5vZGUuZmluZFBhcmVudE9mVHlwZShjbGF6ejogQ2xhc3MmbHQ7VCZndDspOiBUPyB7XG4gICAgdmFyIHAgPSBwYXJlbnRcbiAgICB3aGlsZSAocCAhPSBudWxsICZhbXA7JmFtcDsgIWNsYXp6LmlzSW5zdGFuY2UocCkpIHtcbiAgICAgICAgcCA9IHAucGFyZW50XG4gICAgfVxuICAgIEBTdXBwcmVzcygmcXVvdDtVTkNIRUNLRURfQ0FTVCZxdW90OylcbiAgICByZXR1cm4gcCBhcyBUP1xuYGBgXG4gIFxuSGVyZSwgd2Ugd2FsayB1cCBhIHRyZWUgYW5kIHVzZSByZWZsZWN0aW9uIHRvIGNoZWNrIGlmIGEgbm9kZSBoYXMgYSBjZXJ0YWluIHR5cGUuXG5JdFx1MjAxOXMgYWxsIGZpbmUsIGJ1dCB0aGUgY2FsbCBzaXRlIGlzIG5vdCB2ZXJ5IHByZXR0eTpcbiAgXG5gYGBrb3RsaW5cbnRyZWVOb2RlLmZpbmRQYXJlbnRPZlR5cGUoTXlUcmVlTm9kZTo6Y2xhc3MuamF2YSlcbmBgYFxuICBcbldoYXQgd2UgYWN0dWFsbHkgd2FudCBpcyBzaW1wbHkgcGFzcyBhIHR5cGUgdG8gdGhpcyBmdW5jdGlvbiwgaS5lLiBjYWxsIGl0IGxpa2UgdGhpczpcbiAgXG5gYGBrb3RsaW5cbnRyZWVOb2RlLmZpbmRQYXJlbnRPZlR5cGUmbHQ7TXlUcmVlTm9kZSZndDsoKVxuYGBgXG4gIFxuVG8gZW5hYmxlIHRoaXMsIGlubGluZSBmdW5jdGlvbnMgc3VwcG9ydCAqcmVpZmllZCB0eXBlIHBhcmFtZXRlcnMqLCBzbyB3ZSBjYW4gd3JpdGUgc29tZXRoaW5nIGxpa2UgdGhpczpcbiAgXG5gYGBrb3RsaW5cbmlubGluZSBmdW4gJmx0O3JlaWZpZWQgVCZndDsgVHJlZU5vZGUuZmluZFBhcmVudE9mVHlwZSgpOiBUPyB7XG4gICAgdmFyIHAgPSBwYXJlbnRcbiAgICB3aGlsZSAocCAhPSBudWxsICZhbXA7JmFtcDsgcCAhaXMgVCkge1xuICAgICAgICBwID0gcC5wYXJlbnRcbiAgICB9XG4gICAgcmV0dXJuIHAgYXMgVD9cbn1cbmBgYFxuICBcbldlIHF1YWxpZmllZCB0aGUgdHlwZSBwYXJhbWV0ZXIgd2l0aCB0aGUgKnJlaWZpZWQqezogLmtleXdvcmQgfSBtb2RpZmllciwgbm93IGl0XHUyMDE5cyBhY2Nlc3NpYmxlIGluc2lkZSB0aGUgZnVuY3Rpb24sIGFsbW9zdCBhcyBpZiBpdCB3ZXJlIGEgbm9ybWFsIGNsYXNzLiBTaW5jZSB0aGUgZnVuY3Rpb24gaXMgaW5saW5lZCwgKipubyByZWZsZWN0aW9uIGlzIG5lZWRlZCwgbm9ybWFsIG9wZXJhdG9ycyBsaWtlIGAhaXNgIGFuZCBgYXNgIGFyZSB3b3JraW5nIG5vdyoqLiBBbHNvLCB3ZSBjYW4gY2FsbCBpdCBhcyBtZW50aW9uZWQgYWJvdmU6IGBteVRyZWUuZmluZFBhcmVudE9mVHlwZSZsdDtNeVRyZWVOb2RlVHlwZSZndDsoKWAuXG4gIFxuVGhvdWdoIHJlZmxlY3Rpb24gbWF5IG5vdCBiZSBuZWVkZWQgaW4gbWFueSBjYXNlcywgd2UgY2FuIHN0aWxsIHVzZSBpdCB3aXRoIGEgcmVpZmllZCB0eXBlIHBhcmFtZXRlcjpcbiAgXG5gYGBrb3RsaW5cbmlubGluZSBmdW4gJmx0O3JlaWZpZWQgVCZndDsgbWVtYmVyc09mKCkgPSBUOjpjbGFzcy5tZW1iZXJzXG4gIFxuZnVuIG1haW4oczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHByaW50bG4obWVtYmVyc09mJmx0O1N0cmluZ0J1aWxkZXImZ3Q7KCkuam9pblRvU3RyaW5nKCZxdW90O1xcbiZxdW90OykpXG59XG5gYGBcbiAgXG5Ob3JtYWwgZnVuY3Rpb25zIChub3QgbWFya2VkIGFzICppbmxpbmUqezogLmtleXdvcmQgfSkgY2FuIG5vdCBoYXZlIHJlaWZpZWQgcGFyYW1ldGVycy5cbkEgdHlwZSB0aGF0IGRvZXMgbm90IGhhdmUgYSBydW4tdGltZSByZXByZXNlbnRhdGlvbiAoZS5nLiBhIG5vbi1yZWlmaWVkIHR5cGUgcGFyYW1ldGVyIG9yIGEgZmljdGl0aW91cyB0eXBlIGxpa2UgYE5vdGhpbmdgKSBjYW4gbm90IGJlIHVzZWQgYXMgYW4gYXJndW1lbnQgZm9yIGEgcmVpZmllZCB0eXBlIHBhcmFtZXRlci5cbiAgXG5Gb3IgYSBsb3ctbGV2ZWwgZGVzY3JpcHRpb24sIHNlZSB0aGUgW3NwZWMgZG9jdW1lbnRdKGh0dHBzOi8vZ2l0aHViLmNvbS9KZXRCcmFpbnMva290bGluL2Jsb2IvbWFzdGVyL3NwZWMtZG9jcy9yZWlmaWVkLXR5cGUtcGFyYW1ldGVycy5tZCkuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters"
            ],
            "flags": 0,
            "guid": "P|9$brMwK^",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "InlineFunctions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Kotlin <b>Standard Library:</b>&nbsp;basic info",
                "<img src=\"paste-21668110008632.jpg\" />",
                "https://kotlinlang.org/api/latest/jvm/stdlib/index.html#kotlin-standard-library"
            ],
            "flags": 0,
            "guid": "EaS({9L`$j",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ApiReference",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Calling Java code <b>from</b> Kotlin",
                "<p>Kotlin is designed with Java Interoperability in mind. Existing Java code can be called from Kotlin in a natural way, and Kotlin code can be used from Java rather smoothly as well.</p>\n<p>Pretty much all Java code can be used without any issues</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">import</span> <span style=\"color: #000000\">java.util.*</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">demo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">source</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">list</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ArrayList</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;()</span>\n    <span style=\"color: #8f5902; font-style: italic\">// 'for'-loops work for Java collections:</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">source</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #8f5902; font-style: italic\">// Operator conventions work as well:</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">0.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">source</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span> <span style=\"color: #000000; font-weight: bold\">-</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">source</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #8f5902; font-style: italic\">// get and set are called</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzE3MDcsICJpZCI6ICIxNDg4MDM4Mjk0Mjg0LTAwMSIsICJtZCI6ICJLb3RsaW4gaXMgZGVzaWduZWQgd2l0aCBKYXZhIEludGVyb3BlcmFiaWxpdHkgaW4gbWluZC4gRXhpc3RpbmcgSmF2YSBjb2RlIGNhbiBiZSBjYWxsZWQgZnJvbSBLb3RsaW4gaW4gYSBuYXR1cmFsIHdheSwgYW5kIEtvdGxpbiBjb2RlIGNhbiBiZSB1c2VkIGZyb20gSmF2YSByYXRoZXIgc21vb3RobHkgYXMgd2VsbC5cbiAgXG5QcmV0dHkgbXVjaCBhbGwgSmF2YSBjb2RlIGNhbiBiZSB1c2VkIHdpdGhvdXQgYW55IGlzc3Vlc1xuICBcbmBgYGtvdGxpblxuaW1wb3J0IGphdmEudXRpbC4qXG4gIFxuZnVuIGRlbW8oc291cmNlOiBMaXN0Jmx0O0ludCZndDspIHtcbiAgICB2YWwgbGlzdCA9IEFycmF5TGlzdCZsdDtJbnQmZ3Q7KClcbiAgICAvLyAmYXBvcztmb3ImYXBvczstbG9vcHMgd29yayBmb3IgSmF2YSBjb2xsZWN0aW9uczpcbiAgICBmb3IgKGl0ZW0gaW4gc291cmNlKSB7XG4gICAgICAgIGxpc3QuYWRkKGl0ZW0pXG4gICAgfVxuICAgIC8vIE9wZXJhdG9yIGNvbnZlbnRpb25zIHdvcmsgYXMgd2VsbDpcbiAgICBmb3IgKGkgaW4gMC4uc291cmNlLnNpemUgLSAxKSB7XG4gICAgICAgIGxpc3RbaV0gPSBzb3VyY2VbaV0gLy8gZ2V0IGFuZCBzZXQgYXJlIGNhbGxlZFxuICAgIH1cbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#calling-java-code-from-kotlin"
            ],
            "flags": 0,
            "guid": "dBo>l.tk:[",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Getters</b> and <b>Setters</b>&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>Methods that follow the Java conventions for getters and setters (no-argument methods with names starting with <code>get</code> and single-argument methods with names starting with <code>set</code>) are represented as properties in Kotlin. <br />\n<code>Boolean</code> accessor methods (where the name of the getter starts with <code>is</code> and tne name of the setter starts with <code>set</code>) are represented as properties which have the same name as the getter method.</p>\n<p>For example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">import</span> <span style=\"color: #000000\">java.util.Calendar</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">calendarDemo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">calendar</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Calendar</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">getInstance</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">calendar</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">firstDayOfWeek</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #000000\">Calendar</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">SUNDAY</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>  <span style=\"color: #8f5902; font-style: italic\">// call getFirstDayOfWeek()</span>\n        <span style=\"color: #000000\">calendar</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">firstDayOfWeek</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Calendar</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">MONDAY</span>      <span style=\"color: #8f5902; font-style: italic\">// call setFirstDayOfWeek()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(!</span><span style=\"color: #000000\">calendar</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">isLenient</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>                         <span style=\"color: #8f5902; font-style: italic\">// call isLenient() </span>\n        <span style=\"color: #000000\">calendar</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">isLenient</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">true</span>                      <span style=\"color: #8f5902; font-style: italic\">// call setLenient()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Note that, if the Java class only has a setter, it will not be visible as a property in Kotlin, because Kotlin does not support set-only properties at this time.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzE3NjMsICJpZCI6ICIxNDg4MDM4MzI4OTI2LTAwMSIsICJtZCI6ICJNZXRob2RzIHRoYXQgZm9sbG93IHRoZSBKYXZhIGNvbnZlbnRpb25zIGZvciBnZXR0ZXJzIGFuZCBzZXR0ZXJzIChuby1hcmd1bWVudCBtZXRob2RzIHdpdGggbmFtZXMgc3RhcnRpbmcgd2l0aCBgZ2V0YCBhbmQgc2luZ2xlLWFyZ3VtZW50IG1ldGhvZHMgd2l0aCBuYW1lcyBzdGFydGluZyB3aXRoIGBzZXRgKSBhcmUgcmVwcmVzZW50ZWQgYXMgcHJvcGVydGllcyBpbiBLb3RsaW4uIFxuYEJvb2xlYW5gIGFjY2Vzc29yIG1ldGhvZHMgKHdoZXJlIHRoZSBuYW1lIG9mIHRoZSBnZXR0ZXIgc3RhcnRzIHdpdGggYGlzYCBhbmQgdG5lIG5hbWUgb2YgdGhlIHNldHRlciBzdGFydHMgd2l0aCBgc2V0YCkgYXJlIHJlcHJlc2VudGVkIGFzIHByb3BlcnRpZXMgd2hpY2ggaGF2ZSB0aGUgc2FtZSBuYW1lIGFzIHRoZSBnZXR0ZXIgbWV0aG9kLlxuICBcbkZvciBleGFtcGxlOlxuICBcbmBgYGtvdGxpblxuaW1wb3J0IGphdmEudXRpbC5DYWxlbmRhclxuICBcbmZ1biBjYWxlbmRhckRlbW8oKSB7XG4gICAgdmFsIGNhbGVuZGFyID0gQ2FsZW5kYXIuZ2V0SW5zdGFuY2UoKVxuICAgIGlmIChjYWxlbmRhci5maXJzdERheU9mV2VlayA9PSBDYWxlbmRhci5TVU5EQVkpIHsgIC8vIGNhbGwgZ2V0Rmlyc3REYXlPZldlZWsoKVxuICAgICAgICBjYWxlbmRhci5maXJzdERheU9mV2VlayA9IENhbGVuZGFyLk1PTkRBWSAgICAgIC8vIGNhbGwgc2V0Rmlyc3REYXlPZldlZWsoKVxuICAgIH1cbiAgICBpZiAoIWNhbGVuZGFyLmlzTGVuaWVudCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGlzTGVuaWVudCgpIFxuICAgICAgICBjYWxlbmRhci5pc0xlbmllbnQgPSB0cnVlICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgc2V0TGVuaWVudCgpXG4gICAgfVxufVxuYGBgXG4gIFxuTm90ZSB0aGF0LCBpZiB0aGUgSmF2YSBjbGFzcyBvbmx5IGhhcyBhIHNldHRlciwgaXQgd2lsbCBub3QgYmUgdmlzaWJsZSBhcyBhIHByb3BlcnR5IGluIEtvdGxpbiwgYmVjYXVzZSBLb3RsaW4gZG9lcyBub3Qgc3VwcG9ydCBzZXQtb25seSBwcm9wZXJ0aWVzIGF0IHRoaXMgdGltZS5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#getters-and-setters"
            ],
            "flags": 0,
            "guid": "d9S+YziIyu",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Methods returning void <i>[Calling Java code <b>from</b> Kotlin]</i>",
                "<p>If a Java method returns void, it will return <code>Unit</code> when called from Kotlin.<br />\nIf, by any chance, someone uses that return value, it will be assigned at the call site by the Kotlin compiler, since the value itself is known in advance (being <code>Unit</code>).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTQ2NjAsICJpZCI6ICIxNDg4MDM4Mzg5OTAwLTAwMSIsICJtZCI6ICJJZiBhIEphdmEgbWV0aG9kIHJldHVybnMgdm9pZCwgaXQgd2lsbCByZXR1cm4gYFVuaXRgIHdoZW4gY2FsbGVkIGZyb20gS290bGluLlxuSWYsIGJ5IGFueSBjaGFuY2UsIHNvbWVvbmUgdXNlcyB0aGF0IHJldHVybiB2YWx1ZSwgaXQgd2lsbCBiZSBhc3NpZ25lZCBhdCB0aGUgY2FsbCBzaXRlIGJ5IHRoZSBLb3RsaW4gY29tcGlsZXIsIHNpbmNlIHRoZSB2YWx1ZSBpdHNlbGYgaXMga25vd24gaW4gYWR2YW5jZSAoYmVpbmcgYFVuaXRgKS5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#methods-returning-void"
            ],
            "flags": 0,
            "guid": "KspX-(_%xQ",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Escaping for Java identifiers that are keywords in Kotlin <i>[Calling Java code from Kotlin]</i>",
                "<p>Some of the Kotlin keywords are valid identifiers in Java: <em class=\"keyword\">in</em>, <em class=\"keyword\">object</em>, <em class=\"keyword\">is</em>, etc.<br />\nIf a Java library uses a Kotlin keyword for a method, you can still call the method escaping it with the backtick (`) character:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">`is`</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTkwOTMsICJpZCI6ICIxNDg4MDM4NDI3NzU4LTAwMSIsICJtZCI6ICJTb21lIG9mIHRoZSBLb3RsaW4ga2V5d29yZHMgYXJlIHZhbGlkIGlkZW50aWZpZXJzIGluIEphdmE6ICppbip7OiAua2V5d29yZCB9LCAqb2JqZWN0Kns6IC5rZXl3b3JkIH0sICppcyp7OiAua2V5d29yZCB9LCBldGMuXG5JZiBhIEphdmEgbGlicmFyeSB1c2VzIGEgS290bGluIGtleXdvcmQgZm9yIGEgbWV0aG9kLCB5b3UgY2FuIHN0aWxsIGNhbGwgdGhlIG1ldGhvZCBlc2NhcGluZyBpdCB3aXRoIHRoZSBiYWNrdGljayAoYCkgY2hhcmFjdGVyOlxuICBcbmBgYGtvdGxpblxuZm9vLmBpc2AoYmFyKVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#escaping-for-java-identifiers-that-are-keywords-in-kotlin"
            ],
            "flags": 0,
            "guid": "D8(J5pkGS|",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Null-Safety</b> and <b>Platform Types</b>&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>Any reference in Java may be <em class=\"keyword\">null</em>, which makes Kotlin's requirements of strict null-safety impractical for objects coming from Java.</p>\n<p>Types of Java declarations are treated specially in Kotlin and called <em>platform types</em>. Null-checks are relaxed for such types, so that safety guarantees for them are the same as in Java (see more <a href=\"#mapped-types\">below</a>).</p>\n<p>Consider the following examples:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">list</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ArrayList</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;()</span> <span style=\"color: #8f5902; font-style: italic\">// non-null (constructor result)</span>\n<span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Item\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">size</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span> <span style=\"color: #8f5902; font-style: italic\">// non-null (primitive int)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">item</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #8f5902; font-style: italic\">// platform type inferred (ordinary Java object)</span>\n</pre></div>\n<p>When we call methods on variables of platform types, Kotlin does not issue nullability errors at compile time, but the call may fail at runtime, because of a null-pointer exception or an assertion that Kotlin generates to prevent nulls from propagating:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">item</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">substring</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// allowed, may throw an exception if item == null</span>\n</pre></div>\n<p>Platform types are <em>non-denotable</em>, meaning that one can not write them down explicitly in the language.</p>\n<p>When a platform value is assigned to a Kotlin variable, we can rely on type inference (the variable will have an inferred platform type then, as <code>item</code> has in the example above), or we can choose the type that we expect (both nullable and non-null types are allowed):</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">nullable</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">item</span> <span style=\"color: #8f5902; font-style: italic\">// allowed, always works</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">notNull</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">item</span> <span style=\"color: #8f5902; font-style: italic\">// allowed, may fail at runtime</span>\n</pre></div>\n<p>If we choose a non-null type, the compiler will emit an assertion upon assignment. This prevents Kotlin's non-null variables from holding nulls. Assertions are also emitted when we pass platform values to Kotlin functions expecting non-null values etc.</p>\n<p>Overall, the compiler does its best to prevent nulls from propagating far through the program (although sometimes this is impossible to eliminate entirely, because of generics).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzE4MjEsICJpZCI6ICIxNDg4MDM4NTA5MzY1LTAwMSIsICJtZCI6ICJBbnkgcmVmZXJlbmNlIGluIEphdmEgbWF5IGJlICpudWxsKns6IC5rZXl3b3JkIH0sIHdoaWNoIG1ha2VzIEtvdGxpbiZhcG9zO3MgcmVxdWlyZW1lbnRzIG9mIHN0cmljdCBudWxsLXNhZmV0eSBpbXByYWN0aWNhbCBmb3Igb2JqZWN0cyBjb21pbmcgZnJvbSBKYXZhLlxuICBcblR5cGVzIG9mIEphdmEgZGVjbGFyYXRpb25zIGFyZSB0cmVhdGVkIHNwZWNpYWxseSBpbiBLb3RsaW4gYW5kIGNhbGxlZCAqcGxhdGZvcm0gdHlwZXMqLiBOdWxsLWNoZWNrcyBhcmUgcmVsYXhlZCBmb3Igc3VjaCB0eXBlcywgc28gdGhhdCBzYWZldHkgZ3VhcmFudGVlcyBmb3IgdGhlbSBhcmUgdGhlIHNhbWUgYXMgaW4gSmF2YSAoc2VlIG1vcmUgW2JlbG93XSgjbWFwcGVkLXR5cGVzKSkuXG4gIFxuQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBleGFtcGxlczpcbiAgXG5gYGBrb3RsaW5cbnZhbCBsaXN0ID0gQXJyYXlMaXN0Jmx0O1N0cmluZyZndDsoKSAvLyBub24tbnVsbCAoY29uc3RydWN0b3IgcmVzdWx0KVxubGlzdC5hZGQoJnF1b3Q7SXRlbSZxdW90OylcbnZhbCBzaXplID0gbGlzdC5zaXplIC8vIG5vbi1udWxsIChwcmltaXRpdmUgaW50KVxudmFsIGl0ZW0gPSBsaXN0WzBdIC8vIHBsYXRmb3JtIHR5cGUgaW5mZXJyZWQgKG9yZGluYXJ5IEphdmEgb2JqZWN0KVxuYGBgXG4gIFxuV2hlbiB3ZSBjYWxsIG1ldGhvZHMgb24gdmFyaWFibGVzIG9mIHBsYXRmb3JtIHR5cGVzLCBLb3RsaW4gZG9lcyBub3QgaXNzdWUgbnVsbGFiaWxpdHkgZXJyb3JzIGF0IGNvbXBpbGUgdGltZSwgYnV0IHRoZSBjYWxsIG1heSBmYWlsIGF0IHJ1bnRpbWUsIGJlY2F1c2Ugb2YgYSBudWxsLXBvaW50ZXIgZXhjZXB0aW9uIG9yIGFuIGFzc2VydGlvbiB0aGF0IEtvdGxpbiBnZW5lcmF0ZXMgdG8gcHJldmVudCBudWxscyBmcm9tIHByb3BhZ2F0aW5nOlxuICBcbmBgYGtvdGxpblxuaXRlbS5zdWJzdHJpbmcoMSkgLy8gYWxsb3dlZCwgbWF5IHRocm93IGFuIGV4Y2VwdGlvbiBpZiBpdGVtID09IG51bGxcbmBgYFxuICBcblBsYXRmb3JtIHR5cGVzIGFyZSAqbm9uLWRlbm90YWJsZSosIG1lYW5pbmcgdGhhdCBvbmUgY2FuIG5vdCB3cml0ZSB0aGVtIGRvd24gZXhwbGljaXRseSBpbiB0aGUgbGFuZ3VhZ2UuXG4gIFxuV2hlbiBhIHBsYXRmb3JtIHZhbHVlIGlzIGFzc2lnbmVkIHRvIGEgS290bGluIHZhcmlhYmxlLCB3ZSBjYW4gcmVseSBvbiB0eXBlIGluZmVyZW5jZSAodGhlIHZhcmlhYmxlIHdpbGwgaGF2ZSBhbiBpbmZlcnJlZCBwbGF0Zm9ybSB0eXBlIHRoZW4sIGFzIGBpdGVtYCBoYXMgaW4gdGhlIGV4YW1wbGUgYWJvdmUpLCBvciB3ZSBjYW4gY2hvb3NlIHRoZSB0eXBlIHRoYXQgd2UgZXhwZWN0IChib3RoIG51bGxhYmxlIGFuZCBub24tbnVsbCB0eXBlcyBhcmUgYWxsb3dlZCk6XG4gIFxuYGBga290bGluXG52YWwgbnVsbGFibGU6IFN0cmluZz8gPSBpdGVtIC8vIGFsbG93ZWQsIGFsd2F5cyB3b3Jrc1xudmFsIG5vdE51bGw6IFN0cmluZyA9IGl0ZW0gLy8gYWxsb3dlZCwgbWF5IGZhaWwgYXQgcnVudGltZVxuYGBgXG4gIFxuSWYgd2UgY2hvb3NlIGEgbm9uLW51bGwgdHlwZSwgdGhlIGNvbXBpbGVyIHdpbGwgZW1pdCBhbiBhc3NlcnRpb24gdXBvbiBhc3NpZ25tZW50LiBUaGlzIHByZXZlbnRzIEtvdGxpbiZhcG9zO3Mgbm9uLW51bGwgdmFyaWFibGVzIGZyb20gaG9sZGluZyBudWxscy4gQXNzZXJ0aW9ucyBhcmUgYWxzbyBlbWl0dGVkIHdoZW4gd2UgcGFzcyBwbGF0Zm9ybSB2YWx1ZXMgdG8gS290bGluIGZ1bmN0aW9ucyBleHBlY3Rpbmcgbm9uLW51bGwgdmFsdWVzIGV0Yy5cbiAgXG5PdmVyYWxsLCB0aGUgY29tcGlsZXIgZG9lcyBpdHMgYmVzdCB0byBwcmV2ZW50IG51bGxzIGZyb20gcHJvcGFnYXRpbmcgZmFyIHRocm91Z2ggdGhlIHByb2dyYW0gKGFsdGhvdWdoIHNvbWV0aW1lcyB0aGlzIGlzIGltcG9zc2libGUgdG8gZWxpbWluYXRlIGVudGlyZWx5LCBiZWNhdXNlIG9mIGdlbmVyaWNzKS5cbiAgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#null-safety-and-platform-types"
            ],
            "flags": 0,
            "guid": "yhY+:l^oU-",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Notation for <b>Platform Types</b>&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>As mentioned above, platform types cannot be mentioned explicitly in the program, so there's no syntax for them in the language.</p>\n<p>Nevertheless, the compiler and IDE need to display them sometimes (in error messages, parameter info etc), so we have a mnemonic notation for them:</p>\n<ul>\n<li align=\"left\"><code>T!</code> means \"<code>T</code> or <code>T?</code>\",</li>\n<li align=\"left\"><code>(Mutable)Collection&lt;T&gt;!</code> means \"Java collection of <code>T</code> may be mutable or not, may be nullable or not\",</li>\n<li align=\"left\"><code>Array&lt;(out) T&gt;!</code> means \"Java array of <code>T</code> (or a subtype of <code>T</code>), nullable or not\"</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTQ3NzAsICJpZCI6ICIxNDg4MDM4NTY2NTYwLTAwMSIsICJtZCI6ICJBcyBtZW50aW9uZWQgYWJvdmUsIHBsYXRmb3JtIHR5cGVzIGNhbm5vdCBiZSBtZW50aW9uZWQgZXhwbGljaXRseSBpbiB0aGUgcHJvZ3JhbSwgc28gdGhlcmUmYXBvcztzIG5vIHN5bnRheCBmb3IgdGhlbSBpbiB0aGUgbGFuZ3VhZ2UuXG4gIFxuTmV2ZXJ0aGVsZXNzLCB0aGUgY29tcGlsZXIgYW5kIElERSBuZWVkIHRvIGRpc3BsYXkgdGhlbSBzb21ldGltZXMgKGluIGVycm9yIG1lc3NhZ2VzLCBwYXJhbWV0ZXIgaW5mbyBldGMpLCBzbyB3ZSBoYXZlIGEgbW5lbW9uaWMgbm90YXRpb24gZm9yIHRoZW06XG4gIFxuKiBgVCFgIG1lYW5zICZxdW90O2BUYCBvciBgVD9gJnF1b3Q7LFxuKiBgKE11dGFibGUpQ29sbGVjdGlvbiZsdDtUJmd0OyFgIG1lYW5zICZxdW90O0phdmEgY29sbGVjdGlvbiBvZiBgVGAgbWF5IGJlIG11dGFibGUgb3Igbm90LCBtYXkgYmUgbnVsbGFibGUgb3Igbm90JnF1b3Q7LFxuKiBgQXJyYXkmbHQ7KG91dCkgVCZndDshYCBtZWFucyAmcXVvdDtKYXZhIGFycmF5IG9mIGBUYCAob3IgYSBzdWJ0eXBlIG9mIGBUYCksIG51bGxhYmxlIG9yIG5vdCZxdW90O1xuIn0=---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#notation-for-platform-types"
            ],
            "flags": 0,
            "guid": "eB-RxLtU)W",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Nullability</b> annotations&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>Java types which have nullability annotations are represented not as platform types, but as actual nullable or non-null Kotlin types.<br />\nThe compiler supports several flavors of nullability annotations, including:</p>\n<ul>\n<li align=\"left\"><a href=\"https://www.jetbrains.com/idea/help/nullable-and-notnull-annotations.html\">JetBrains</a> (<code>@Nullable</code> and <code>@NotNull</code> from the <code>org.jetbrains.annotations</code> package)</li>\n<li align=\"left\">Android (<code>com.android.annotations</code> and <code>android.support.annotations</code>)</li>\n<li align=\"left\">JSR-305 (<code>javax.annotation</code>)</li>\n<li align=\"left\">FindBugs (<code>edu.umd.cs.findbugs.annotations</code>)</li>\n<li align=\"left\">Eclipse (<code>org.eclipse.jdt.annotation</code>)</li>\n<li align=\"left\">Lombok (<code>lombok.NonNull</code>).</li>\n</ul>\n<p>You can find the full list in the <a href=\"https://github.com/JetBrains/kotlin/blob/master/core/descriptor.loader.java/src/org/jetbrains/kotlin/load/java/JvmAnnotationNames.kt\">Kotlin compiler source code</a>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTQ4MTcsICJpZCI6ICIxNDg4MDM4NTkzNzc0LTAwMSIsICJtZCI6ICJKYXZhIHR5cGVzIHdoaWNoIGhhdmUgbnVsbGFiaWxpdHkgYW5ub3RhdGlvbnMgYXJlIHJlcHJlc2VudGVkIG5vdCBhcyBwbGF0Zm9ybSB0eXBlcywgYnV0IGFzIGFjdHVhbCBudWxsYWJsZSBvciBub24tbnVsbCBLb3RsaW4gdHlwZXMuXG5UaGUgY29tcGlsZXIgc3VwcG9ydHMgc2V2ZXJhbCBmbGF2b3JzIG9mIG51bGxhYmlsaXR5IGFubm90YXRpb25zLCBpbmNsdWRpbmc6XG4gIFxuICAqIFtKZXRCcmFpbnNdKGh0dHBzOi8vd3d3LmpldGJyYWlucy5jb20vaWRlYS9oZWxwL251bGxhYmxlLWFuZC1ub3RudWxsLWFubm90YXRpb25zLmh0bWwpIChgQE51bGxhYmxlYCBhbmQgYEBOb3ROdWxsYCBmcm9tIHRoZSBgb3JnLmpldGJyYWlucy5hbm5vdGF0aW9uc2AgcGFja2FnZSlcbiAgKiBBbmRyb2lkIChgY29tLmFuZHJvaWQuYW5ub3RhdGlvbnNgIGFuZCBgYW5kcm9pZC5zdXBwb3J0LmFubm90YXRpb25zYClcbiAgKiBKU1ItMzA1IChgamF2YXguYW5ub3RhdGlvbmApXG4gICogRmluZEJ1Z3MgKGBlZHUudW1kLmNzLmZpbmRidWdzLmFubm90YXRpb25zYClcbiAgKiBFY2xpcHNlIChgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb25gKVxuICAqIExvbWJvayAoYGxvbWJvay5Ob25OdWxsYCkuXG4gIFxuWW91IGNhbiBmaW5kIHRoZSBmdWxsIGxpc3QgaW4gdGhlIFtLb3RsaW4gY29tcGlsZXIgc291cmNlIGNvZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9KZXRCcmFpbnMva290bGluL2Jsb2IvbWFzdGVyL2NvcmUvZGVzY3JpcHRvci5sb2FkZXIuamF2YS9zcmMvb3JnL2pldGJyYWlucy9rb3RsaW4vbG9hZC9qYXZhL0p2bUFubm90YXRpb25OYW1lcy5rdCkuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#nullability-annotations"
            ],
            "flags": 0,
            "guid": "iNX.{(m0I]",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Mapped</b> types&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>Kotlin treats some Java types specially. Such types are not loaded from Java \"as is\", but are <em>mapped</em> to corresponding Kotlin types.<br />\nThe mapping only matters at compile time, the runtime representation remains unchanged.<br />\nJava's primitive types are mapped to corresponding Kotlin types (keeping <a href=\"#null-safety-and-platform-types\">platform types</a> in mind):</p>\n<table>\n<thead>\n<tr>\n<th><strong>Java type</strong></th>\n<th><strong>Kotlin type</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>byte</code></td>\n<td><code>kotlin.Byte</code></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td><code>kotlin.Short</code></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>kotlin.Int</code></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td><code>kotlin.Long</code></td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td><code>kotlin.Char</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td><code>kotlin.Float</code></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td><code>kotlin.Double</code></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>kotlin.Boolean</code></td>\n</tr>\n</tbody>\n</table>\n<p>Some non-primitive built-in classes are also mapped:</p>\n<table>\n<thead>\n<tr>\n<th><strong>Java type</strong></th>\n<th><strong>Kotlin type</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>java.lang.Object</code></td>\n<td><code>kotlin.Any!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Cloneable</code></td>\n<td><code>kotlin.Cloneable!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Comparable</code></td>\n<td><code>kotlin.Comparable!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Enum</code></td>\n<td><code>kotlin.Enum!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Annotation</code></td>\n<td><code>kotlin.Annotation!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Deprecated</code></td>\n<td><code>kotlin.Deprecated!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.CharSequence</code></td>\n<td><code>kotlin.CharSequence!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.String</code></td>\n<td><code>kotlin.String!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Number</code></td>\n<td><code>kotlin.Number!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Throwable</code></td>\n<td><code>kotlin.Throwable!</code></td>\n</tr>\n</tbody>\n</table>\n<p>Java's boxed primitive types are mapped to nullable Kotlin types:</p>\n<table>\n<thead>\n<tr>\n<th><strong>Java type</strong></th>\n<th><strong>Kotlin type</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>java.lang.Byte</code></td>\n<td><code>kotlin.Byte?</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Short</code></td>\n<td><code>kotlin.Short?</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Integer</code></td>\n<td><code>kotlin.Int?</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Long</code></td>\n<td><code>kotlin.Long?</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Character</code></td>\n<td><code>kotlin.Char?</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Float</code></td>\n<td><code>kotlin.Float?</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Double</code></td>\n<td><code>kotlin.Double?</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Boolean</code></td>\n<td><code>kotlin.Boolean?</code></td>\n</tr>\n</tbody>\n</table>\n<p>Note that a boxed primitive type used as a type parameter is mapped to a platform type: for example, <code>List&lt;java.lang.Integer&gt;</code> becomes a <code>List&lt;Int!&gt;</code> in Kotlin.</p>\n<p>Collection types may be read-only or mutable in Kotlin, so Java's collections are mapped as follows (all Kotlin types in this table reside in the package <code>kotlin.collections</code>):</p>\n<table>\n<thead>\n<tr>\n<th><strong>Java type</strong></th>\n<th><strong>Kotlin read-only type</strong></th>\n<th><strong>Kotlin mutable type</strong></th>\n<th><strong>Loaded platform type</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Iterator&lt;T&gt;</code></td>\n<td><code>Iterator&lt;T&gt;</code></td>\n<td><code>MutableIterator&lt;T&gt;</code></td>\n<td><code>(Mutable)Iterator&lt;T&gt;!</code></td>\n</tr>\n<tr>\n<td><code>Iterable&lt;T&gt;</code></td>\n<td><code>Iterable&lt;T&gt;</code></td>\n<td><code>MutableIterable&lt;T&gt;</code></td>\n<td><code>(Mutable)Iterable&lt;T&gt;!</code></td>\n</tr>\n<tr>\n<td><code>Collection&lt;T&gt;</code></td>\n<td><code>Collection&lt;T&gt;</code></td>\n<td><code>MutableCollection&lt;T&gt;</code></td>\n<td><code>(Mutable)Collection&lt;T&gt;!</code></td>\n</tr>\n<tr>\n<td><code>Set&lt;T&gt;</code></td>\n<td><code>Set&lt;T&gt;</code></td>\n<td><code>MutableSet&lt;T&gt;</code></td>\n<td><code>(Mutable)Set&lt;T&gt;!</code></td>\n</tr>\n<tr>\n<td><code>List&lt;T&gt;</code></td>\n<td><code>List&lt;T&gt;</code></td>\n<td><code>MutableList&lt;T&gt;</code></td>\n<td><code>(Mutable)List&lt;T&gt;!</code></td>\n</tr>\n<tr>\n<td><code>ListIterator&lt;T&gt;</code></td>\n<td><code>ListIterator&lt;T&gt;</code></td>\n<td><code>MutableListIterator&lt;T&gt;</code></td>\n<td><code>(Mutable)ListIterator&lt;T&gt;!</code></td>\n</tr>\n<tr>\n<td><code>Map&lt;K, V&gt;</code></td>\n<td><code>Map&lt;K, V&gt;</code></td>\n<td><code>MutableMap&lt;K, V&gt;</code></td>\n<td><code>(Mutable)Map&lt;K, V&gt;!</code></td>\n</tr>\n<tr>\n<td><code>Map.Entry&lt;K, V&gt;</code></td>\n<td><code>Map.Entry&lt;K, V&gt;</code></td>\n<td><code>MutableMap.MutableEntry&lt;K,V&gt;</code></td>\n<td><code>(Mutable)Map.(Mutable)Entry&lt;K, V&gt;!</code></td>\n</tr>\n</tbody>\n</table>\n<p>Java's arrays are mapped as mentioned <a href=\"java-interop.html#java-arrays\">below</a>:</p>\n<table>\n<thead>\n<tr>\n<th><strong>Java type</strong></th>\n<th><strong>Kotlin type</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int[]</code></td>\n<td><code>kotlin.IntArray!</code></td>\n</tr>\n<tr>\n<td><code>String[]</code></td>\n<td><code>kotlin.Array&lt;(out) String&gt;!</code></td>\n</tr>\n</tbody>\n</table><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYyNDc0ODIsICJpZCI6ICIxNDg4MDM4NjE3OTExLTAwMSIsICJtZCI6ICJLb3RsaW4gdHJlYXRzIHNvbWUgSmF2YSB0eXBlcyBzcGVjaWFsbHkuIFN1Y2ggdHlwZXMgYXJlIG5vdCBsb2FkZWQgZnJvbSBKYXZhICZxdW90O2FzIGlzJnF1b3Q7LCBidXQgYXJlIF9tYXBwZWRfIHRvIGNvcnJlc3BvbmRpbmcgS290bGluIHR5cGVzLlxuVGhlIG1hcHBpbmcgb25seSBtYXR0ZXJzIGF0IGNvbXBpbGUgdGltZSwgdGhlIHJ1bnRpbWUgcmVwcmVzZW50YXRpb24gcmVtYWlucyB1bmNoYW5nZWQuXG5KYXZhJmFwb3M7cyBwcmltaXRpdmUgdHlwZXMgYXJlIG1hcHBlZCB0byBjb3JyZXNwb25kaW5nIEtvdGxpbiB0eXBlcyAoa2VlcGluZyBbcGxhdGZvcm0gdHlwZXNdKCNudWxsLXNhZmV0eS1hbmQtcGxhdGZvcm0tdHlwZXMpIGluIG1pbmQpOlxuICBcbnwgKipKYXZhIHR5cGUqKiB8ICoqS290bGluIHR5cGUqKiAgfFxufC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS18XG58IGBieXRlYCAgICAgICAgfCBga290bGluLkJ5dGVgICAgIHxcbnwgYHNob3J0YCAgICAgICB8IGBrb3RsaW4uU2hvcnRgICAgfFxufCBgaW50YCAgICAgICAgIHwgYGtvdGxpbi5JbnRgICAgICB8XG58IGBsb25nYCAgICAgICAgfCBga290bGluLkxvbmdgICAgIHxcbnwgYGNoYXJgICAgICAgICB8IGBrb3RsaW4uQ2hhcmAgICAgfFxufCBgZmxvYXRgICAgICAgIHwgYGtvdGxpbi5GbG9hdGAgICB8XG58IGBkb3VibGVgICAgICAgfCBga290bGluLkRvdWJsZWAgIHxcbnwgYGJvb2xlYW5gICAgICB8IGBrb3RsaW4uQm9vbGVhbmAgfFxuICBcblNvbWUgbm9uLXByaW1pdGl2ZSBidWlsdC1pbiBjbGFzc2VzIGFyZSBhbHNvIG1hcHBlZDpcbiAgXG58ICoqSmF2YSB0eXBlKiogfCAqKktvdGxpbiB0eXBlKiogIHxcbnwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tfFxufCBgamF2YS5sYW5nLk9iamVjdGAgICAgICAgfCBga290bGluLkFueSFgICAgIHxcbnwgYGphdmEubGFuZy5DbG9uZWFibGVgICAgIHwgYGtvdGxpbi5DbG9uZWFibGUhYCAgICB8XG58IGBqYXZhLmxhbmcuQ29tcGFyYWJsZWAgICB8IGBrb3RsaW4uQ29tcGFyYWJsZSFgICAgIHxcbnwgYGphdmEubGFuZy5FbnVtYCAgICAgICAgIHwgYGtvdGxpbi5FbnVtIWAgICAgfFxufCBgamF2YS5sYW5nLkFubm90YXRpb25gICAgfCBga290bGluLkFubm90YXRpb24hYCAgICB8XG58IGBqYXZhLmxhbmcuRGVwcmVjYXRlZGAgICB8IGBrb3RsaW4uRGVwcmVjYXRlZCFgICAgIHxcbnwgYGphdmEubGFuZy5DaGFyU2VxdWVuY2VgIHwgYGtvdGxpbi5DaGFyU2VxdWVuY2UhYCAgIHxcbnwgYGphdmEubGFuZy5TdHJpbmdgICAgICAgIHwgYGtvdGxpbi5TdHJpbmchYCAgIHxcbnwgYGphdmEubGFuZy5OdW1iZXJgICAgICAgIHwgYGtvdGxpbi5OdW1iZXIhYCAgICAgfFxufCBgamF2YS5sYW5nLlRocm93YWJsZWAgICAgfCBga290bGluLlRocm93YWJsZSFgICAgIHxcbiAgXG5KYXZhJmFwb3M7cyBib3hlZCBwcmltaXRpdmUgdHlwZXMgYXJlIG1hcHBlZCB0byBudWxsYWJsZSBLb3RsaW4gdHlwZXM6XG4gIFxufCAqKkphdmEgdHlwZSoqICAgICAgICAgICB8ICoqS290bGluIHR5cGUqKiAgfFxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tfFxufCBgamF2YS5sYW5nLkJ5dGVgICAgICAgICB8IGBrb3RsaW4uQnl0ZT9gICAgfFxufCBgamF2YS5sYW5nLlNob3J0YCAgICAgICB8IGBrb3RsaW4uU2hvcnQ/YCAgfFxufCBgamF2YS5sYW5nLkludGVnZXJgICAgICB8IGBrb3RsaW4uSW50P2AgICAgfFxufCBgamF2YS5sYW5nLkxvbmdgICAgICAgICB8IGBrb3RsaW4uTG9uZz9gICAgfFxufCBgamF2YS5sYW5nLkNoYXJhY3RlcmAgICB8IGBrb3RsaW4uQ2hhcj9gICAgfFxufCBgamF2YS5sYW5nLkZsb2F0YCAgICAgICB8IGBrb3RsaW4uRmxvYXQ/YCAgfFxufCBgamF2YS5sYW5nLkRvdWJsZWAgICAgICB8IGBrb3RsaW4uRG91YmxlP2AgIHxcbnwgYGphdmEubGFuZy5Cb29sZWFuYCAgICAgfCBga290bGluLkJvb2xlYW4/YCB8XG4gIFxuTm90ZSB0aGF0IGEgYm94ZWQgcHJpbWl0aXZlIHR5cGUgdXNlZCBhcyBhIHR5cGUgcGFyYW1ldGVyIGlzIG1hcHBlZCB0byBhIHBsYXRmb3JtIHR5cGU6IGZvciBleGFtcGxlLCBgTGlzdCZsdDtqYXZhLmxhbmcuSW50ZWdlciZndDtgIGJlY29tZXMgYSBgTGlzdCZsdDtJbnQhJmd0O2AgaW4gS290bGluLlxuICBcbkNvbGxlY3Rpb24gdHlwZXMgbWF5IGJlIHJlYWQtb25seSBvciBtdXRhYmxlIGluIEtvdGxpbiwgc28gSmF2YSZhcG9zO3MgY29sbGVjdGlvbnMgYXJlIG1hcHBlZCBhcyBmb2xsb3dzIChhbGwgS290bGluIHR5cGVzIGluIHRoaXMgdGFibGUgcmVzaWRlIGluIHRoZSBwYWNrYWdlIGBrb3RsaW4uY29sbGVjdGlvbnNgKTpcbiAgXG58ICoqSmF2YSB0eXBlKiogfCAqKktvdGxpbiByZWFkLW9ubHkgdHlwZSoqICB8ICoqS290bGluIG11dGFibGUgdHlwZSoqIHwgKipMb2FkZWQgcGxhdGZvcm0gdHlwZSoqIHxcbnwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tfC0tLS18LS0tLXxcbnwgYEl0ZXJhdG9yJmx0O1QmZ3Q7YCAgICAgICAgfCBgSXRlcmF0b3ImbHQ7VCZndDtgICAgICAgICB8IGBNdXRhYmxlSXRlcmF0b3ImbHQ7VCZndDtgICAgICAgICAgICAgfCBgKE11dGFibGUpSXRlcmF0b3ImbHQ7VCZndDshYCAgICAgICAgICAgIHxcbnwgYEl0ZXJhYmxlJmx0O1QmZ3Q7YCAgICAgICAgfCBgSXRlcmFibGUmbHQ7VCZndDtgICAgICAgICB8IGBNdXRhYmxlSXRlcmFibGUmbHQ7VCZndDtgICAgICAgICAgICAgfCBgKE11dGFibGUpSXRlcmFibGUmbHQ7VCZndDshYCAgICAgICAgICAgIHxcbnwgYENvbGxlY3Rpb24mbHQ7VCZndDtgICAgICAgfCBgQ29sbGVjdGlvbiZsdDtUJmd0O2AgICAgICB8IGBNdXRhYmxlQ29sbGVjdGlvbiZsdDtUJmd0O2AgICAgICAgICAgfCBgKE11dGFibGUpQ29sbGVjdGlvbiZsdDtUJmd0OyFgICAgICAgICAgIHxcbnwgYFNldCZsdDtUJmd0O2AgICAgICAgICAgICAgfCBgU2V0Jmx0O1QmZ3Q7YCAgICAgICAgICAgICB8IGBNdXRhYmxlU2V0Jmx0O1QmZ3Q7YCAgICAgICAgICAgICAgICAgfCBgKE11dGFibGUpU2V0Jmx0O1QmZ3Q7IWAgICAgICAgICAgICAgICAgIHxcbnwgYExpc3QmbHQ7VCZndDtgICAgICAgICAgICAgfCBgTGlzdCZsdDtUJmd0O2AgICAgICAgICAgICB8IGBNdXRhYmxlTGlzdCZsdDtUJmd0O2AgICAgICAgICAgICAgICAgfCBgKE11dGFibGUpTGlzdCZsdDtUJmd0OyFgICAgICAgICAgICAgICAgIHxcbnwgYExpc3RJdGVyYXRvciZsdDtUJmd0O2AgICAgfCBgTGlzdEl0ZXJhdG9yJmx0O1QmZ3Q7YCAgICB8IGBNdXRhYmxlTGlzdEl0ZXJhdG9yJmx0O1QmZ3Q7YCAgICAgICAgfCBgKE11dGFibGUpTGlzdEl0ZXJhdG9yJmx0O1QmZ3Q7IWAgICAgICAgIHxcbnwgYE1hcCZsdDtLLCBWJmd0O2AgICAgICAgICAgfCBgTWFwJmx0O0ssIFYmZ3Q7YCAgICAgICAgICB8IGBNdXRhYmxlTWFwJmx0O0ssIFYmZ3Q7YCAgICAgICAgICAgICAgfCBgKE11dGFibGUpTWFwJmx0O0ssIFYmZ3Q7IWAgICAgICAgICAgICAgIHxcbnwgYE1hcC5FbnRyeSZsdDtLLCBWJmd0O2AgICAgfCBgTWFwLkVudHJ5Jmx0O0ssIFYmZ3Q7YCAgICB8IGBNdXRhYmxlTWFwLk11dGFibGVFbnRyeSZsdDtLLFYmZ3Q7YCB8IGAoTXV0YWJsZSlNYXAuKE11dGFibGUpRW50cnkmbHQ7SywgViZndDshYCB8XG4gIFxuSmF2YSZhcG9zO3MgYXJyYXlzIGFyZSBtYXBwZWQgYXMgbWVudGlvbmVkIFtiZWxvd10oamF2YS1pbnRlcm9wLmh0bWwjamF2YS1hcnJheXMpOlxuICBcbnwgKipKYXZhIHR5cGUqKiB8ICoqS290bGluIHR5cGUqKiAgfFxufC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS18XG58IGBpbnRbXWAgICAgICAgfCBga290bGluLkludEFycmF5IWAgfFxufCBgU3RyaW5nW11gICAgIHwgYGtvdGxpbi5BcnJheSZsdDsob3V0KSBTdHJpbmcmZ3Q7IWAgfFxuICBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#mapped-types"
            ],
            "flags": 0,
            "guid": "cb~(hV`3aG",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Java generics in Kotlin <i>[Calling Java code from Kotlin]</i>",
                "<p>Kotlin's generics are a little different from Java's (see <a href=\"generics.html\">Generics</a>). When importing Java types to Kotlin we perform some conversions:</p>\n<ul>\n<li align=\"left\">\n<p>Java's wildcards are converted into type projections</p>\n<ul>\n<li align=\"left\"><code>Foo&lt;? extends Bar&gt;</code> becomes <code>Foo&lt;out Bar!&gt;!</code></li>\n<li align=\"left\"><code>Foo&lt;? super Bar&gt;</code> becomes <code>Foo&lt;in Bar!&gt;!</code></li>\n</ul>\n</li>\n<li align=\"left\">\n<p>Java's raw types are converted into star projections</p>\n<ul>\n<li align=\"left\"><code>List</code> becomes <code>List&lt;*&gt;!</code>, i.e. <code>List&lt;out Any?&gt;!</code></li>\n</ul>\n</li>\n</ul>\n<p>Like Java's, Kotlin's generics are not retained at runtime, i.e. objects do not carry information about actual type arguments passed to their constructors, i.e. <code>ArrayList&lt;Integer&gt;()</code> is indistinguishable from <code>ArrayList&lt;Character&gt;()</code>.<br />\nThis makes it impossible to perform <em class=\"keyword\">is</em>-checks that take generics into account.<br />\nKotlin only allows <em class=\"keyword\">is</em>-checks for star-projected generic types:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span> <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #8f5902; font-style: italic\">// Error: cannot check if it is really a List of Ints</span>\n<span style=\"color: #8f5902; font-style: italic\">// but</span>\n<span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span> <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;*&gt;)</span> <span style=\"color: #8f5902; font-style: italic\">// OK: no guarantees about the contents of the list</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTkxMjcsICJpZCI6ICIxNDg4MDUwODQ0NzY4LTAwMSIsICJtZCI6ICJLb3RsaW4mYXBvcztzIGdlbmVyaWNzIGFyZSBhIGxpdHRsZSBkaWZmZXJlbnQgZnJvbSBKYXZhJmFwb3M7cyAoc2VlIFtHZW5lcmljc10oZ2VuZXJpY3MuaHRtbCkpLiBXaGVuIGltcG9ydGluZyBKYXZhIHR5cGVzIHRvIEtvdGxpbiB3ZSBwZXJmb3JtIHNvbWUgY29udmVyc2lvbnM6XG4gIFxuKiBKYXZhJmFwb3M7cyB3aWxkY2FyZHMgYXJlIGNvbnZlcnRlZCBpbnRvIHR5cGUgcHJvamVjdGlvbnNcbiAgICAqIGBGb28mbHQ7PyBleHRlbmRzIEJhciZndDtgIGJlY29tZXMgYEZvbyZsdDtvdXQgQmFyISZndDshYFxuICAgICogYEZvbyZsdDs/IHN1cGVyIEJhciZndDtgIGJlY29tZXMgYEZvbyZsdDtpbiBCYXIhJmd0OyFgXG4gIFxuKiBKYXZhJmFwb3M7cyByYXcgdHlwZXMgYXJlIGNvbnZlcnRlZCBpbnRvIHN0YXIgcHJvamVjdGlvbnNcbiAgICAqIGBMaXN0YCBiZWNvbWVzIGBMaXN0Jmx0OyomZ3Q7IWAsIGkuZS4gYExpc3QmbHQ7b3V0IEFueT8mZ3Q7IWBcbiAgXG5MaWtlIEphdmEmYXBvcztzLCBLb3RsaW4mYXBvcztzIGdlbmVyaWNzIGFyZSBub3QgcmV0YWluZWQgYXQgcnVudGltZSwgaS5lLiBvYmplY3RzIGRvIG5vdCBjYXJyeSBpbmZvcm1hdGlvbiBhYm91dCBhY3R1YWwgdHlwZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZWlyIGNvbnN0cnVjdG9ycywgaS5lLiBgQXJyYXlMaXN0Jmx0O0ludGVnZXImZ3Q7KClgIGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYEFycmF5TGlzdCZsdDtDaGFyYWN0ZXImZ3Q7KClgLlxuVGhpcyBtYWtlcyBpdCBpbXBvc3NpYmxlIHRvIHBlcmZvcm0gKmlzKns6IC5rZXl3b3JkIH0tY2hlY2tzIHRoYXQgdGFrZSBnZW5lcmljcyBpbnRvIGFjY291bnQuXG5Lb3RsaW4gb25seSBhbGxvd3MgKmlzKns6IC5rZXl3b3JkIH0tY2hlY2tzIGZvciBzdGFyLXByb2plY3RlZCBnZW5lcmljIHR5cGVzOlxuICBcbmBgYGtvdGxpblxuaWYgKGEgaXMgTGlzdCZsdDtJbnQmZ3Q7KSAvLyBFcnJvcjogY2Fubm90IGNoZWNrIGlmIGl0IGlzIHJlYWxseSBhIExpc3Qgb2YgSW50c1xuLy8gYnV0XG5pZiAoYSBpcyBMaXN0Jmx0OyomZ3Q7KSAvLyBPSzogbm8gZ3VhcmFudGVlcyBhYm91dCB0aGUgY29udGVudHMgb2YgdGhlIGxpc3RcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#java-generics-in-kotlin"
            ],
            "flags": 0,
            "guid": "tvcX(YO04#",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Java <b>Arrays</b>&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>Arrays in Kotlin are invariant, unlike Java. This means that Kotlin does not let us assign an <code>Array&lt;String&gt;</code> to an <code>Array&lt;Any&gt;</code>, which prevents a possible runtime failure.</p>\n<p>Passing an array of a subclass as an array of superclass to a Kotlin method is also prohibited, but for Java methods this is allowed (through <a href=\"#null-safety-and-platform-types\">platform types</a> of the form <code>Array&lt;(out) String&gt;!</code>).</p>\n<p>Arrays are used with primitive datatypes on the Java platform to avoid the cost of boxing/unboxing operations.<br />\nAs Kotlin hides those implementation details, a workaround is required to interface with Java code.<br />\nThere are specialized classes for every type of primitive array (<code>IntArray</code>, <code>DoubleArray</code>, <code>CharArray</code>, and so on) to handle this case.<br />\nThey are not related to the <code>Array</code> class and are compiled down to Java's primitive arrays for maximum performance.</p>\n<p>Suppose there is a Java method that accepts an int array of indices:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">public</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">JavaArrayExample</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #204a87; font-weight: bold\">void</span> <span style=\"color: #000000\">removeIndices</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">int</span><span style=\"color: #ce5c00; font-weight: bold\">[]</span> <span style=\"color: #000000\">indices</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// code here...</span>\n    <span style=\"color: #ce5c00; font-weight: bold\">}</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p>To pass an array of primitive values you can do the following in Kotlin:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">javaObj</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">JavaArrayExample</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">array</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">intArrayOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">javaObj</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">removeIndices</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">)</span>  <span style=\"color: #8f5902; font-style: italic\">// passes int[] to method</span>\n</pre></div>\n<p>When compiling to JVM byte codes, the compiler optimizes access to arrays so that there's no overhead introduced:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">array</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">arrayOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">4</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #0000cf; font-weight: bold\">2</span> <span style=\"color: #8f5902; font-style: italic\">// no actual calls to get() and set() generated</span>\n<span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// no iterator created</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Even when we navigate with an index, it does not introduce any overhead</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">indices</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// no iterator created</span>\n    <span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">+=</span> <span style=\"color: #0000cf; font-weight: bold\">2</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Finally, <em class=\"keyword\">in</em>-checks have no overhead either</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">indices</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// same as (i &gt;= 0 &amp;&amp; i &lt; array.size)</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">])</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTQ5NDEsICJpZCI6ICIxNDg4MDUwOTE1NTc5LTAwMSIsICJtZCI6ICJBcnJheXMgaW4gS290bGluIGFyZSBpbnZhcmlhbnQsIHVubGlrZSBKYXZhLiBUaGlzIG1lYW5zIHRoYXQgS290bGluIGRvZXMgbm90IGxldCB1cyBhc3NpZ24gYW4gYEFycmF5Jmx0O1N0cmluZyZndDtgIHRvIGFuIGBBcnJheSZsdDtBbnkmZ3Q7YCwgd2hpY2ggcHJldmVudHMgYSBwb3NzaWJsZSBydW50aW1lIGZhaWx1cmUuXG4gIFxuUGFzc2luZyBhbiBhcnJheSBvZiBhIHN1YmNsYXNzIGFzIGFuIGFycmF5IG9mIHN1cGVyY2xhc3MgdG8gYSBLb3RsaW4gbWV0aG9kIGlzIGFsc28gcHJvaGliaXRlZCwgYnV0IGZvciBKYXZhIG1ldGhvZHMgdGhpcyBpcyBhbGxvd2VkICh0aHJvdWdoIFtwbGF0Zm9ybSB0eXBlc10oI251bGwtc2FmZXR5LWFuZC1wbGF0Zm9ybS10eXBlcykgb2YgdGhlIGZvcm0gYEFycmF5Jmx0OyhvdXQpIFN0cmluZyZndDshYCkuXG4gIFxuQXJyYXlzIGFyZSB1c2VkIHdpdGggcHJpbWl0aXZlIGRhdGF0eXBlcyBvbiB0aGUgSmF2YSBwbGF0Zm9ybSB0byBhdm9pZCB0aGUgY29zdCBvZiBib3hpbmcvdW5ib3hpbmcgb3BlcmF0aW9ucy5cbkFzIEtvdGxpbiBoaWRlcyB0aG9zZSBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLCBhIHdvcmthcm91bmQgaXMgcmVxdWlyZWQgdG8gaW50ZXJmYWNlIHdpdGggSmF2YSBjb2RlLlxuVGhlcmUgYXJlIHNwZWNpYWxpemVkIGNsYXNzZXMgZm9yIGV2ZXJ5IHR5cGUgb2YgcHJpbWl0aXZlIGFycmF5IChgSW50QXJyYXlgLCBgRG91YmxlQXJyYXlgLCBgQ2hhckFycmF5YCwgYW5kIHNvIG9uKSB0byBoYW5kbGUgdGhpcyBjYXNlLlxuVGhleSBhcmUgbm90IHJlbGF0ZWQgdG8gdGhlIGBBcnJheWAgY2xhc3MgYW5kIGFyZSBjb21waWxlZCBkb3duIHRvIEphdmEmYXBvcztzIHByaW1pdGl2ZSBhcnJheXMgZm9yIG1heGltdW0gcGVyZm9ybWFuY2UuXG4gIFxuU3VwcG9zZSB0aGVyZSBpcyBhIEphdmEgbWV0aG9kIHRoYXQgYWNjZXB0cyBhbiBpbnQgYXJyYXkgb2YgaW5kaWNlczpcbiAgXG5gYGBqYXZhXG5wdWJsaWMgY2xhc3MgSmF2YUFycmF5RXhhbXBsZSB7XG4gIFxuICAgIHB1YmxpYyB2b2lkIHJlbW92ZUluZGljZXMoaW50W10gaW5kaWNlcykge1xuICAgICAgICAvLyBjb2RlIGhlcmUuLi5cbiAgICB9XG59XG5gYGBcbiAgXG5UbyBwYXNzIGFuIGFycmF5IG9mIHByaW1pdGl2ZSB2YWx1ZXMgeW91IGNhbiBkbyB0aGUgZm9sbG93aW5nIGluIEtvdGxpbjpcbiAgXG5gYGBrb3RsaW5cbnZhbCBqYXZhT2JqID0gSmF2YUFycmF5RXhhbXBsZSgpXG52YWwgYXJyYXkgPSBpbnRBcnJheU9mKDAsIDEsIDIsIDMpXG5qYXZhT2JqLnJlbW92ZUluZGljZXMoYXJyYXkpICAvLyBwYXNzZXMgaW50W10gdG8gbWV0aG9kXG5gYGBcbiAgXG5XaGVuIGNvbXBpbGluZyB0byBKVk0gYnl0ZSBjb2RlcywgdGhlIGNvbXBpbGVyIG9wdGltaXplcyBhY2Nlc3MgdG8gYXJyYXlzIHNvIHRoYXQgdGhlcmUmYXBvcztzIG5vIG92ZXJoZWFkIGludHJvZHVjZWQ6XG4gIFxuYGBga290bGluXG52YWwgYXJyYXkgPSBhcnJheU9mKDEsIDIsIDMsIDQpXG5hcnJheVt4XSA9IGFycmF5W3hdICogMiAvLyBubyBhY3R1YWwgY2FsbHMgdG8gZ2V0KCkgYW5kIHNldCgpIGdlbmVyYXRlZFxuZm9yICh4IGluIGFycmF5KSB7IC8vIG5vIGl0ZXJhdG9yIGNyZWF0ZWRcbiAgICBwcmludCh4KVxufVxuYGBgXG4gIFxuRXZlbiB3aGVuIHdlIG5hdmlnYXRlIHdpdGggYW4gaW5kZXgsIGl0IGRvZXMgbm90IGludHJvZHVjZSBhbnkgb3ZlcmhlYWRcbiAgXG5gYGBrb3RsaW5cbmZvciAoaSBpbiBhcnJheS5pbmRpY2VzKSB7IC8vIG5vIGl0ZXJhdG9yIGNyZWF0ZWRcbiAgICBhcnJheVtpXSArPSAyXG59XG5gYGBcbiAgXG5GaW5hbGx5LCAqaW4qezogLmtleXdvcmQgfS1jaGVja3MgaGF2ZSBubyBvdmVyaGVhZCBlaXRoZXJcbiAgXG5gYGBrb3RsaW5cbmlmIChpIGluIGFycmF5LmluZGljZXMpIHsgLy8gc2FtZSBhcyAoaSAmZ3Q7PSAwICZhbXA7JmFtcDsgaSAmbHQ7IGFycmF5LnNpemUpXG4gICAgcHJpbnQoYXJyYXlbaV0pXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#java-arrays"
            ],
            "flags": 0,
            "guid": "JW8yM{PFT1",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Java <b>Varargs</b>&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>Java classes sometimes use a method declaration for the indices with a variable number of arguments (varargs).</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">public</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">JavaArrayExample</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #204a87; font-weight: bold\">void</span> <span style=\"color: #000000\">removeIndices</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">int</span><span style=\"color: #ce5c00; font-weight: bold\">...</span> <span style=\"color: #000000\">indices</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// code here...</span>\n    <span style=\"color: #ce5c00; font-weight: bold\">}</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p>In that case you need to use the spread operator <code>*</code> to pass the <code>IntArray</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">javaObj</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">JavaArray</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">array</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">intArrayOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">javaObj</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">removeIndicesVarArg</span><span style=\"color: #000000; font-weight: bold\">(*</span><span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p><strong>It's currently not possible to pass <em class=\"keyword\">null</em> to a method that is declared as varargs.</strong></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTQ5NjUsICJpZCI6ICIxNDg4MDUxMDM3MzIyLTAwMSIsICJtZCI6ICJKYXZhIGNsYXNzZXMgc29tZXRpbWVzIHVzZSBhIG1ldGhvZCBkZWNsYXJhdGlvbiBmb3IgdGhlIGluZGljZXMgd2l0aCBhIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHMgKHZhcmFyZ3MpLlxuICBcbmBgYGphdmFcbnB1YmxpYyBjbGFzcyBKYXZhQXJyYXlFeGFtcGxlIHtcbiAgXG4gICAgcHVibGljIHZvaWQgcmVtb3ZlSW5kaWNlcyhpbnQuLi4gaW5kaWNlcykge1xuICAgICAgICAvLyBjb2RlIGhlcmUuLi5cbiAgICB9XG59XG5gYGBcbiAgXG5JbiB0aGF0IGNhc2UgeW91IG5lZWQgdG8gdXNlIHRoZSBzcHJlYWQgb3BlcmF0b3IgYCpgIHRvIHBhc3MgdGhlIGBJbnRBcnJheWA6XG4gIFxuYGBga290bGluXG52YWwgamF2YU9iaiA9IEphdmFBcnJheSgpXG52YWwgYXJyYXkgPSBpbnRBcnJheU9mKDAsIDEsIDIsIDMpXG5qYXZhT2JqLnJlbW92ZUluZGljZXNWYXJBcmcoKmFycmF5KVxuYGBgXG4gIFxuKipJdCZhcG9zO3MgY3VycmVudGx5IG5vdCBwb3NzaWJsZSB0byBwYXNzICpudWxsKns6IC5rZXl3b3JkIH0gdG8gYSBtZXRob2QgdGhhdCBpcyBkZWNsYXJlZCBhcyB2YXJhcmdzLioqXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#java-varargs"
            ],
            "flags": 0,
            "guid": "CZpKr0c/NH",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Operators&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>Since Java has no way of marking methods for which it makes sense to use the operator syntax, Kotlin allows using any Java methods with the right name and signature as operator overloads and other conventions (<code>invoke()</code> etc.).<br />\n<strong>Calling Java methods using the infix call syntax is not allowed.</strong></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTUwMDQsICJpZCI6ICIxNDg4MDUxMDM5MjQ0LTAwMSIsICJtZCI6ICJTaW5jZSBKYXZhIGhhcyBubyB3YXkgb2YgbWFya2luZyBtZXRob2RzIGZvciB3aGljaCBpdCBtYWtlcyBzZW5zZSB0byB1c2UgdGhlIG9wZXJhdG9yIHN5bnRheCwgS290bGluIGFsbG93cyB1c2luZyBhbnkgSmF2YSBtZXRob2RzIHdpdGggdGhlIHJpZ2h0IG5hbWUgYW5kIHNpZ25hdHVyZSBhcyBvcGVyYXRvciBvdmVybG9hZHMgYW5kIG90aGVyIGNvbnZlbnRpb25zIChgaW52b2tlKClgIGV0Yy4pLlxuKipDYWxsaW5nIEphdmEgbWV0aG9kcyB1c2luZyB0aGUgaW5maXggY2FsbCBzeW50YXggaXMgbm90IGFsbG93ZWQuKipcbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#operators"
            ],
            "flags": 0,
            "guid": "Q+`RC]}T6:",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Checked <b>Exceptions</b>&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>In Kotlin, all exceptions are unchecked, meaning that the compiler does not force you to catch any of them.<br />\nSo, when you call a Java method that declares a checked exception, Kotlin does not force you to do anything:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">render</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;*&gt;,</span> <span style=\"color: #000000\">to</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Appendable</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">to</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">append</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toString</span><span style=\"color: #000000; font-weight: bold\">())</span> <span style=\"color: #8f5902; font-style: italic\">// Java would require us to catch IOException here</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTUwMTgsICJpZCI6ICIxNDg4MDUxMDY0MzYxLTAwMSIsICJtZCI6ICJJbiBLb3RsaW4sIGFsbCBleGNlcHRpb25zIGFyZSB1bmNoZWNrZWQsIG1lYW5pbmcgdGhhdCB0aGUgY29tcGlsZXIgZG9lcyBub3QgZm9yY2UgeW91IHRvIGNhdGNoIGFueSBvZiB0aGVtLlxuU28sIHdoZW4geW91IGNhbGwgYSBKYXZhIG1ldGhvZCB0aGF0IGRlY2xhcmVzIGEgY2hlY2tlZCBleGNlcHRpb24sIEtvdGxpbiBkb2VzIG5vdCBmb3JjZSB5b3UgdG8gZG8gYW55dGhpbmc6XG4gIFxuYGBga290bGluXG5mdW4gcmVuZGVyKGxpc3Q6IExpc3QmbHQ7KiZndDssIHRvOiBBcHBlbmRhYmxlKSB7XG4gICAgZm9yIChpdGVtIGluIGxpc3QpIHtcbiAgICAgICAgdG8uYXBwZW5kKGl0ZW0udG9TdHJpbmcoKSkgLy8gSmF2YSB3b3VsZCByZXF1aXJlIHVzIHRvIGNhdGNoIElPRXhjZXB0aW9uIGhlcmVcbiAgICB9XG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#checked-exceptions"
            ],
            "flags": 0,
            "guid": "rM:,mdlg*<",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Object Methods</b>&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>When Java types are imported into Kotlin, all the references of the type <code>java.lang.Object</code> are turned into <code>Any</code>.<br />\nSince <code>Any</code> is not platform-specific, it only declares <code>toString()</code>, <code>hashCode()</code> and <code>equals()</code> as its members, so to make other members of <code>java.lang.Object</code> available, Kotlin uses <a href=\"extensions.html\">extension functions</a>.</p>\n<h3>wait()/notify()</h3>\n<p><a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\">Effective Java</a> Item 69 kindly suggests to prefer concurrency utilities to <code>wait()</code> and <code>notify()</code>.<br />\nThus, these methods are not available on references of type <code>Any</code>.<br />\nIf you really need to call them, you can cast to <code>java.lang.Object</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000;font-weight: bold\">(</span><span style=\"color: #000000\">foo</span> <span style=\"color: #204a87; font-weight: bold\">as</span> <span style=\"color: #000000\">java</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">lang</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Object</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">wait</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div>\n<h3>getClass()</h3>\n<p>To retrieve the Java class of an object, use the <code>java</code> extension property on a <a href=\"reflection.html#class-references\">class reference</a>.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">fooClass</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">foo</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #204a87; font-weight: bold\">class</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">java</span>\n</pre></div>\n<p>The code above uses a <a href=\"reflection.html#bound-class-references-since-11\">bound class reference</a>, which is supported since Kotlin 1.1. You can also use the <code>javaClass</code> extension property.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">fooClass</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">javaClass</span>\n</pre></div>\n<h3>clone()</h3>\n<p>To override <code>clone()</code>, your class needs to extend <code>kotlin.Cloneable</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Example</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Cloneable</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">clone</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">Any</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Do not forget about <a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\">Effective Java</a>, Item 11: <em>Override clone judiciously</em>.</p>\n<h3>finalize()</h3>\n<p>To override <code>finalize()</code>, all you need to do is simply declare it, without using the <em class=\"keyword\">override</em> keyword:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">protected</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">finalize</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// finalization logic</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>According to Java's rules, <code>finalize()</code> must not be <em class=\"keyword\">private</em>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTUwODMsICJpZCI6ICIxNDg4MDUxMDk1OTc2LTAwMSIsICJtZCI6ICJXaGVuIEphdmEgdHlwZXMgYXJlIGltcG9ydGVkIGludG8gS290bGluLCBhbGwgdGhlIHJlZmVyZW5jZXMgb2YgdGhlIHR5cGUgYGphdmEubGFuZy5PYmplY3RgIGFyZSB0dXJuZWQgaW50byBgQW55YC5cblNpbmNlIGBBbnlgIGlzIG5vdCBwbGF0Zm9ybS1zcGVjaWZpYywgaXQgb25seSBkZWNsYXJlcyBgdG9TdHJpbmcoKWAsIGBoYXNoQ29kZSgpYCBhbmQgYGVxdWFscygpYCBhcyBpdHMgbWVtYmVycywgc28gdG8gbWFrZSBvdGhlciBtZW1iZXJzIG9mIGBqYXZhLmxhbmcuT2JqZWN0YCBhdmFpbGFibGUsIEtvdGxpbiB1c2VzIFtleHRlbnNpb24gZnVuY3Rpb25zXShleHRlbnNpb25zLmh0bWwpLlxuICBcbiMjIyB3YWl0KCkvbm90aWZ5KClcbiAgXG5bRWZmZWN0aXZlIEphdmFdKGh0dHA6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9qYXZhL2VmZmVjdGl2ZWphdmEtMTM2MTc0Lmh0bWwpIEl0ZW0gNjkga2luZGx5IHN1Z2dlc3RzIHRvIHByZWZlciBjb25jdXJyZW5jeSB1dGlsaXRpZXMgdG8gYHdhaXQoKWAgYW5kIGBub3RpZnkoKWAuXG5UaHVzLCB0aGVzZSBtZXRob2RzIGFyZSBub3QgYXZhaWxhYmxlIG9uIHJlZmVyZW5jZXMgb2YgdHlwZSBgQW55YC5cbklmIHlvdSByZWFsbHkgbmVlZCB0byBjYWxsIHRoZW0sIHlvdSBjYW4gY2FzdCB0byBgamF2YS5sYW5nLk9iamVjdGA6XG4gIFxuYGBga290bGluXG4oZm9vIGFzIGphdmEubGFuZy5PYmplY3QpLndhaXQoKVxuYGBgXG4gIFxuIyMjIGdldENsYXNzKClcbiAgXG5UbyByZXRyaWV2ZSB0aGUgSmF2YSBjbGFzcyBvZiBhbiBvYmplY3QsIHVzZSB0aGUgYGphdmFgIGV4dGVuc2lvbiBwcm9wZXJ0eSBvbiBhIFtjbGFzcyByZWZlcmVuY2VdKHJlZmxlY3Rpb24uaHRtbCNjbGFzcy1yZWZlcmVuY2VzKS5cbiAgXG5gYGBrb3RsaW5cbnZhbCBmb29DbGFzcyA9IGZvbzo6Y2xhc3MuamF2YVxuYGBgXG4gIFxuVGhlIGNvZGUgYWJvdmUgdXNlcyBhIFtib3VuZCBjbGFzcyByZWZlcmVuY2VdKHJlZmxlY3Rpb24uaHRtbCNib3VuZC1jbGFzcy1yZWZlcmVuY2VzLXNpbmNlLTExKSwgd2hpY2ggaXMgc3VwcG9ydGVkIHNpbmNlIEtvdGxpbiAxLjEuIFlvdSBjYW4gYWxzbyB1c2UgdGhlIGBqYXZhQ2xhc3NgIGV4dGVuc2lvbiBwcm9wZXJ0eS5cbiAgXG5gYGBrb3RsaW5cbnZhbCBmb29DbGFzcyA9IGZvby5qYXZhQ2xhc3NcbmBgYFxuICBcbiMjIyBjbG9uZSgpXG4gIFxuVG8gb3ZlcnJpZGUgYGNsb25lKClgLCB5b3VyIGNsYXNzIG5lZWRzIHRvIGV4dGVuZCBga290bGluLkNsb25lYWJsZWA6XG4gIFxuYGBga290bGluXG4gIFxuY2xhc3MgRXhhbXBsZSA6IENsb25lYWJsZSB7XG4gICAgb3ZlcnJpZGUgZnVuIGNsb25lKCk6IEFueSB7IC4uLiB9XG59XG5gYGBcbiAgXG5EbyBub3QgZm9yZ2V0IGFib3V0IFtFZmZlY3RpdmUgSmF2YV0oaHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL2phdmEvZWZmZWN0aXZlamF2YS0xMzYxNzQuaHRtbCksIEl0ZW0gMTE6ICpPdmVycmlkZSBjbG9uZSBqdWRpY2lvdXNseSouXG4gIFxuIyMjIGZpbmFsaXplKClcbiAgXG5UbyBvdmVycmlkZSBgZmluYWxpemUoKWAsIGFsbCB5b3UgbmVlZCB0byBkbyBpcyBzaW1wbHkgZGVjbGFyZSBpdCwgd2l0aG91dCB1c2luZyB0aGUgKm92ZXJyaWRlKns6LmtleXdvcmR9IGtleXdvcmQ6XG4gIFxuYGBga290bGluXG5jbGFzcyBDIHtcbiAgICBwcm90ZWN0ZWQgZnVuIGZpbmFsaXplKCkge1xuICAgICAgICAvLyBmaW5hbGl6YXRpb24gbG9naWNcbiAgICB9XG59XG5gYGBcbiAgXG5BY2NvcmRpbmcgdG8gSmF2YSZhcG9zO3MgcnVsZXMsIGBmaW5hbGl6ZSgpYCBtdXN0IG5vdCBiZSAqcHJpdmF0ZSp7OiAua2V5d29yZCB9LlxuICBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#object-methods"
            ],
            "flags": 0,
            "guid": "d=)h8)GIOZ",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Inheritance from Java classes&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>At most one Java class (and as many Java interfaces as you like) can be a supertype for a class in Kotlin.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTUwOTcsICJpZCI6ICIxNDg4MDUxMjIyNTAwLTAwMSIsICJtZCI6ICJBdCBtb3N0IG9uZSBKYXZhIGNsYXNzIChhbmQgYXMgbWFueSBKYXZhIGludGVyZmFjZXMgYXMgeW91IGxpa2UpIGNhbiBiZSBhIHN1cGVydHlwZSBmb3IgYSBjbGFzcyBpbiBLb3RsaW4uXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#inheritance-from-java-classes"
            ],
            "flags": 0,
            "guid": "cO#i-r{NY+",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Accessing static members&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>Static members of Java classes form \"<strong>companion objects</strong>\" for these classes. We cannot pass such a \"companion object\" around as a value, but can access the members explicitly, for example</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Character</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">isLetter</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTUxMjAsICJpZCI6ICIxNDg4MDUxMjYwMDcxLTAwMSIsICJtZCI6ICJTdGF0aWMgbWVtYmVycyBvZiBKYXZhIGNsYXNzZXMgZm9ybSAmcXVvdDsqKmNvbXBhbmlvbiBvYmplY3RzKiomcXVvdDsgZm9yIHRoZXNlIGNsYXNzZXMuIFdlIGNhbm5vdCBwYXNzIHN1Y2ggYSAmcXVvdDtjb21wYW5pb24gb2JqZWN0JnF1b3Q7IGFyb3VuZCBhcyBhIHZhbHVlLCBidXQgY2FuIGFjY2VzcyB0aGUgbWVtYmVycyBleHBsaWNpdGx5LCBmb3IgZXhhbXBsZVxuICBcbmBgYGtvdGxpblxuaWYgKENoYXJhY3Rlci5pc0xldHRlcihhKSkge1xuICAgIC8vIC4uLlxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#accessing-static-members"
            ],
            "flags": 0,
            "guid": "F#?6pj&3[C",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Java <b>Reflection</b>&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>Java reflection works on Kotlin classes and vice versa. As mentioned above, you can use <code>instance::class.java</code>, <code>ClassName::class.java</code> or <code>instance.javaClass</code> to enter Java reflection through <code>java.lang.Class</code>.</p>\n<p>Other supported cases include acquiring a Java getter/setter method or a backing field for a Kotlin property, a <code>KProperty</code> for a Java field, a Java method or constructor for a <code>KFunction</code> and vice versa.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTUxMzksICJpZCI6ICIxNDg4MDUxMjc5NTQ2LTAwMSIsICJtZCI6ICJKYXZhIHJlZmxlY3Rpb24gd29ya3Mgb24gS290bGluIGNsYXNzZXMgYW5kIHZpY2UgdmVyc2EuIEFzIG1lbnRpb25lZCBhYm92ZSwgeW91IGNhbiB1c2UgYGluc3RhbmNlOjpjbGFzcy5qYXZhYCwgYENsYXNzTmFtZTo6Y2xhc3MuamF2YWAgb3IgYGluc3RhbmNlLmphdmFDbGFzc2AgdG8gZW50ZXIgSmF2YSByZWZsZWN0aW9uIHRocm91Z2ggYGphdmEubGFuZy5DbGFzc2AuXG4gXG5PdGhlciBzdXBwb3J0ZWQgY2FzZXMgaW5jbHVkZSBhY3F1aXJpbmcgYSBKYXZhIGdldHRlci9zZXR0ZXIgbWV0aG9kIG9yIGEgYmFja2luZyBmaWVsZCBmb3IgYSBLb3RsaW4gcHJvcGVydHksIGEgYEtQcm9wZXJ0eWAgZm9yIGEgSmF2YSBmaWVsZCwgYSBKYXZhIG1ldGhvZCBvciBjb25zdHJ1Y3RvciBmb3IgYSBgS0Z1bmN0aW9uYCBhbmQgdmljZSB2ZXJzYS5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#java-reflection"
            ],
            "flags": 0,
            "guid": "z]$v;<~S0r",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>SAM</b> Conversions&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>Just like Java 8, Kotlin supports SAM conversions.</p>\n<p>This means that Kotlin function literals can be automatically converted into implementations of Java interfaces with a single non-default method, as long as the parameter types of the interface method match the parameter types of the Kotlin function.</p>\n<p>You can use this for creating instances of SAM interfaces:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">runnable</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Runnable</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"This runs in a runnable\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>...and in method calls:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">executor</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ThreadPoolExecutor</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #8f5902; font-style: italic\">// Java signature: void execute(Runnable command)</span>\n<span style=\"color: #000000\">executor</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">execute</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"This runs in a thread pool\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>If the Java class has multiple methods taking functional interfaces, you can choose the one you need to call by using an adapter function that converts a lambda to a specific SAM type. <br />\nThose adapter functions are also generated by the compiler when needed.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">executor</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">execute</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Runnable</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"This runs in a thread pool\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">})</span>\n</pre></div>\n<p>Note that SAM conversions only work for interfaces, not for abstract classes, even if those also have just a single abstract method.</p>\n<p><strong>Also note that this feature works only for Java interop; since Kotlin has proper function types, automatic conversion of functions into implementations of Kotlin interfaces is unnecessary and therefore unsupported.</strong></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTI5NjM2NzYsICJpZCI6ICIxNDg4MDUxMzAxMDI4LTAwMSIsICJtZCI6ICJKdXN0IGxpa2UgSmF2YSA4LCBLb3RsaW4gc3VwcG9ydHMgU0FNIGNvbnZlcnNpb25zLlxuICBcblRoaXMgbWVhbnMgdGhhdCBLb3RsaW4gZnVuY3Rpb24gbGl0ZXJhbHMgY2FuIGJlIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIGludG8gaW1wbGVtZW50YXRpb25zIG9mIEphdmEgaW50ZXJmYWNlcyB3aXRoIGEgc2luZ2xlIG5vbi1kZWZhdWx0IG1ldGhvZCwgYXMgbG9uZyBhcyB0aGUgcGFyYW1ldGVyIHR5cGVzIG9mIHRoZSBpbnRlcmZhY2UgbWV0aG9kIG1hdGNoIHRoZSBwYXJhbWV0ZXIgdHlwZXMgb2YgdGhlIEtvdGxpbiBmdW5jdGlvbi5cbiAgXG5Zb3UgY2FuIHVzZSB0aGlzIGZvciBjcmVhdGluZyBpbnN0YW5jZXMgb2YgU0FNIGludGVyZmFjZXM6XG4gIFxuYGBga290bGluXG52YWwgcnVubmFibGUgPSBSdW5uYWJsZSB7IHByaW50bG4oJnF1b3Q7VGhpcyBydW5zIGluIGEgcnVubmFibGUmcXVvdDspIH1cbmBgYFxuICBcbi4uLmFuZCBpbiBtZXRob2QgY2FsbHM6XG4gIFxuYGBga290bGluXG52YWwgZXhlY3V0b3IgPSBUaHJlYWRQb29sRXhlY3V0b3IoKVxuLy8gSmF2YSBzaWduYXR1cmU6IHZvaWQgZXhlY3V0ZShSdW5uYWJsZSBjb21tYW5kKVxuZXhlY3V0b3IuZXhlY3V0ZSB7IHByaW50bG4oJnF1b3Q7VGhpcyBydW5zIGluIGEgdGhyZWFkIHBvb2wmcXVvdDspIH1cbmBgYFxuICBcbklmIHRoZSBKYXZhIGNsYXNzIGhhcyBtdWx0aXBsZSBtZXRob2RzIHRha2luZyBmdW5jdGlvbmFsIGludGVyZmFjZXMsIHlvdSBjYW4gY2hvb3NlIHRoZSBvbmUgeW91IG5lZWQgdG8gY2FsbCBieSB1c2luZyBhbiBhZGFwdGVyIGZ1bmN0aW9uIHRoYXQgY29udmVydHMgYSBsYW1iZGEgdG8gYSBzcGVjaWZpYyBTQU0gdHlwZS4gXG5UaG9zZSBhZGFwdGVyIGZ1bmN0aW9ucyBhcmUgYWxzbyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyIHdoZW4gbmVlZGVkLlxuICBcbmBgYGtvdGxpblxuZXhlY3V0b3IuZXhlY3V0ZShSdW5uYWJsZSB7IHByaW50bG4oJnF1b3Q7VGhpcyBydW5zIGluIGEgdGhyZWFkIHBvb2wmcXVvdDspIH0pXG5gYGBcbiAgXG5Ob3RlIHRoYXQgU0FNIGNvbnZlcnNpb25zIG9ubHkgd29yayBmb3IgaW50ZXJmYWNlcywgbm90IGZvciBhYnN0cmFjdCBjbGFzc2VzLCBldmVuIGlmIHRob3NlIGFsc28gaGF2ZSBqdXN0IGEgc2luZ2xlIGFic3RyYWN0IG1ldGhvZC5cbiAgXG4qKkFsc28gbm90ZSB0aGF0IHRoaXMgZmVhdHVyZSB3b3JrcyBvbmx5IGZvciBKYXZhIGludGVyb3A7IHNpbmNlIEtvdGxpbiBoYXMgcHJvcGVyIGZ1bmN0aW9uIHR5cGVzLCBhdXRvbWF0aWMgY29udmVyc2lvbiBvZiBmdW5jdGlvbnMgaW50byBpbXBsZW1lbnRhdGlvbnMgb2YgS290bGluIGludGVyZmFjZXMgaXMgdW5uZWNlc3NhcnkgYW5kIHRoZXJlZm9yZSB1bnN1cHBvcnRlZC4qKlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions"
            ],
            "flags": 0,
            "guid": "dRxAIH~6SV",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using <b>JNI</b> with Kotlin&nbsp;<i>[Calling Java code from Kotlin]</i>",
                "<p>To declare a function that is implemented in <strong>native</strong> (C or C++) code, you need to mark it with the <code class=\"keyword\">external</code> modifier:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">external</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Double</span>\n</pre></div>\n<p>The rest of the procedure works in exactly the same way as in Java.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTQ3NzgwNDEsICJpZCI6ICIxNDg4MDUxMzI0ODg4LTAwMSIsICJtZCI6ICJUbyBkZWNsYXJlIGEgZnVuY3Rpb24gdGhhdCBpcyBpbXBsZW1lbnRlZCBpbiAqKm5hdGl2ZSoqIChDIG9yIEMrKykgY29kZSwgeW91IG5lZWQgdG8gbWFyayBpdCB3aXRoIHRoZSBgZXh0ZXJuYWxgezogLmtleXdvcmQgfSBtb2RpZmllcjpcbiAgXG5gYGBrb3RsaW5cbmV4dGVybmFsIGZ1biBmb28oeDogSW50KTogRG91YmxlXG5gYGBcbiAgXG5UaGUgcmVzdCBvZiB0aGUgcHJvY2VkdXJlIHdvcmtzIGluIGV4YWN0bHkgdGhlIHNhbWUgd2F5IGFzIGluIEphdmEuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/java-interop.html#using-jni-with-kotlin"
            ],
            "flags": 0,
            "guid": "Km63eLO,#b",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingJavaFromKotlin",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Properties</b>&nbsp;<i>[Calling Kotlin from Java]</i>",
                "<p>A Kotlin property is compiled to the following Java elements:</p>\n<ul>\n<li align=\"left\">A getter method, with the name calculated by prepending the <code>get</code> prefix;</li>\n<li align=\"left\">A setter method, with the name calculated by prepending the <code>set</code> prefix (only for <code>var</code> properties);</li>\n<li align=\"left\">A private field, with the same name as the property name (only for properties with backing fields).</li>\n</ul>\n<p>For example, <code>var firstName: String</code> gets compiled to the following Java declarations:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">private</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000\">firstName</span><span style=\"color: #ce5c00; font-weight: bold\">;</span>\n\n<span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000\">getFirstName</span><span style=\"color: #ce5c00; font-weight: bold\">()</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">firstName</span><span style=\"color: #ce5c00; font-weight: bold\">;</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #204a87; font-weight: bold\">void</span> <span style=\"color: #000000\">setFirstName</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">String</span> <span style=\"color: #000000\">firstName</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">firstName</span> <span style=\"color: #ce5c00; font-weight: bold\">=</span> <span style=\"color: #000000\">firstName</span><span style=\"color: #ce5c00; font-weight: bold\">;</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p>If the name of the property starts with <code>is</code>, a different name mapping rule is used: the name of the getter will be the same as the property name, and the name of the setter will be obtained by replacing <code>is</code> with <code>set</code>.<br />\nFor example, for a property <code>isOpen</code>, the getter will be called <code>isOpen()</code> and the setter will be called <code>setOpen()</code>.<br />\nThis rule applies for properties of any type, not just <code>Boolean</code>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzE2NjksICJpZCI6ICIxNDg4MDUxMzQxNjU0LTAwMSIsICJtZCI6ICJBIEtvdGxpbiBwcm9wZXJ0eSBpcyBjb21waWxlZCB0byB0aGUgZm9sbG93aW5nIEphdmEgZWxlbWVudHM6XG4gIFxuICogQSBnZXR0ZXIgbWV0aG9kLCB3aXRoIHRoZSBuYW1lIGNhbGN1bGF0ZWQgYnkgcHJlcGVuZGluZyB0aGUgYGdldGAgcHJlZml4O1xuICogQSBzZXR0ZXIgbWV0aG9kLCB3aXRoIHRoZSBuYW1lIGNhbGN1bGF0ZWQgYnkgcHJlcGVuZGluZyB0aGUgYHNldGAgcHJlZml4IChvbmx5IGZvciBgdmFyYCBwcm9wZXJ0aWVzKTtcbiAqIEEgcHJpdmF0ZSBmaWVsZCwgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBwcm9wZXJ0eSBuYW1lIChvbmx5IGZvciBwcm9wZXJ0aWVzIHdpdGggYmFja2luZyBmaWVsZHMpLlxuICBcbkZvciBleGFtcGxlLCBgdmFyIGZpcnN0TmFtZTogU3RyaW5nYCBnZXRzIGNvbXBpbGVkIHRvIHRoZSBmb2xsb3dpbmcgSmF2YSBkZWNsYXJhdGlvbnM6XG4gIFxuYGBgamF2YVxucHJpdmF0ZSBTdHJpbmcgZmlyc3ROYW1lO1xuICBcbnB1YmxpYyBTdHJpbmcgZ2V0Rmlyc3ROYW1lKCkge1xuICAgIHJldHVybiBmaXJzdE5hbWU7XG59XG4gIFxucHVibGljIHZvaWQgc2V0Rmlyc3ROYW1lKFN0cmluZyBmaXJzdE5hbWUpIHtcbiAgICB0aGlzLmZpcnN0TmFtZSA9IGZpcnN0TmFtZTtcbn1cbmBgYFxuICBcbklmIHRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSBzdGFydHMgd2l0aCBgaXNgLCBhIGRpZmZlcmVudCBuYW1lIG1hcHBpbmcgcnVsZSBpcyB1c2VkOiB0aGUgbmFtZSBvZiB0aGUgZ2V0dGVyIHdpbGwgYmUgdGhlIHNhbWUgYXMgdGhlIHByb3BlcnR5IG5hbWUsIGFuZCB0aGUgbmFtZSBvZiB0aGUgc2V0dGVyIHdpbGwgYmUgb2J0YWluZWQgYnkgcmVwbGFjaW5nIGBpc2Agd2l0aCBgc2V0YC5cbkZvciBleGFtcGxlLCBmb3IgYSBwcm9wZXJ0eSBgaXNPcGVuYCwgdGhlIGdldHRlciB3aWxsIGJlIGNhbGxlZCBgaXNPcGVuKClgIGFuZCB0aGUgc2V0dGVyIHdpbGwgYmUgY2FsbGVkIGBzZXRPcGVuKClgLlxuVGhpcyBydWxlIGFwcGxpZXMgZm9yIHByb3BlcnRpZXMgb2YgYW55IHR5cGUsIG5vdCBqdXN0IGBCb29sZWFuYC5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#properties"
            ],
            "flags": 0,
            "guid": "lBsS(7DDMO",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Package-Level Functions&nbsp;<i>[Calling Kotlin from Java]</i>",
                "<p>All the functions and properties declared in a file <code>example.kt</code> inside a package <code>org.foo.bar</code>, including extension functions, are compiled into static methods of a Java class named <code>org.foo.bar.ExampleKt</code>.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">// example.kt</span>\n<span style=\"color: #204a87; font-weight: bold\">package</span> <span style=\"color: #000000\">demo</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Foo</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">new</span> <span style=\"color: #000000\">demo</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">Foo</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n<span style=\"color: #000000\">demo</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">ExampleKt</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">bar</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n</pre></div>\n<p>The name of the generated Java class can be changed using the <code>@JvmName</code> annotation:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">@file</span><span style=\"color: #000000; font-weight: bold\">:</span><span style=\"color: #000000\">JvmName</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"DemoUtils\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">package</span> <span style=\"color: #000000\">demo</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Foo</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">new</span> <span style=\"color: #000000\">demo</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">Foo</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n<span style=\"color: #000000\">demo</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">DemoUtils</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">bar</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n</pre></div>\n<p>Having multiple files which have the same generated Java class name (the same package and the same name or the same @JvmName annotation) is normally an error. However, the compiler has the ability to generate a single Java facade class which has the specified name and contains all the declarations from all the files which have that name.<br />\nTo enable the generation of such a facade, use the @JvmMultifileClass annotation in all of the files.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// oldutils.kt</span>\n<span style=\"color: #000000\">@file</span><span style=\"color: #000000; font-weight: bold\">:</span><span style=\"color: #000000\">JvmName</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Utils\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">@file</span><span style=\"color: #000000; font-weight: bold\">:</span><span style=\"color: #000000\">JvmMultifileClass</span>\n\n<span style=\"color: #204a87; font-weight: bold\">package</span> <span style=\"color: #000000\">demo</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// newutils.kt</span>\n<span style=\"color: #000000\">@file</span><span style=\"color: #000000; font-weight: bold\">:</span><span style=\"color: #000000\">JvmName</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Utils\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">@file</span><span style=\"color: #000000; font-weight: bold\">:</span><span style=\"color: #000000\">JvmMultifileClass</span>\n\n<span style=\"color: #204a87; font-weight: bold\">package</span> <span style=\"color: #000000\">demo</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #000000\">demo</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">Utils</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">foo</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n<span style=\"color: #000000\">demo</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">Utils</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">bar</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTU0ODMsICJpZCI6ICIxNDg4MDUxMzk1NzczLTAwMSIsICJtZCI6ICJBbGwgdGhlIGZ1bmN0aW9ucyBhbmQgcHJvcGVydGllcyBkZWNsYXJlZCBpbiBhIGZpbGUgYGV4YW1wbGUua3RgIGluc2lkZSBhIHBhY2thZ2UgYG9yZy5mb28uYmFyYCwgaW5jbHVkaW5nIGV4dGVuc2lvbiBmdW5jdGlvbnMsIGFyZSBjb21waWxlZCBpbnRvIHN0YXRpYyBtZXRob2RzIG9mIGEgSmF2YSBjbGFzcyBuYW1lZCBgb3JnLmZvby5iYXIuRXhhbXBsZUt0YC5cbiAgXG5gYGBrb3RsaW5cbi8vIGV4YW1wbGUua3RcbnBhY2thZ2UgZGVtb1xuICBcbmNsYXNzIEZvb1xuICBcbmZ1biBiYXIoKSB7XG59XG4gIFxuYGBgXG4gIFxuYGBgamF2YVxuLy8gSmF2YVxubmV3IGRlbW8uRm9vKCk7XG5kZW1vLkV4YW1wbGVLdC5iYXIoKTtcbmBgYFxuICBcblRoZSBuYW1lIG9mIHRoZSBnZW5lcmF0ZWQgSmF2YSBjbGFzcyBjYW4gYmUgY2hhbmdlZCB1c2luZyB0aGUgYEBKdm1OYW1lYCBhbm5vdGF0aW9uOlxuICBcbmBgYGtvdGxpblxuQGZpbGU6SnZtTmFtZSgmcXVvdDtEZW1vVXRpbHMmcXVvdDspXG4gIFxucGFja2FnZSBkZW1vXG4gIFxuY2xhc3MgRm9vXG4gIFxuZnVuIGJhcigpIHtcbn1cbiAgXG5gYGBcbiAgXG5gYGBqYXZhXG4vLyBKYXZhXG5uZXcgZGVtby5Gb28oKTtcbmRlbW8uRGVtb1V0aWxzLmJhcigpO1xuYGBgXG4gIFxuSGF2aW5nIG11bHRpcGxlIGZpbGVzIHdoaWNoIGhhdmUgdGhlIHNhbWUgZ2VuZXJhdGVkIEphdmEgY2xhc3MgbmFtZSAodGhlIHNhbWUgcGFja2FnZSBhbmQgdGhlIHNhbWUgbmFtZSBvciB0aGUgc2FtZSBASnZtTmFtZSBhbm5vdGF0aW9uKSBpcyBub3JtYWxseSBhbiBlcnJvci4gSG93ZXZlciwgdGhlIGNvbXBpbGVyIGhhcyB0aGUgYWJpbGl0eSB0byBnZW5lcmF0ZSBhIHNpbmdsZSBKYXZhIGZhY2FkZSBjbGFzcyB3aGljaCBoYXMgdGhlIHNwZWNpZmllZCBuYW1lIGFuZCBjb250YWlucyBhbGwgdGhlIGRlY2xhcmF0aW9ucyBmcm9tIGFsbCB0aGUgZmlsZXMgd2hpY2ggaGF2ZSB0aGF0IG5hbWUuXG5UbyBlbmFibGUgdGhlIGdlbmVyYXRpb24gb2Ygc3VjaCBhIGZhY2FkZSwgdXNlIHRoZSBASnZtTXVsdGlmaWxlQ2xhc3MgYW5ub3RhdGlvbiBpbiBhbGwgb2YgdGhlIGZpbGVzLlxuICBcbmBgYGtvdGxpblxuLy8gb2xkdXRpbHMua3RcbkBmaWxlOkp2bU5hbWUoJnF1b3Q7VXRpbHMmcXVvdDspXG5AZmlsZTpKdm1NdWx0aWZpbGVDbGFzc1xuICBcbnBhY2thZ2UgZGVtb1xuICBcbmZ1biBmb28oKSB7XG59XG5gYGBcbiAgXG5gYGBrb3RsaW5cbi8vIG5ld3V0aWxzLmt0XG5AZmlsZTpKdm1OYW1lKCZxdW90O1V0aWxzJnF1b3Q7KVxuQGZpbGU6SnZtTXVsdGlmaWxlQ2xhc3NcbiAgXG5wYWNrYWdlIGRlbW9cbiAgXG5mdW4gYmFyKCkge1xufVxuYGBgXG4gIFxuYGBgamF2YVxuLy8gSmF2YVxuZGVtby5VdGlscy5mb28oKTtcbmRlbW8uVXRpbHMuYmFyKCk7XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#package-level-functions"
            ],
            "flags": 0,
            "guid": "Q_t?A`hD@A",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Instance Fields&nbsp;<i>[Calling Kotlin from Java]</i>",
                "<p>If you need to expose a Kotlin property as a field in Java, you need to annotate it with the <code>@JvmField</code> annotation.<br />\nThe field will have the same visibility as the underlying property.<br />\nYou can annotate a property with <code>@JvmField</code> if it has a backing field, is not private, does not have <code>open</code>, <code>override</code> or <code>const</code> modifiers, and is not a delegated property.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">C</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">@JvmField</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">ID</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">id</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">JavaClient</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000\">getID</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">C</span> <span style=\"color: #000000\">c</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">c</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">ID</span><span style=\"color: #ce5c00; font-weight: bold\">;</span>\n    <span style=\"color: #ce5c00; font-weight: bold\">}</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p><a href=\"properties.html#late-initialized-properties\">Late-Initialized</a> properties are also exposed as fields. <br />\nThe visibility of the field will be the same as the visibility of <code>lateinit</code> property setter.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTU1MDEsICJpZCI6ICIxNDg4MDUxNDc2MzMwLTAwMSIsICJtZCI6ICJJZiB5b3UgbmVlZCB0byBleHBvc2UgYSBLb3RsaW4gcHJvcGVydHkgYXMgYSBmaWVsZCBpbiBKYXZhLCB5b3UgbmVlZCB0byBhbm5vdGF0ZSBpdCB3aXRoIHRoZSBgQEp2bUZpZWxkYCBhbm5vdGF0aW9uLlxuVGhlIGZpZWxkIHdpbGwgaGF2ZSB0aGUgc2FtZSB2aXNpYmlsaXR5IGFzIHRoZSB1bmRlcmx5aW5nIHByb3BlcnR5LlxuWW91IGNhbiBhbm5vdGF0ZSBhIHByb3BlcnR5IHdpdGggYEBKdm1GaWVsZGAgaWYgaXQgaGFzIGEgYmFja2luZyBmaWVsZCwgaXMgbm90IHByaXZhdGUsIGRvZXMgbm90IGhhdmUgYG9wZW5gLCBgb3ZlcnJpZGVgIG9yIGBjb25zdGAgbW9kaWZpZXJzLCBhbmQgaXMgbm90IGEgZGVsZWdhdGVkIHByb3BlcnR5LlxuICBcbmBgYGtvdGxpblxuY2xhc3MgQyhpZDogU3RyaW5nKSB7XG4gICAgQEp2bUZpZWxkIHZhbCBJRCA9IGlkXG59XG5gYGBcbiAgXG5gYGBqYXZhXG4vLyBKYXZhXG5jbGFzcyBKYXZhQ2xpZW50IHtcbiAgICBwdWJsaWMgU3RyaW5nIGdldElEKEMgYykge1xuICAgICAgICByZXR1cm4gYy5JRDtcbiAgICB9XG59XG5gYGBcbiAgXG5bTGF0ZS1Jbml0aWFsaXplZF0ocHJvcGVydGllcy5odG1sI2xhdGUtaW5pdGlhbGl6ZWQtcHJvcGVydGllcykgcHJvcGVydGllcyBhcmUgYWxzbyBleHBvc2VkIGFzIGZpZWxkcy4gXG5UaGUgdmlzaWJpbGl0eSBvZiB0aGUgZmllbGQgd2lsbCBiZSB0aGUgc2FtZSBhcyB0aGUgdmlzaWJpbGl0eSBvZiBgbGF0ZWluaXRgIHByb3BlcnR5IHNldHRlci5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#instance-fields"
            ],
            "flags": 0,
            "guid": "C;bzQ,.Z4U",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Static Fields <i>[Calling Kotlin from Java]</i>",
                "<p>Kotlin properties declared in a named object or a companion object will have static backing fields either in that named object or in the class containing the companion object.</p>\n<p>Usually these fields are private but they can be exposed in one of the following ways:</p>\n<ul>\n<li align=\"left\"><code>@JvmField</code> annotation;</li>\n<li align=\"left\"><code>lateinit</code> modifier;</li>\n<li align=\"left\"><code>const</code> modifier.</li>\n</ul>\n<p>Annotating such a property with <code>@JvmField</code> makes it a static field with the same visibility as the property itself.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Key</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">companion</span> <span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">{</span>\n        <span style=\"color: #000000\">@JvmField</span>\n        <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">COMPARATOR</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Comparator</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Key</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">compareBy</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Key</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">value</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #000000\">Key</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">COMPARATOR</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">compare</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">key1</span><span style=\"color: #ce5c00; font-weight: bold\">,</span> <span style=\"color: #000000\">key2</span><span style=\"color: #ce5c00; font-weight: bold\">);</span>\n<span style=\"color: #8f5902; font-style: italic\">// public static final field in Key class</span>\n</pre></div>\n<p>A <a href=\"properties.html#late-initialized-properties\">late-initialized</a> property in an object or a companion object has a static backing field with the same visibility as the property setter.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #000000\">Singleton</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">lateinit</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">provider</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Provider</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #000000\">Singleton</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">provider</span> <span style=\"color: #ce5c00; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">new</span> <span style=\"color: #000000\">Provider</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n<span style=\"color: #8f5902; font-style: italic\">// public static non-final field in Singleton class</span>\n</pre></div>\n<p>Properties annotated with <code>const</code> (in classes as well as at the top level) are turned into static fields in Java:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// file example.kt</span>\n\n<span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #000000\">Obj</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">const</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">CONST</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">companion</span> <span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">{</span>\n        <span style=\"color: #000000\">const</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">VERSION</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">9</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">const</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">MAX</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">239</span>\n</pre></div>\n<p>In Java:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">int</span> <span style=\"color: #000000\">c</span> <span style=\"color: #ce5c00; font-weight: bold\">=</span> <span style=\"color: #000000\">Obj</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">CONST</span><span style=\"color: #ce5c00; font-weight: bold\">;</span>\n<span style=\"color: #204a87; font-weight: bold\">int</span> <span style=\"color: #000000\">d</span> <span style=\"color: #ce5c00; font-weight: bold\">=</span> <span style=\"color: #000000\">ExampleKt</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">MAX</span><span style=\"color: #ce5c00; font-weight: bold\">;</span>\n<span style=\"color: #204a87; font-weight: bold\">int</span> <span style=\"color: #000000\">v</span> <span style=\"color: #ce5c00; font-weight: bold\">=</span> <span style=\"color: #000000\">C</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">VERSION</span><span style=\"color: #ce5c00; font-weight: bold\">;</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTU1MjIsICJpZCI6ICIxNDg4MDUxNjcxMTI3LTAwMSIsICJtZCI6ICJLb3RsaW4gcHJvcGVydGllcyBkZWNsYXJlZCBpbiBhIG5hbWVkIG9iamVjdCBvciBhIGNvbXBhbmlvbiBvYmplY3Qgd2lsbCBoYXZlIHN0YXRpYyBiYWNraW5nIGZpZWxkcyBlaXRoZXIgaW4gdGhhdCBuYW1lZCBvYmplY3Qgb3IgaW4gdGhlIGNsYXNzIGNvbnRhaW5pbmcgdGhlIGNvbXBhbmlvbiBvYmplY3QuXG4gIFxuVXN1YWxseSB0aGVzZSBmaWVsZHMgYXJlIHByaXZhdGUgYnV0IHRoZXkgY2FuIGJlIGV4cG9zZWQgaW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgd2F5czpcbiAgXG4gLSBgQEp2bUZpZWxkYCBhbm5vdGF0aW9uO1xuIC0gYGxhdGVpbml0YCBtb2RpZmllcjtcbiAtIGBjb25zdGAgbW9kaWZpZXIuXG4gXG5Bbm5vdGF0aW5nIHN1Y2ggYSBwcm9wZXJ0eSB3aXRoIGBASnZtRmllbGRgIG1ha2VzIGl0IGEgc3RhdGljIGZpZWxkIHdpdGggdGhlIHNhbWUgdmlzaWJpbGl0eSBhcyB0aGUgcHJvcGVydHkgaXRzZWxmLlxuICBcbmBgYGtvdGxpblxuY2xhc3MgS2V5KHZhbCB2YWx1ZTogSW50KSB7XG4gICAgY29tcGFuaW9uIG9iamVjdCB7XG4gICAgICAgIEBKdm1GaWVsZFxuICAgICAgICB2YWwgQ09NUEFSQVRPUjogQ29tcGFyYXRvciZsdDtLZXkmZ3Q7ID0gY29tcGFyZUJ5Jmx0O0tleSZndDsgeyBpdC52YWx1ZSB9XG4gICAgfVxufVxuYGBgXG4gIFxuYGBgamF2YVxuLy8gSmF2YVxuS2V5LkNPTVBBUkFUT1IuY29tcGFyZShrZXkxLCBrZXkyKTtcbi8vIHB1YmxpYyBzdGF0aWMgZmluYWwgZmllbGQgaW4gS2V5IGNsYXNzXG5gYGBcbiAgXG5BIFtsYXRlLWluaXRpYWxpemVkXShwcm9wZXJ0aWVzLmh0bWwjbGF0ZS1pbml0aWFsaXplZC1wcm9wZXJ0aWVzKSBwcm9wZXJ0eSBpbiBhbiBvYmplY3Qgb3IgYSBjb21wYW5pb24gb2JqZWN0IGhhcyBhIHN0YXRpYyBiYWNraW5nIGZpZWxkIHdpdGggdGhlIHNhbWUgdmlzaWJpbGl0eSBhcyB0aGUgcHJvcGVydHkgc2V0dGVyLlxuICBcbmBgYGtvdGxpblxub2JqZWN0IFNpbmdsZXRvbiB7XG4gICAgbGF0ZWluaXQgdmFyIHByb3ZpZGVyOiBQcm92aWRlclxufVxuYGBgXG4gIFxuYGBgamF2YVxuLy8gSmF2YVxuU2luZ2xldG9uLnByb3ZpZGVyID0gbmV3IFByb3ZpZGVyKCk7XG4vLyBwdWJsaWMgc3RhdGljIG5vbi1maW5hbCBmaWVsZCBpbiBTaW5nbGV0b24gY2xhc3NcbmBgYFxuICBcblByb3BlcnRpZXMgYW5ub3RhdGVkIHdpdGggYGNvbnN0YCAoaW4gY2xhc3NlcyBhcyB3ZWxsIGFzIGF0IHRoZSB0b3AgbGV2ZWwpIGFyZSB0dXJuZWQgaW50byBzdGF0aWMgZmllbGRzIGluIEphdmE6XG4gIFxuYGBga290bGluXG4vLyBmaWxlIGV4YW1wbGUua3RcbiAgXG5vYmplY3QgT2JqIHtcbiAgICBjb25zdCB2YWwgQ09OU1QgPSAxXG59XG4gIFxuY2xhc3MgQyB7XG4gICAgY29tcGFuaW9uIG9iamVjdCB7XG4gICAgICAgIGNvbnN0IHZhbCBWRVJTSU9OID0gOVxuICAgIH1cbn1cbiAgXG5jb25zdCB2YWwgTUFYID0gMjM5XG5gYGBcbiAgXG5JbiBKYXZhOlxuICBcbmBgYGphdmFcbmludCBjID0gT2JqLkNPTlNUO1xuaW50IGQgPSBFeGFtcGxlS3QuTUFYO1xuaW50IHYgPSBDLlZFUlNJT047XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#static-fields"
            ],
            "flags": 0,
            "guid": "B5Cw9/[q67",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Static Methods</b>&nbsp;<i>[Calling Kotlin from Java]</i>",
                "<p>As mentioned above, Kotlin represents package-level functions as static methods.<br />\nKotlin can also generate static methods for functions defined in named objects or companion objects if you annotate those functions as <code>@JvmStatic</code>.<br />\nIf you use this annotation, the compiler will generate both a static method in the enclosing class of the object and an instance method in the object itself.<br />\nFor example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">companion</span> <span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">{</span>\n        <span style=\"color: #000000\">@JvmStatic</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n        <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Now, <code>foo()</code> is static in Java, while <code>bar()</code> is not:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">C</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">foo</span><span style=\"color: #ce5c00; font-weight: bold\">();</span> <span style=\"color: #8f5902; font-style: italic\">// works fine</span>\n<span style=\"color: #000000\">C</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">bar</span><span style=\"color: #ce5c00; font-weight: bold\">();</span> <span style=\"color: #8f5902; font-style: italic\">// error: not a static method</span>\n<span style=\"color: #000000\">C</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">Companion</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">foo</span><span style=\"color: #ce5c00; font-weight: bold\">();</span> <span style=\"color: #8f5902; font-style: italic\">// instance method remains</span>\n<span style=\"color: #000000\">C</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">Companion</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">bar</span><span style=\"color: #ce5c00; font-weight: bold\">();</span> <span style=\"color: #8f5902; font-style: italic\">// the only way it works</span>\n</pre></div>\n<p>Same for named objects:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #000000\">Obj</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">@JvmStatic</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>In Java:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">Obj</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">foo</span><span style=\"color: #ce5c00; font-weight: bold\">();</span> <span style=\"color: #8f5902; font-style: italic\">// works fine</span>\n<span style=\"color: #000000\">Obj</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">bar</span><span style=\"color: #ce5c00; font-weight: bold\">();</span> <span style=\"color: #8f5902; font-style: italic\">// error</span>\n<span style=\"color: #000000\">Obj</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">INSTANCE</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">bar</span><span style=\"color: #ce5c00; font-weight: bold\">();</span> <span style=\"color: #8f5902; font-style: italic\">// works, a call through the singleton instance</span>\n<span style=\"color: #000000\">Obj</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">INSTANCE</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">foo</span><span style=\"color: #ce5c00; font-weight: bold\">();</span> <span style=\"color: #8f5902; font-style: italic\">// works too</span>\n</pre></div>\n<p><code>@JvmStatic</code> annotation can also be applied on a property of an object or a companion object making its getter and setter methods be static members in that object or the class containing the companion object.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTU1MzksICJpZCI6ICIxNDg4MDUxOTAyMzkwLTAwMSIsICJtZCI6ICJBcyBtZW50aW9uZWQgYWJvdmUsIEtvdGxpbiByZXByZXNlbnRzIHBhY2thZ2UtbGV2ZWwgZnVuY3Rpb25zIGFzIHN0YXRpYyBtZXRob2RzLlxuS290bGluIGNhbiBhbHNvIGdlbmVyYXRlIHN0YXRpYyBtZXRob2RzIGZvciBmdW5jdGlvbnMgZGVmaW5lZCBpbiBuYW1lZCBvYmplY3RzIG9yIGNvbXBhbmlvbiBvYmplY3RzIGlmIHlvdSBhbm5vdGF0ZSB0aG9zZSBmdW5jdGlvbnMgYXMgYEBKdm1TdGF0aWNgLlxuSWYgeW91IHVzZSB0aGlzIGFubm90YXRpb24sIHRoZSBjb21waWxlciB3aWxsIGdlbmVyYXRlIGJvdGggYSBzdGF0aWMgbWV0aG9kIGluIHRoZSBlbmNsb3NpbmcgY2xhc3Mgb2YgdGhlIG9iamVjdCBhbmQgYW4gaW5zdGFuY2UgbWV0aG9kIGluIHRoZSBvYmplY3QgaXRzZWxmLlxuRm9yIGV4YW1wbGU6XG4gIFxuYGBga290bGluXG5jbGFzcyBDIHtcbiAgICBjb21wYW5pb24gb2JqZWN0IHtcbiAgICAgICAgQEp2bVN0YXRpYyBmdW4gZm9vKCkge31cbiAgICAgICAgZnVuIGJhcigpIHt9XG4gICAgfVxufVxuYGBgXG4gIFxuTm93LCBgZm9vKClgIGlzIHN0YXRpYyBpbiBKYXZhLCB3aGlsZSBgYmFyKClgIGlzIG5vdDpcbiAgXG5gYGBqYXZhXG5DLmZvbygpOyAvLyB3b3JrcyBmaW5lXG5DLmJhcigpOyAvLyBlcnJvcjogbm90IGEgc3RhdGljIG1ldGhvZFxuQy5Db21wYW5pb24uZm9vKCk7IC8vIGluc3RhbmNlIG1ldGhvZCByZW1haW5zXG5DLkNvbXBhbmlvbi5iYXIoKTsgLy8gdGhlIG9ubHkgd2F5IGl0IHdvcmtzXG5gYGBcbiAgXG5TYW1lIGZvciBuYW1lZCBvYmplY3RzOlxuICBcbmBgYGtvdGxpblxub2JqZWN0IE9iaiB7XG4gICAgQEp2bVN0YXRpYyBmdW4gZm9vKCkge31cbiAgICBmdW4gYmFyKCkge31cbn1cbmBgYFxuICBcbkluIEphdmE6XG4gIFxuYGBgamF2YVxuT2JqLmZvbygpOyAvLyB3b3JrcyBmaW5lXG5PYmouYmFyKCk7IC8vIGVycm9yXG5PYmouSU5TVEFOQ0UuYmFyKCk7IC8vIHdvcmtzLCBhIGNhbGwgdGhyb3VnaCB0aGUgc2luZ2xldG9uIGluc3RhbmNlXG5PYmouSU5TVEFOQ0UuZm9vKCk7IC8vIHdvcmtzIHRvb1xuYGBgXG4gIFxuYEBKdm1TdGF0aWNgIGFubm90YXRpb24gY2FuIGFsc28gYmUgYXBwbGllZCBvbiBhIHByb3BlcnR5IG9mIGFuIG9iamVjdCBvciBhIGNvbXBhbmlvbiBvYmplY3QgbWFraW5nIGl0cyBnZXR0ZXIgYW5kIHNldHRlciBtZXRob2RzIGJlIHN0YXRpYyBtZW1iZXJzIGluIHRoYXQgb2JqZWN0IG9yIHRoZSBjbGFzcyBjb250YWluaW5nIHRoZSBjb21wYW5pb24gb2JqZWN0LlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#static-methods"
            ],
            "flags": 0,
            "guid": "xdi;i{w5!X",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>KClass</b>&nbsp;<i>[Calling Kotlin from Java]</i>",
                "<p>Sometimes you need to call a Kotlin method with a parameter of type <code>KClass</code>.<br />\nThere is no automatic conversion from <code>Class</code> to <code>KClass</code>, so you have to do it manually by invoking the equivalent of the <code>Class&lt;T&gt;.kotlin</code> extension property:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">kotlin</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">jvm</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">JvmClassMappingKt</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">getKotlinClass</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">MainView</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #204a87; font-weight: bold\">class</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTU1NzYsICJpZCI6ICIxNDg4MDUxOTUwMjk3LTAwMSIsICJtZCI6ICJTb21ldGltZXMgeW91IG5lZWQgdG8gY2FsbCBhIEtvdGxpbiBtZXRob2Qgd2l0aCBhIHBhcmFtZXRlciBvZiB0eXBlIGBLQ2xhc3NgLlxuVGhlcmUgaXMgbm8gYXV0b21hdGljIGNvbnZlcnNpb24gZnJvbSBgQ2xhc3NgIHRvIGBLQ2xhc3NgLCBzbyB5b3UgaGF2ZSB0byBkbyBpdCBtYW51YWxseSBieSBpbnZva2luZyB0aGUgZXF1aXZhbGVudCBvZiB0aGUgYENsYXNzJmx0O1QmZ3Q7LmtvdGxpbmAgZXh0ZW5zaW9uIHByb3BlcnR5OlxuICBcbmBgYGtvdGxpblxua290bGluLmp2bS5Kdm1DbGFzc01hcHBpbmdLdC5nZXRLb3RsaW5DbGFzcyhNYWluVmlldy5jbGFzcylcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#kclass"
            ],
            "flags": 0,
            "guid": ">0EqO(i_`",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Handling signature clashes with <b>@JvmName</b>&nbsp;<i>[Calling Kotlin from Java]</i>",
                "<p>Sometimes we have a named function in Kotlin, for which we need a different JVM name the byte code.<br />\nThe most prominent example happens due to <em>type erasure</em>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">filterValid</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;</span>\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">filterValid</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;</span>\n</pre></div>\n<p>These two functions can not be defined side-by-side, because their JVM signatures are the same: <code>filterValid(Ljava/util/List;)Ljava/util/List;</code>.<br />\nIf we really want them to have the same name in Kotlin, we can annotate one (or both) of them with <code>@JvmName</code> and specify a different name as an argument:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">filterValid</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;</span>\n\n<span style=\"color: #000000\">@JvmName</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"filterValidInt\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">filterValid</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;</span>\n</pre></div>\n<p>From Kotlin they will be accessible by the same name <code>filterValid</code>, but from Java it will be <code>filterValid</code> and <code>filterValidInt</code>.</p>\n<p>The same trick applies when we need to have a property <code>x</code> alongside with a function <code>getX()</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span>\n    <span style=\"color: #000000\">@JvmName</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"getX_prop\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">15</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">getX</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">10</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTU1OTQsICJpZCI6ICIxNDg4MDUxOTY5MzY3LTAwMSIsICJtZCI6ICJTb21ldGltZXMgd2UgaGF2ZSBhIG5hbWVkIGZ1bmN0aW9uIGluIEtvdGxpbiwgZm9yIHdoaWNoIHdlIG5lZWQgYSBkaWZmZXJlbnQgSlZNIG5hbWUgdGhlIGJ5dGUgY29kZS5cblRoZSBtb3N0IHByb21pbmVudCBleGFtcGxlIGhhcHBlbnMgZHVlIHRvICp0eXBlIGVyYXN1cmUqOlxuICBcbmBgYGtvdGxpblxuZnVuIExpc3QmbHQ7U3RyaW5nJmd0Oy5maWx0ZXJWYWxpZCgpOiBMaXN0Jmx0O1N0cmluZyZndDtcbmZ1biBMaXN0Jmx0O0ludCZndDsuZmlsdGVyVmFsaWQoKTogTGlzdCZsdDtJbnQmZ3Q7XG5gYGBcbiAgXG5UaGVzZSB0d28gZnVuY3Rpb25zIGNhbiBub3QgYmUgZGVmaW5lZCBzaWRlLWJ5LXNpZGUsIGJlY2F1c2UgdGhlaXIgSlZNIHNpZ25hdHVyZXMgYXJlIHRoZSBzYW1lOiBgZmlsdGVyVmFsaWQoTGphdmEvdXRpbC9MaXN0OylMamF2YS91dGlsL0xpc3Q7YC5cbklmIHdlIHJlYWxseSB3YW50IHRoZW0gdG8gaGF2ZSB0aGUgc2FtZSBuYW1lIGluIEtvdGxpbiwgd2UgY2FuIGFubm90YXRlIG9uZSAob3IgYm90aCkgb2YgdGhlbSB3aXRoIGBASnZtTmFtZWAgYW5kIHNwZWNpZnkgYSBkaWZmZXJlbnQgbmFtZSBhcyBhbiBhcmd1bWVudDpcbiAgXG5gYGBrb3RsaW5cbmZ1biBMaXN0Jmx0O1N0cmluZyZndDsuZmlsdGVyVmFsaWQoKTogTGlzdCZsdDtTdHJpbmcmZ3Q7XG4gIFxuQEp2bU5hbWUoJnF1b3Q7ZmlsdGVyVmFsaWRJbnQmcXVvdDspXG5mdW4gTGlzdCZsdDtJbnQmZ3Q7LmZpbHRlclZhbGlkKCk6IExpc3QmbHQ7SW50Jmd0O1xuYGBgXG4gIFxuRnJvbSBLb3RsaW4gdGhleSB3aWxsIGJlIGFjY2Vzc2libGUgYnkgdGhlIHNhbWUgbmFtZSBgZmlsdGVyVmFsaWRgLCBidXQgZnJvbSBKYXZhIGl0IHdpbGwgYmUgYGZpbHRlclZhbGlkYCBhbmQgYGZpbHRlclZhbGlkSW50YC5cbiAgXG5UaGUgc2FtZSB0cmljayBhcHBsaWVzIHdoZW4gd2UgbmVlZCB0byBoYXZlIGEgcHJvcGVydHkgYHhgIGFsb25nc2lkZSB3aXRoIGEgZnVuY3Rpb24gYGdldFgoKWA6XG4gIFxuYGBga290bGluXG52YWwgeDogSW50XG4gICAgQEp2bU5hbWUoJnF1b3Q7Z2V0WF9wcm9wJnF1b3Q7KVxuICAgIGdldCgpID0gMTVcbiAgXG5mdW4gZ2V0WCgpID0gMTBcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#handling-signature-clashes-with-jvmname"
            ],
            "flags": 0,
            "guid": "K$NtNs<xwF",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Overloads Generation&nbsp;<i>[Calling Kotlin from Java]</i>",
                "<p>Normally, if you write a Kotlin method with default parameter values, it will be visible in Java only as a full signature, with all parameters present. <br />\nIf you wish to expose multiple overloads to Java callers, you can use the <code class=\"keyword\">@JvmOverloads</code> annotation.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">@JvmOverloads</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">c</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"abc\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>For every parameter with a default value, this will generate one additional overload, which has this parameter and all parameters to the right of it in the parameter list removed. <br />\nIn this example, the following methods will be generated:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">void</span> <span style=\"color: #000000\">f</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">String</span> <span style=\"color: #000000\">a</span><span style=\"color: #ce5c00; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">int</span> <span style=\"color: #000000\">b</span><span style=\"color: #ce5c00; font-weight: bold\">,</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000\">c</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span> <span style=\"color: #ce5c00; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">void</span> <span style=\"color: #000000\">f</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">String</span> <span style=\"color: #000000\">a</span><span style=\"color: #ce5c00; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">int</span> <span style=\"color: #000000\">b</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span> <span style=\"color: #ce5c00; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">void</span> <span style=\"color: #000000\">f</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">String</span> <span style=\"color: #000000\">a</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span> <span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p><strong>The annotation also works for constructors, static methods etc. It can't be used on abstract methods, including methods defined in interfaces.</strong></p>\n<p>Note that, as described in <a href=\"classes.html#secondary-constructors\">Secondary Constructors</a>, <strong>if a class has default values for all constructor parameters, a public no-argument constructor will be generated for it.</strong><br />\nThis works even if the <code class=\"keyword\">@JvmOverloads</code> annotation is not specified.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTQ3NzgwMjMsICJpZCI6ICIxNDg4MDUxOTk0NzQ3LTAwMSIsICJtZCI6ICJOb3JtYWxseSwgaWYgeW91IHdyaXRlIGEgS290bGluIG1ldGhvZCB3aXRoIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlcywgaXQgd2lsbCBiZSB2aXNpYmxlIGluIEphdmEgb25seSBhcyBhIGZ1bGwgc2lnbmF0dXJlLCB3aXRoIGFsbCBwYXJhbWV0ZXJzIHByZXNlbnQuIFxuSWYgeW91IHdpc2ggdG8gZXhwb3NlIG11bHRpcGxlIG92ZXJsb2FkcyB0byBKYXZhIGNhbGxlcnMsIHlvdSBjYW4gdXNlIHRoZSBgQEp2bU92ZXJsb2Fkc2B7OiAua2V5d29yZCB9IGFubm90YXRpb24uXG4gIFxuYGBga290bGluXG5ASnZtT3ZlcmxvYWRzIGZ1biBmKGE6IFN0cmluZywgYjogSW50ID0gMCwgYzogU3RyaW5nID0gJnF1b3Q7YWJjJnF1b3Q7KSB7XG4gICAgLi4uXG59XG5gYGBcbiAgXG5Gb3IgZXZlcnkgcGFyYW1ldGVyIHdpdGggYSBkZWZhdWx0IHZhbHVlLCB0aGlzIHdpbGwgZ2VuZXJhdGUgb25lIGFkZGl0aW9uYWwgb3ZlcmxvYWQsIHdoaWNoIGhhcyB0aGlzIHBhcmFtZXRlciBhbmQgYWxsIHBhcmFtZXRlcnMgdG8gdGhlIHJpZ2h0IG9mIGl0IGluIHRoZSBwYXJhbWV0ZXIgbGlzdCByZW1vdmVkLiBcbkluIHRoaXMgZXhhbXBsZSwgdGhlIGZvbGxvd2luZyBtZXRob2RzIHdpbGwgYmUgZ2VuZXJhdGVkOlxuICBcbmBgYGphdmFcbi8vIEphdmFcbnZvaWQgZihTdHJpbmcgYSwgaW50IGIsIFN0cmluZyBjKSB7IH1cbnZvaWQgZihTdHJpbmcgYSwgaW50IGIpIHsgfVxudm9pZCBmKFN0cmluZyBhKSB7IH1cbmBgYFxuICBcbioqVGhlIGFubm90YXRpb24gYWxzbyB3b3JrcyBmb3IgY29uc3RydWN0b3JzLCBzdGF0aWMgbWV0aG9kcyBldGMuIEl0IGNhbiZhcG9zO3QgYmUgdXNlZCBvbiBhYnN0cmFjdCBtZXRob2RzLCBpbmNsdWRpbmcgbWV0aG9kcyBkZWZpbmVkIGluIGludGVyZmFjZXMuKipcbiAgXG5Ob3RlIHRoYXQsIGFzIGRlc2NyaWJlZCBpbiBbU2Vjb25kYXJ5IENvbnN0cnVjdG9yc10oY2xhc3Nlcy5odG1sI3NlY29uZGFyeS1jb25zdHJ1Y3RvcnMpLCAqKmlmIGEgY2xhc3MgaGFzIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwgY29uc3RydWN0b3IgcGFyYW1ldGVycywgYSBwdWJsaWMgbm8tYXJndW1lbnQgY29uc3RydWN0b3Igd2lsbCBiZSBnZW5lcmF0ZWQgZm9yIGl0LioqXG5UaGlzIHdvcmtzIGV2ZW4gaWYgdGhlIGBASnZtT3ZlcmxvYWRzYHs6IC5rZXl3b3JkIH0gYW5ub3RhdGlvbiBpcyBub3Qgc3BlY2lmaWVkLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#overloads-generation"
            ],
            "flags": 0,
            "guid": "LK]:]][NPQ",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Checked Exceptions</b> <i>[Calling Kotlin from Java]</i>",
                "<p>As we mentioned above, Kotlin does not have checked exceptions.<br />\nSo, normally, the Java signatures of Kotlin functions do not declare exceptions thrown.<br />\nThus if we have a function in Kotlin like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">// example.kt</span>\n<span style=\"color: #204a87; font-weight: bold\">package</span> <span style=\"color: #000000\">demo</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IOException</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>And we want to call it from Java and catch the exception:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">try</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n  <span style=\"color: #000000\">demo</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">Example</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">foo</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">catch</span> <span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">IOException</span> <span style=\"color: #000000\">e</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// error: foo() does not declare IOException in the throws list</span>\n  <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p>we get an error message from the Java compiler, because <code>foo()</code> does not declare <code>IOException</code>.<br />\nTo work around this problem, use the <code>@Throws</code> annotation in Kotlin:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">@Throws</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">IOException</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #204a87; font-weight: bold\">class</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IOException</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTU2MjIsICJpZCI6ICIxNDg4MDUyMDE2MjU4LTAwMSIsICJtZCI6ICJBcyB3ZSBtZW50aW9uZWQgYWJvdmUsIEtvdGxpbiBkb2VzIG5vdCBoYXZlIGNoZWNrZWQgZXhjZXB0aW9ucy5cblNvLCBub3JtYWxseSwgdGhlIEphdmEgc2lnbmF0dXJlcyBvZiBLb3RsaW4gZnVuY3Rpb25zIGRvIG5vdCBkZWNsYXJlIGV4Y2VwdGlvbnMgdGhyb3duLlxuVGh1cyBpZiB3ZSBoYXZlIGEgZnVuY3Rpb24gaW4gS290bGluIGxpa2UgdGhpczpcbiAgXG5gYGBrb3RsaW5cbi8vIGV4YW1wbGUua3RcbnBhY2thZ2UgZGVtb1xuICBcbmZ1biBmb28oKSB7XG4gICAgdGhyb3cgSU9FeGNlcHRpb24oKVxufVxuYGBgXG4gIFxuQW5kIHdlIHdhbnQgdG8gY2FsbCBpdCBmcm9tIEphdmEgYW5kIGNhdGNoIHRoZSBleGNlcHRpb246XG4gIFxuYGBgamF2YVxuLy8gSmF2YVxudHJ5IHtcbiAgZGVtby5FeGFtcGxlLmZvbygpO1xufVxuY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsgLy8gZXJyb3I6IGZvbygpIGRvZXMgbm90IGRlY2xhcmUgSU9FeGNlcHRpb24gaW4gdGhlIHRocm93cyBsaXN0XG4gIC8vIC4uLlxufVxuYGBgXG4gIFxud2UgZ2V0IGFuIGVycm9yIG1lc3NhZ2UgZnJvbSB0aGUgSmF2YSBjb21waWxlciwgYmVjYXVzZSBgZm9vKClgIGRvZXMgbm90IGRlY2xhcmUgYElPRXhjZXB0aW9uYC5cblRvIHdvcmsgYXJvdW5kIHRoaXMgcHJvYmxlbSwgdXNlIHRoZSBgQFRocm93c2AgYW5ub3RhdGlvbiBpbiBLb3RsaW46XG4gIFxuYGBga290bGluXG5AVGhyb3dzKElPRXhjZXB0aW9uOjpjbGFzcylcbmZ1biBmb28oKSB7XG4gICAgdGhyb3cgSU9FeGNlcHRpb24oKVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#checked-exceptions"
            ],
            "flags": 0,
            "guid": "m/I5bd2%*N",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Null</b>-safety&nbsp;<i>[Calling Kotlin from Java]</i>",
                "<p>When calling Kotlin functions from Java, nobody prevents us from passing <em class=\"keyword\">null</em> as a non-null parameter.<br />\nThat's why Kotlin generates runtime checks for all public functions that expect non-nulls.<br />\nThis way we get a <code>NullPointerException</code> in the Java code immediately.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTU2MzYsICJpZCI6ICIxNDg4MDUyMDQ2NjczLTAwMSIsICJtZCI6ICJXaGVuIGNhbGxpbmcgS290bGluIGZ1bmN0aW9ucyBmcm9tIEphdmEsIG5vYm9keSBwcmV2ZW50cyB1cyBmcm9tIHBhc3NpbmcgKm51bGwqezogLmtleXdvcmQgfSBhcyBhIG5vbi1udWxsIHBhcmFtZXRlci5cblRoYXQmYXBvcztzIHdoeSBLb3RsaW4gZ2VuZXJhdGVzIHJ1bnRpbWUgY2hlY2tzIGZvciBhbGwgcHVibGljIGZ1bmN0aW9ucyB0aGF0IGV4cGVjdCBub24tbnVsbHMuXG5UaGlzIHdheSB3ZSBnZXQgYSBgTnVsbFBvaW50ZXJFeGNlcHRpb25gIGluIHRoZSBKYXZhIGNvZGUgaW1tZWRpYXRlbHkuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#null-safety"
            ],
            "flags": 0,
            "guid": "d|tcFFFDg1",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Variant <b>generics</b>&nbsp;<i>[Calling Kotlin from Java]</i>",
                "<p>When Kotlin classes make use of <a href=\"generics.html#declaration-site-variance\">declaration-site variance</a>, there are two options of how their usages are seen from the Java code. </p>\n<p>Let's say we have the following class and two functions that use it:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Box</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #204a87; font-weight: bold\">out</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">Base</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Derived</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Base</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">boxDerived</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Derived</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Box</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Derived</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Box</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">unboxBase</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">box</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Box</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Base</span><span style=\"color: #000000; font-weight: bold\">&gt;):</span> <span style=\"color: #000000\">Base</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">box</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">value</span>\n</pre></div>\n<p>A naive way of translating these functions into Java would be this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">Box</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Derived</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">boxDerived</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">Derived</span> <span style=\"color: #000000\">value</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span> <span style=\"color: #ce5c00; font-weight: bold\">...</span> <span style=\"color: #ce5c00; font-weight: bold\">}</span>\n<span style=\"color: #000000\">Base</span> <span style=\"color: #000000\">unboxBase</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">Box</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Base</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">box</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span> <span style=\"color: #ce5c00; font-weight: bold\">...</span> <span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p>The problem is that in Kotlin we can say <code>unboxBase(boxDerived(\"s\"))</code>, but in Java that would be impossible, because in Java the class <code>Box</code> is <em>invariant</em> in its parameter <code>T</code>, and thus <code>Box&lt;Derived&gt;</code> is not a subtype of <code>Box&lt;Base&gt;</code>. </p>\n<p>To make it work in Java we'd have to define <code>unboxBase</code> as follows:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">Base</span> <span style=\"color: #000000\">unboxBase</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">Box</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;?</span> <span style=\"color: #204a87; font-weight: bold\">extends</span> <span style=\"color: #000000\">Base</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">box</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span> <span style=\"color: #ce5c00; font-weight: bold\">...</span> <span style=\"color: #ce5c00; font-weight: bold\">}</span>  \n</pre></div>\n<p>Here we make use of Java's <em>wildcards types</em> (<code>? extends Base</code>) to emulate declaration-site variance through use-site variance, because it is all Java has.</p>\n<p>To make Kotlin APIs work in Java we generate <code>Box&lt;Super&gt;</code> as <code>Box&lt;? extends Super&gt;</code> for covariantly defined <code>Box</code> (or <code>Foo&lt;? super Bar&gt;</code> for contravariantly defined <code>Foo</code>) when it appears <em>as a parameter</em>. <br />\nWhen it's a return value, we don't generate wildcards, because otherwise Java clients will have to deal with them (and it's against the common Java coding style). <br />\nTherefore, the functions from our example are actually translated as follows:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// return type - no wildcards</span>\n<span style=\"color: #000000\">Box</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Derived</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">boxDerived</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">Derived</span> <span style=\"color: #000000\">value</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span> <span style=\"color: #ce5c00; font-weight: bold\">...</span> <span style=\"color: #ce5c00; font-weight: bold\">}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// parameter - wildcards </span>\n<span style=\"color: #000000\">Base</span> <span style=\"color: #000000\">unboxBase</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">Box</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;?</span> <span style=\"color: #204a87; font-weight: bold\">extends</span> <span style=\"color: #000000\">Base</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">box</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span> <span style=\"color: #ce5c00; font-weight: bold\">...</span> <span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<blockquote>\n<p><strong>NOTE:</strong> when the argument type is final, there's usually no point in generating the wildcard, so <code>Box&lt;String&gt;</code> is always <code>Box&lt;String&gt;</code>, no matter what position it takes.</p>\n</blockquote>\n<p>If we need wildcards where they are not generated by default, we can use the <code>@JvmWildcard</code> annotation:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">boxDerived</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Derived</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Box</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">@JvmWildcard</span> <span style=\"color: #000000\">Derived</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Box</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #8f5902; font-style: italic\">// is translated to </span>\n<span style=\"color: #8f5902; font-style: italic\">// Box&lt;? extends Derived&gt; boxDerived(Derived value) { ... }</span>\n</pre></div>\n<p>On the other hand, if we don't need wildcards where they are generated, we can use <code>@JvmSuppressWildcards</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">unboxBase</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">box</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Box</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">@JvmSuppressWildcards</span> <span style=\"color: #000000\">Base</span><span style=\"color: #000000; font-weight: bold\">&gt;):</span> <span style=\"color: #000000\">Base</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">box</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">value</span>\n<span style=\"color: #8f5902; font-style: italic\">// is translated to </span>\n<span style=\"color: #8f5902; font-style: italic\">// Base unboxBase(Box&lt;Base&gt; box) { ... }</span>\n</pre></div>\n<blockquote>\n<p><strong>NOTE:</strong> <code>@JvmSuppressWildcards</code> can be used not only on individual type arguments, but on entire declarations, such as functions or classes, causing all wildcards inside them to be suppressed.</p>\n</blockquote><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTU2OTAsICJpZCI6ICIxNDg4MDUyMDY2Mzk4LTAwMSIsICJtZCI6ICJXaGVuIEtvdGxpbiBjbGFzc2VzIG1ha2UgdXNlIG9mIFtkZWNsYXJhdGlvbi1zaXRlIHZhcmlhbmNlXShnZW5lcmljcy5odG1sI2RlY2xhcmF0aW9uLXNpdGUtdmFyaWFuY2UpLCB0aGVyZSBhcmUgdHdvIG9wdGlvbnMgb2YgaG93IHRoZWlyIHVzYWdlcyBhcmUgc2VlbiBmcm9tIHRoZSBKYXZhIGNvZGUuIFxuICBcbkxldCZhcG9zO3Mgc2F5IHdlIGhhdmUgdGhlIGZvbGxvd2luZyBjbGFzcyBhbmQgdHdvIGZ1bmN0aW9ucyB0aGF0IHVzZSBpdDpcbiAgXG5gYGBrb3RsaW5cbmNsYXNzIEJveCZsdDtvdXQgVCZndDsodmFsIHZhbHVlOiBUKVxuICBcbmludGVyZmFjZSBCYXNlXG5jbGFzcyBEZXJpdmVkIDogQmFzZVxuICBcbmZ1biBib3hEZXJpdmVkKHZhbHVlOiBEZXJpdmVkKTogQm94Jmx0O0Rlcml2ZWQmZ3Q7ID0gQm94KHZhbHVlKVxuZnVuIHVuYm94QmFzZShib3g6IEJveCZsdDtCYXNlJmd0Oyk6IEJhc2UgPSBib3gudmFsdWVcbmBgYFxuICBcbkEgbmFpdmUgd2F5IG9mIHRyYW5zbGF0aW5nIHRoZXNlIGZ1bmN0aW9ucyBpbnRvIEphdmEgd291bGQgYmUgdGhpczpcbiAgXG5gYGBqYXZhXG5Cb3gmbHQ7RGVyaXZlZCZndDsgYm94RGVyaXZlZChEZXJpdmVkIHZhbHVlKSB7IC4uLiB9XG5CYXNlIHVuYm94QmFzZShCb3gmbHQ7QmFzZSZndDsgYm94KSB7IC4uLiB9XG5gYGAgXG4gIFxuVGhlIHByb2JsZW0gaXMgdGhhdCBpbiBLb3RsaW4gd2UgY2FuIHNheSBgdW5ib3hCYXNlKGJveERlcml2ZWQoJnF1b3Q7cyZxdW90OykpYCwgYnV0IGluIEphdmEgdGhhdCB3b3VsZCBiZSBpbXBvc3NpYmxlLCBiZWNhdXNlIGluIEphdmEgdGhlIGNsYXNzIGBCb3hgIGlzICppbnZhcmlhbnQqIGluIGl0cyBwYXJhbWV0ZXIgYFRgLCBhbmQgdGh1cyBgQm94Jmx0O0Rlcml2ZWQmZ3Q7YCBpcyBub3QgYSBzdWJ0eXBlIG9mIGBCb3gmbHQ7QmFzZSZndDtgLiBcbiAgXG5UbyBtYWtlIGl0IHdvcmsgaW4gSmF2YSB3ZSZhcG9zO2QgaGF2ZSB0byBkZWZpbmUgYHVuYm94QmFzZWAgYXMgZm9sbG93czpcbiAgXG5gYGBqYXZhXG5CYXNlIHVuYm94QmFzZShCb3gmbHQ7PyBleHRlbmRzIEJhc2UmZ3Q7IGJveCkgeyAuLi4gfSAgXG5gYGAgIFxuICBcbkhlcmUgd2UgbWFrZSB1c2Ugb2YgSmF2YSZhcG9zO3MgKndpbGRjYXJkcyB0eXBlcyogKGA/IGV4dGVuZHMgQmFzZWApIHRvIGVtdWxhdGUgZGVjbGFyYXRpb24tc2l0ZSB2YXJpYW5jZSB0aHJvdWdoIHVzZS1zaXRlIHZhcmlhbmNlLCBiZWNhdXNlIGl0IGlzIGFsbCBKYXZhIGhhcy5cbiAgXG5UbyBtYWtlIEtvdGxpbiBBUElzIHdvcmsgaW4gSmF2YSB3ZSBnZW5lcmF0ZSBgQm94Jmx0O1N1cGVyJmd0O2AgYXMgYEJveCZsdDs/IGV4dGVuZHMgU3VwZXImZ3Q7YCBmb3IgY292YXJpYW50bHkgZGVmaW5lZCBgQm94YCAob3IgYEZvbyZsdDs/IHN1cGVyIEJhciZndDtgIGZvciBjb250cmF2YXJpYW50bHkgZGVmaW5lZCBgRm9vYCkgd2hlbiBpdCBhcHBlYXJzICphcyBhIHBhcmFtZXRlciouIFxuV2hlbiBpdCZhcG9zO3MgYSByZXR1cm4gdmFsdWUsIHdlIGRvbiZhcG9zO3QgZ2VuZXJhdGUgd2lsZGNhcmRzLCBiZWNhdXNlIG90aGVyd2lzZSBKYXZhIGNsaWVudHMgd2lsbCBoYXZlIHRvIGRlYWwgd2l0aCB0aGVtIChhbmQgaXQmYXBvcztzIGFnYWluc3QgdGhlIGNvbW1vbiBKYXZhIGNvZGluZyBzdHlsZSkuIFxuVGhlcmVmb3JlLCB0aGUgZnVuY3Rpb25zIGZyb20gb3VyIGV4YW1wbGUgYXJlIGFjdHVhbGx5IHRyYW5zbGF0ZWQgYXMgZm9sbG93czpcbiAgXG5gYGBqYXZhXG4vLyByZXR1cm4gdHlwZSAtIG5vIHdpbGRjYXJkc1xuQm94Jmx0O0Rlcml2ZWQmZ3Q7IGJveERlcml2ZWQoRGVyaXZlZCB2YWx1ZSkgeyAuLi4gfVxuICBcbi8vIHBhcmFtZXRlciAtIHdpbGRjYXJkcyBcbkJhc2UgdW5ib3hCYXNlKEJveCZsdDs/IGV4dGVuZHMgQmFzZSZndDsgYm94KSB7IC4uLiB9XG5gYGBcbiAgXG4mZ3Q7ICoqTk9URToqKiB3aGVuIHRoZSBhcmd1bWVudCB0eXBlIGlzIGZpbmFsLCB0aGVyZSZhcG9zO3MgdXN1YWxseSBubyBwb2ludCBpbiBnZW5lcmF0aW5nIHRoZSB3aWxkY2FyZCwgc28gYEJveCZsdDtTdHJpbmcmZ3Q7YCBpcyBhbHdheXMgYEJveCZsdDtTdHJpbmcmZ3Q7YCwgbm8gbWF0dGVyIHdoYXQgcG9zaXRpb24gaXQgdGFrZXMuXG4gIFxuSWYgd2UgbmVlZCB3aWxkY2FyZHMgd2hlcmUgdGhleSBhcmUgbm90IGdlbmVyYXRlZCBieSBkZWZhdWx0LCB3ZSBjYW4gdXNlIHRoZSBgQEp2bVdpbGRjYXJkYCBhbm5vdGF0aW9uOlxuICBcbmBgYGtvdGxpblxuZnVuIGJveERlcml2ZWQodmFsdWU6IERlcml2ZWQpOiBCb3gmbHQ7QEp2bVdpbGRjYXJkIERlcml2ZWQmZ3Q7ID0gQm94KHZhbHVlKVxuLy8gaXMgdHJhbnNsYXRlZCB0byBcbi8vIEJveCZsdDs/IGV4dGVuZHMgRGVyaXZlZCZndDsgYm94RGVyaXZlZChEZXJpdmVkIHZhbHVlKSB7IC4uLiB9XG5gYGBcbiAgXG5PbiB0aGUgb3RoZXIgaGFuZCwgaWYgd2UgZG9uJmFwb3M7dCBuZWVkIHdpbGRjYXJkcyB3aGVyZSB0aGV5IGFyZSBnZW5lcmF0ZWQsIHdlIGNhbiB1c2UgYEBKdm1TdXBwcmVzc1dpbGRjYXJkc2A6XG4gIFxuYGBga290bGluXG5mdW4gdW5ib3hCYXNlKGJveDogQm94Jmx0O0BKdm1TdXBwcmVzc1dpbGRjYXJkcyBCYXNlJmd0Oyk6IEJhc2UgPSBib3gudmFsdWVcbi8vIGlzIHRyYW5zbGF0ZWQgdG8gXG4vLyBCYXNlIHVuYm94QmFzZShCb3gmbHQ7QmFzZSZndDsgYm94KSB7IC4uLiB9XG5gYGBcbiAgXG4mZ3Q7ICoqTk9URToqKiBgQEp2bVN1cHByZXNzV2lsZGNhcmRzYCBjYW4gYmUgdXNlZCBub3Qgb25seSBvbiBpbmRpdmlkdWFsIHR5cGUgYXJndW1lbnRzLCBidXQgb24gZW50aXJlIGRlY2xhcmF0aW9ucywgc3VjaCBhcyBmdW5jdGlvbnMgb3IgY2xhc3NlcywgY2F1c2luZyBhbGwgd2lsZGNhcmRzIGluc2lkZSB0aGVtIHRvIGJlIHN1cHByZXNzZWQuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#variant-generics"
            ],
            "flags": 0,
            "guid": "HJ-)mHt#$/",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Translation of type Nothing</b><i>&nbsp;[Calling Kotlin from Java]</i>",
                "<p>The type <a href=\"exceptions.html#the-nothing-type\"><code>Nothing</code></a> is special, because it has no natural counterpart in Java. <br />\nIndeed, every Java reference type, including <code>java.lang.Void</code>, accepts <code>null</code> as a value, and <code>Nothing</code> doesn't accept even that. So, this type cannot be accurately represented in the Java world. </p>\n<p>This is why Kotlin generates a raw type where an argument of type <code>Nothing</code> is used:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">emptyList</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Nothing</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #8f5902; font-style: italic\">// is translated to</span>\n<span style=\"color: #8f5902; font-style: italic\">// List emptyList() { ... }</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTU3MTYsICJpZCI6ICIxNDg4MDUyMTMzODM1LTAwMSIsICJtZCI6ICJUaGUgdHlwZSBbYE5vdGhpbmdgXShleGNlcHRpb25zLmh0bWwjdGhlLW5vdGhpbmctdHlwZSkgaXMgc3BlY2lhbCwgYmVjYXVzZSBpdCBoYXMgbm8gbmF0dXJhbCBjb3VudGVycGFydCBpbiBKYXZhLiBcbkluZGVlZCwgZXZlcnkgSmF2YSByZWZlcmVuY2UgdHlwZSwgaW5jbHVkaW5nIGBqYXZhLmxhbmcuVm9pZGAsIGFjY2VwdHMgYG51bGxgIGFzIGEgdmFsdWUsIGFuZCBgTm90aGluZ2AgZG9lc24mYXBvczt0IGFjY2VwdCBldmVuIHRoYXQuIFNvLCB0aGlzIHR5cGUgY2Fubm90IGJlIGFjY3VyYXRlbHkgcmVwcmVzZW50ZWQgaW4gdGhlIEphdmEgd29ybGQuIFxuICBcblRoaXMgaXMgd2h5IEtvdGxpbiBnZW5lcmF0ZXMgYSByYXcgdHlwZSB3aGVyZSBhbiBhcmd1bWVudCBvZiB0eXBlIGBOb3RoaW5nYCBpcyB1c2VkOlxuICBcbmBgYGtvdGxpblxuZnVuIGVtcHR5TGlzdCgpOiBMaXN0Jmx0O05vdGhpbmcmZ3Q7ID0gbGlzdE9mKClcbi8vIGlzIHRyYW5zbGF0ZWQgdG9cbi8vIExpc3QgZW1wdHlMaXN0KCkgeyAuLi4gfVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#translation-of-type-nothing"
            ],
            "flags": 0,
            "guid": "n^GjbC`awx",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Generating the Documentation",
                "<p>The language used to document Kotlin code (the equivalent of Java's JavaDoc) is called <strong>KDoc</strong>.<br />\nIn its essence, KDoc combines JavaDoc's syntax for block tags (extended to support Kotlin's specific constructs) and Markdown for inline markup.</p>\n<h2>Generating the Documentation</h2>\n<p>Kotlin's documentation generation tool is called <a href=\"https://github.com/Kotlin/dokka\">Dokka</a>.<br />\nSee the <a href=\"https://github.com/Kotlin/dokka/blob/master/README.md\">Dokka README</a> for usage instructions.</p>\n<p>Dokka has plugins for Gradle, Maven and Ant, so you can integrate documentation generation into your build process.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTkzNTMsICJpZCI6ICIxNDg4MDUyMTY2MTA2LTAwMSIsICJtZCI6ICJUaGUgbGFuZ3VhZ2UgdXNlZCB0byBkb2N1bWVudCBLb3RsaW4gY29kZSAodGhlIGVxdWl2YWxlbnQgb2YgSmF2YSZhcG9zO3MgSmF2YURvYykgaXMgY2FsbGVkICoqS0RvYyoqLlxuSW4gaXRzIGVzc2VuY2UsIEtEb2MgY29tYmluZXMgSmF2YURvYyZhcG9zO3Mgc3ludGF4IGZvciBibG9jayB0YWdzIChleHRlbmRlZCB0byBzdXBwb3J0IEtvdGxpbiZhcG9zO3Mgc3BlY2lmaWMgY29uc3RydWN0cykgYW5kIE1hcmtkb3duIGZvciBpbmxpbmUgbWFya3VwLlxuICBcbiMjIEdlbmVyYXRpbmcgdGhlIERvY3VtZW50YXRpb25cbiAgXG5Lb3RsaW4mYXBvcztzIGRvY3VtZW50YXRpb24gZ2VuZXJhdGlvbiB0b29sIGlzIGNhbGxlZCBbRG9ra2FdKGh0dHBzOi8vZ2l0aHViLmNvbS9Lb3RsaW4vZG9ra2EpLlxuU2VlIHRoZSBbRG9ra2EgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vS290bGluL2Rva2thL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkgZm9yIHVzYWdlIGluc3RydWN0aW9ucy5cbiAgXG5Eb2trYSBoYXMgcGx1Z2lucyBmb3IgR3JhZGxlLCBNYXZlbiBhbmQgQW50LCBzbyB5b3UgY2FuIGludGVncmF0ZSBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24gaW50byB5b3VyIGJ1aWxkIHByb2Nlc3MuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/kotlin-doc.html#generating-the-documentation"
            ],
            "flags": 0,
            "guid": "oHq%qqAny]",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DocumentingKotlinCode",
                "Kotlin_1.1",
                "Tools"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>KDoc</b> Syntax",
                "<p>Just like with JavaDoc, KDoc comments start with <code>/**</code> and end with <code>*/</code>. Every line of the comment may begin with an asterisk, which is not considered part of the contents of the comment.</p>\n<p>By convention, the first paragraph of the documentation text (the block of text until the first blank line) is the summary description of the element, and the following text is the detailed description.</p>\n<p>Every block tag begins on a new line and starts with the <code>@</code> character.</p>\n<p>Here's an example of a class documented using KDoc:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">/**</span>\n<span style=\"color: #8f5902; font-style: italic\"> * A group of *members*.</span>\n<span style=\"color: #8f5902; font-style: italic\"> *</span>\n<span style=\"color: #8f5902; font-style: italic\"> * This class has no useful logic; it's just a documentation example.</span>\n<span style=\"color: #8f5902; font-style: italic\"> *</span>\n<span style=\"color: #8f5902; font-style: italic\"> * @param T the type of a member in this group.</span>\n<span style=\"color: #8f5902; font-style: italic\"> * @property name the name of this group.</span>\n<span style=\"color: #8f5902; font-style: italic\"> * @constructor Creates an empty group.</span>\n<span style=\"color: #8f5902; font-style: italic\"> */</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Group</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">/**</span>\n<span style=\"color: #8f5902; font-style: italic\">     * Adds a [member] to this group.</span>\n<span style=\"color: #8f5902; font-style: italic\">     * @return the new size of the group.</span>\n<span style=\"color: #8f5902; font-style: italic\">     */</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">member</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTkzNjgsICJpZCI6ICIxNDg4MDUyMjMyMzY2LTAwMSIsICJtZCI6ICJKdXN0IGxpa2Ugd2l0aCBKYXZhRG9jLCBLRG9jIGNvbW1lbnRzIHN0YXJ0IHdpdGggYC8qKmAgYW5kIGVuZCB3aXRoIGAqL2AuIEV2ZXJ5IGxpbmUgb2YgdGhlIGNvbW1lbnQgbWF5IGJlZ2luIHdpdGggYW4gYXN0ZXJpc2ssIHdoaWNoIGlzIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIGNvbnRlbnRzIG9mIHRoZSBjb21tZW50LlxuICBcbkJ5IGNvbnZlbnRpb24sIHRoZSBmaXJzdCBwYXJhZ3JhcGggb2YgdGhlIGRvY3VtZW50YXRpb24gdGV4dCAodGhlIGJsb2NrIG9mIHRleHQgdW50aWwgdGhlIGZpcnN0IGJsYW5rIGxpbmUpIGlzIHRoZSBzdW1tYXJ5IGRlc2NyaXB0aW9uIG9mIHRoZSBlbGVtZW50LCBhbmQgdGhlIGZvbGxvd2luZyB0ZXh0IGlzIHRoZSBkZXRhaWxlZCBkZXNjcmlwdGlvbi5cbiAgXG5FdmVyeSBibG9jayB0YWcgYmVnaW5zIG9uIGEgbmV3IGxpbmUgYW5kIHN0YXJ0cyB3aXRoIHRoZSBgQGAgY2hhcmFjdGVyLlxuICBcbkhlcmUmYXBvcztzIGFuIGV4YW1wbGUgb2YgYSBjbGFzcyBkb2N1bWVudGVkIHVzaW5nIEtEb2M6XG4gIFxuYGBga290bGluXG4vKipcbiAqIEEgZ3JvdXAgb2YgKm1lbWJlcnMqLlxuICpcbiAqIFRoaXMgY2xhc3MgaGFzIG5vIHVzZWZ1bCBsb2dpYzsgaXQmYXBvcztzIGp1c3QgYSBkb2N1bWVudGF0aW9uIGV4YW1wbGUuXG4gKlxuICogQHBhcmFtIFQgdGhlIHR5cGUgb2YgYSBtZW1iZXIgaW4gdGhpcyBncm91cC5cbiAqIEBwcm9wZXJ0eSBuYW1lIHRoZSBuYW1lIG9mIHRoaXMgZ3JvdXAuXG4gKiBAY29uc3RydWN0b3IgQ3JlYXRlcyBhbiBlbXB0eSBncm91cC5cbiAqL1xuY2xhc3MgR3JvdXAmbHQ7VCZndDsodmFsIG5hbWU6IFN0cmluZykge1xuICAgIC8qKlxuICAgICAqIEFkZHMgYSBbbWVtYmVyXSB0byB0aGlzIGdyb3VwLlxuICAgICAqIEByZXR1cm4gdGhlIG5ldyBzaXplIG9mIHRoZSBncm91cC5cbiAgICAgKi9cbiAgICBmdW4gYWRkKG1lbWJlcjogVCk6IEludCB7IC4uLiB9XG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/kotlin-doc.html#kdoc-syntax"
            ],
            "flags": 0,
            "guid": "e*oZJ`Nepk",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DocumentingKotlinCode",
                "Kotlin_1.1",
                "Tools"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Block Tags&nbsp;<i>[KDoc Syntax]</i>",
                "<p>KDoc currently supports the following block tags:</p>\n<h4><code>@param &lt;name&gt;</code></h4>\n<p>Documents a value parameter of a function or a type parameter of a class, property or function.<br />\nTo better separate the parameter name from the description, if you prefer, you can enclose the name of the parameter in brackets. The following two syntaxes are therefore equivalent:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">@param name description.\n@param[name] description.\n</pre></div>\n<h4><code>@return</code></h4>\n<p>Documents the return value of a function.</p>\n<h4><code>@constructor</code></h4>\n<p>Documents the primary constructor of a class.</p>\n<h4><code>@receiver</code></h4>\n<p>Documents the receiver of an extension function.</p>\n<h4><code>@property &lt;name&gt;</code></h4>\n<p>Documents the property of a class which has the specified name.<br />\nThis tag can be used for documenting properties declared in the primary constructor, where putting a doc comment directly before the property definition would be awkward.</p>\n<h4><code>@throws &lt;class&gt;</code>, <code>@exception &lt;class&gt;</code></h4>\n<p>Documents an exception which can be thrown by a method. Since Kotlin does not have checked exceptions, there is also no expectation that all possible exceptions are documented, but you can still use this tag when it provides useful information for users of the class.</p>\n<h4><code>@sample &lt;identifier&gt;</code></h4>\n<p>Embeds the body of the function with the specified qualified name into the documentation for the current element, in order to show an example of how the element could be used.</p>\n<h4><code>@see &lt;identifier&gt;</code></h4>\n<p>Adds a link to the specified class or method to the <strong>See Also</strong> block of the documentation.</p>\n<h4><code>@author</code></h4>\n<p>Specifies the author of the element being documented.</p>\n<h4><code>@since</code></h4>\n<p>Specifies the version of the software in which the element being documented was introduced.</p>\n<h4><code>@suppress</code></h4>\n<p>Excludes the element from the generated documentation. Can be used for elements which are not part of the official API of a module but still have to be visible externally.</p>\n<blockquote>\n<p class=\"note\">KDoc does not support the <code>@deprecated</code> tag. Instead, please use the <code>@Deprecated</code> annotation.<br /></p>\n</blockquote><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjE2MTUsICJpZCI6ICIxNDg4MDUyMjUxNjI1LTAwMSIsICJtZCI6ICJLRG9jIGN1cnJlbnRseSBzdXBwb3J0cyB0aGUgZm9sbG93aW5nIGJsb2NrIHRhZ3M6XG4gIFxuIyMjIyBgQHBhcmFtICZsdDtuYW1lJmd0O2BcbiAgXG5Eb2N1bWVudHMgYSB2YWx1ZSBwYXJhbWV0ZXIgb2YgYSBmdW5jdGlvbiBvciBhIHR5cGUgcGFyYW1ldGVyIG9mIGEgY2xhc3MsIHByb3BlcnR5IG9yIGZ1bmN0aW9uLlxuVG8gYmV0dGVyIHNlcGFyYXRlIHRoZSBwYXJhbWV0ZXIgbmFtZSBmcm9tIHRoZSBkZXNjcmlwdGlvbiwgaWYgeW91IHByZWZlciwgeW91IGNhbiBlbmNsb3NlIHRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgaW4gYnJhY2tldHMuIFRoZSBmb2xsb3dpbmcgdHdvIHN5bnRheGVzIGFyZSB0aGVyZWZvcmUgZXF1aXZhbGVudDpcbiAgXG5gYGBcbkBwYXJhbSBuYW1lIGRlc2NyaXB0aW9uLlxuQHBhcmFtW25hbWVdIGRlc2NyaXB0aW9uLlxuYGBgXG4gIFxuIyMjIyBgQHJldHVybmBcbiAgXG5Eb2N1bWVudHMgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uLlxuICBcbiMjIyMgYEBjb25zdHJ1Y3RvcmBcbiAgXG5Eb2N1bWVudHMgdGhlIHByaW1hcnkgY29uc3RydWN0b3Igb2YgYSBjbGFzcy5cbiAgXG4jIyMjIGBAcmVjZWl2ZXJgXG4gIFxuRG9jdW1lbnRzIHRoZSByZWNlaXZlciBvZiBhbiBleHRlbnNpb24gZnVuY3Rpb24uXG4gIFxuIyMjIyBgQHByb3BlcnR5ICZsdDtuYW1lJmd0O2BcbiAgXG5Eb2N1bWVudHMgdGhlIHByb3BlcnR5IG9mIGEgY2xhc3Mgd2hpY2ggaGFzIHRoZSBzcGVjaWZpZWQgbmFtZS5cblRoaXMgdGFnIGNhbiBiZSB1c2VkIGZvciBkb2N1bWVudGluZyBwcm9wZXJ0aWVzIGRlY2xhcmVkIGluIHRoZSBwcmltYXJ5IGNvbnN0cnVjdG9yLCB3aGVyZSBwdXR0aW5nIGEgZG9jIGNvbW1lbnQgZGlyZWN0bHkgYmVmb3JlIHRoZSBwcm9wZXJ0eSBkZWZpbml0aW9uIHdvdWxkIGJlIGF3a3dhcmQuXG4gIFxuIyMjIyBgQHRocm93cyAmbHQ7Y2xhc3MmZ3Q7YCwgYEBleGNlcHRpb24gJmx0O2NsYXNzJmd0O2BcbiAgXG5Eb2N1bWVudHMgYW4gZXhjZXB0aW9uIHdoaWNoIGNhbiBiZSB0aHJvd24gYnkgYSBtZXRob2QuIFNpbmNlIEtvdGxpbiBkb2VzIG5vdCBoYXZlIGNoZWNrZWQgZXhjZXB0aW9ucywgdGhlcmUgaXMgYWxzbyBubyBleHBlY3RhdGlvbiB0aGF0IGFsbCBwb3NzaWJsZSBleGNlcHRpb25zIGFyZSBkb2N1bWVudGVkLCBidXQgeW91IGNhbiBzdGlsbCB1c2UgdGhpcyB0YWcgd2hlbiBpdCBwcm92aWRlcyB1c2VmdWwgaW5mb3JtYXRpb24gZm9yIHVzZXJzIG9mIHRoZSBjbGFzcy5cbiAgXG4jIyMjIGBAc2FtcGxlICZsdDtpZGVudGlmaWVyJmd0O2BcbiAgXG5FbWJlZHMgdGhlIGJvZHkgb2YgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIHNwZWNpZmllZCBxdWFsaWZpZWQgbmFtZSBpbnRvIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgY3VycmVudCBlbGVtZW50LCBpbiBvcmRlciB0byBzaG93IGFuIGV4YW1wbGUgb2YgaG93IHRoZSBlbGVtZW50IGNvdWxkIGJlIHVzZWQuXG4gIFxuIyMjIyBgQHNlZSAmbHQ7aWRlbnRpZmllciZndDtgXG4gIFxuQWRkcyBhIGxpbmsgdG8gdGhlIHNwZWNpZmllZCBjbGFzcyBvciBtZXRob2QgdG8gdGhlICoqU2VlIEFsc28qKiBibG9jayBvZiB0aGUgZG9jdW1lbnRhdGlvbi5cbiAgXG4jIyMjIGBAYXV0aG9yYFxuICBcblNwZWNpZmllcyB0aGUgYXV0aG9yIG9mIHRoZSBlbGVtZW50IGJlaW5nIGRvY3VtZW50ZWQuXG4gIFxuIyMjIyBgQHNpbmNlYFxuICBcblNwZWNpZmllcyB0aGUgdmVyc2lvbiBvZiB0aGUgc29mdHdhcmUgaW4gd2hpY2ggdGhlIGVsZW1lbnQgYmVpbmcgZG9jdW1lbnRlZCB3YXMgaW50cm9kdWNlZC5cbiAgXG4jIyMjIGBAc3VwcHJlc3NgXG4gIFxuRXhjbHVkZXMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgZ2VuZXJhdGVkIGRvY3VtZW50YXRpb24uIENhbiBiZSB1c2VkIGZvciBlbGVtZW50cyB3aGljaCBhcmUgbm90IHBhcnQgb2YgdGhlIG9mZmljaWFsIEFQSSBvZiBhIG1vZHVsZSBidXQgc3RpbGwgaGF2ZSB0byBiZSB2aXNpYmxlIGV4dGVybmFsbHkuXG4gIFxuJmd0OyBLRG9jIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBAZGVwcmVjYXRlZGAgdGFnLiBJbnN0ZWFkLCBwbGVhc2UgdXNlIHRoZSBgQERlcHJlY2F0ZWRgIGFubm90YXRpb24uXG57OiAubm90ZX1cbiJ9---->",
                "https://kotlinlang.org/docs/reference/kotlin-doc.html#block-tags"
            ],
            "flags": 0,
            "guid": "jhE==RKM0P",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DocumentingKotlinCode",
                "Kotlin_1.1",
                "Tools"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Inline Markup&nbsp;<i>[KDoc Syntax]</i>",
                "<p>For inline markup, KDoc uses the regular <a href=\"http://daringfireball.net/projects/markdown/syntax\">Markdown</a> syntax, extended to support a shorthand syntax for linking to other elements in the code.</p>\n<h3>Linking to Elements</h3>\n<p>To link to another element (class, method, property or parameter), simply put its name in square brackets:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">Use the method [foo] for this purpose.\n</pre></div>\n<p>If you want to specify a custom label for the link, use the Markdown reference-style syntax:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">Use</span> <span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">this</span> <span style=\"color: #000000\">method</span><span style=\"color: #000000; font-weight: bold\">][</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000\">this</span> <span style=\"color: #000000\">purpose</span><span style=\"color: #000000; font-weight: bold\">.</span>\n</pre></div>\n<p>You can also use qualified names in the links. Note that, unlike JavaDoc, qualified names always use the dot character to separate the components, even before a method name:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">Use [kotlin.reflect.KClass.properties] to enumerate the properties of the class.\n</pre></div>\n<p>Names in links are resolved using the same rules as if the name was used inside the element being documented.<br />\nIn particular, this means that if you have imported a name into the current file, you don't need to fully qualify it when you use it in a KDoc comment.</p>\n<p>Note that KDoc does not have any syntax for resolving overloaded members in links. Since the Kotlin documentation generation tool puts the documentation for all overloads of a function on the same page, identifying a specific overloaded function is not required for the link to work.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk0MzYsICJpZCI6ICIxNDg4MDUyMzA2ODY4LTAwMSIsICJtZCI6ICJGb3IgaW5saW5lIG1hcmt1cCwgS0RvYyB1c2VzIHRoZSByZWd1bGFyIFtNYXJrZG93bl0oaHR0cDovL2RhcmluZ2ZpcmViYWxsLm5ldC9wcm9qZWN0cy9tYXJrZG93bi9zeW50YXgpIHN5bnRheCwgZXh0ZW5kZWQgdG8gc3VwcG9ydCBhIHNob3J0aGFuZCBzeW50YXggZm9yIGxpbmtpbmcgdG8gb3RoZXIgZWxlbWVudHMgaW4gdGhlIGNvZGUuXG4gIFxuIyMjIExpbmtpbmcgdG8gRWxlbWVudHNcbiAgXG5UbyBsaW5rIHRvIGFub3RoZXIgZWxlbWVudCAoY2xhc3MsIG1ldGhvZCwgcHJvcGVydHkgb3IgcGFyYW1ldGVyKSwgc2ltcGx5IHB1dCBpdHMgbmFtZSBpbiBzcXVhcmUgYnJhY2tldHM6XG4gIFxuYGBgXG5Vc2UgdGhlIG1ldGhvZCBbZm9vXSBmb3IgdGhpcyBwdXJwb3NlLlxuYGBgXG4gIFxuSWYgeW91IHdhbnQgdG8gc3BlY2lmeSBhIGN1c3RvbSBsYWJlbCBmb3IgdGhlIGxpbmssIHVzZSB0aGUgTWFya2Rvd24gcmVmZXJlbmNlLXN0eWxlIHN5bnRheDpcbiAgXG5gYGBcblVzZSBbdGhpcyBtZXRob2RdW2Zvb10gZm9yIHRoaXMgcHVycG9zZS5cbmBgYFxuICBcbllvdSBjYW4gYWxzbyB1c2UgcXVhbGlmaWVkIG5hbWVzIGluIHRoZSBsaW5rcy4gTm90ZSB0aGF0LCB1bmxpa2UgSmF2YURvYywgcXVhbGlmaWVkIG5hbWVzIGFsd2F5cyB1c2UgdGhlIGRvdCBjaGFyYWN0ZXIgdG8gc2VwYXJhdGUgdGhlIGNvbXBvbmVudHMsIGV2ZW4gYmVmb3JlIGEgbWV0aG9kIG5hbWU6XG4gIFxuYGBgXG5Vc2UgW2tvdGxpbi5yZWZsZWN0LktDbGFzcy5wcm9wZXJ0aWVzXSB0byBlbnVtZXJhdGUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGNsYXNzLlxuYGBgXG4gIFxuTmFtZXMgaW4gbGlua3MgYXJlIHJlc29sdmVkIHVzaW5nIHRoZSBzYW1lIHJ1bGVzIGFzIGlmIHRoZSBuYW1lIHdhcyB1c2VkIGluc2lkZSB0aGUgZWxlbWVudCBiZWluZyBkb2N1bWVudGVkLlxuSW4gcGFydGljdWxhciwgdGhpcyBtZWFucyB0aGF0IGlmIHlvdSBoYXZlIGltcG9ydGVkIGEgbmFtZSBpbnRvIHRoZSBjdXJyZW50IGZpbGUsIHlvdSBkb24mYXBvczt0IG5lZWQgdG8gZnVsbHkgcXVhbGlmeSBpdCB3aGVuIHlvdSB1c2UgaXQgaW4gYSBLRG9jIGNvbW1lbnQuXG4gIFxuTm90ZSB0aGF0IEtEb2MgZG9lcyBub3QgaGF2ZSBhbnkgc3ludGF4IGZvciByZXNvbHZpbmcgb3ZlcmxvYWRlZCBtZW1iZXJzIGluIGxpbmtzLiBTaW5jZSB0aGUgS290bGluIGRvY3VtZW50YXRpb24gZ2VuZXJhdGlvbiB0b29sIHB1dHMgdGhlIGRvY3VtZW50YXRpb24gZm9yIGFsbCBvdmVybG9hZHMgb2YgYSBmdW5jdGlvbiBvbiB0aGUgc2FtZSBwYWdlLCBpZGVudGlmeWluZyBhIHNwZWNpZmljIG92ZXJsb2FkZWQgZnVuY3Rpb24gaXMgbm90IHJlcXVpcmVkIGZvciB0aGUgbGluayB0byB3b3JrLlxuICBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/kotlin-doc.html#inline-markup"
            ],
            "flags": 0,
            "guid": "HAB7wF}Jkv",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DocumentingKotlinCode",
                "Kotlin_1.1",
                "Tools"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Module and Package Documentation&nbsp;<i>[KDoc Syntax]</i>",
                "<p>Documentation for a module as a whole, as well as packages in that module, is provided as a separate Markdown file, and the paths to that file is passed to Dokka using the <code>-include</code> command line parameter or the corresponding parameters in Ant, Maven and Gradle plugins.</p>\n<p>Inside the file, the documentation for the module as a whole and for individual packages is introduced by the corresponding first-level headings.<br />\nThe text of the heading must be \"Module <code>&lt;module name&gt;</code>\" for the module, and \"Package <code>&lt;package qualified name&gt;</code>\" for a package.</p>\n<p>Here's an example content of the file:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"># Module kotlin-demo\n\nThe module shows the Dokka syntax usage.\n\n# Package org.jetbrains.kotlin.demo\n\nContains assorted useful stuff.\n\n## Level 2 heading\n\nText after this heading is also part of documentation for `org.jetbrains.kotlin.demo`\n\n# Package org.jetbrains.kotlin.demo2\n\nUseful stuff in another package.\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk0NTEsICJpZCI6ICIxNDg4MDUyMzMwMjk0LTAwMSIsICJtZCI6ICJEb2N1bWVudGF0aW9uIGZvciBhIG1vZHVsZSBhcyBhIHdob2xlLCBhcyB3ZWxsIGFzIHBhY2thZ2VzIGluIHRoYXQgbW9kdWxlLCBpcyBwcm92aWRlZCBhcyBhIHNlcGFyYXRlIE1hcmtkb3duIGZpbGUsIGFuZCB0aGUgcGF0aHMgdG8gdGhhdCBmaWxlIGlzIHBhc3NlZCB0byBEb2trYSB1c2luZyB0aGUgYC1pbmNsdWRlYCBjb21tYW5kIGxpbmUgcGFyYW1ldGVyIG9yIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlcnMgaW4gQW50LCBNYXZlbiBhbmQgR3JhZGxlIHBsdWdpbnMuXG4gIFxuSW5zaWRlIHRoZSBmaWxlLCB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIG1vZHVsZSBhcyBhIHdob2xlIGFuZCBmb3IgaW5kaXZpZHVhbCBwYWNrYWdlcyBpcyBpbnRyb2R1Y2VkIGJ5IHRoZSBjb3JyZXNwb25kaW5nIGZpcnN0LWxldmVsIGhlYWRpbmdzLlxuVGhlIHRleHQgb2YgdGhlIGhlYWRpbmcgbXVzdCBiZSAmcXVvdDtNb2R1bGUgYCZsdDttb2R1bGUgbmFtZSZndDtgJnF1b3Q7IGZvciB0aGUgbW9kdWxlLCBhbmQgJnF1b3Q7UGFja2FnZSBgJmx0O3BhY2thZ2UgcXVhbGlmaWVkIG5hbWUmZ3Q7YCZxdW90OyBmb3IgYSBwYWNrYWdlLlxuICBcbkhlcmUmYXBvcztzIGFuIGV4YW1wbGUgY29udGVudCBvZiB0aGUgZmlsZTpcbiAgXG5gYGBcbiMgTW9kdWxlIGtvdGxpbi1kZW1vXG4gIFxuVGhlIG1vZHVsZSBzaG93cyB0aGUgRG9ra2Egc3ludGF4IHVzYWdlLlxuICBcbiMgUGFja2FnZSBvcmcuamV0YnJhaW5zLmtvdGxpbi5kZW1vXG4gIFxuQ29udGFpbnMgYXNzb3J0ZWQgdXNlZnVsIHN0dWZmLlxuICBcbiMjIExldmVsIDIgaGVhZGluZ1xuICBcblRleHQgYWZ0ZXIgdGhpcyBoZWFkaW5nIGlzIGFsc28gcGFydCBvZiBkb2N1bWVudGF0aW9uIGZvciBgb3JnLmpldGJyYWlucy5rb3RsaW4uZGVtb2BcbiAgXG4jIFBhY2thZ2Ugb3JnLmpldGJyYWlucy5rb3RsaW4uZGVtbzJcbiAgXG5Vc2VmdWwgc3R1ZmYgaW4gYW5vdGhlciBwYWNrYWdlLlxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/kotlin-doc.html#module-and-package-documentation"
            ],
            "flags": 0,
            "guid": "JK&Q_Gl;{J",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DocumentingKotlinCode",
                "Kotlin_1.1",
                "Tools"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>Some <b>Java</b> issues addressed in <b>Kotlin</b></div>",
                "<p>Kotlin fixes a series of issues that Java suffers from</p>\n<ul>\n<li align=\"left\">Null references are <a href=\"null-safety.html\">controlled by the type system</a>.</li>\n<li align=\"left\"><a href=\"java-interop.html\">No raw types</a></li>\n<li align=\"left\">Arrays in Kotlin are <a href=\"basic-types.html#arrays\">invariant</a></li>\n<li align=\"left\">Kotlin has proper <a href=\"lambdas.html#function-types\">function types</a>, as opposed to Java's SAM-conversions</li>\n<li align=\"left\"><a href=\"generics.html#use-site-variance-type-projections\">Use-site variance</a> without wildcards</li>\n<li align=\"left\">Kotlin does not have checked <a href=\"exceptions.html\">exceptions</a></li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk1MzUsICJpZCI6ICIxNDg4MDUzNDE0OTExLTAwMSIsICJtZCI6ICJLb3RsaW4gZml4ZXMgYSBzZXJpZXMgb2YgaXNzdWVzIHRoYXQgSmF2YSBzdWZmZXJzIGZyb21cbiAgXG4qIE51bGwgcmVmZXJlbmNlcyBhcmUgW2NvbnRyb2xsZWQgYnkgdGhlIHR5cGUgc3lzdGVtXShudWxsLXNhZmV0eS5odG1sKS5cbiogW05vIHJhdyB0eXBlc10oamF2YS1pbnRlcm9wLmh0bWwpXG4qIEFycmF5cyBpbiBLb3RsaW4gYXJlIFtpbnZhcmlhbnRdKGJhc2ljLXR5cGVzLmh0bWwjYXJyYXlzKVxuKiBLb3RsaW4gaGFzIHByb3BlciBbZnVuY3Rpb24gdHlwZXNdKGxhbWJkYXMuaHRtbCNmdW5jdGlvbi10eXBlcyksIGFzIG9wcG9zZWQgdG8gSmF2YSZhcG9zO3MgU0FNLWNvbnZlcnNpb25zXG4qIFtVc2Utc2l0ZSB2YXJpYW5jZV0oZ2VuZXJpY3MuaHRtbCN1c2Utc2l0ZS12YXJpYW5jZS10eXBlLXByb2plY3Rpb25zKSB3aXRob3V0IHdpbGRjYXJkc1xuKiBLb3RsaW4gZG9lcyBub3QgaGF2ZSBjaGVja2VkIFtleGNlcHRpb25zXShleGNlcHRpb25zLmh0bWwpXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/comparison-to-java.html#some-java-issues-addressed-in-kotlin"
            ],
            "flags": 0,
            "guid": "g>/e9fPibL",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ComparisonToJava",
                "Faq",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What <b>Java</b> has that <b>Kotlin</b> <u>does not</u>",
                "<ul>\n<li align=\"left\"><a href=\"exceptions.html\">Checked exceptions</a></li>\n<li align=\"left\"><a href=\"basic-types.html\">Primitive types</a> that are not classes</li>\n<li align=\"left\"><a href=\"classes.html\">Static members</a></li>\n<li align=\"left\"><a href=\"properties.html\">Non-private fields</a></li>\n<li align=\"left\"><a href=\"generics.html\">Wildcard-types</a></li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk1NDYsICJpZCI6ICIxNDg4MDUzNDUzMTM2LTAwMSIsICJtZCI6ICIqIFtDaGVja2VkIGV4Y2VwdGlvbnNdKGV4Y2VwdGlvbnMuaHRtbClcbiogW1ByaW1pdGl2ZSB0eXBlc10oYmFzaWMtdHlwZXMuaHRtbCkgdGhhdCBhcmUgbm90IGNsYXNzZXNcbiogW1N0YXRpYyBtZW1iZXJzXShjbGFzc2VzLmh0bWwpXG4qIFtOb24tcHJpdmF0ZSBmaWVsZHNdKHByb3BlcnRpZXMuaHRtbClcbiogW1dpbGRjYXJkLXR5cGVzXShnZW5lcmljcy5odG1sKVxuIn0=---->",
                "https://kotlinlang.org/docs/reference/comparison-to-java.html#what-java-has-that-kotlin-does-not"
            ],
            "flags": 0,
            "guid": "yb9#HoquBk",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ComparisonToJava",
                "Faq",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What <b>Kotlin</b> has that <b>Java</b> does not",
                "<ul>\n<li align=\"left\"><a href=\"lambdas.html\">Lambda expressions</a> + <a href=\"inline-functions.html\">Inline functions</a> = performant custom control structures</li>\n<li align=\"left\"><a href=\"extensions.html\">Extension functions</a></li>\n<li align=\"left\"><a href=\"null-safety.html\">Null-safety</a></li>\n<li align=\"left\"><a href=\"typecasts.html\">Smart casts</a></li>\n<li align=\"left\"><a href=\"basic-types.html#strings\">String templates</a></li>\n<li align=\"left\"><a href=\"properties.html\">Properties</a></li>\n<li align=\"left\"><a href=\"classes.html\">Primary constructors</a></li>\n<li align=\"left\"><a href=\"delegation.html\">First-class delegation</a></li>\n<li align=\"left\"><a href=\"basic-types.html\">Type inference for variable and property types</a></li>\n<li align=\"left\"><a href=\"object-declarations.html\">Singletons</a></li>\n<li align=\"left\"><a href=\"generics.html\">Declaration-site variance &amp; Type projections</a></li>\n<li align=\"left\"><a href=\"ranges.html\">Range expressions</a></li>\n<li align=\"left\"><a href=\"operator-overloading.html\">Operator overloading</a></li>\n<li align=\"left\"><a href=\"classes.html#companion-objects\">Companion objects</a></li>\n<li align=\"left\"><a href=\"data-classes.html\">Data classes</a></li>\n<li align=\"left\"><a href=\"collections.html\">Separate interfaces for read-only and mutable collections</a></li>\n<li align=\"left\"><a href=\"coroutines.html\">Coroutines</a></li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTQ5NjE5MzQsICJpZCI6ICIxNDg4MDUzNDc2OTEzLTAwMSIsICJtZCI6ICIqIFtMYW1iZGEgZXhwcmVzc2lvbnNdKGxhbWJkYXMuaHRtbCkgKyBbSW5saW5lIGZ1bmN0aW9uc10oaW5saW5lLWZ1bmN0aW9ucy5odG1sKSA9IHBlcmZvcm1hbnQgY3VzdG9tIGNvbnRyb2wgc3RydWN0dXJlc1xuKiBbRXh0ZW5zaW9uIGZ1bmN0aW9uc10oZXh0ZW5zaW9ucy5odG1sKVxuKiBbTnVsbC1zYWZldHldKG51bGwtc2FmZXR5Lmh0bWwpXG4qIFtTbWFydCBjYXN0c10odHlwZWNhc3RzLmh0bWwpXG4qIFtTdHJpbmcgdGVtcGxhdGVzXShiYXNpYy10eXBlcy5odG1sI3N0cmluZ3MpXG4qIFtQcm9wZXJ0aWVzXShwcm9wZXJ0aWVzLmh0bWwpXG4qIFtQcmltYXJ5IGNvbnN0cnVjdG9yc10oY2xhc3Nlcy5odG1sKVxuKiBbRmlyc3QtY2xhc3MgZGVsZWdhdGlvbl0oZGVsZWdhdGlvbi5odG1sKVxuKiBbVHlwZSBpbmZlcmVuY2UgZm9yIHZhcmlhYmxlIGFuZCBwcm9wZXJ0eSB0eXBlc10oYmFzaWMtdHlwZXMuaHRtbClcbiogW1NpbmdsZXRvbnNdKG9iamVjdC1kZWNsYXJhdGlvbnMuaHRtbClcbiogW0RlY2xhcmF0aW9uLXNpdGUgdmFyaWFuY2UgJmFtcDsgVHlwZSBwcm9qZWN0aW9uc10oZ2VuZXJpY3MuaHRtbClcbiogW1JhbmdlIGV4cHJlc3Npb25zXShyYW5nZXMuaHRtbClcbiogW09wZXJhdG9yIG92ZXJsb2FkaW5nXShvcGVyYXRvci1vdmVybG9hZGluZy5odG1sKVxuKiBbQ29tcGFuaW9uIG9iamVjdHNdKGNsYXNzZXMuaHRtbCNjb21wYW5pb24tb2JqZWN0cylcbiogW0RhdGEgY2xhc3Nlc10oZGF0YS1jbGFzc2VzLmh0bWwpXG4qIFtTZXBhcmF0ZSBpbnRlcmZhY2VzIGZvciByZWFkLW9ubHkgYW5kIG11dGFibGUgY29sbGVjdGlvbnNdKGNvbGxlY3Rpb25zLmh0bWwpXG4qIFtDb3JvdXRpbmVzXShjb3JvdXRpbmVzLmh0bWwpXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/comparison-to-java.html#what-kotlin-has-that-java-does-not"
            ],
            "flags": 0,
            "guid": "p.)8r[)mn~",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ComparisonToJava",
                "Faq",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Destructuring</b> Declarations",
                "<p>Sometimes it is convenient to <em>destructure</em> an object into a number of variables, for example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">person</span> \n</pre></div>\n<p>This syntax is called a <em>destructuring declaration</em>. <br />\nA destructuring declaration creates multiple variables at once.<br />\nWe have declared two new variables: <code>name</code> and <code>age</code>, and can use them independently:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>A destructuring declaration is compiled down to the following code:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">name</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">person</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">component1</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">age</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">person</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">component2</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div>\n<p>The <code>component1()</code> and <code>component2()</code> functions are another example of the <em>principle of conventions</em> widely used in Kotlin (see operators like <code>+</code> and <code>*</code>, <em class=\"keyword\">for</em>-loops etc.). <br />\nAnything can be on the right-hand side of a destructuring declaration, as long as the required number of component functions can be called on it.<br />\nAnd, of course, there can be <code>component3()</code> and <code>component4()</code> and so on.</p>\n<p>Note that the <code>componentN()</code> functions need to be marked with the <code>operator</code> keyword to allow using them in a destructuring declaration.</p>\n<p>Destructuring declarations also work in <em class=\"keyword\">for</em>-loops: when you say</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">((</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">collection</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Variables <code>a</code> and <code>b</code> get the values returned by <code>component1()</code> and <code>component2()</code> called on elements of the collection.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTA2NDMsICJpZCI6ICIxNDg4MDUzNDk1MDczLTAwMSIsICJtZCI6ICJTb21ldGltZXMgaXQgaXMgY29udmVuaWVudCB0byBfZGVzdHJ1Y3R1cmVfIGFuIG9iamVjdCBpbnRvIGEgbnVtYmVyIG9mIHZhcmlhYmxlcywgZm9yIGV4YW1wbGU6XG4gIFxuYGBga290bGluXG52YWwgKG5hbWUsIGFnZSkgPSBwZXJzb24gXG5gYGBcbiAgXG5UaGlzIHN5bnRheCBpcyBjYWxsZWQgYSBfZGVzdHJ1Y3R1cmluZyBkZWNsYXJhdGlvbl8uIFxuQSBkZXN0cnVjdHVyaW5nIGRlY2xhcmF0aW9uIGNyZWF0ZXMgbXVsdGlwbGUgdmFyaWFibGVzIGF0IG9uY2UuXG5XZSBoYXZlIGRlY2xhcmVkIHR3byBuZXcgdmFyaWFibGVzOiBgbmFtZWAgYW5kIGBhZ2VgLCBhbmQgY2FuIHVzZSB0aGVtIGluZGVwZW5kZW50bHk6XG4gXG5gYGBrb3RsaW5cbnByaW50bG4obmFtZSlcbnByaW50bG4oYWdlKVxuYGBgXG4gIFxuQSBkZXN0cnVjdHVyaW5nIGRlY2xhcmF0aW9uIGlzIGNvbXBpbGVkIGRvd24gdG8gdGhlIGZvbGxvd2luZyBjb2RlOlxuICBcbmBgYGtvdGxpblxudmFsIG5hbWUgPSBwZXJzb24uY29tcG9uZW50MSgpXG52YWwgYWdlID0gcGVyc29uLmNvbXBvbmVudDIoKVxuYGBgXG4gIFxuVGhlIGBjb21wb25lbnQxKClgIGFuZCBgY29tcG9uZW50MigpYCBmdW5jdGlvbnMgYXJlIGFub3RoZXIgZXhhbXBsZSBvZiB0aGUgX3ByaW5jaXBsZSBvZiBjb252ZW50aW9uc18gd2lkZWx5IHVzZWQgaW4gS290bGluIChzZWUgb3BlcmF0b3JzIGxpa2UgYCtgIGFuZCBgKmAsICpmb3IqezogLmtleXdvcmQgfS1sb29wcyBldGMuKS4gXG5Bbnl0aGluZyBjYW4gYmUgb24gdGhlIHJpZ2h0LWhhbmQgc2lkZSBvZiBhIGRlc3RydWN0dXJpbmcgZGVjbGFyYXRpb24sIGFzIGxvbmcgYXMgdGhlIHJlcXVpcmVkIG51bWJlciBvZiBjb21wb25lbnQgZnVuY3Rpb25zIGNhbiBiZSBjYWxsZWQgb24gaXQuXG5BbmQsIG9mIGNvdXJzZSwgdGhlcmUgY2FuIGJlIGBjb21wb25lbnQzKClgIGFuZCBgY29tcG9uZW50NCgpYCBhbmQgc28gb24uXG4gIFxuTm90ZSB0aGF0IHRoZSBgY29tcG9uZW50TigpYCBmdW5jdGlvbnMgbmVlZCB0byBiZSBtYXJrZWQgd2l0aCB0aGUgYG9wZXJhdG9yYCBrZXl3b3JkIHRvIGFsbG93IHVzaW5nIHRoZW0gaW4gYSBkZXN0cnVjdHVyaW5nIGRlY2xhcmF0aW9uLlxuICBcbkRlc3RydWN0dXJpbmcgZGVjbGFyYXRpb25zIGFsc28gd29yayBpbiAqZm9yKns6IC5rZXl3b3JkIH0tbG9vcHM6IHdoZW4geW91IHNheVxuICBcbmBgYGtvdGxpblxuZm9yICgoYSwgYikgaW4gY29sbGVjdGlvbikgeyAuLi4gfVxuYGBgXG4gIFxuVmFyaWFibGVzIGBhYCBhbmQgYGJgIGdldCB0aGUgdmFsdWVzIHJldHVybmVkIGJ5IGBjb21wb25lbnQxKClgIGFuZCBgY29tcG9uZW50MigpYCBjYWxsZWQgb24gZWxlbWVudHMgb2YgdGhlIGNvbGxlY3Rpb24uXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/multi-declarations.html#destructuring-declarations"
            ],
            "flags": 0,
            "guid": "ryRRS3067h",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DestructuringDeclarations",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<u>Example of&nbsp;Destructuring Declarations:</u>&nbsp;<i>Returning Two Values from a Function</i>",
                "<p>Let's say we need to return two things from a function. For example, a result object and a status of some sort.<br />\nA compact way of doing this in Kotlin is to declare a <a href=\"data-classes.html\"><em>data class</em></a> and return its instance:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Result</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">result</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">status</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Status</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">function</span><span style=\"color: #000000; font-weight: bold\">(...):</span> <span style=\"color: #000000\">Result</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// computations</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">Result</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">result</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">status</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// Now, to use this function:</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">(</span><span style=\"color: #000000\">result</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">status</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">function</span><span style=\"color: #000000; font-weight: bold\">(...)</span>\n</pre></div>\n<p>Since data classes automatically declare <code>componentN()</code> functions, destructuring declarations work here.</p>\n<p><strong>NOTE</strong>: we could also use the standard class <code>Pair</code> and have <code>function()</code> return <code>Pair&lt;Int, Status&gt;</code>, but it's often better to have your data named properly.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTA2ODEsICJpZCI6ICIxNDg4MDUzODM3NTIxLTAwMSIsICJtZCI6ICJMZXQmYXBvcztzIHNheSB3ZSBuZWVkIHRvIHJldHVybiB0d28gdGhpbmdzIGZyb20gYSBmdW5jdGlvbi4gRm9yIGV4YW1wbGUsIGEgcmVzdWx0IG9iamVjdCBhbmQgYSBzdGF0dXMgb2Ygc29tZSBzb3J0LlxuQSBjb21wYWN0IHdheSBvZiBkb2luZyB0aGlzIGluIEtvdGxpbiBpcyB0byBkZWNsYXJlIGEgW19kYXRhIGNsYXNzX10oZGF0YS1jbGFzc2VzLmh0bWwpIGFuZCByZXR1cm4gaXRzIGluc3RhbmNlOlxuICBcbmBgYGtvdGxpblxuZGF0YSBjbGFzcyBSZXN1bHQodmFsIHJlc3VsdDogSW50LCB2YWwgc3RhdHVzOiBTdGF0dXMpXG5mdW4gZnVuY3Rpb24oLi4uKTogUmVzdWx0IHtcbiAgICAvLyBjb21wdXRhdGlvbnNcbiAgXG4gICAgcmV0dXJuIFJlc3VsdChyZXN1bHQsIHN0YXR1cylcbn1cbiAgXG4vLyBOb3csIHRvIHVzZSB0aGlzIGZ1bmN0aW9uOlxudmFsIChyZXN1bHQsIHN0YXR1cykgPSBmdW5jdGlvbiguLi4pXG5gYGBcbiAgXG5TaW5jZSBkYXRhIGNsYXNzZXMgYXV0b21hdGljYWxseSBkZWNsYXJlIGBjb21wb25lbnROKClgIGZ1bmN0aW9ucywgZGVzdHJ1Y3R1cmluZyBkZWNsYXJhdGlvbnMgd29yayBoZXJlLlxuICBcbioqTk9URSoqOiB3ZSBjb3VsZCBhbHNvIHVzZSB0aGUgc3RhbmRhcmQgY2xhc3MgYFBhaXJgIGFuZCBoYXZlIGBmdW5jdGlvbigpYCByZXR1cm4gYFBhaXImbHQ7SW50LCBTdGF0dXMmZ3Q7YCwgYnV0IGl0JmFwb3M7cyBvZnRlbiBiZXR0ZXIgdG8gaGF2ZSB5b3VyIGRhdGEgbmFtZWQgcHJvcGVybHkuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/multi-declarations.html#example-returning-two-values-from-a-function"
            ],
            "flags": 0,
            "guid": "oO}rv)R)]A",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DestructuringDeclarations",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<u>Example of&nbsp;Destructuring Declarations</u>:&nbsp;<i>Destructuring <b>Declarations</b> and <b>Maps</b></i>",
                "<p>Probably the nicest way to traverse a map is this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">((</span><span style=\"color: #000000\">key</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n   <span style=\"color: #8f5902; font-style: italic\">// do something with the key and the value</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>To make this work, we should </p>\n<ul>\n<li align=\"left\">present the map as a sequence of values by providing an <code>iterator()</code> function,</li>\n<li align=\"left\">present each of the elements as a pair by providing functions <code>component1()</code> and <code>component2()</code>.</li>\n</ul>\n<p>And indeed, the standard library provides such extensions:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">K</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">V</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">Map</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">K</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">V</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">iterator</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">Iterator</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Entry</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">K</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">V</span><span style=\"color: #000000; font-weight: bold\">&gt;&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">entrySet</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">iterator</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">K</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">V</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">Map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Entry</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">K</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">V</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">component1</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">getKey</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">K</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">V</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">Map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Entry</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">K</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">V</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">component2</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">getValue</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div>\n<p>So you can freely use destructuring declarations in <em class=\"keyword\">for</em>-loops with maps (as well as collections of data class instances etc).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTA3MDMsICJpZCI6ICIxNDg4MDUzODcyNzc2LTAwMSIsICJtZCI6ICJQcm9iYWJseSB0aGUgbmljZXN0IHdheSB0byB0cmF2ZXJzZSBhIG1hcCBpcyB0aGlzOlxuICBcbmBgYGtvdGxpblxuZm9yICgoa2V5LCB2YWx1ZSkgaW4gbWFwKSB7XG4gICAvLyBkbyBzb21ldGhpbmcgd2l0aCB0aGUga2V5IGFuZCB0aGUgdmFsdWVcbn1cbmBgYFxuICBcblRvIG1ha2UgdGhpcyB3b3JrLCB3ZSBzaG91bGQgXG4gIFxuKiBwcmVzZW50IHRoZSBtYXAgYXMgYSBzZXF1ZW5jZSBvZiB2YWx1ZXMgYnkgcHJvdmlkaW5nIGFuIGBpdGVyYXRvcigpYCBmdW5jdGlvbixcbiogcHJlc2VudCBlYWNoIG9mIHRoZSBlbGVtZW50cyBhcyBhIHBhaXIgYnkgcHJvdmlkaW5nIGZ1bmN0aW9ucyBgY29tcG9uZW50MSgpYCBhbmQgYGNvbXBvbmVudDIoKWAuXG4gIFxuQW5kIGluZGVlZCwgdGhlIHN0YW5kYXJkIGxpYnJhcnkgcHJvdmlkZXMgc3VjaCBleHRlbnNpb25zOlxuICBcbmBgYGtvdGxpblxub3BlcmF0b3IgZnVuICZsdDtLLCBWJmd0OyBNYXAmbHQ7SywgViZndDsuaXRlcmF0b3IoKTogSXRlcmF0b3ImbHQ7TWFwLkVudHJ5Jmx0O0ssIFYmZ3Q7Jmd0OyA9IGVudHJ5U2V0KCkuaXRlcmF0b3IoKVxub3BlcmF0b3IgZnVuICZsdDtLLCBWJmd0OyBNYXAuRW50cnkmbHQ7SywgViZndDsuY29tcG9uZW50MSgpID0gZ2V0S2V5KClcbm9wZXJhdG9yIGZ1biAmbHQ7SywgViZndDsgTWFwLkVudHJ5Jmx0O0ssIFYmZ3Q7LmNvbXBvbmVudDIoKSA9IGdldFZhbHVlKClcbmBgYCAgXG4gIFxuU28geW91IGNhbiBmcmVlbHkgdXNlIGRlc3RydWN0dXJpbmcgZGVjbGFyYXRpb25zIGluICpmb3IqezogLmtleXdvcmQgfS1sb29wcyB3aXRoIG1hcHMgKGFzIHdlbGwgYXMgY29sbGVjdGlvbnMgb2YgZGF0YSBjbGFzcyBpbnN0YW5jZXMgZXRjKS5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/multi-declarations.html#example-destructuring-declarations-and-maps"
            ],
            "flags": 0,
            "guid": "L4`>t!{H16",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DestructuringDeclarations",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Collections</b>",
                "<p>Unlike many languages, Kotlin distinguishes between mutable and immutable collections (lists, sets, maps, etc). Precise control over exactly when collections can be edited is useful for eliminating bugs, and for designing good APIs.</p>\n<p>It is important to understand up front the difference between a read-only <em>view</em> of a mutable collection, and an actually immutable collection. Both are easy to create, but the type system doesn't express the difference, so keeping track of that (if it's relevant) is up to you.</p>\n<p>The Kotlin <code>List&lt;out T&gt;</code> type is an interface that provides read-only operations like <code>size</code>, <code>get</code> and so on.<br />\nLike in Java, it inherits from <code>Collection&lt;T&gt;</code> and that in turn inherits from <code>Iterable&lt;T&gt;</code>.<br />\nMethods that change the list are added by the <code>MutableList&lt;T&gt;</code> interface.<br />\nThis pattern holds also for <code>Set&lt;out T&gt;/MutableSet&lt;T&gt;</code> and <code>Map&lt;K, out V&gt;/MutableMap&lt;K, V&gt;</code>.</p>\n<p>We can see basic usage of the list and set types below:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">numbers</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MutableList</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">mutableListOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">readOnlyView</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">numbers</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">numbers</span><span style=\"color: #000000; font-weight: bold\">)</span>        <span style=\"color: #8f5902; font-style: italic\">// prints \"[1, 2, 3]\"</span>\n<span style=\"color: #000000\">numbers</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">4</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">readOnlyView</span><span style=\"color: #000000; font-weight: bold\">)</span>   <span style=\"color: #8f5902; font-style: italic\">// prints \"[1, 2, 3, 4]\"</span>\n<span style=\"color: #000000\">readOnlyView</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">clear</span><span style=\"color: #000000; font-weight: bold\">()</span>    <span style=\"color: #8f5902; font-style: italic\">// -&gt; does not compile</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">strings</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">hashSetOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"b\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"c\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"c\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">assert</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">strings</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>Kotlin does not have dedicated syntax constructs for creating lists or sets. Use methods from the standard library, such as <code>listOf()</code>, <code>mutableListOf()</code>, <code>setOf()</code>, <code>mutableSetOf()</code>.<br />\nMap creation in NOT performance-critical code can be accomplished with a simple <a href=\"idioms.html#read-only-map\">idiom</a>: <code>mapOf(a to b, c to d)</code></p>\n<p>Note that the <code>readOnlyView</code> variable points to the same list and changes as the underlying list changes. If the only references that exist to a list are of the read-only variety, we can consider the collection fully immutable. A simple way to create such a collection is like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">items</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>Currently, the <code>listOf</code> method is implemented using an array list, but in future more memory-efficient fully immutable collection types could be returned that exploit the fact that they know they can't change.</p>\n<p>Note that the read-only types are <a href=\"generics.html#variance\">covariant</a>. That means, you can take a <code>List&lt;Rectangle&gt;</code> and assign it to <code>List&lt;Shape&gt;</code> assuming Rectangle inherits from Shape. This wouldn't be allowed with the mutable collection types because it would allow for failures at runtime.</p>\n<p>Sometimes you want to return to the caller a snapshot of a collection at a particular point in time, one that's guaranteed to not change:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Controller</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">_items</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">mutableListOf</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;()</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">items</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">_items</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toList</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The <code>toList</code> extension method just duplicates the lists items, thus, the returned list is guaranteed to never change.</p>\n<p>There are various useful extension methods on lists and sets that are worth being familiar with:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">items</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">4</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">items</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">first</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n<span style=\"color: #000000\">items</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">last</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">4</span>\n<span style=\"color: #000000\">items</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">%</span> <span style=\"color: #0000cf; font-weight: bold\">2</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> <span style=\"color: #000000; font-weight: bold\">}</span>   <span style=\"color: #8f5902; font-style: italic\">// returns [2, 4]</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">rwList</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">mutableListOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">rwList</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">requireNoNulls</span><span style=\"color: #000000; font-weight: bold\">()</span>        <span style=\"color: #8f5902; font-style: italic\">// returns [1, 2, 3]</span>\n<span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">rwList</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">none</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">6</span> <span style=\"color: #000000; font-weight: bold\">})</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"No items above 6\"</span><span style=\"color: #000000; font-weight: bold\">)</span>  <span style=\"color: #8f5902; font-style: italic\">// prints \"No items above 6\"</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">item</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">rwList</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">firstOrNull</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div>\n<p>... as well as all the utilities you would expect such as sort, zip, fold, reduce and so on.</p>\n<p>Maps follow the same pattern. They can be easily instantiated and accessed like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">readWriteMap</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">hashMapOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"foo\"</span> <span style=\"color: #000000\">to</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"bar\"</span> <span style=\"color: #000000\">to</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">readWriteMap</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #4e9a06\">\"foo\"</span><span style=\"color: #000000; font-weight: bold\">])</span>  <span style=\"color: #8f5902; font-style: italic\">// prints \"1\"</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">snapshot</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Map</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">HashMap</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">readWriteMap</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzI2NjEsICJpZCI6ICIxNDg4MDUzODk4MjE5LTAwMSIsICJtZCI6ICJVbmxpa2UgbWFueSBsYW5ndWFnZXMsIEtvdGxpbiBkaXN0aW5ndWlzaGVzIGJldHdlZW4gbXV0YWJsZSBhbmQgaW1tdXRhYmxlIGNvbGxlY3Rpb25zIChsaXN0cywgc2V0cywgbWFwcywgZXRjKS4gUHJlY2lzZSBjb250cm9sIG92ZXIgZXhhY3RseSB3aGVuIGNvbGxlY3Rpb25zIGNhbiBiZSBlZGl0ZWQgaXMgdXNlZnVsIGZvciBlbGltaW5hdGluZyBidWdzLCBhbmQgZm9yIGRlc2lnbmluZyBnb29kIEFQSXMuXG4gIFxuSXQgaXMgaW1wb3J0YW50IHRvIHVuZGVyc3RhbmQgdXAgZnJvbnQgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBhIHJlYWQtb25seSBfdmlld18gb2YgYSBtdXRhYmxlIGNvbGxlY3Rpb24sIGFuZCBhbiBhY3R1YWxseSBpbW11dGFibGUgY29sbGVjdGlvbi4gQm90aCBhcmUgZWFzeSB0byBjcmVhdGUsIGJ1dCB0aGUgdHlwZSBzeXN0ZW0gZG9lc24mYXBvczt0IGV4cHJlc3MgdGhlIGRpZmZlcmVuY2UsIHNvIGtlZXBpbmcgdHJhY2sgb2YgdGhhdCAoaWYgaXQmYXBvcztzIHJlbGV2YW50KSBpcyB1cCB0byB5b3UuXG4gIFxuVGhlIEtvdGxpbiBgTGlzdCZsdDtvdXQgVCZndDtgIHR5cGUgaXMgYW4gaW50ZXJmYWNlIHRoYXQgcHJvdmlkZXMgcmVhZC1vbmx5IG9wZXJhdGlvbnMgbGlrZSBgc2l6ZWAsIGBnZXRgIGFuZCBzbyBvbi5cbkxpa2UgaW4gSmF2YSwgaXQgaW5oZXJpdHMgZnJvbSBgQ29sbGVjdGlvbiZsdDtUJmd0O2AgYW5kIHRoYXQgaW4gdHVybiBpbmhlcml0cyBmcm9tIGBJdGVyYWJsZSZsdDtUJmd0O2AuXG5NZXRob2RzIHRoYXQgY2hhbmdlIHRoZSBsaXN0IGFyZSBhZGRlZCBieSB0aGUgYE11dGFibGVMaXN0Jmx0O1QmZ3Q7YCBpbnRlcmZhY2UuXG5UaGlzIHBhdHRlcm4gaG9sZHMgYWxzbyBmb3IgYFNldCZsdDtvdXQgVCZndDsvTXV0YWJsZVNldCZsdDtUJmd0O2AgYW5kIGBNYXAmbHQ7Sywgb3V0IFYmZ3Q7L011dGFibGVNYXAmbHQ7SywgViZndDtgLlxuICBcbldlIGNhbiBzZWUgYmFzaWMgdXNhZ2Ugb2YgdGhlIGxpc3QgYW5kIHNldCB0eXBlcyBiZWxvdzpcbiAgXG5gYGBrb3RsaW5cbnZhbCBudW1iZXJzOiBNdXRhYmxlTGlzdCZsdDtJbnQmZ3Q7ID0gbXV0YWJsZUxpc3RPZigxLCAyLCAzKVxudmFsIHJlYWRPbmx5VmlldzogTGlzdCZsdDtJbnQmZ3Q7ID0gbnVtYmVyc1xucHJpbnRsbihudW1iZXJzKSAgICAgICAgLy8gcHJpbnRzICZxdW90O1sxLCAyLCAzXSZxdW90O1xubnVtYmVycy5hZGQoNClcbnByaW50bG4ocmVhZE9ubHlWaWV3KSAgIC8vIHByaW50cyAmcXVvdDtbMSwgMiwgMywgNF0mcXVvdDtcbnJlYWRPbmx5Vmlldy5jbGVhcigpICAgIC8vIC0mZ3Q7IGRvZXMgbm90IGNvbXBpbGVcbiAgXG52YWwgc3RyaW5ncyA9IGhhc2hTZXRPZigmcXVvdDthJnF1b3Q7LCAmcXVvdDtiJnF1b3Q7LCAmcXVvdDtjJnF1b3Q7LCAmcXVvdDtjJnF1b3Q7KVxuYXNzZXJ0KHN0cmluZ3Muc2l6ZSA9PSAzKVxuYGBgXG4gIFxuS290bGluIGRvZXMgbm90IGhhdmUgZGVkaWNhdGVkIHN5bnRheCBjb25zdHJ1Y3RzIGZvciBjcmVhdGluZyBsaXN0cyBvciBzZXRzLiBVc2UgbWV0aG9kcyBmcm9tIHRoZSBzdGFuZGFyZCBsaWJyYXJ5LCBzdWNoIGFzIGBsaXN0T2YoKWAsIGBtdXRhYmxlTGlzdE9mKClgLCBgc2V0T2YoKWAsIGBtdXRhYmxlU2V0T2YoKWAuXG5NYXAgY3JlYXRpb24gaW4gTk9UIHBlcmZvcm1hbmNlLWNyaXRpY2FsIGNvZGUgY2FuIGJlIGFjY29tcGxpc2hlZCB3aXRoIGEgc2ltcGxlIFtpZGlvbV0oaWRpb21zLmh0bWwjcmVhZC1vbmx5LW1hcCk6IGBtYXBPZihhIHRvIGIsIGMgdG8gZClgXG4gIFxuICBcbk5vdGUgdGhhdCB0aGUgYHJlYWRPbmx5Vmlld2AgdmFyaWFibGUgcG9pbnRzIHRvIHRoZSBzYW1lIGxpc3QgYW5kIGNoYW5nZXMgYXMgdGhlIHVuZGVybHlpbmcgbGlzdCBjaGFuZ2VzLiBJZiB0aGUgb25seSByZWZlcmVuY2VzIHRoYXQgZXhpc3QgdG8gYSBsaXN0IGFyZSBvZiB0aGUgcmVhZC1vbmx5IHZhcmlldHksIHdlIGNhbiBjb25zaWRlciB0aGUgY29sbGVjdGlvbiBmdWxseSBpbW11dGFibGUuIEEgc2ltcGxlIHdheSB0byBjcmVhdGUgc3VjaCBhIGNvbGxlY3Rpb24gaXMgbGlrZSB0aGlzOlxuICBcbmBgYGtvdGxpblxudmFsIGl0ZW1zID0gbGlzdE9mKDEsIDIsIDMpXG5gYGBcbiAgXG5DdXJyZW50bHksIHRoZSBgbGlzdE9mYCBtZXRob2QgaXMgaW1wbGVtZW50ZWQgdXNpbmcgYW4gYXJyYXkgbGlzdCwgYnV0IGluIGZ1dHVyZSBtb3JlIG1lbW9yeS1lZmZpY2llbnQgZnVsbHkgaW1tdXRhYmxlIGNvbGxlY3Rpb24gdHlwZXMgY291bGQgYmUgcmV0dXJuZWQgdGhhdCBleHBsb2l0IHRoZSBmYWN0IHRoYXQgdGhleSBrbm93IHRoZXkgY2FuJmFwb3M7dCBjaGFuZ2UuXG4gIFxuTm90ZSB0aGF0IHRoZSByZWFkLW9ubHkgdHlwZXMgYXJlIFtjb3ZhcmlhbnRdKGdlbmVyaWNzLmh0bWwjdmFyaWFuY2UpLiBUaGF0IG1lYW5zLCB5b3UgY2FuIHRha2UgYSBgTGlzdCZsdDtSZWN0YW5nbGUmZ3Q7YCBhbmQgYXNzaWduIGl0IHRvIGBMaXN0Jmx0O1NoYXBlJmd0O2AgYXNzdW1pbmcgUmVjdGFuZ2xlIGluaGVyaXRzIGZyb20gU2hhcGUuIFRoaXMgd291bGRuJmFwb3M7dCBiZSBhbGxvd2VkIHdpdGggdGhlIG11dGFibGUgY29sbGVjdGlvbiB0eXBlcyBiZWNhdXNlIGl0IHdvdWxkIGFsbG93IGZvciBmYWlsdXJlcyBhdCBydW50aW1lLlxuICBcblNvbWV0aW1lcyB5b3Ugd2FudCB0byByZXR1cm4gdG8gdGhlIGNhbGxlciBhIHNuYXBzaG90IG9mIGEgY29sbGVjdGlvbiBhdCBhIHBhcnRpY3VsYXIgcG9pbnQgaW4gdGltZSwgb25lIHRoYXQmYXBvcztzIGd1YXJhbnRlZWQgdG8gbm90IGNoYW5nZTpcbiAgXG5gYGBrb3RsaW5cbmNsYXNzIENvbnRyb2xsZXIge1xuICAgIHByaXZhdGUgdmFsIF9pdGVtcyA9IG11dGFibGVMaXN0T2YmbHQ7U3RyaW5nJmd0OygpXG4gICAgdmFsIGl0ZW1zOiBMaXN0Jmx0O1N0cmluZyZndDsgZ2V0KCkgPSBfaXRlbXMudG9MaXN0KClcbn1cbmBgYFxuICBcblRoZSBgdG9MaXN0YCBleHRlbnNpb24gbWV0aG9kIGp1c3QgZHVwbGljYXRlcyB0aGUgbGlzdHMgaXRlbXMsIHRodXMsIHRoZSByZXR1cm5lZCBsaXN0IGlzIGd1YXJhbnRlZWQgdG8gbmV2ZXIgY2hhbmdlLlxuICBcblRoZXJlIGFyZSB2YXJpb3VzIHVzZWZ1bCBleHRlbnNpb24gbWV0aG9kcyBvbiBsaXN0cyBhbmQgc2V0cyB0aGF0IGFyZSB3b3J0aCBiZWluZyBmYW1pbGlhciB3aXRoOlxuICBcbmBgYGtvdGxpblxudmFsIGl0ZW1zID0gbGlzdE9mKDEsIDIsIDMsIDQpXG5pdGVtcy5maXJzdCgpID09IDFcbml0ZW1zLmxhc3QoKSA9PSA0XG5pdGVtcy5maWx0ZXIgeyBpdCAlIDIgPT0gMCB9ICAgLy8gcmV0dXJucyBbMiwgNF1cbiAgXG52YWwgcndMaXN0ID0gbXV0YWJsZUxpc3RPZigxLCAyLCAzKVxucndMaXN0LnJlcXVpcmVOb051bGxzKCkgICAgICAgIC8vIHJldHVybnMgWzEsIDIsIDNdXG5pZiAocndMaXN0Lm5vbmUgeyBpdCAmZ3Q7IDYgfSkgcHJpbnRsbigmcXVvdDtObyBpdGVtcyBhYm92ZSA2JnF1b3Q7KSAgLy8gcHJpbnRzICZxdW90O05vIGl0ZW1zIGFib3ZlIDYmcXVvdDtcbnZhbCBpdGVtID0gcndMaXN0LmZpcnN0T3JOdWxsKClcbmBgYFxuICBcbi4uLiBhcyB3ZWxsIGFzIGFsbCB0aGUgdXRpbGl0aWVzIHlvdSB3b3VsZCBleHBlY3Qgc3VjaCBhcyBzb3J0LCB6aXAsIGZvbGQsIHJlZHVjZSBhbmQgc28gb24uXG4gIFxuTWFwcyBmb2xsb3cgdGhlIHNhbWUgcGF0dGVybi4gVGhleSBjYW4gYmUgZWFzaWx5IGluc3RhbnRpYXRlZCBhbmQgYWNjZXNzZWQgbGlrZSB0aGlzOlxuICBcbmBgYGtvdGxpblxudmFsIHJlYWRXcml0ZU1hcCA9IGhhc2hNYXBPZigmcXVvdDtmb28mcXVvdDsgdG8gMSwgJnF1b3Q7YmFyJnF1b3Q7IHRvIDIpXG5wcmludGxuKHJlYWRXcml0ZU1hcFsmcXVvdDtmb28mcXVvdDtdKSAgLy8gcHJpbnRzICZxdW90OzEmcXVvdDtcbnZhbCBzbmFwc2hvdDogTWFwJmx0O1N0cmluZywgSW50Jmd0OyA9IEhhc2hNYXAocmVhZFdyaXRlTWFwKVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/collections.html#collections"
            ],
            "flags": 0,
            "guid": "3/t-Z5D12",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Collections",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Ranges</b>",
                "<p>Range expressions are formed with <code>rangeTo</code> functions that have the operator form <code>..</code> which is complemented by <em class=\"keyword\">in</em> and <em class=\"keyword\">!in</em>.<br />\nRange is defined for any comparable type, but for integral primitive types it has an optimized implementation. Here are some examples of using ranges</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">10</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// equivalent of 1 &lt;= i &amp;&amp; i &lt;= 10</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Integral type ranges (<code>IntRange</code>, <code>LongRange</code>, <code>CharRange</code>) have an extra feature: they can be iterated over.<br />\nThe compiler takes care of converting this analogously to Java's indexed <em class=\"keyword\">for</em>-loop, without extra overhead.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">4</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"1234\"</span>\n\n<span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">4.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// prints nothing</span>\n</pre></div>\n<p>What if you want to iterate over numbers in reverse order? It's simple. You can use the <code>downTo()</code> function defined in the standard library</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">4</span> <span style=\"color: #000000\">downTo</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"4321\"</span>\n</pre></div>\n<p>Is it possible to iterate over numbers with arbitrary step, not equal to 1? Sure, the <code>step()</code> function will help you</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">4</span> <span style=\"color: #000000\">step</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"13\"</span>\n\n<span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">4</span> <span style=\"color: #000000\">downTo</span> <span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #000000\">step</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"42\"</span>\n</pre></div>\n<p>To create a range which does not include its end element, you can use the <code>until</code> function:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #000000\">until</span> <span style=\"color: #0000cf; font-weight: bold\">10</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// i in [1, 10), 10 is excluded</span>\n     <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTA5MTEsICJpZCI6ICIxNDg4MDUzOTc2MTAwLTAwMSIsICJtZCI6ICJSYW5nZSBleHByZXNzaW9ucyBhcmUgZm9ybWVkIHdpdGggYHJhbmdlVG9gIGZ1bmN0aW9ucyB0aGF0IGhhdmUgdGhlIG9wZXJhdG9yIGZvcm0gYC4uYCB3aGljaCBpcyBjb21wbGVtZW50ZWQgYnkgKmluKns6IC5rZXl3b3JkIH0gYW5kICohaW4qezogLmtleXdvcmQgfS5cblJhbmdlIGlzIGRlZmluZWQgZm9yIGFueSBjb21wYXJhYmxlIHR5cGUsIGJ1dCBmb3IgaW50ZWdyYWwgcHJpbWl0aXZlIHR5cGVzIGl0IGhhcyBhbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24uIEhlcmUgYXJlIHNvbWUgZXhhbXBsZXMgb2YgdXNpbmcgcmFuZ2VzXG4gIFxuYGBga290bGluXG5pZiAoaSBpbiAxLi4xMCkgeyAvLyBlcXVpdmFsZW50IG9mIDEgJmx0Oz0gaSAmYW1wOyZhbXA7IGkgJmx0Oz0gMTBcbiAgICBwcmludGxuKGkpXG59XG5gYGBcbiAgXG5JbnRlZ3JhbCB0eXBlIHJhbmdlcyAoYEludFJhbmdlYCwgYExvbmdSYW5nZWAsIGBDaGFyUmFuZ2VgKSBoYXZlIGFuIGV4dHJhIGZlYXR1cmU6IHRoZXkgY2FuIGJlIGl0ZXJhdGVkIG92ZXIuXG5UaGUgY29tcGlsZXIgdGFrZXMgY2FyZSBvZiBjb252ZXJ0aW5nIHRoaXMgYW5hbG9nb3VzbHkgdG8gSmF2YSZhcG9zO3MgaW5kZXhlZCAqZm9yKns6IC5rZXl3b3JkIH0tbG9vcCwgd2l0aG91dCBleHRyYSBvdmVyaGVhZC5cbiAgXG5gYGBrb3RsaW5cbmZvciAoaSBpbiAxLi40KSBwcmludChpKSAvLyBwcmludHMgJnF1b3Q7MTIzNCZxdW90O1xuICBcbmZvciAoaSBpbiA0Li4xKSBwcmludChpKSAvLyBwcmludHMgbm90aGluZ1xuYGBgXG4gIFxuV2hhdCBpZiB5b3Ugd2FudCB0byBpdGVyYXRlIG92ZXIgbnVtYmVycyBpbiByZXZlcnNlIG9yZGVyPyBJdCZhcG9zO3Mgc2ltcGxlLiBZb3UgY2FuIHVzZSB0aGUgYGRvd25UbygpYCBmdW5jdGlvbiBkZWZpbmVkIGluIHRoZSBzdGFuZGFyZCBsaWJyYXJ5XG4gIFxuYGBga290bGluXG5mb3IgKGkgaW4gNCBkb3duVG8gMSkgcHJpbnQoaSkgLy8gcHJpbnRzICZxdW90OzQzMjEmcXVvdDtcbmBgYFxuICBcbklzIGl0IHBvc3NpYmxlIHRvIGl0ZXJhdGUgb3ZlciBudW1iZXJzIHdpdGggYXJiaXRyYXJ5IHN0ZXAsIG5vdCBlcXVhbCB0byAxPyBTdXJlLCB0aGUgYHN0ZXAoKWAgZnVuY3Rpb24gd2lsbCBoZWxwIHlvdVxuICBcbmBgYGtvdGxpblxuZm9yIChpIGluIDEuLjQgc3RlcCAyKSBwcmludChpKSAvLyBwcmludHMgJnF1b3Q7MTMmcXVvdDtcbiAgXG5mb3IgKGkgaW4gNCBkb3duVG8gMSBzdGVwIDIpIHByaW50KGkpIC8vIHByaW50cyAmcXVvdDs0MiZxdW90O1xuYGBgXG4gIFxuVG8gY3JlYXRlIGEgcmFuZ2Ugd2hpY2ggZG9lcyBub3QgaW5jbHVkZSBpdHMgZW5kIGVsZW1lbnQsIHlvdSBjYW4gdXNlIHRoZSBgdW50aWxgIGZ1bmN0aW9uOlxuICBcbmBgYGtvdGxpblxuZm9yIChpIGluIDEgdW50aWwgMTApIHsgLy8gaSBpbiBbMSwgMTApLCAxMCBpcyBleGNsdWRlZFxuICAgICBwcmludGxuKGkpXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/ranges.html#ranges"
            ],
            "flags": 0,
            "guid": "of4J^0HnDO",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Ranges"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How <b>Ranges</b> works",
                "<p>Ranges implement a common interface in the library: <code>ClosedRange&lt;T&gt;</code>.</p>\n<p><code>ClosedRange&lt;T&gt;</code> denotes a closed interval in the mathematical sense, defined for comparable types.<br />\nIt has two endpoints: <code>start</code> and <code>endInclusive</code>, which are included in the range.<br />\nThe main operation is <code>contains</code>, usually used in the form of <em class=\"keyword\">in</em>/<em class=\"keyword\">!in</em> operators.</p>\n<p>Integral type progressions (<code>IntProgression</code>, <code>LongProgression</code>, <code>CharProgression</code>) denote an arithmetic progression.<br />\nProgressions are defined by the <code>first</code> element, the <code>last</code> element and a non-zero <code>step</code>.<br />\nThe first element is <code>first</code>, subsequent elements are the previous element plus <code>step</code>. The <code>last</code> element is always hit by iteration unless the progression is empty.</p>\n<p>A progression is a subtype of <code>Iterable&lt;N&gt;</code>, where <code>N</code> is <code>Int</code>, <code>Long</code> or <code>Char</code> respectively, so it can be used in <em class=\"keyword\">for</em>-loops and functions like <code>map</code>, <code>filter</code>, etc.<br />\nIteration over <code>Progression</code> is equivalent to an indexed <em class=\"keyword\">for</em>-loop in Java/JavaScript:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">for</span> <span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">int</span> <span style=\"color: #000000\">i</span> <span style=\"color: #ce5c00; font-weight: bold\">=</span> <span style=\"color: #000000\">first</span><span style=\"color: #ce5c00; font-weight: bold\">;</span> <span style=\"color: #000000\">i</span> <span style=\"color: #ce5c00; font-weight: bold\">!=</span> <span style=\"color: #000000\">last</span><span style=\"color: #ce5c00; font-weight: bold\">;</span> <span style=\"color: #000000\">i</span> <span style=\"color: #ce5c00; font-weight: bold\">+=</span> <span style=\"color: #000000\">step</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n  <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p>For integral types, the <code>..</code> operator creates an object which implements both <code>ClosedRange&lt;T&gt;</code> and <code>*Progression</code>.<br />\nFor example, <code>IntRange</code> implements <code>ClosedRange&lt;Int&gt;</code> and extends <code>IntProgression</code>, thus all operations defined for <code>IntProgression</code> are available for <code>IntRange</code> as well.<br />\nThe result of the <code>downTo()</code> and <code>step()</code> functions is always a <code>*Progression</code>.</p>\n<p>Progressions are constructed with the <code>fromClosedRange</code> function defined in their companion objects:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">IntProgression</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">fromClosedRange</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">start</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">end</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">step</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>The <code>last</code> element of the progression is calculated to find maximum value not greater than the <code>end</code> value for positive <code>step</code> or minimum value not less than the <code>end</code> value for negative <code>step</code> such that <code>(last - first) % step == 0</code>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTA5NDQsICJpZCI6ICIxNDg4MDU0MDQ2MTgwLTAwMSIsICJtZCI6ICJSYW5nZXMgaW1wbGVtZW50IGEgY29tbW9uIGludGVyZmFjZSBpbiB0aGUgbGlicmFyeTogYENsb3NlZFJhbmdlJmx0O1QmZ3Q7YC5cbiAgXG5gQ2xvc2VkUmFuZ2UmbHQ7VCZndDtgIGRlbm90ZXMgYSBjbG9zZWQgaW50ZXJ2YWwgaW4gdGhlIG1hdGhlbWF0aWNhbCBzZW5zZSwgZGVmaW5lZCBmb3IgY29tcGFyYWJsZSB0eXBlcy5cbkl0IGhhcyB0d28gZW5kcG9pbnRzOiBgc3RhcnRgIGFuZCBgZW5kSW5jbHVzaXZlYCwgd2hpY2ggYXJlIGluY2x1ZGVkIGluIHRoZSByYW5nZS5cblRoZSBtYWluIG9wZXJhdGlvbiBpcyBgY29udGFpbnNgLCB1c3VhbGx5IHVzZWQgaW4gdGhlIGZvcm0gb2YgKmluKns6IC5rZXl3b3JkIH0vKiFpbip7OiAua2V5d29yZCB9IG9wZXJhdG9ycy5cbiAgXG5JbnRlZ3JhbCB0eXBlIHByb2dyZXNzaW9ucyAoYEludFByb2dyZXNzaW9uYCwgYExvbmdQcm9ncmVzc2lvbmAsIGBDaGFyUHJvZ3Jlc3Npb25gKSBkZW5vdGUgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi5cblByb2dyZXNzaW9ucyBhcmUgZGVmaW5lZCBieSB0aGUgYGZpcnN0YCBlbGVtZW50LCB0aGUgYGxhc3RgIGVsZW1lbnQgYW5kIGEgbm9uLXplcm8gYHN0ZXBgLlxuVGhlIGZpcnN0IGVsZW1lbnQgaXMgYGZpcnN0YCwgc3Vic2VxdWVudCBlbGVtZW50cyBhcmUgdGhlIHByZXZpb3VzIGVsZW1lbnQgcGx1cyBgc3RlcGAuIFRoZSBgbGFzdGAgZWxlbWVudCBpcyBhbHdheXMgaGl0IGJ5IGl0ZXJhdGlvbiB1bmxlc3MgdGhlIHByb2dyZXNzaW9uIGlzIGVtcHR5LlxuICBcbkEgcHJvZ3Jlc3Npb24gaXMgYSBzdWJ0eXBlIG9mIGBJdGVyYWJsZSZsdDtOJmd0O2AsIHdoZXJlIGBOYCBpcyBgSW50YCwgYExvbmdgIG9yIGBDaGFyYCByZXNwZWN0aXZlbHksIHNvIGl0IGNhbiBiZSB1c2VkIGluICpmb3IqezogLmtleXdvcmQgfS1sb29wcyBhbmQgZnVuY3Rpb25zIGxpa2UgYG1hcGAsIGBmaWx0ZXJgLCBldGMuXG5JdGVyYXRpb24gb3ZlciBgUHJvZ3Jlc3Npb25gIGlzIGVxdWl2YWxlbnQgdG8gYW4gaW5kZXhlZCAqZm9yKns6IC5rZXl3b3JkIH0tbG9vcCBpbiBKYXZhL0phdmFTY3JpcHQ6XG4gIFxuYGBgIGphdmFcbmZvciAoaW50IGkgPSBmaXJzdDsgaSAhPSBsYXN0OyBpICs9IHN0ZXApIHtcbiAgLy8gLi4uXG59XG5gYGBcbiAgXG5Gb3IgaW50ZWdyYWwgdHlwZXMsIHRoZSBgLi5gIG9wZXJhdG9yIGNyZWF0ZXMgYW4gb2JqZWN0IHdoaWNoIGltcGxlbWVudHMgYm90aCBgQ2xvc2VkUmFuZ2UmbHQ7VCZndDtgIGFuZCBgKlByb2dyZXNzaW9uYC5cbkZvciBleGFtcGxlLCBgSW50UmFuZ2VgIGltcGxlbWVudHMgYENsb3NlZFJhbmdlJmx0O0ludCZndDtgIGFuZCBleHRlbmRzIGBJbnRQcm9ncmVzc2lvbmAsIHRodXMgYWxsIG9wZXJhdGlvbnMgZGVmaW5lZCBmb3IgYEludFByb2dyZXNzaW9uYCBhcmUgYXZhaWxhYmxlIGZvciBgSW50UmFuZ2VgIGFzIHdlbGwuXG5UaGUgcmVzdWx0IG9mIHRoZSBgZG93blRvKClgIGFuZCBgc3RlcCgpYCBmdW5jdGlvbnMgaXMgYWx3YXlzIGEgYCpQcm9ncmVzc2lvbmAuXG4gIFxuUHJvZ3Jlc3Npb25zIGFyZSBjb25zdHJ1Y3RlZCB3aXRoIHRoZSBgZnJvbUNsb3NlZFJhbmdlYCBmdW5jdGlvbiBkZWZpbmVkIGluIHRoZWlyIGNvbXBhbmlvbiBvYmplY3RzOlxuICBcbmBgYGtvdGxpblxuSW50UHJvZ3Jlc3Npb24uZnJvbUNsb3NlZFJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXApXG5gYGBcbiAgXG5UaGUgYGxhc3RgIGVsZW1lbnQgb2YgdGhlIHByb2dyZXNzaW9uIGlzIGNhbGN1bGF0ZWQgdG8gZmluZCBtYXhpbXVtIHZhbHVlIG5vdCBncmVhdGVyIHRoYW4gdGhlIGBlbmRgIHZhbHVlIGZvciBwb3NpdGl2ZSBgc3RlcGAgb3IgbWluaW11bSB2YWx1ZSBub3QgbGVzcyB0aGFuIHRoZSBgZW5kYCB2YWx1ZSBmb3IgbmVnYXRpdmUgYHN0ZXBgIHN1Y2ggdGhhdCBgKGxhc3QgLSBmaXJzdCkgJSBzdGVwID09IDBgLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/ranges.html#how-it-works"
            ],
            "flags": 0,
            "guid": "Bk!&lImDDW",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Ranges"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Utility <b>Ranges </b>functions: <i>rangeTo()</i>",
                "<p>The <code>rangeTo()</code> operators on integral types simply call the constructors of <code>*Range</code> classes, e.g.:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">//...</span>\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">rangeTo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">other</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Long</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">LongRange</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">LongRange</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">other</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #8f5902; font-style: italic\">//...</span>\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">rangeTo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">other</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">IntRange</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">IntRange</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">other</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #8f5902; font-style: italic\">//...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Floating point numbers (<code>Double</code>, <code>Float</code>) do not define their <code>rangeTo</code> operator, and the one provided by the standard library for generic <code>Comparable</code> types is used instead:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">    <span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Comparable</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;&gt;</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">rangeTo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">that</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">ClosedRange</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span>\n</pre></div>\n<p>The range returned by this function cannot be used for iteration.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTA5NjQsICJpZCI6ICIxNDg4MDU0MDgwNzY4LTAwMSIsICJtZCI6ICJUaGUgYHJhbmdlVG8oKWAgb3BlcmF0b3JzIG9uIGludGVncmFsIHR5cGVzIHNpbXBseSBjYWxsIHRoZSBjb25zdHJ1Y3RvcnMgb2YgYCpSYW5nZWAgY2xhc3NlcywgZS5nLjpcbiAgXG5gYGBrb3RsaW5cbmNsYXNzIEludCB7XG4gICAgLy8uLi5cbiAgICBvcGVyYXRvciBmdW4gcmFuZ2VUbyhvdGhlcjogTG9uZyk6IExvbmdSYW5nZSA9IExvbmdSYW5nZSh0aGlzLCBvdGhlcilcbiAgICAvLy4uLlxuICAgIG9wZXJhdG9yIGZ1biByYW5nZVRvKG90aGVyOiBJbnQpOiBJbnRSYW5nZSA9IEludFJhbmdlKHRoaXMsIG90aGVyKVxuICAgIC8vLi4uXG59XG5gYGBcbiAgXG5GbG9hdGluZyBwb2ludCBudW1iZXJzIChgRG91YmxlYCwgYEZsb2F0YCkgZG8gbm90IGRlZmluZSB0aGVpciBgcmFuZ2VUb2Agb3BlcmF0b3IsIGFuZCB0aGUgb25lIHByb3ZpZGVkIGJ5IHRoZSBzdGFuZGFyZCBsaWJyYXJ5IGZvciBnZW5lcmljIGBDb21wYXJhYmxlYCB0eXBlcyBpcyB1c2VkIGluc3RlYWQ6XG4gIFxuYGBga290bGluXG4gICAgcHVibGljIG9wZXJhdG9yIGZ1biAmbHQ7VDogQ29tcGFyYWJsZSZsdDtUJmd0OyZndDsgVC5yYW5nZVRvKHRoYXQ6IFQpOiBDbG9zZWRSYW5nZSZsdDtUJmd0O1xuYGBgXG4gIFxuVGhlIHJhbmdlIHJldHVybmVkIGJ5IHRoaXMgZnVuY3Rpb24gY2Fubm90IGJlIHVzZWQgZm9yIGl0ZXJhdGlvbi5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/ranges.html#rangeto"
            ],
            "flags": 0,
            "guid": "fNBTbd>&^j",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Ranges"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>is</b> and <b>!is</b> Operators",
                "<p>We can check whether an object conforms to a given type at runtime by using the <code>is</code> operator or its negated form <code>!is</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span> <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span> <span style=\"color: #000000; font-weight: bold\">!</span><span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// same as !(obj is String)</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Not a String\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">obj</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTEwNjIsICJpZCI6ICIxNDg4MDU0MTMyMDc1LTAwMSIsICJtZCI6ICJXZSBjYW4gY2hlY2sgd2hldGhlciBhbiBvYmplY3QgY29uZm9ybXMgdG8gYSBnaXZlbiB0eXBlIGF0IHJ1bnRpbWUgYnkgdXNpbmcgdGhlIGBpc2Agb3BlcmF0b3Igb3IgaXRzIG5lZ2F0ZWQgZm9ybSBgIWlzYDpcbiAgXG5gYGBrb3RsaW5cbmlmIChvYmogaXMgU3RyaW5nKSB7XG4gICAgcHJpbnQob2JqLmxlbmd0aClcbn1cbiAgXG5pZiAob2JqICFpcyBTdHJpbmcpIHsgLy8gc2FtZSBhcyAhKG9iaiBpcyBTdHJpbmcpXG4gICAgcHJpbnQoJnF1b3Q7Tm90IGEgU3RyaW5nJnF1b3Q7KVxufVxuZWxzZSB7XG4gICAgcHJpbnQob2JqLmxlbmd0aClcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/typecasts.html#is-and-is-operators"
            ],
            "flags": 0,
            "guid": "ww,IbzKF>(",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "TypeChecksAndCasts"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Smart</b> Casts",
                "<p>In many cases, one does not need to use explicit cast operators in Kotlin, because the compiler tracks the <code>is</code>-checks for immutable values and inserts (safe) casts automatically when needed:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">demo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// x is automatically cast to String</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The compiler is smart enough to know a cast to be safe if a negative check leads to a return:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">!</span><span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">return</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// x is automatically cast to String</span>\n</pre></div>\n<p>or in the right-hand side of <code>&amp;&amp;</code> and <code>||</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">    <span style=\"color: #8f5902; font-style: italic\">// x is automatically cast to string on the right-hand side of `||`</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">!</span><span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">||</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">return</span>\n\n    <span style=\"color: #8f5902; font-style: italic\">// x is automatically cast to string on the right-hand side of `&amp;&amp;`</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">&amp;&amp;</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// x is automatically cast to String</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Such <em>smart casts</em> work for <a href=\"control-flow.html#when-expression\"><em class=\"keyword\">when</em>-expressions</a> and <a href=\"control-flow.html#while-loops\"><em class=\"keyword\">while</em>-loops</a> as well:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">IntArray</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">sum</span><span style=\"color: #000000; font-weight: bold\">())</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Note that smart casts do not work when the compiler cannot guarantee that the variable cannot change between the check and the usage.<br />\nMore specifically, smart casts are applicable according to the following rules:</p>\n<ul>\n<li align=\"left\"><em class=\"keyword\">val</em> local variables - always;</li>\n<li align=\"left\"><em class=\"keyword\">val</em> properties - if the property is private or internal or the check is performed in the same module where the property is declared. Smart casts aren't applicable to open properties or properties that have custom getters;</li>\n<li align=\"left\"><em class=\"keyword\">var</em> local variables - if the variable is not modified between the check and the usage and is not captured in a lambda that modifies it;</li>\n<li align=\"left\"><em class=\"keyword\">var</em> properties - never (because the variable can be modified at any time by other code).</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTExMDUsICJpZCI6ICIxNDg4MDU0MTc0NjMyLTAwMSIsICJtZCI6ICJJbiBtYW55IGNhc2VzLCBvbmUgZG9lcyBub3QgbmVlZCB0byB1c2UgZXhwbGljaXQgY2FzdCBvcGVyYXRvcnMgaW4gS290bGluLCBiZWNhdXNlIHRoZSBjb21waWxlciB0cmFja3MgdGhlIGBpc2AtY2hlY2tzIGZvciBpbW11dGFibGUgdmFsdWVzIGFuZCBpbnNlcnRzIChzYWZlKSBjYXN0cyBhdXRvbWF0aWNhbGx5IHdoZW4gbmVlZGVkOlxuICBcbmBgYGtvdGxpblxuZnVuIGRlbW8oeDogQW55KSB7XG4gICAgaWYgKHggaXMgU3RyaW5nKSB7XG4gICAgICAgIHByaW50KHgubGVuZ3RoKSAvLyB4IGlzIGF1dG9tYXRpY2FsbHkgY2FzdCB0byBTdHJpbmdcbiAgICB9XG59XG5gYGBcbiAgXG5UaGUgY29tcGlsZXIgaXMgc21hcnQgZW5vdWdoIHRvIGtub3cgYSBjYXN0IHRvIGJlIHNhZmUgaWYgYSBuZWdhdGl2ZSBjaGVjayBsZWFkcyB0byBhIHJldHVybjpcbiAgXG5gYGBrb3RsaW5cbiAgICBpZiAoeCAhaXMgU3RyaW5nKSByZXR1cm5cbiAgICBwcmludCh4Lmxlbmd0aCkgLy8geCBpcyBhdXRvbWF0aWNhbGx5IGNhc3QgdG8gU3RyaW5nXG5gYGBcbiAgXG5vciBpbiB0aGUgcmlnaHQtaGFuZCBzaWRlIG9mIGAmYW1wOyZhbXA7YCBhbmQgYHx8YDpcbiAgXG5gYGBrb3RsaW5cbiAgICAvLyB4IGlzIGF1dG9tYXRpY2FsbHkgY2FzdCB0byBzdHJpbmcgb24gdGhlIHJpZ2h0LWhhbmQgc2lkZSBvZiBgfHxgXG4gICAgaWYgKHggIWlzIFN0cmluZyB8fCB4Lmxlbmd0aCA9PSAwKSByZXR1cm5cbiAgXG4gICAgLy8geCBpcyBhdXRvbWF0aWNhbGx5IGNhc3QgdG8gc3RyaW5nIG9uIHRoZSByaWdodC1oYW5kIHNpZGUgb2YgYCZhbXA7JmFtcDtgXG4gICAgaWYgKHggaXMgU3RyaW5nICZhbXA7JmFtcDsgeC5sZW5ndGggJmd0OyAwKSB7XG4gICAgICAgIHByaW50KHgubGVuZ3RoKSAvLyB4IGlzIGF1dG9tYXRpY2FsbHkgY2FzdCB0byBTdHJpbmdcbiAgICB9XG5gYGBcbiAgXG4gIFxuU3VjaCBfc21hcnQgY2FzdHNfIHdvcmsgZm9yIFsqd2hlbip7OiAua2V5d29yZCB9LWV4cHJlc3Npb25zXShjb250cm9sLWZsb3cuaHRtbCN3aGVuLWV4cHJlc3Npb24pIGFuZCBbKndoaWxlKns6IC5rZXl3b3JkIH0tbG9vcHNdKGNvbnRyb2wtZmxvdy5odG1sI3doaWxlLWxvb3BzKSBhcyB3ZWxsOlxuICBcbmBgYGtvdGxpblxud2hlbiAoeCkge1xuICAgIGlzIEludCAtJmd0OyBwcmludCh4ICsgMSlcbiAgICBpcyBTdHJpbmcgLSZndDsgcHJpbnQoeC5sZW5ndGggKyAxKVxuICAgIGlzIEludEFycmF5IC0mZ3Q7IHByaW50KHguc3VtKCkpXG59XG5gYGBcbiAgXG5Ob3RlIHRoYXQgc21hcnQgY2FzdHMgZG8gbm90IHdvcmsgd2hlbiB0aGUgY29tcGlsZXIgY2Fubm90IGd1YXJhbnRlZSB0aGF0IHRoZSB2YXJpYWJsZSBjYW5ub3QgY2hhbmdlIGJldHdlZW4gdGhlIGNoZWNrIGFuZCB0aGUgdXNhZ2UuXG5Nb3JlIHNwZWNpZmljYWxseSwgc21hcnQgY2FzdHMgYXJlIGFwcGxpY2FibGUgYWNjb3JkaW5nIHRvIHRoZSBmb2xsb3dpbmcgcnVsZXM6XG4gIFxuICAqICp2YWwqezogLmtleXdvcmQgfSBsb2NhbCB2YXJpYWJsZXMgLSBhbHdheXM7XG4gICogKnZhbCp7OiAua2V5d29yZCB9IHByb3BlcnRpZXMgLSBpZiB0aGUgcHJvcGVydHkgaXMgcHJpdmF0ZSBvciBpbnRlcm5hbCBvciB0aGUgY2hlY2sgaXMgcGVyZm9ybWVkIGluIHRoZSBzYW1lIG1vZHVsZSB3aGVyZSB0aGUgcHJvcGVydHkgaXMgZGVjbGFyZWQuIFNtYXJ0IGNhc3RzIGFyZW4mYXBvczt0IGFwcGxpY2FibGUgdG8gb3BlbiBwcm9wZXJ0aWVzIG9yIHByb3BlcnRpZXMgdGhhdCBoYXZlIGN1c3RvbSBnZXR0ZXJzO1xuICAqICp2YXIqezogLmtleXdvcmQgfSBsb2NhbCB2YXJpYWJsZXMgLSBpZiB0aGUgdmFyaWFibGUgaXMgbm90IG1vZGlmaWVkIGJldHdlZW4gdGhlIGNoZWNrIGFuZCB0aGUgdXNhZ2UgYW5kIGlzIG5vdCBjYXB0dXJlZCBpbiBhIGxhbWJkYSB0aGF0IG1vZGlmaWVzIGl0O1xuICAqICp2YXIqezogLmtleXdvcmQgfSBwcm9wZXJ0aWVzIC0gbmV2ZXIgKGJlY2F1c2UgdGhlIHZhcmlhYmxlIGNhbiBiZSBtb2RpZmllZCBhdCBhbnkgdGltZSBieSBvdGhlciBjb2RlKS5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/typecasts.html#smart-casts"
            ],
            "flags": 0,
            "guid": "I5tNW.`]=B",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "TypeChecksAndCasts"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "\"<b>Unsafe</b>\" cast operator",
                "<p>Usually, the cast operator throws an exception if the cast is not possible.<br />\nThus, we call it <em>unsafe</em>. The unsafe cast in Kotlin is done by the infix operator <em class=\"keyword\">as</em> (see <a href=\"grammar.html#precedence\">operator precedence</a>):</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">y</span> <span style=\"color: #204a87; font-weight: bold\">as</span> <span style=\"color: #000000\">String</span>\n</pre></div>\n<p>Note that <em class=\"keyword\">null</em> cannot be cast to <code>String</code> as this type is not <a href=\"null-safety.html\">nullable</a>, i.e. if <code>y</code> is null, the code above throws an exception.<br />\nIn order to match Java cast semantics we have to have nullable type at cast right hand side, like</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">y</span> <span style=\"color: #204a87; font-weight: bold\">as</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">?</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTExNDAsICJpZCI6ICIxNDg4MDU0MjA4MTM3LTAwMSIsICJtZCI6ICJVc3VhbGx5LCB0aGUgY2FzdCBvcGVyYXRvciB0aHJvd3MgYW4gZXhjZXB0aW9uIGlmIHRoZSBjYXN0IGlzIG5vdCBwb3NzaWJsZS5cblRodXMsIHdlIGNhbGwgaXQgKnVuc2FmZSouIFRoZSB1bnNhZmUgY2FzdCBpbiBLb3RsaW4gaXMgZG9uZSBieSB0aGUgaW5maXggb3BlcmF0b3IgKmFzKns6IC5rZXl3b3JkIH0gKHNlZSBbb3BlcmF0b3IgcHJlY2VkZW5jZV0oZ3JhbW1hci5odG1sI3ByZWNlZGVuY2UpKTpcbiAgXG5gYGBrb3RsaW5cbnZhbCB4OiBTdHJpbmcgPSB5IGFzIFN0cmluZ1xuYGBgXG4gIFxuTm90ZSB0aGF0ICpudWxsKns6IC5rZXl3b3JkIH0gY2Fubm90IGJlIGNhc3QgdG8gYFN0cmluZ2AgYXMgdGhpcyB0eXBlIGlzIG5vdCBbbnVsbGFibGVdKG51bGwtc2FmZXR5Lmh0bWwpLCBpLmUuIGlmIGB5YCBpcyBudWxsLCB0aGUgY29kZSBhYm92ZSB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuSW4gb3JkZXIgdG8gbWF0Y2ggSmF2YSBjYXN0IHNlbWFudGljcyB3ZSBoYXZlIHRvIGhhdmUgbnVsbGFibGUgdHlwZSBhdCBjYXN0IHJpZ2h0IGhhbmQgc2lkZSwgbGlrZVxuICBcbmBgYGtvdGxpblxudmFsIHg6IFN0cmluZz8gPSB5IGFzIFN0cmluZz9cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/typecasts.html#unsafe-cast-operator"
            ],
            "flags": 0,
            "guid": "Q[qU1%wg4`",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "TypeChecksAndCasts"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "\"<b>Safe</b>\" (<i>nullable</i>) cast operator",
                "<p>To avoid an exception being thrown, one can use a <em>safe</em> cast operator <em class=\"keyword\">as?</em> that returns <em class=\"keyword\">null</em> on failure:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">y</span> <span style=\"color: #204a87; font-weight: bold\">as</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000\">String</span>\n</pre></div>\n<p>Note that despite the fact that the right-hand side of <em class=\"keyword\">as?</em> is a non-null type <code>String</code> the result of the cast is nullable.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTExNTQsICJpZCI6ICIxNDg4MDU0MjI2ODM5LTAwMSIsICJtZCI6ICJUbyBhdm9pZCBhbiBleGNlcHRpb24gYmVpbmcgdGhyb3duLCBvbmUgY2FuIHVzZSBhICpzYWZlKiBjYXN0IG9wZXJhdG9yICphcz8qezogLmtleXdvcmQgfSB0aGF0IHJldHVybnMgKm51bGwqezogLmtleXdvcmQgfSBvbiBmYWlsdXJlOlxuICBcbmBgYGtvdGxpblxudmFsIHg6IFN0cmluZz8gPSB5IGFzPyBTdHJpbmdcbmBgYFxuICBcbk5vdGUgdGhhdCBkZXNwaXRlIHRoZSBmYWN0IHRoYXQgdGhlIHJpZ2h0LWhhbmQgc2lkZSBvZiAqYXM/Kns6IC5rZXl3b3JkIH0gaXMgYSBub24tbnVsbCB0eXBlIGBTdHJpbmdgIHRoZSByZXN1bHQgb2YgdGhlIGNhc3QgaXMgbnVsbGFibGUuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/typecasts.html#safe-nullable-cast-operator"
            ],
            "flags": 0,
            "guid": "rG>3vjqhnN",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "TypeChecksAndCasts"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>This</b> Expression",
                "<p>To denote the current <em>receiver</em>, we use <em class=\"keyword\">this</em> expressions:</p>\n<ul>\n<li align=\"left\">In a member of a <a href=\"classes.html#inheritance\">class</a>, <em class=\"keyword\">this</em> refers to the current object of that class</li>\n<li align=\"left\">In an <a href=\"extensions.html\">extension function</a> or a <a href=\"lambdas.html#function-literals-with-receiver\">function literal with receiver</a>, <em class=\"keyword\">this</em> denotes the <em>receiver</em> parameter that is passed on the left-hand side of a dot.</li>\n</ul>\n<p>If <em class=\"keyword\">this</em> has no qualifiers, it refers to the <em>innermost enclosing scope</em>. To refer to <em class=\"keyword\">this</em> in other scopes, <em>label qualifiers</em> are used</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTEyNTEsICJpZCI6ICIxNDg4MDU0MjQzMjUyLTAwMSIsICJtZCI6ICJUbyBkZW5vdGUgdGhlIGN1cnJlbnQgX3JlY2VpdmVyXywgd2UgdXNlICp0aGlzKns6IC5rZXl3b3JkIH0gZXhwcmVzc2lvbnM6XG4gIFxuKiBJbiBhIG1lbWJlciBvZiBhIFtjbGFzc10oY2xhc3Nlcy5odG1sI2luaGVyaXRhbmNlKSwgKnRoaXMqezogLmtleXdvcmQgfSByZWZlcnMgdG8gdGhlIGN1cnJlbnQgb2JqZWN0IG9mIHRoYXQgY2xhc3NcbiogSW4gYW4gW2V4dGVuc2lvbiBmdW5jdGlvbl0oZXh0ZW5zaW9ucy5odG1sKSBvciBhIFtmdW5jdGlvbiBsaXRlcmFsIHdpdGggcmVjZWl2ZXJdKGxhbWJkYXMuaHRtbCNmdW5jdGlvbi1saXRlcmFscy13aXRoLXJlY2VpdmVyKSwgKnRoaXMqezogLmtleXdvcmQgfSBkZW5vdGVzIHRoZSBfcmVjZWl2ZXJfIHBhcmFtZXRlciB0aGF0IGlzIHBhc3NlZCBvbiB0aGUgbGVmdC1oYW5kIHNpZGUgb2YgYSBkb3QuXG4gIFxuSWYgKnRoaXMqezogLmtleXdvcmQgfSBoYXMgbm8gcXVhbGlmaWVycywgaXQgcmVmZXJzIHRvIHRoZSBfaW5uZXJtb3N0IGVuY2xvc2luZyBzY29wZV8uIFRvIHJlZmVyIHRvICp0aGlzKns6IC5rZXl3b3JkIH0gaW4gb3RoZXIgc2NvcGVzLCBfbGFiZWwgcXVhbGlmaWVyc18gYXJlIHVzZWRcbiJ9---->",
                "https://kotlinlang.org/docs/reference/this-expressions.html#this-expression"
            ],
            "flags": 0,
            "guid": "NK:rV>I~K`",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "ThisExpression"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Qualified <b>this</b>",
                "<p>To access <em class=\"keyword\">this</em> from an outer scope (a <a href=\"classes.html\">class</a>, or <a href=\"extensions.html\">extension function</a>, or labeled <a href=\"lambdas.html#function-literals-with-receiver\">function literal with receiver</a>) we write <code>this@label</code> where <code>@label</code> is a <a href=\"returns.html\">label</a> on the scope <em class=\"keyword\">this</em> is meant to be from:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">A</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// implicit label @A</span>\n    <span style=\"color: #204a87; font-weight: bold\">inner</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">B</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// implicit label @B</span>\n        <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">// implicit label @foo</span>\n            <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000\">@A</span> <span style=\"color: #8f5902; font-style: italic\">// A's this</span>\n            <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000\">@B</span> <span style=\"color: #8f5902; font-style: italic\">// B's this</span>\n\n            <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">c</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span> <span style=\"color: #8f5902; font-style: italic\">// foo()'s receiver, an Int</span>\n            <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">c1</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000\">@foo</span> <span style=\"color: #8f5902; font-style: italic\">// foo()'s receiver, an Int</span>\n\n            <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">funLit</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">lambda</span><span style=\"color: #a40000; border: 1px solid #ef2929\">@</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">.()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n                <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">d</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span> <span style=\"color: #8f5902; font-style: italic\">// funLit's receiver</span>\n            <span style=\"color: #000000; font-weight: bold\">}</span>\n\n\n            <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">funLit2</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">s</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span>\n                <span style=\"color: #8f5902; font-style: italic\">// foo()'s receiver, since enclosing lambda expression</span>\n                <span style=\"color: #8f5902; font-style: italic\">// doesn't have any receiver</span>\n                <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">d1</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span>\n            <span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTEyODcsICJpZCI6ICIxNDg4MDU0MjkwMTczLTAwMSIsICJtZCI6ICJUbyBhY2Nlc3MgKnRoaXMqezogLmtleXdvcmQgfSBmcm9tIGFuIG91dGVyIHNjb3BlIChhIFtjbGFzc10oY2xhc3Nlcy5odG1sKSwgb3IgW2V4dGVuc2lvbiBmdW5jdGlvbl0oZXh0ZW5zaW9ucy5odG1sKSwgb3IgbGFiZWxlZCBbZnVuY3Rpb24gbGl0ZXJhbCB3aXRoIHJlY2VpdmVyXShsYW1iZGFzLmh0bWwjZnVuY3Rpb24tbGl0ZXJhbHMtd2l0aC1yZWNlaXZlcikpIHdlIHdyaXRlIGB0aGlzQGxhYmVsYCB3aGVyZSBgQGxhYmVsYCBpcyBhIFtsYWJlbF0ocmV0dXJucy5odG1sKSBvbiB0aGUgc2NvcGUgKnRoaXMqezogLmtleXdvcmQgfSBpcyBtZWFudCB0byBiZSBmcm9tOlxuICBcbmBgYGtvdGxpblxuY2xhc3MgQSB7IC8vIGltcGxpY2l0IGxhYmVsIEBBXG4gICAgaW5uZXIgY2xhc3MgQiB7IC8vIGltcGxpY2l0IGxhYmVsIEBCXG4gICAgICAgIGZ1biBJbnQuZm9vKCkgeyAvLyBpbXBsaWNpdCBsYWJlbCBAZm9vXG4gICAgICAgICAgICB2YWwgYSA9IHRoaXNAQSAvLyBBJmFwb3M7cyB0aGlzXG4gICAgICAgICAgICB2YWwgYiA9IHRoaXNAQiAvLyBCJmFwb3M7cyB0aGlzXG4gIFxuICAgICAgICAgICAgdmFsIGMgPSB0aGlzIC8vIGZvbygpJmFwb3M7cyByZWNlaXZlciwgYW4gSW50XG4gICAgICAgICAgICB2YWwgYzEgPSB0aGlzQGZvbyAvLyBmb28oKSZhcG9zO3MgcmVjZWl2ZXIsIGFuIEludFxuICBcbiAgICAgICAgICAgIHZhbCBmdW5MaXQgPSBsYW1iZGFAIGZ1biBTdHJpbmcuKCkge1xuICAgICAgICAgICAgICAgIHZhbCBkID0gdGhpcyAvLyBmdW5MaXQmYXBvcztzIHJlY2VpdmVyXG4gICAgICAgICAgICB9XG4gIFxuICBcbiAgICAgICAgICAgIHZhbCBmdW5MaXQyID0geyBzOiBTdHJpbmcgLSZndDtcbiAgICAgICAgICAgICAgICAvLyBmb28oKSZhcG9zO3MgcmVjZWl2ZXIsIHNpbmNlIGVuY2xvc2luZyBsYW1iZGEgZXhwcmVzc2lvblxuICAgICAgICAgICAgICAgIC8vIGRvZXNuJmFwb3M7dCBoYXZlIGFueSByZWNlaXZlclxuICAgICAgICAgICAgICAgIHZhbCBkMSA9IHRoaXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/this-expressions.html#qualified"
            ],
            "flags": 0,
            "guid": "iP@{-B^SJ,",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "ThisExpression"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Equality</b>",
                "<p>In Kotlin there are two types of equality:</p>\n<ul>\n<li align=\"left\">Referential equality (two references point to the same object)</li>\n<li align=\"left\">Structural equality (a check for <code>equals()</code>)</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTEzMzQsICJpZCI6ICIxNDg4MDU0MzE1NDUwLTAwMSIsICJtZCI6ICJJbiBLb3RsaW4gdGhlcmUgYXJlIHR3byB0eXBlcyBvZiBlcXVhbGl0eTpcbiAgXG4qIFJlZmVyZW50aWFsIGVxdWFsaXR5ICh0d28gcmVmZXJlbmNlcyBwb2ludCB0byB0aGUgc2FtZSBvYmplY3QpXG4qIFN0cnVjdHVyYWwgZXF1YWxpdHkgKGEgY2hlY2sgZm9yIGBlcXVhbHMoKWApXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/equality.html#equality"
            ],
            "flags": 0,
            "guid": "lM{ndOIwqn",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Equality",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Referential <b>equality</b>",
                "<p>Referential equality is checked by the <code>===</code> operation (and its negated counterpart <code>!==</code>). <br />\n<code>a === b</code> evaluates to true if and only if <code>a</code> and <code>b</code> point to the same object.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTEzNTAsICJpZCI6ICIxNDg4MDU0MzM1NDAyLTAwMSIsICJtZCI6ICJSZWZlcmVudGlhbCBlcXVhbGl0eSBpcyBjaGVja2VkIGJ5IHRoZSBgPT09YCBvcGVyYXRpb24gKGFuZCBpdHMgbmVnYXRlZCBjb3VudGVycGFydCBgIT09YCkuIFxuYGEgPT09IGJgIGV2YWx1YXRlcyB0byB0cnVlIGlmIGFuZCBvbmx5IGlmIGBhYCBhbmQgYGJgIHBvaW50IHRvIHRoZSBzYW1lIG9iamVjdC5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/equality.html#referential-equality"
            ],
            "flags": 0,
            "guid": "B[^FI*)Fp#",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Equality",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Structural <b>equality</b>",
                "<p>Structural equality is checked by the <code>==</code> operation (and its negated counterpart <code>!=</code>). </p>\n<p>By convention, an expression like <code>a == b</code> is translated to</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">a</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">equals</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">===</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>I.e. if <code>a</code> is not <code>null</code>, it calls the <code>equals(Any?)</code> function, otherwise (i.e. <code>a</code> is <code>null</code>) it checks that <code>b</code> is referentially equal to <code>null</code>.</p>\n<p>Note that there's no point in optimizing your code when comparing to <code>null</code> explicitly: <code>a == null</code> will be automatically translated to <code>a === null</code>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTEzNzIsICJpZCI6ICIxNDg4MDU0MzUwMzU2LTAwMSIsICJtZCI6ICJTdHJ1Y3R1cmFsIGVxdWFsaXR5IGlzIGNoZWNrZWQgYnkgdGhlIGA9PWAgb3BlcmF0aW9uIChhbmQgaXRzIG5lZ2F0ZWQgY291bnRlcnBhcnQgYCE9YCkuIFxuICBcbkJ5IGNvbnZlbnRpb24sIGFuIGV4cHJlc3Npb24gbGlrZSBgYSA9PSBiYCBpcyB0cmFuc2xhdGVkIHRvXG4gIFxuYGBga290bGluXG5hPy5lcXVhbHMoYikgPzogKGIgPT09IG51bGwpXG5gYGBcbiAgXG5JLmUuIGlmIGBhYCBpcyBub3QgYG51bGxgLCBpdCBjYWxscyB0aGUgYGVxdWFscyhBbnk/KWAgZnVuY3Rpb24sIG90aGVyd2lzZSAoaS5lLiBgYWAgaXMgYG51bGxgKSBpdCBjaGVja3MgdGhhdCBgYmAgaXMgcmVmZXJlbnRpYWxseSBlcXVhbCB0byBgbnVsbGAuXG4gIFxuTm90ZSB0aGF0IHRoZXJlJmFwb3M7cyBubyBwb2ludCBpbiBvcHRpbWl6aW5nIHlvdXIgY29kZSB3aGVuIGNvbXBhcmluZyB0byBgbnVsbGAgZXhwbGljaXRseTogYGEgPT0gbnVsbGAgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHRyYW5zbGF0ZWQgdG8gYGEgPT09IG51bGxgLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/equality.html#structural-equality"
            ],
            "flags": 0,
            "guid": "C?hH3fAmuP",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Equality",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>Operator <b>overloading</b></div>",
                "<p>Kotlin allows us to provide implementations for a predefined set of operators on our types.</p>\n<p>These operators have fixed symbolic representation (like <code>+</code> or <code>*</code>) and fixed <a href=\"grammar.html#precedence\">precedence</a>.<br />\nTo implement an operator, we provide a <a href=\"functions.html#member-functions\">member function</a> or an <a href=\"extensions.html\">extension function</a> with a fixed name, for the corresponding type, i.e. left-hand side type for binary operations and argument type for unary ones.</p>\n<p>Functions that overload operators need to be marked with the <code>operator</code> modifier.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTE0MzQsICJpZCI6ICIxNDg4MDU0MzY3NzU3LTAwMSIsICJtZCI6ICJLb3RsaW4gYWxsb3dzIHVzIHRvIHByb3ZpZGUgaW1wbGVtZW50YXRpb25zIGZvciBhIHByZWRlZmluZWQgc2V0IG9mIG9wZXJhdG9ycyBvbiBvdXIgdHlwZXMuXG4gIFxuVGhlc2Ugb3BlcmF0b3JzIGhhdmUgZml4ZWQgc3ltYm9saWMgcmVwcmVzZW50YXRpb24gKGxpa2UgYCtgIG9yIGAqYCkgYW5kIGZpeGVkIFtwcmVjZWRlbmNlXShncmFtbWFyLmh0bWwjcHJlY2VkZW5jZSkuXG5UbyBpbXBsZW1lbnQgYW4gb3BlcmF0b3IsIHdlIHByb3ZpZGUgYSBbbWVtYmVyIGZ1bmN0aW9uXShmdW5jdGlvbnMuaHRtbCNtZW1iZXItZnVuY3Rpb25zKSBvciBhbiBbZXh0ZW5zaW9uIGZ1bmN0aW9uXShleHRlbnNpb25zLmh0bWwpIHdpdGggYSBmaXhlZCBuYW1lLCBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgdHlwZSwgaS5lLiBsZWZ0LWhhbmQgc2lkZSB0eXBlIGZvciBiaW5hcnkgb3BlcmF0aW9ucyBhbmQgYXJndW1lbnQgdHlwZSBmb3IgdW5hcnkgb25lcy5cbiAgXG5GdW5jdGlvbnMgdGhhdCBvdmVybG9hZCBvcGVyYXRvcnMgbmVlZCB0byBiZSBtYXJrZWQgd2l0aCB0aGUgYG9wZXJhdG9yYCBtb2RpZmllci5cbiJ9---->",
                "http://kotlinlang.org/docs/reference/operator-overloading.html#operator-overloading"
            ],
            "flags": 0,
            "guid": "Nb`O5EF>NP",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "OperatorOverloading",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Nullable</b> types and <b>Non-Null</b> Types",
                "<p>Kotlin's type system is aimed at eliminating the danger of null references from code, also known as the <a href=\"http://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions\">The Billion Dollar Mistake</a>.</p>\n<p>One of the most common pitfalls in many programming languages, including Java, is that of accessing a member of a null reference, resulting in a null reference exception. In Java this would be the equivalent of a <code>NullPointerException</code> or NPE for short.</p>\n<p>Kotlin's type system is aimed to eliminate <code>NullPointerException</code>'s from our code. The only possible causes of NPE's may be</p>\n<ul>\n<li align=\"left\">An explicit call to <code>throw NullPointerException()</code></li>\n<li align=\"left\">Usage of the <code>!!</code> operator that is described below</li>\n<li align=\"left\">External Java code has caused it</li>\n<li align=\"left\">There's some data inconsistency with regard to initialization (an uninitialized <em>this</em> available in a constructor is used somewhere)</li>\n</ul>\n<p>In Kotlin, the type system distinguishes between references that can hold <em class=\"keyword\">null</em> (nullable references) and those that can not (non-null references).<br />\nFor example, a regular variable of type <code>String</code> can not hold <em class=\"keyword\">null</em>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">var</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"abc\"</span>\n<span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span> <span style=\"color: #8f5902; font-style: italic\">// compilation error</span>\n</pre></div>\n<p>To allow nulls, we can declare a variable as nullable string, written <code>String?</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"abc\"</span>\n<span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span> <span style=\"color: #8f5902; font-style: italic\">// ok</span>\n</pre></div>\n<p>Now, if you call a method or access a property on <code>a</code>, it's guaranteed not to cause an NPE, so you can safely say</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">l</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span>\n</pre></div>\n<p>But if you want to access the same property on <code>b</code>, that would not be safe, and the compiler reports an error:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">l</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #8f5902; font-style: italic\">// error: variable 'b' can be null</span>\n</pre></div>\n<p>But we still need to access that property, right? There are a few ways of doing that.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTQ2NjM2OTAsICJpZCI6ICIxNDg4MDU0NjE3Njg4LTAwMSIsICJtZCI6ICJLb3RsaW4mYXBvcztzIHR5cGUgc3lzdGVtIGlzIGFpbWVkIGF0IGVsaW1pbmF0aW5nIHRoZSBkYW5nZXIgb2YgbnVsbCByZWZlcmVuY2VzIGZyb20gY29kZSwgYWxzbyBrbm93biBhcyB0aGUgW1RoZSBCaWxsaW9uIERvbGxhciBNaXN0YWtlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1RvbnlfSG9hcmUjQXBvbG9naWVzX2FuZF9yZXRyYWN0aW9ucykuXG4gIFxuT25lIG9mIHRoZSBtb3N0IGNvbW1vbiBwaXRmYWxscyBpbiBtYW55IHByb2dyYW1taW5nIGxhbmd1YWdlcywgaW5jbHVkaW5nIEphdmEsIGlzIHRoYXQgb2YgYWNjZXNzaW5nIGEgbWVtYmVyIG9mIGEgbnVsbCByZWZlcmVuY2UsIHJlc3VsdGluZyBpbiBhIG51bGwgcmVmZXJlbmNlIGV4Y2VwdGlvbi4gSW4gSmF2YSB0aGlzIHdvdWxkIGJlIHRoZSBlcXVpdmFsZW50IG9mIGEgYE51bGxQb2ludGVyRXhjZXB0aW9uYCBvciBOUEUgZm9yIHNob3J0LlxuICBcbktvdGxpbiZhcG9zO3MgdHlwZSBzeXN0ZW0gaXMgYWltZWQgdG8gZWxpbWluYXRlIGBOdWxsUG9pbnRlckV4Y2VwdGlvbmAmYXBvcztzIGZyb20gb3VyIGNvZGUuIFRoZSBvbmx5IHBvc3NpYmxlIGNhdXNlcyBvZiBOUEUmYXBvcztzIG1heSBiZVxuICBcbiogQW4gZXhwbGljaXQgY2FsbCB0byBgdGhyb3cgTnVsbFBvaW50ZXJFeGNlcHRpb24oKWBcbiogVXNhZ2Ugb2YgdGhlIGAhIWAgb3BlcmF0b3IgdGhhdCBpcyBkZXNjcmliZWQgYmVsb3dcbiogRXh0ZXJuYWwgSmF2YSBjb2RlIGhhcyBjYXVzZWQgaXRcbiogVGhlcmUmYXBvcztzIHNvbWUgZGF0YSBpbmNvbnNpc3RlbmN5IHdpdGggcmVnYXJkIHRvIGluaXRpYWxpemF0aW9uIChhbiB1bmluaXRpYWxpemVkICp0aGlzKiBhdmFpbGFibGUgaW4gYSBjb25zdHJ1Y3RvciBpcyB1c2VkIHNvbWV3aGVyZSlcbiAgXG5JbiBLb3RsaW4sIHRoZSB0eXBlIHN5c3RlbSBkaXN0aW5ndWlzaGVzIGJldHdlZW4gcmVmZXJlbmNlcyB0aGF0IGNhbiBob2xkICpudWxsKns6IC5rZXl3b3JkIH0gKG51bGxhYmxlIHJlZmVyZW5jZXMpIGFuZCB0aG9zZSB0aGF0IGNhbiBub3QgKG5vbi1udWxsIHJlZmVyZW5jZXMpLlxuRm9yIGV4YW1wbGUsIGEgcmVndWxhciB2YXJpYWJsZSBvZiB0eXBlIGBTdHJpbmdgIGNhbiBub3QgaG9sZCAqbnVsbCp7OiAua2V5d29yZCB9OlxuICBcbmBgYGtvdGxpblxudmFyIGE6IFN0cmluZyA9ICZxdW90O2FiYyZxdW90O1xuYSA9IG51bGwgLy8gY29tcGlsYXRpb24gZXJyb3JcbmBgYFxuICBcblRvIGFsbG93IG51bGxzLCB3ZSBjYW4gZGVjbGFyZSBhIHZhcmlhYmxlIGFzIG51bGxhYmxlIHN0cmluZywgd3JpdHRlbiBgU3RyaW5nP2A6XG4gIFxuYGBga290bGluXG52YXIgYjogU3RyaW5nPyA9ICZxdW90O2FiYyZxdW90O1xuYiA9IG51bGwgLy8gb2tcbmBgYFxuICBcbk5vdywgaWYgeW91IGNhbGwgYSBtZXRob2Qgb3IgYWNjZXNzIGEgcHJvcGVydHkgb24gYGFgLCBpdCZhcG9zO3MgZ3VhcmFudGVlZCBub3QgdG8gY2F1c2UgYW4gTlBFLCBzbyB5b3UgY2FuIHNhZmVseSBzYXlcbiAgXG5gYGBrb3RsaW5cbnZhbCBsID0gYS5sZW5ndGhcbmBgYFxuICBcbkJ1dCBpZiB5b3Ugd2FudCB0byBhY2Nlc3MgdGhlIHNhbWUgcHJvcGVydHkgb24gYGJgLCB0aGF0IHdvdWxkIG5vdCBiZSBzYWZlLCBhbmQgdGhlIGNvbXBpbGVyIHJlcG9ydHMgYW4gZXJyb3I6XG4gIFxuYGBga290bGluXG52YWwgbCA9IGIubGVuZ3RoIC8vIGVycm9yOiB2YXJpYWJsZSAmYXBvcztiJmFwb3M7IGNhbiBiZSBudWxsXG5gYGBcbiAgXG5CdXQgd2Ugc3RpbGwgbmVlZCB0byBhY2Nlc3MgdGhhdCBwcm9wZXJ0eSwgcmlnaHQ/IFRoZXJlIGFyZSBhIGZldyB3YXlzIG9mIGRvaW5nIHRoYXQuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/null-safety.html#nullable-types-and-non-null-types"
            ],
            "flags": 0,
            "guid": "BF}UM&ljuK",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "NullSafety",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Checking for <b>null</b> in <b>conditions</b>",
                "<p>First, you can explicitly check if <code>b</code> is <em class=\"keyword\">null</em>, and handle the two options separately:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">l</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">!=</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-</span><span style=\"color: #0000cf; font-weight: bold\">1</span>\n</pre></div>\n<p>The compiler tracks the information about the check you performed, and allows the call to <code>length</code> inside the <em class=\"keyword\">if</em>.<br />\nMore complex conditions are supported as well:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">!=</span> <span style=\"color: #204a87; font-weight: bold\">null</span> <span style=\"color: #000000; font-weight: bold\">&amp;&amp;</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"String of length ${b.length}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Empty string\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Note that this only works where <code>b</code> is immutable (i.e. a local variable which is not modified between the check and the usage or a member <em class=\"keyword\">val</em> which has a backing field and is not overridable), because otherwise it might happen that <code>b</code> changes to <em class=\"keyword\">null</em> after the check.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTE4NTcsICJpZCI6ICIxNDg4MDU0NzAxMTAxLTAwMSIsICJtZCI6ICJGaXJzdCwgeW91IGNhbiBleHBsaWNpdGx5IGNoZWNrIGlmIGBiYCBpcyAqbnVsbCp7OiAua2V5d29yZCB9LCBhbmQgaGFuZGxlIHRoZSB0d28gb3B0aW9ucyBzZXBhcmF0ZWx5OlxuICBcbmBgYGtvdGxpblxudmFsIGwgPSBpZiAoYiAhPSBudWxsKSBiLmxlbmd0aCBlbHNlIC0xXG5gYGBcbiAgXG5UaGUgY29tcGlsZXIgdHJhY2tzIHRoZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hlY2sgeW91IHBlcmZvcm1lZCwgYW5kIGFsbG93cyB0aGUgY2FsbCB0byBgbGVuZ3RoYCBpbnNpZGUgdGhlICppZip7OiAua2V5d29yZCB9LlxuTW9yZSBjb21wbGV4IGNvbmRpdGlvbnMgYXJlIHN1cHBvcnRlZCBhcyB3ZWxsOlxuICBcbmBgYGtvdGxpblxuaWYgKGIgIT0gbnVsbCAmYW1wOyZhbXA7IGIubGVuZ3RoICZndDsgMCkge1xuICAgIHByaW50KCZxdW90O1N0cmluZyBvZiBsZW5ndGggJHtiLmxlbmd0aH0mcXVvdDspXG59IGVsc2Uge1xuICAgIHByaW50KCZxdW90O0VtcHR5IHN0cmluZyZxdW90Oylcbn1cbmBgYFxuICBcbk5vdGUgdGhhdCB0aGlzIG9ubHkgd29ya3Mgd2hlcmUgYGJgIGlzIGltbXV0YWJsZSAoaS5lLiBhIGxvY2FsIHZhcmlhYmxlIHdoaWNoIGlzIG5vdCBtb2RpZmllZCBiZXR3ZWVuIHRoZSBjaGVjayBhbmQgdGhlIHVzYWdlIG9yIGEgbWVtYmVyICp2YWwqezogLmtleXdvcmQgfSB3aGljaCBoYXMgYSBiYWNraW5nIGZpZWxkIGFuZCBpcyBub3Qgb3ZlcnJpZGFibGUpLCBiZWNhdXNlIG90aGVyd2lzZSBpdCBtaWdodCBoYXBwZW4gdGhhdCBgYmAgY2hhbmdlcyB0byAqbnVsbCp7OiAua2V5d29yZCB9IGFmdGVyIHRoZSBjaGVjay5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/null-safety.html#checking-for-null-keyword--in-conditions"
            ],
            "flags": 0,
            "guid": "BHuq{q/a:,",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "NullSafety",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Safe</b> Calls",
                "<p>Your second option is the safe call operator, written <code>?.</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">b</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">length</span>\n</pre></div>\n<p>This returns <code>b.length</code> if <code>b</code> is not null, and <em class=\"keyword\">null</em> otherwise. The type of this expression is <code>Int?</code>.</p>\n<p>Safe calls are useful in chains. For example, if Bob, an Employee, may be assigned to a Department (or not), that in turn may have another Employee as a department head, then to obtain the name of Bob's department head (if any), we write the following:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">bob</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">department</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">head</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">name</span>\n</pre></div>\n<p>Such a chain returns <em class=\"keyword\">null</em> if any of the properties in it is null.</p>\n<p>To perform a certain operation only for non-null values, you can use the safe call operator together with <a href=\"/api/latest/jvm/stdlib/kotlin/let.html\"><code>let</code></a>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">listWithNulls</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">?&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"A\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">listWithNulls</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n     <span style=\"color: #000000\">item</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">let</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #8f5902; font-style: italic\">// prints A and ignores null</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTE4ODcsICJpZCI6ICIxNDg4MDU0NzIwMjYzLTAwMSIsICJtZCI6ICJZb3VyIHNlY29uZCBvcHRpb24gaXMgdGhlIHNhZmUgY2FsbCBvcGVyYXRvciwgd3JpdHRlbiBgPy5gOlxuICBcbmBgYGtvdGxpblxuYj8ubGVuZ3RoXG5gYGBcblRoaXMgcmV0dXJucyBgYi5sZW5ndGhgIGlmIGBiYCBpcyBub3QgbnVsbCwgYW5kICpudWxsKns6IC5rZXl3b3JkIH0gb3RoZXJ3aXNlLiBUaGUgdHlwZSBvZiB0aGlzIGV4cHJlc3Npb24gaXMgYEludD9gLlxuICBcblNhZmUgY2FsbHMgYXJlIHVzZWZ1bCBpbiBjaGFpbnMuIEZvciBleGFtcGxlLCBpZiBCb2IsIGFuIEVtcGxveWVlLCBtYXkgYmUgYXNzaWduZWQgdG8gYSBEZXBhcnRtZW50IChvciBub3QpLCB0aGF0IGluIHR1cm4gbWF5IGhhdmUgYW5vdGhlciBFbXBsb3llZSBhcyBhIGRlcGFydG1lbnQgaGVhZCwgdGhlbiB0byBvYnRhaW4gdGhlIG5hbWUgb2YgQm9iJmFwb3M7cyBkZXBhcnRtZW50IGhlYWQgKGlmIGFueSksIHdlIHdyaXRlIHRoZSBmb2xsb3dpbmc6XG4gIFxuYGBga290bGluXG5ib2I/LmRlcGFydG1lbnQ/LmhlYWQ/Lm5hbWVcbmBgYFxuICBcblN1Y2ggYSBjaGFpbiByZXR1cm5zICpudWxsKns6IC5rZXl3b3JkIH0gaWYgYW55IG9mIHRoZSBwcm9wZXJ0aWVzIGluIGl0IGlzIG51bGwuXG4gIFxuVG8gcGVyZm9ybSBhIGNlcnRhaW4gb3BlcmF0aW9uIG9ubHkgZm9yIG5vbi1udWxsIHZhbHVlcywgeW91IGNhbiB1c2UgdGhlIHNhZmUgY2FsbCBvcGVyYXRvciB0b2dldGhlciB3aXRoIFtgbGV0YF0oL2FwaS9sYXRlc3QvanZtL3N0ZGxpYi9rb3RsaW4vbGV0Lmh0bWwpOlxuICBcbmBgYGtvdGxpblxudmFsIGxpc3RXaXRoTnVsbHM6IExpc3QmbHQ7U3RyaW5nPyZndDsgPSBsaXN0T2YoJnF1b3Q7QSZxdW90OywgbnVsbClcbmZvciAoaXRlbSBpbiBsaXN0V2l0aE51bGxzKSB7XG4gICAgIGl0ZW0/LmxldCB7IHByaW50bG4oaXQpIH0gLy8gcHJpbnRzIEEgYW5kIGlnbm9yZXMgbnVsbFxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/null-safety.html#safe-calls"
            ],
            "flags": 0,
            "guid": "oLqq2!N+T<",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "NullSafety",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Elvis</b> Operator",
                "<p>When we have a nullable reference <code>r</code>, we can say \"if <code>r</code> is not null, use it, otherwise use some non-null value <code>x</code>\":</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">l</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">!=</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-</span><span style=\"color: #0000cf; font-weight: bold\">1</span>\n</pre></div>\n<p>Along with the complete <em class=\"keyword\">if</em>-expression, this can be expressed with the Elvis operator, written <code>?:</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">l</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">b</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">length</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #000000; font-weight: bold\">-</span><span style=\"color: #0000cf; font-weight: bold\">1</span>\n</pre></div>\n<p>If the expression to the left of <code>?:</code> is not null, the elvis operator returns it, otherwise it returns the expression to the right.<br />\nNote that the right-hand side expression is evaluated only if the left-hand side is null.</p>\n<p>Note that, since <em class=\"keyword\">throw</em> and <em class=\"keyword\">return</em> are expressions in Kotlin, they can also be used on the right hand side of the elvis operator. This can be very handy, for example, for checking function arguments:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">node</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Node</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">parent</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">node</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">getParent</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">name</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">node</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">getName</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IllegalArgumentException</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"name expected\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTE5MTMsICJpZCI6ICIxNDg4MDU0NzM2OTMyLTAwMSIsICJtZCI6ICJXaGVuIHdlIGhhdmUgYSBudWxsYWJsZSByZWZlcmVuY2UgYHJgLCB3ZSBjYW4gc2F5ICZxdW90O2lmIGByYCBpcyBub3QgbnVsbCwgdXNlIGl0LCBvdGhlcndpc2UgdXNlIHNvbWUgbm9uLW51bGwgdmFsdWUgYHhgJnF1b3Q7OlxuICBcbmBgYGtvdGxpblxudmFsIGw6IEludCA9IGlmIChiICE9IG51bGwpIGIubGVuZ3RoIGVsc2UgLTFcbmBgYFxuICBcbkFsb25nIHdpdGggdGhlIGNvbXBsZXRlICppZip7OiAua2V5d29yZCB9LWV4cHJlc3Npb24sIHRoaXMgY2FuIGJlIGV4cHJlc3NlZCB3aXRoIHRoZSBFbHZpcyBvcGVyYXRvciwgd3JpdHRlbiBgPzpgOlxuICBcbmBgYGtvdGxpblxudmFsIGwgPSBiPy5sZW5ndGggPzogLTFcbmBgYFxuICBcbklmIHRoZSBleHByZXNzaW9uIHRvIHRoZSBsZWZ0IG9mIGA/OmAgaXMgbm90IG51bGwsIHRoZSBlbHZpcyBvcGVyYXRvciByZXR1cm5zIGl0LCBvdGhlcndpc2UgaXQgcmV0dXJucyB0aGUgZXhwcmVzc2lvbiB0byB0aGUgcmlnaHQuXG5Ob3RlIHRoYXQgdGhlIHJpZ2h0LWhhbmQgc2lkZSBleHByZXNzaW9uIGlzIGV2YWx1YXRlZCBvbmx5IGlmIHRoZSBsZWZ0LWhhbmQgc2lkZSBpcyBudWxsLlxuICBcbk5vdGUgdGhhdCwgc2luY2UgKnRocm93Kns6IC5rZXl3b3JkIH0gYW5kICpyZXR1cm4qezogLmtleXdvcmQgfSBhcmUgZXhwcmVzc2lvbnMgaW4gS290bGluLCB0aGV5IGNhbiBhbHNvIGJlIHVzZWQgb24gdGhlIHJpZ2h0IGhhbmQgc2lkZSBvZiB0aGUgZWx2aXMgb3BlcmF0b3IuIFRoaXMgY2FuIGJlIHZlcnkgaGFuZHksIGZvciBleGFtcGxlLCBmb3IgY2hlY2tpbmcgZnVuY3Rpb24gYXJndW1lbnRzOlxuICBcbmBgYGtvdGxpblxuZnVuIGZvbyhub2RlOiBOb2RlKTogU3RyaW5nPyB7XG4gICAgdmFsIHBhcmVudCA9IG5vZGUuZ2V0UGFyZW50KCkgPzogcmV0dXJuIG51bGxcbiAgICB2YWwgbmFtZSA9IG5vZGUuZ2V0TmFtZSgpID86IHRocm93IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigmcXVvdDtuYW1lIGV4cGVjdGVkJnF1b3Q7KVxuICAgIC8vIC4uLlxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/null-safety.html#elvis-operator"
            ],
            "flags": 0,
            "guid": "sDllLGXiMY",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "NullSafety",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The <b>!!</b> Operator",
                "<p>The third option is for NPE-lovers. We can write <code>b!!</code>, and this will return a non-null value of <code>b</code> (e.g., a <code>String</code> in our example) or throw an NPE if <code>b</code> is null:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">l</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">b</span><span style=\"color: #ce5c00; font-weight: bold\">!!</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span>\n</pre></div>\n<p>Thus, if you want an NPE, you can have it, but you have to ask for it explicitly, and it does not appear out of the blue.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTE5MzAsICJpZCI6ICIxNDg4MDU0NzY3Mjg1LTAwMSIsICJtZCI6ICJUaGUgdGhpcmQgb3B0aW9uIGlzIGZvciBOUEUtbG92ZXJzLiBXZSBjYW4gd3JpdGUgYGIhIWAsIGFuZCB0aGlzIHdpbGwgcmV0dXJuIGEgbm9uLW51bGwgdmFsdWUgb2YgYGJgIChlLmcuLCBhIGBTdHJpbmdgIGluIG91ciBleGFtcGxlKSBvciB0aHJvdyBhbiBOUEUgaWYgYGJgIGlzIG51bGw6XG4gIFxuYGBga290bGluXG52YWwgbCA9IGIhIS5sZW5ndGhcbmBgYFxuICBcblRodXMsIGlmIHlvdSB3YW50IGFuIE5QRSwgeW91IGNhbiBoYXZlIGl0LCBidXQgeW91IGhhdmUgdG8gYXNrIGZvciBpdCBleHBsaWNpdGx5LCBhbmQgaXQgZG9lcyBub3QgYXBwZWFyIG91dCBvZiB0aGUgYmx1ZS5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/null-safety.html#the--operator"
            ],
            "flags": 0,
            "guid": "L)zCr18ta.",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "NullSafety",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Safe</b> Casts",
                "<p>Regular casts may result into a <code>ClassCastException</code> if the object is not of the target type.<br />\nAnother option is to use safe casts that return <em class=\"keyword\">null</em> if the attempt was not successful:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">aInt</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">a</span> <span style=\"color: #204a87; font-weight: bold\">as</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000\">Int</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTE5NDIsICJpZCI6ICIxNDg4MDU0Nzg1MjIxLTAwMSIsICJtZCI6ICJSZWd1bGFyIGNhc3RzIG1heSByZXN1bHQgaW50byBhIGBDbGFzc0Nhc3RFeGNlcHRpb25gIGlmIHRoZSBvYmplY3QgaXMgbm90IG9mIHRoZSB0YXJnZXQgdHlwZS5cbkFub3RoZXIgb3B0aW9uIGlzIHRvIHVzZSBzYWZlIGNhc3RzIHRoYXQgcmV0dXJuICpudWxsKns6IC5rZXl3b3JkIH0gaWYgdGhlIGF0dGVtcHQgd2FzIG5vdCBzdWNjZXNzZnVsOlxuICBcbmBgYGtvdGxpblxudmFsIGFJbnQ6IEludD8gPSBhIGFzPyBJbnRcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/null-safety.html#safe-casts"
            ],
            "flags": 0,
            "guid": "z:wQK0g9,~",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "NullSafety",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Collections</b> of <b>Nullable</b> Type",
                "<p>If you have a collection of elements of a nullable type and want to filter non-null elements, you can do so by using <code>filterNotNull</code>.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">nullableList</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">4</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">intList</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">nullableList</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filterNotNull</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTE5NTUsICJpZCI6ICIxNDg4MDU0ODAxMDU2LTAwMSIsICJtZCI6ICJJZiB5b3UgaGF2ZSBhIGNvbGxlY3Rpb24gb2YgZWxlbWVudHMgb2YgYSBudWxsYWJsZSB0eXBlIGFuZCB3YW50IHRvIGZpbHRlciBub24tbnVsbCBlbGVtZW50cywgeW91IGNhbiBkbyBzbyBieSB1c2luZyBgZmlsdGVyTm90TnVsbGAuXG4gIFxuYGBga290bGluXG52YWwgbnVsbGFibGVMaXN0OiBMaXN0Jmx0O0ludD8mZ3Q7ID0gbGlzdE9mKDEsIDIsIG51bGwsIDQpXG52YWwgaW50TGlzdDogTGlzdCZsdDtJbnQmZ3Q7ID0gbnVsbGFibGVMaXN0LmZpbHRlck5vdE51bGwoKVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/null-safety.html#collections-of-nullable-type"
            ],
            "flags": 0,
            "guid": "pwSi-[nLd",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "NullSafety",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Exception</b> Classes",
                "<p>All exception classes in Kotlin are descendants of the class <code>Throwable</code>.<br />\nEvery exception has a message, stack trace and an optional cause.</p>\n<p>To throw an exception object, use the <em class=\"keyword\">throw</em>-expression</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">throw</span> <span style=\"color: #000000\">MyException</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Hi There!\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>To catch an exception, use the <em class=\"keyword\">try</em>-expression</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">try</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// some code</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">catch</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">SomeException</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// handler</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">finally</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// optional finally block</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>There may be zero or more <em class=\"keyword\">catch</em> blocks. <em class=\"keyword\">finally</em> blocks may be omitted.<br />\nHowever at least one <em class=\"keyword\">catch</em> or <em class=\"keyword\">finally</em> block should be present.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTIwMDIsICJpZCI6ICIxNDg4MDU0ODE2OTc1LTAwMSIsICJtZCI6ICJBbGwgZXhjZXB0aW9uIGNsYXNzZXMgaW4gS290bGluIGFyZSBkZXNjZW5kYW50cyBvZiB0aGUgY2xhc3MgYFRocm93YWJsZWAuXG5FdmVyeSBleGNlcHRpb24gaGFzIGEgbWVzc2FnZSwgc3RhY2sgdHJhY2UgYW5kIGFuIG9wdGlvbmFsIGNhdXNlLlxuICBcblRvIHRocm93IGFuIGV4Y2VwdGlvbiBvYmplY3QsIHVzZSB0aGUgKnRocm93Kns6IC5rZXl3b3JkIH0tZXhwcmVzc2lvblxuICBcbmBgYGtvdGxpblxudGhyb3cgTXlFeGNlcHRpb24oJnF1b3Q7SGkgVGhlcmUhJnF1b3Q7KVxuYGBgXG4gIFxuVG8gY2F0Y2ggYW4gZXhjZXB0aW9uLCB1c2UgdGhlICp0cnkqezogLmtleXdvcmQgfS1leHByZXNzaW9uXG4gIFxuYGBga290bGluXG50cnkge1xuICAgIC8vIHNvbWUgY29kZVxufVxuY2F0Y2ggKGU6IFNvbWVFeGNlcHRpb24pIHtcbiAgICAvLyBoYW5kbGVyXG59XG5maW5hbGx5IHtcbiAgICAvLyBvcHRpb25hbCBmaW5hbGx5IGJsb2NrXG59XG5gYGBcbiAgXG5UaGVyZSBtYXkgYmUgemVybyBvciBtb3JlICpjYXRjaCp7OiAua2V5d29yZCB9IGJsb2Nrcy4gKmZpbmFsbHkqezogLmtleXdvcmQgfSBibG9ja3MgbWF5IGJlIG9taXR0ZWQuXG5Ib3dldmVyIGF0IGxlYXN0IG9uZSAqY2F0Y2gqezogLmtleXdvcmQgfSBvciAqZmluYWxseSp7OiAua2V5d29yZCB9IGJsb2NrIHNob3VsZCBiZSBwcmVzZW50LlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/exceptions.html#exception-classes"
            ],
            "flags": 0,
            "guid": "f:4137P-,%",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Exceptions",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Try</b> is an expression",
                "<p><em class=\"keyword\">try</em> is an expression, i.e. it may have a return value.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">try</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">parseInt</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">input</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #204a87; font-weight: bold\">catch</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">NumberFormatException</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #204a87; font-weight: bold\">null</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The returned value of a <em class=\"keyword\">try</em>-expression is either the last expression in the <em class=\"keyword\">try</em> block or the last expression in the <em class=\"keyword\">catch</em> block (or blocks).<br />\nContents of the <em class=\"keyword\">finally</em> block do not affect the result of the expression.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTIwMjUsICJpZCI6ICIxNDg4MDU0ODY4MTUwLTAwMSIsICJtZCI6ICIqdHJ5Kns6IC5rZXl3b3JkIH0gaXMgYW4gZXhwcmVzc2lvbiwgaS5lLiBpdCBtYXkgaGF2ZSBhIHJldHVybiB2YWx1ZS5cbiAgXG5gYGBrb3RsaW5cbnZhbCBhOiBJbnQ/ID0gdHJ5IHsgcGFyc2VJbnQoaW5wdXQpIH0gY2F0Y2ggKGU6IE51bWJlckZvcm1hdEV4Y2VwdGlvbikgeyBudWxsIH1cbmBgYFxuICBcblRoZSByZXR1cm5lZCB2YWx1ZSBvZiBhICp0cnkqezogLmtleXdvcmQgfS1leHByZXNzaW9uIGlzIGVpdGhlciB0aGUgbGFzdCBleHByZXNzaW9uIGluIHRoZSAqdHJ5Kns6IC5rZXl3b3JkIH0gYmxvY2sgb3IgdGhlIGxhc3QgZXhwcmVzc2lvbiBpbiB0aGUgKmNhdGNoKns6IC5rZXl3b3JkIH0gYmxvY2sgKG9yIGJsb2NrcykuXG5Db250ZW50cyBvZiB0aGUgKmZpbmFsbHkqezogLmtleXdvcmQgfSBibG9jayBkbyBub3QgYWZmZWN0IHRoZSByZXN1bHQgb2YgdGhlIGV4cHJlc3Npb24uXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/exceptions.html#try-is-an-expression"
            ],
            "flags": 0,
            "guid": "lcm%hFlIpb",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Exceptions",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Checked <b>Exceptions</b>",
                "<p>Kotlin does not have checked exceptions. There are many reasons for this, but we will provide a simple example.</p>\n<p>The following is an example interface of the JDK implemented by <code>StringBuilder</code> class</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">Appendable</span> <span style=\"color: #000000\">append</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">CharSequence</span> <span style=\"color: #000000\">csq</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">throws</span> <span style=\"color: #000000\">IOException</span><span style=\"color: #ce5c00; font-weight: bold\">;</span>\n</pre></div>\n<p>What does this signature say? It says that every time I append a string to something (a <code>StringBuilder</code>, some kind of a log, a console, etc.) I have to catch those <code>IOExceptions</code>. Why? Because it might be performing IO (<code>Writer</code> also implements <code>Appendable</code>)... So it results into this kind of code all over the place:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">try</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">log</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">append</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">message</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">catch</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">IOException</span> <span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// Must be safe</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>And this is no good, see <a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\">Effective Java</a>, Item 65: <em>Don't ignore exceptions</em>.</p>\n<p>Bruce Eckel says in <a href=\"http://www.mindview.net/Etc/Discussions/CheckedExceptions\">Does Java need Checked Exceptions?</a>:</p>\n<blockquote>\n<p>Examination of small programs leads to the conclusion that requiring exception specifications could both enhance developer productivity and enhance code quality, but experience with large software projects suggests a different result – decreased productivity and little or no increase in code quality.</p>\n</blockquote>\n<p>Other citations of this sort:</p>\n<ul>\n<li align=\"left\"><a href=\"http://radio-weblogs.com/0122027/stories/2003/04/01/JavasCheckedExceptionsWereAMistake.html\">Java's checked exceptions were a mistake</a> (Rod Waldhoff)</li>\n<li align=\"left\"><a href=\"http://www.artima.com/intv/handcuffs.html\">The Trouble with Checked Exceptions</a> (Anders Hejlsberg)</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTIxMTAsICJpZCI6ICIxNDg4MDU0ODg0MDk4LTAwMSIsICJtZCI6ICJLb3RsaW4gZG9lcyBub3QgaGF2ZSBjaGVja2VkIGV4Y2VwdGlvbnMuIFRoZXJlIGFyZSBtYW55IHJlYXNvbnMgZm9yIHRoaXMsIGJ1dCB3ZSB3aWxsIHByb3ZpZGUgYSBzaW1wbGUgZXhhbXBsZS5cbiAgXG5UaGUgZm9sbG93aW5nIGlzIGFuIGV4YW1wbGUgaW50ZXJmYWNlIG9mIHRoZSBKREsgaW1wbGVtZW50ZWQgYnkgYFN0cmluZ0J1aWxkZXJgIGNsYXNzXG4gIFxuYGBgamF2YVxuQXBwZW5kYWJsZSBhcHBlbmQoQ2hhclNlcXVlbmNlIGNzcSkgdGhyb3dzIElPRXhjZXB0aW9uO1xuYGBgXG4gIFxuV2hhdCBkb2VzIHRoaXMgc2lnbmF0dXJlIHNheT8gSXQgc2F5cyB0aGF0IGV2ZXJ5IHRpbWUgSSBhcHBlbmQgYSBzdHJpbmcgdG8gc29tZXRoaW5nIChhIGBTdHJpbmdCdWlsZGVyYCwgc29tZSBraW5kIG9mIGEgbG9nLCBhIGNvbnNvbGUsIGV0Yy4pIEkgaGF2ZSB0byBjYXRjaCB0aG9zZSBgSU9FeGNlcHRpb25zYC4gV2h5PyBCZWNhdXNlIGl0IG1pZ2h0IGJlIHBlcmZvcm1pbmcgSU8gKGBXcml0ZXJgIGFsc28gaW1wbGVtZW50cyBgQXBwZW5kYWJsZWApLi4uIFNvIGl0IHJlc3VsdHMgaW50byB0aGlzIGtpbmQgb2YgY29kZSBhbGwgb3ZlciB0aGUgcGxhY2U6XG4gIFxuYGBga290bGluXG50cnkge1xuICAgIGxvZy5hcHBlbmQobWVzc2FnZSlcbn1cbmNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7XG4gICAgLy8gTXVzdCBiZSBzYWZlXG59XG5gYGBcbiAgXG5BbmQgdGhpcyBpcyBubyBnb29kLCBzZWUgW0VmZmVjdGl2ZSBKYXZhXShodHRwOi8vd3d3Lm9yYWNsZS5jb20vdGVjaG5ldHdvcmsvamF2YS9lZmZlY3RpdmVqYXZhLTEzNjE3NC5odG1sKSwgSXRlbSA2NTogKkRvbiZhcG9zO3QgaWdub3JlIGV4Y2VwdGlvbnMqLlxuICBcbkJydWNlIEVja2VsIHNheXMgaW4gW0RvZXMgSmF2YSBuZWVkIENoZWNrZWQgRXhjZXB0aW9ucz9dKGh0dHA6Ly93d3cubWluZHZpZXcubmV0L0V0Yy9EaXNjdXNzaW9ucy9DaGVja2VkRXhjZXB0aW9ucyk6XG4gIFxuJmd0OyBFeGFtaW5hdGlvbiBvZiBzbWFsbCBwcm9ncmFtcyBsZWFkcyB0byB0aGUgY29uY2x1c2lvbiB0aGF0IHJlcXVpcmluZyBleGNlcHRpb24gc3BlY2lmaWNhdGlvbnMgY291bGQgYm90aCBlbmhhbmNlIGRldmVsb3BlciBwcm9kdWN0aXZpdHkgYW5kIGVuaGFuY2UgY29kZSBxdWFsaXR5LCBidXQgZXhwZXJpZW5jZSB3aXRoIGxhcmdlIHNvZnR3YXJlIHByb2plY3RzIHN1Z2dlc3RzIGEgZGlmZmVyZW50IHJlc3VsdCBcdTIwMTMgZGVjcmVhc2VkIHByb2R1Y3Rpdml0eSBhbmQgbGl0dGxlIG9yIG5vIGluY3JlYXNlIGluIGNvZGUgcXVhbGl0eS5cbiAgXG5PdGhlciBjaXRhdGlvbnMgb2YgdGhpcyBzb3J0OlxuICBcbiogW0phdmEmYXBvcztzIGNoZWNrZWQgZXhjZXB0aW9ucyB3ZXJlIGEgbWlzdGFrZV0oaHR0cDovL3JhZGlvLXdlYmxvZ3MuY29tLzAxMjIwMjcvc3Rvcmllcy8yMDAzLzA0LzAxL0phdmFzQ2hlY2tlZEV4Y2VwdGlvbnNXZXJlQU1pc3Rha2UuaHRtbCkgKFJvZCBXYWxkaG9mZilcbiogW1RoZSBUcm91YmxlIHdpdGggQ2hlY2tlZCBFeGNlcHRpb25zXShodHRwOi8vd3d3LmFydGltYS5jb20vaW50di9oYW5kY3VmZnMuaHRtbCkgKEFuZGVycyBIZWpsc2JlcmcpXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/exceptions.html#checked-exceptions"
            ],
            "flags": 0,
            "guid": "v(a(000ChO",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Exceptions",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Annotation</b> Declaration",
                "<p>Annotations are means of attaching metadata to code. To declare an annotation, put the <em class=\"keyword\">annotation</em> modifier in front of a class:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">annotation</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Fancy</span>\n</pre></div>\n<p>Additional attributes of the annotation can be specified by annotating the annotation class with meta-annotations:</p>\n<ul>\n<li align=\"left\"><a href=\"/api/latest/jvm/stdlib/kotlin.annotation/-target/index.html\"><code>@Target</code></a> specifies the possible kinds of elements which can be annotated with the annotation (classes, functions, properties, expressions etc.);</li>\n<li align=\"left\"><a href=\"/api/latest/jvm/stdlib/kotlin.annotation/-retention/index.html\"><code>@Retention</code></a> specifies whether the annotation is stored in the compiled class files and whether it's visible through reflection at runtime (by default, both are true);</li>\n<li align=\"left\"><a href=\"/api/latest/jvm/stdlib/kotlin.annotation/-repeatable/index.html\"><code>@Repeatable</code></a> allows using the same annotation on a single element multiple times;</li>\n<li align=\"left\"><a href=\"/api/latest/jvm/stdlib/kotlin.annotation/-must-be-documented/index.html\"><code>@MustBeDocumented</code></a> specifies that the annotation is part of the public API and should be included in the class or method signature shown in the generated API documentation.</li>\n</ul>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">@Target</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">AnnotationTarget</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">CLASS</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">AnnotationTarget</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">FUNCTION</span><span style=\"color: #000000; font-weight: bold\">,</span>\n        <span style=\"color: #000000\">AnnotationTarget</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">VALUE_PARAMETER</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">AnnotationTarget</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">EXPRESSION</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">@Retention</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">AnnotationRetention</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">SOURCE</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">@MustBeDocumented</span>\n<span style=\"color: #204a87; font-weight: bold\">annotation</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Fancy</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTIyMTUsICJpZCI6ICIxNDg4MDU0OTEyNDU0LTAwMSIsICJtZCI6ICJBbm5vdGF0aW9ucyBhcmUgbWVhbnMgb2YgYXR0YWNoaW5nIG1ldGFkYXRhIHRvIGNvZGUuIFRvIGRlY2xhcmUgYW4gYW5ub3RhdGlvbiwgcHV0IHRoZSAqYW5ub3RhdGlvbip7OiAua2V5d29yZCB9IG1vZGlmaWVyIGluIGZyb250IG9mIGEgY2xhc3M6XG4gIFxuYGBga290bGluXG5hbm5vdGF0aW9uIGNsYXNzIEZhbmN5XG5gYGBcbiAgXG5BZGRpdGlvbmFsIGF0dHJpYnV0ZXMgb2YgdGhlIGFubm90YXRpb24gY2FuIGJlIHNwZWNpZmllZCBieSBhbm5vdGF0aW5nIHRoZSBhbm5vdGF0aW9uIGNsYXNzIHdpdGggbWV0YS1hbm5vdGF0aW9uczpcbiAgXG4gICogW2BAVGFyZ2V0YF0oL2FwaS9sYXRlc3QvanZtL3N0ZGxpYi9rb3RsaW4uYW5ub3RhdGlvbi8tdGFyZ2V0L2luZGV4Lmh0bWwpIHNwZWNpZmllcyB0aGUgcG9zc2libGUga2luZHMgb2YgZWxlbWVudHMgd2hpY2ggY2FuIGJlIGFubm90YXRlZCB3aXRoIHRoZSBhbm5vdGF0aW9uIChjbGFzc2VzLCBmdW5jdGlvbnMsIHByb3BlcnRpZXMsIGV4cHJlc3Npb25zIGV0Yy4pO1xuICAqIFtgQFJldGVudGlvbmBdKC9hcGkvbGF0ZXN0L2p2bS9zdGRsaWIva290bGluLmFubm90YXRpb24vLXJldGVudGlvbi9pbmRleC5odG1sKSBzcGVjaWZpZXMgd2hldGhlciB0aGUgYW5ub3RhdGlvbiBpcyBzdG9yZWQgaW4gdGhlIGNvbXBpbGVkIGNsYXNzIGZpbGVzIGFuZCB3aGV0aGVyIGl0JmFwb3M7cyB2aXNpYmxlIHRocm91Z2ggcmVmbGVjdGlvbiBhdCBydW50aW1lIChieSBkZWZhdWx0LCBib3RoIGFyZSB0cnVlKTtcbiAgKiBbYEBSZXBlYXRhYmxlYF0oL2FwaS9sYXRlc3QvanZtL3N0ZGxpYi9rb3RsaW4uYW5ub3RhdGlvbi8tcmVwZWF0YWJsZS9pbmRleC5odG1sKSBhbGxvd3MgdXNpbmcgdGhlIHNhbWUgYW5ub3RhdGlvbiBvbiBhIHNpbmdsZSBlbGVtZW50IG11bHRpcGxlIHRpbWVzO1xuICAqIFtgQE11c3RCZURvY3VtZW50ZWRgXSgvYXBpL2xhdGVzdC9qdm0vc3RkbGliL2tvdGxpbi5hbm5vdGF0aW9uLy1tdXN0LWJlLWRvY3VtZW50ZWQvaW5kZXguaHRtbCkgc3BlY2lmaWVzIHRoYXQgdGhlIGFubm90YXRpb24gaXMgcGFydCBvZiB0aGUgcHVibGljIEFQSSBhbmQgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSBjbGFzcyBvciBtZXRob2Qgc2lnbmF0dXJlIHNob3duIGluIHRoZSBnZW5lcmF0ZWQgQVBJIGRvY3VtZW50YXRpb24uXG4gIFxuYGBga290bGluXG5AVGFyZ2V0KEFubm90YXRpb25UYXJnZXQuQ0xBU1MsIEFubm90YXRpb25UYXJnZXQuRlVOQ1RJT04sXG4gICAgICAgIEFubm90YXRpb25UYXJnZXQuVkFMVUVfUEFSQU1FVEVSLCBBbm5vdGF0aW9uVGFyZ2V0LkVYUFJFU1NJT04pXG5AUmV0ZW50aW9uKEFubm90YXRpb25SZXRlbnRpb24uU09VUkNFKVxuQE11c3RCZURvY3VtZW50ZWRcbmFubm90YXRpb24gY2xhc3MgRmFuY3lcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/annotations.html#annotation-declaration"
            ],
            "flags": 0,
            "guid": "kSWVEU3ZZd",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Annotations",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Annotation</b> usage",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">@Fancy</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Foo</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">@Fancy</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">baz</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">@Fancy</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">@Fancy</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>If you need to annotate the primary constructor of a class, you need to add the <em class=\"keyword\">constructor</em> keyword to the constructor declaration, and add the annotations before it:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Foo</span> <span style=\"color: #000000\">@Inject</span> <span style=\"color: #000000\">constructor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">dependency</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MyDependency</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>You can also annotate property accessors:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Foo</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MyDependency</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n        <span style=\"color: #000000\">@Inject</span> <span style=\"color: #204a87; font-weight: bold\">set</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTIyMzUsICJpZCI6ICIxNDg4MDU0OTM2Njg4LTAwMSIsICJtZCI6ICJgYGBrb3RsaW5cbkBGYW5jeSBjbGFzcyBGb28ge1xuICAgIEBGYW5jeSBmdW4gYmF6KEBGYW5jeSBmb286IEludCk6IEludCB7XG4gICAgICAgIHJldHVybiAoQEZhbmN5IDEpXG4gICAgfVxufVxuYGBgXG4gIFxuSWYgeW91IG5lZWQgdG8gYW5ub3RhdGUgdGhlIHByaW1hcnkgY29uc3RydWN0b3Igb2YgYSBjbGFzcywgeW91IG5lZWQgdG8gYWRkIHRoZSAqY29uc3RydWN0b3IqezogLmtleXdvcmR9IGtleXdvcmQgdG8gdGhlIGNvbnN0cnVjdG9yIGRlY2xhcmF0aW9uLCBhbmQgYWRkIHRoZSBhbm5vdGF0aW9ucyBiZWZvcmUgaXQ6XG4gIFxuICBcbmBgYGtvdGxpblxuY2xhc3MgRm9vIEBJbmplY3QgY29uc3RydWN0b3IoZGVwZW5kZW5jeTogTXlEZXBlbmRlbmN5KSB7XG4gICAgLy8gLi4uXG59XG5gYGBcbiAgXG5Zb3UgY2FuIGFsc28gYW5ub3RhdGUgcHJvcGVydHkgYWNjZXNzb3JzOlxuICBcbmBgYGtvdGxpblxuY2xhc3MgRm9vIHtcbiAgICB2YXIgeDogTXlEZXBlbmRlbmN5PyA9IG51bGxcbiAgICAgICAgQEluamVjdCBzZXRcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/annotations.html#usage"
            ],
            "flags": 0,
            "guid": "oP!6%N?x&d",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Annotations",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Annotation</b>&nbsp;Constructors",
                "<p>Annotations may have constructors that take parameters.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">annotation</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Special</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">why</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #000000\">@Special</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"example\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Foo</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n</pre></div>\n<p>Allowed parameter types are:</p>\n<ul>\n<li align=\"left\">types that correspond to Java primitive types (Int, Long etc.);</li>\n<li align=\"left\">strings;</li>\n<li align=\"left\">classes (<code>Foo::class</code>);</li>\n<li align=\"left\">enums;</li>\n<li align=\"left\">other annotations;</li>\n<li align=\"left\">arrays of the types listed above.</li>\n</ul>\n<p>Annotation parameters cannot have nullable types, because the JVM does not support storing <code>null</code> as a value of an annotation attribute.</p>\n<p>If an annotation is used as a parameter of another annotation, its name is not prefixed with the @ character:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">annotation</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">ReplaceWith</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">expression</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">annotation</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Deprecated</span><span style=\"color: #000000; font-weight: bold\">(</span>\n        <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">message</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span>\n        <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">replaceWith</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ReplaceWith</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ReplaceWith</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"\"</span><span style=\"color: #000000; font-weight: bold\">))</span>\n\n<span style=\"color: #000000\">@Deprecated</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"This function is deprecated, use === instead\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">ReplaceWith</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"this === other\"</span><span style=\"color: #000000; font-weight: bold\">))</span>\n</pre></div>\n<p>If you need to specify a class as an argument of an annotation, use a Kotlin class (<a href=\"/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html\">KClass</a>). The Kotlin compiler will automatically convert it to a Java class, so that the Java code will be able to see the annotations and arguments normally.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">import</span> <span style=\"color: #000000\">kotlin.reflect.KClass</span>\n\n<span style=\"color: #204a87; font-weight: bold\">annotation</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Ann</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">arg1</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">KClass</span><span style=\"color: #000000; font-weight: bold\">&lt;*&gt;,</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">arg2</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">KClass</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #204a87; font-weight: bold\">out</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">?&gt;)</span>\n\n<span style=\"color: #000000\">@Ann</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">String</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #204a87; font-weight: bold\">class</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">Int</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #204a87; font-weight: bold\">class</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">MyClass</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTIyNjcsICJpZCI6ICIxNDg4MDU0OTU2OTI1LTAwMSIsICJtZCI6ICJBbm5vdGF0aW9ucyBtYXkgaGF2ZSBjb25zdHJ1Y3RvcnMgdGhhdCB0YWtlIHBhcmFtZXRlcnMuXG4gIFxuYGBga290bGluXG5hbm5vdGF0aW9uIGNsYXNzIFNwZWNpYWwodmFsIHdoeTogU3RyaW5nKVxuICBcbkBTcGVjaWFsKCZxdW90O2V4YW1wbGUmcXVvdDspIGNsYXNzIEZvbyB7fVxuYGBgXG4gIFxuQWxsb3dlZCBwYXJhbWV0ZXIgdHlwZXMgYXJlOlxuICBcbiAqIHR5cGVzIHRoYXQgY29ycmVzcG9uZCB0byBKYXZhIHByaW1pdGl2ZSB0eXBlcyAoSW50LCBMb25nIGV0Yy4pO1xuICogc3RyaW5ncztcbiAqIGNsYXNzZXMgKGBGb286OmNsYXNzYCk7XG4gKiBlbnVtcztcbiAqIG90aGVyIGFubm90YXRpb25zO1xuICogYXJyYXlzIG9mIHRoZSB0eXBlcyBsaXN0ZWQgYWJvdmUuXG4gIFxuQW5ub3RhdGlvbiBwYXJhbWV0ZXJzIGNhbm5vdCBoYXZlIG51bGxhYmxlIHR5cGVzLCBiZWNhdXNlIHRoZSBKVk0gZG9lcyBub3Qgc3VwcG9ydCBzdG9yaW5nIGBudWxsYCBhcyBhIHZhbHVlIG9mIGFuIGFubm90YXRpb24gYXR0cmlidXRlLlxuICBcbklmIGFuIGFubm90YXRpb24gaXMgdXNlZCBhcyBhIHBhcmFtZXRlciBvZiBhbm90aGVyIGFubm90YXRpb24sIGl0cyBuYW1lIGlzIG5vdCBwcmVmaXhlZCB3aXRoIHRoZSBAIGNoYXJhY3RlcjpcbiAgXG5gYGBrb3RsaW5cbmFubm90YXRpb24gY2xhc3MgUmVwbGFjZVdpdGgodmFsIGV4cHJlc3Npb246IFN0cmluZylcbiAgXG5hbm5vdGF0aW9uIGNsYXNzIERlcHJlY2F0ZWQoXG4gICAgICAgIHZhbCBtZXNzYWdlOiBTdHJpbmcsXG4gICAgICAgIHZhbCByZXBsYWNlV2l0aDogUmVwbGFjZVdpdGggPSBSZXBsYWNlV2l0aCgmcXVvdDsmcXVvdDspKVxuICBcbkBEZXByZWNhdGVkKCZxdW90O1RoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgdXNlID09PSBpbnN0ZWFkJnF1b3Q7LCBSZXBsYWNlV2l0aCgmcXVvdDt0aGlzID09PSBvdGhlciZxdW90OykpXG5gYGBcbiAgXG5JZiB5b3UgbmVlZCB0byBzcGVjaWZ5IGEgY2xhc3MgYXMgYW4gYXJndW1lbnQgb2YgYW4gYW5ub3RhdGlvbiwgdXNlIGEgS290bGluIGNsYXNzIChbS0NsYXNzXSgvYXBpL2xhdGVzdC9qdm0vc3RkbGliL2tvdGxpbi5yZWZsZWN0Ly1rLWNsYXNzL2luZGV4Lmh0bWwpKS4gVGhlIEtvdGxpbiBjb21waWxlciB3aWxsIGF1dG9tYXRpY2FsbHkgY29udmVydCBpdCB0byBhIEphdmEgY2xhc3MsIHNvIHRoYXQgdGhlIEphdmEgY29kZSB3aWxsIGJlIGFibGUgdG8gc2VlIHRoZSBhbm5vdGF0aW9ucyBhbmQgYXJndW1lbnRzIG5vcm1hbGx5LlxuICBcbmBgYGtvdGxpblxuICBcbmltcG9ydCBrb3RsaW4ucmVmbGVjdC5LQ2xhc3NcbiAgXG5hbm5vdGF0aW9uIGNsYXNzIEFubih2YWwgYXJnMTogS0NsYXNzJmx0OyomZ3Q7LCB2YWwgYXJnMjogS0NsYXNzJmx0O291dCBBbnk/Jmd0OylcbiAgXG5AQW5uKFN0cmluZzo6Y2xhc3MsIEludDo6Y2xhc3MpIGNsYXNzIE15Q2xhc3NcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/annotations.html#constructors"
            ],
            "flags": 0,
            "guid": "Am@d+*Zm&{",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Annotations",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Annotations</b> with&nbsp;<b>Lambdas</b>",
                "<p>Annotations can also be used on lambdas. They will be applied to the <code>invoke()</code> method into which the body of the lambda is generated.<br />\nThis is useful for frameworks like <a href=\"http://www.paralleluniverse.co/quasar/\">Quasar</a>, which uses annotations for concurrency control.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">annotation</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Suspendable</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">f</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">@Suspendable</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">Fiber</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">sleep</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">10</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTIyOTAsICJpZCI6ICIxNDg4MDU1MDAwNzg1LTAwMSIsICJtZCI6ICJBbm5vdGF0aW9ucyBjYW4gYWxzbyBiZSB1c2VkIG9uIGxhbWJkYXMuIFRoZXkgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBgaW52b2tlKClgIG1ldGhvZCBpbnRvIHdoaWNoIHRoZSBib2R5IG9mIHRoZSBsYW1iZGEgaXMgZ2VuZXJhdGVkLlxuVGhpcyBpcyB1c2VmdWwgZm9yIGZyYW1ld29ya3MgbGlrZSBbUXVhc2FyXShodHRwOi8vd3d3LnBhcmFsbGVsdW5pdmVyc2UuY28vcXVhc2FyLyksIHdoaWNoIHVzZXMgYW5ub3RhdGlvbnMgZm9yIGNvbmN1cnJlbmN5IGNvbnRyb2wuXG4gIFxuYGBga290bGluXG5hbm5vdGF0aW9uIGNsYXNzIFN1c3BlbmRhYmxlXG4gIFxudmFsIGYgPSBAU3VzcGVuZGFibGUgeyBGaWJlci5zbGVlcCgxMCkgfVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/annotations.html#lambdas"
            ],
            "flags": 0,
            "guid": "fy,bLou|>f",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Annotations",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Annotation</b> Use-site Targets",
                "<p>When you're annotating a property or a primary constructor parameter, there are multiple Java elements which are generated from the corresponding Kotlin element, and therefore multiple possible locations for the annotation in the generated Java bytecode.<br />\nTo specify how exactly the annotation should be generated, use the following syntax:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Example</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">@field</span><span style=\"color: #000000; font-weight: bold\">:</span><span style=\"color: #000000\">Ann</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">,</span>    <span style=\"color: #8f5902; font-style: italic\">// annotate Java field</span>\n              <span style=\"color: #000000\">@get</span><span style=\"color: #000000; font-weight: bold\">:</span><span style=\"color: #000000\">Ann</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">,</span>      <span style=\"color: #8f5902; font-style: italic\">// annotate Java getter</span>\n              <span style=\"color: #000000\">@param</span><span style=\"color: #000000; font-weight: bold\">:</span><span style=\"color: #000000\">Ann</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">quux</span><span style=\"color: #000000; font-weight: bold\">)</span>   <span style=\"color: #8f5902; font-style: italic\">// annotate Java constructor parameter</span>\n</pre></div>\n<p>The same syntax can be used to annotate the entire file. To do this, put an annotation with the target <code>file</code> at the top level of a file, before the package directive or before all imports if the file is in the default package:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">@file</span><span style=\"color: #000000; font-weight: bold\">:</span><span style=\"color: #000000\">JvmName</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Foo\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">package</span> <span style=\"color: #000000\">org.jetbrains.demo</span>\n</pre></div>\n<p>If you have multiple annotations with the same target, you can avoid repeating the target by adding brackets after the target and putting all the annotations inside the brackets:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Example</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n     <span style=\"color: #000000\">@set</span><span style=\"color: #000000; font-weight: bold\">:[</span><span style=\"color: #000000\">Inject</span> <span style=\"color: #000000\">VisibleForTesting</span><span style=\"color: #000000; font-weight: bold\">]</span>\n     <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">collaborator</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Collaborator</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The full list of supported use-site targets is:</p>\n<ul>\n<li align=\"left\"><code>file</code></li>\n<li align=\"left\"><code>property</code> (annotations with this target are not visible to Java)</li>\n<li align=\"left\"><code>field</code></li>\n<li align=\"left\"><code>get</code> (property getter)</li>\n<li align=\"left\"><code>set</code> (property setter)</li>\n<li align=\"left\"><code>receiver</code> (receiver parameter of an extension function or property)</li>\n<li align=\"left\"><code>param</code> (constructor parameter)</li>\n<li align=\"left\"><code>setparam</code> (property setter parameter)</li>\n<li align=\"left\"><code>delegate</code> (the field storing the delegate instance for a delegated property)</li>\n</ul>\n<p>To annotate the receiver parameter of an extension function, use the following syntax:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">@receiver</span><span style=\"color: #000000; font-weight: bold\">:</span><span style=\"color: #000000\">Fancy</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">myExtension</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>If you don't specify a use-site target, the target is chosen according to the <code>@Target</code> annotation of the annotation being used. If there are multiple applicable targets, the first applicable target from the following list is used:</p>\n<ul>\n<li align=\"left\"><code>param</code></li>\n<li align=\"left\"><code>property</code></li>\n<li align=\"left\"><code>field</code></li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTIzMzQsICJpZCI6ICIxNDg4MDU1MDI4Njk4LTAwMSIsICJtZCI6ICJXaGVuIHlvdSZhcG9zO3JlIGFubm90YXRpbmcgYSBwcm9wZXJ0eSBvciBhIHByaW1hcnkgY29uc3RydWN0b3IgcGFyYW1ldGVyLCB0aGVyZSBhcmUgbXVsdGlwbGUgSmF2YSBlbGVtZW50cyB3aGljaCBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIGNvcnJlc3BvbmRpbmcgS290bGluIGVsZW1lbnQsIGFuZCB0aGVyZWZvcmUgbXVsdGlwbGUgcG9zc2libGUgbG9jYXRpb25zIGZvciB0aGUgYW5ub3RhdGlvbiBpbiB0aGUgZ2VuZXJhdGVkIEphdmEgYnl0ZWNvZGUuXG5UbyBzcGVjaWZ5IGhvdyBleGFjdGx5IHRoZSBhbm5vdGF0aW9uIHNob3VsZCBiZSBnZW5lcmF0ZWQsIHVzZSB0aGUgZm9sbG93aW5nIHN5bnRheDpcbiAgXG5gYGBrb3RsaW5cbmNsYXNzIEV4YW1wbGUoQGZpZWxkOkFubiB2YWwgZm9vLCAgICAvLyBhbm5vdGF0ZSBKYXZhIGZpZWxkXG4gICAgICAgICAgICAgIEBnZXQ6QW5uIHZhbCBiYXIsICAgICAgLy8gYW5ub3RhdGUgSmF2YSBnZXR0ZXJcbiAgICAgICAgICAgICAgQHBhcmFtOkFubiB2YWwgcXV1eCkgICAvLyBhbm5vdGF0ZSBKYXZhIGNvbnN0cnVjdG9yIHBhcmFtZXRlclxuYGBgXG4gIFxuVGhlIHNhbWUgc3ludGF4IGNhbiBiZSB1c2VkIHRvIGFubm90YXRlIHRoZSBlbnRpcmUgZmlsZS4gVG8gZG8gdGhpcywgcHV0IGFuIGFubm90YXRpb24gd2l0aCB0aGUgdGFyZ2V0IGBmaWxlYCBhdCB0aGUgdG9wIGxldmVsIG9mIGEgZmlsZSwgYmVmb3JlIHRoZSBwYWNrYWdlIGRpcmVjdGl2ZSBvciBiZWZvcmUgYWxsIGltcG9ydHMgaWYgdGhlIGZpbGUgaXMgaW4gdGhlIGRlZmF1bHQgcGFja2FnZTpcbiAgXG5gYGBrb3RsaW5cbkBmaWxlOkp2bU5hbWUoJnF1b3Q7Rm9vJnF1b3Q7KVxuICBcbnBhY2thZ2Ugb3JnLmpldGJyYWlucy5kZW1vXG5gYGBcbiAgXG5JZiB5b3UgaGF2ZSBtdWx0aXBsZSBhbm5vdGF0aW9ucyB3aXRoIHRoZSBzYW1lIHRhcmdldCwgeW91IGNhbiBhdm9pZCByZXBlYXRpbmcgdGhlIHRhcmdldCBieSBhZGRpbmcgYnJhY2tldHMgYWZ0ZXIgdGhlIHRhcmdldCBhbmQgcHV0dGluZyBhbGwgdGhlIGFubm90YXRpb25zIGluc2lkZSB0aGUgYnJhY2tldHM6XG4gIFxuYGBga290bGluXG5jbGFzcyBFeGFtcGxlIHtcbiAgICAgQHNldDpbSW5qZWN0IFZpc2libGVGb3JUZXN0aW5nXVxuICAgICB2YXIgY29sbGFib3JhdG9yOiBDb2xsYWJvcmF0b3Jcbn1cbmBgYFxuICBcblRoZSBmdWxsIGxpc3Qgb2Ygc3VwcG9ydGVkIHVzZS1zaXRlIHRhcmdldHMgaXM6XG4gIFxuICAqIGBmaWxlYFxuICAqIGBwcm9wZXJ0eWAgKGFubm90YXRpb25zIHdpdGggdGhpcyB0YXJnZXQgYXJlIG5vdCB2aXNpYmxlIHRvIEphdmEpXG4gICogYGZpZWxkYFxuICAqIGBnZXRgIChwcm9wZXJ0eSBnZXR0ZXIpXG4gICogYHNldGAgKHByb3BlcnR5IHNldHRlcilcbiAgKiBgcmVjZWl2ZXJgIChyZWNlaXZlciBwYXJhbWV0ZXIgb2YgYW4gZXh0ZW5zaW9uIGZ1bmN0aW9uIG9yIHByb3BlcnR5KVxuICAqIGBwYXJhbWAgKGNvbnN0cnVjdG9yIHBhcmFtZXRlcilcbiAgKiBgc2V0cGFyYW1gIChwcm9wZXJ0eSBzZXR0ZXIgcGFyYW1ldGVyKVxuICAqIGBkZWxlZ2F0ZWAgKHRoZSBmaWVsZCBzdG9yaW5nIHRoZSBkZWxlZ2F0ZSBpbnN0YW5jZSBmb3IgYSBkZWxlZ2F0ZWQgcHJvcGVydHkpXG4gIFxuVG8gYW5ub3RhdGUgdGhlIHJlY2VpdmVyIHBhcmFtZXRlciBvZiBhbiBleHRlbnNpb24gZnVuY3Rpb24sIHVzZSB0aGUgZm9sbG93aW5nIHN5bnRheDpcbiAgXG5gYGBrb3RsaW5cbmZ1biBAcmVjZWl2ZXI6RmFuY3kgU3RyaW5nLm15RXh0ZW5zaW9uKCkgeyB9XG5gYGBcbiAgXG5JZiB5b3UgZG9uJmFwb3M7dCBzcGVjaWZ5IGEgdXNlLXNpdGUgdGFyZ2V0LCB0aGUgdGFyZ2V0IGlzIGNob3NlbiBhY2NvcmRpbmcgdG8gdGhlIGBAVGFyZ2V0YCBhbm5vdGF0aW9uIG9mIHRoZSBhbm5vdGF0aW9uIGJlaW5nIHVzZWQuIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBhcHBsaWNhYmxlIHRhcmdldHMsIHRoZSBmaXJzdCBhcHBsaWNhYmxlIHRhcmdldCBmcm9tIHRoZSBmb2xsb3dpbmcgbGlzdCBpcyB1c2VkOlxuICBcbiAgKiBgcGFyYW1gXG4gICogYHByb3BlcnR5YFxuICAqIGBmaWVsZGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/annotations.html#annotation-use-site-targets"
            ],
            "flags": 0,
            "guid": "y1zX]FOH$?",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Annotations",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Java <b>Annotations</b>",
                "<p>Java annotations are 100% compatible with Kotlin:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">import</span> <span style=\"color: #000000\">org.junit.Test</span>\n<span style=\"color: #204a87; font-weight: bold\">import</span> <span style=\"color: #000000\">org.junit.Assert.*</span>\n<span style=\"color: #204a87; font-weight: bold\">import</span> <span style=\"color: #000000\">org.junit.Rule</span>\n<span style=\"color: #204a87; font-weight: bold\">import</span> <span style=\"color: #000000\">org.junit.rules.*</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Tests</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// apply @Rule annotation to property getter</span>\n    <span style=\"color: #000000\">@get</span><span style=\"color: #000000; font-weight: bold\">:</span><span style=\"color: #000000\">Rule</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">tempFolder</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">TemporaryFolder</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n    <span style=\"color: #000000\">@Test</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">simple</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">f</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">tempFolder</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">newFile</span><span style=\"color: #000000; font-weight: bold\">()</span>\n        <span style=\"color: #000000\">assertEquals</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">42</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">getTheAnswer</span><span style=\"color: #000000; font-weight: bold\">())</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Since the order of parameters for an annotation written in Java is not defined, you can't use a regular function call syntax for passing the arguments. Instead, you need to use the named argument syntax.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #5c35cc; font-weight: bold\">@interface</span> <span style=\"color: #000000\">Ann</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">int</span> <span style=\"color: #000000\">intValue</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n    <span style=\"color: #000000\">String</span> <span style=\"color: #000000\">stringValue</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Kotlin</span>\n<span style=\"color: #000000\">@Ann</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">intValue</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">stringValue</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"abc\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span>\n</pre></div>\n<p>Just like in Java, a special case is the <code>value</code> parameter; its value can be specified without an explicit name.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #5c35cc; font-weight: bold\">@interface</span> <span style=\"color: #000000\">AnnWithValue</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">String</span> <span style=\"color: #000000\">value</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Kotlin</span>\n<span style=\"color: #000000\">@AnnWithValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"abc\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span>\n</pre></div>\n<p>If the <code>value</code> argument in Java has an array type, it becomes a <code>vararg</code> parameter in Kotlin:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #5c35cc; font-weight: bold\">@interface</span> <span style=\"color: #000000\">AnnWithArrayValue</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">String</span><span style=\"color: #ce5c00; font-weight: bold\">[]</span> <span style=\"color: #000000\">value</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Kotlin</span>\n<span style=\"color: #000000\">@AnnWithArrayValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"abc\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"foo\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"bar\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span>\n</pre></div>\n<p>For other arguments that have an array type, you need to use <code>arrayOf</code> explicitly:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #5c35cc; font-weight: bold\">@interface</span> <span style=\"color: #000000\">AnnWithArrayMethod</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">String</span><span style=\"color: #ce5c00; font-weight: bold\">[]</span> <span style=\"color: #000000\">names</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Kotlin</span>\n<span style=\"color: #000000\">@AnnWithArrayMethod</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">names</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">arrayOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"abc\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"foo\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"bar\"</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span>\n</pre></div>\n<p>Values of an annotation instance are exposed as properties to Kotlin code.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #5c35cc; font-weight: bold\">@interface</span> <span style=\"color: #000000\">Ann</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">int</span> <span style=\"color: #000000\">value</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Kotlin</span>\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ann</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Ann</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">i</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ann</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">value</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTIzNjksICJpZCI6ICIxNDg4MDU1MDc0NzQ1LTAwMSIsICJtZCI6ICJKYXZhIGFubm90YXRpb25zIGFyZSAxMDAlIGNvbXBhdGlibGUgd2l0aCBLb3RsaW46XG4gIFxuYGBga290bGluXG5pbXBvcnQgb3JnLmp1bml0LlRlc3RcbmltcG9ydCBvcmcuanVuaXQuQXNzZXJ0LipcbmltcG9ydCBvcmcuanVuaXQuUnVsZVxuaW1wb3J0IG9yZy5qdW5pdC5ydWxlcy4qXG4gIFxuY2xhc3MgVGVzdHMge1xuICAgIC8vIGFwcGx5IEBSdWxlIGFubm90YXRpb24gdG8gcHJvcGVydHkgZ2V0dGVyXG4gICAgQGdldDpSdWxlIHZhbCB0ZW1wRm9sZGVyID0gVGVtcG9yYXJ5Rm9sZGVyKClcbiAgXG4gICAgQFRlc3QgZnVuIHNpbXBsZSgpIHtcbiAgICAgICAgdmFsIGYgPSB0ZW1wRm9sZGVyLm5ld0ZpbGUoKVxuICAgICAgICBhc3NlcnRFcXVhbHMoNDIsIGdldFRoZUFuc3dlcigpKVxuICAgIH1cbn1cbmBgYFxuICBcblNpbmNlIHRoZSBvcmRlciBvZiBwYXJhbWV0ZXJzIGZvciBhbiBhbm5vdGF0aW9uIHdyaXR0ZW4gaW4gSmF2YSBpcyBub3QgZGVmaW5lZCwgeW91IGNhbiZhcG9zO3QgdXNlIGEgcmVndWxhciBmdW5jdGlvbiBjYWxsIHN5bnRheCBmb3IgcGFzc2luZyB0aGUgYXJndW1lbnRzLiBJbnN0ZWFkLCB5b3UgbmVlZCB0byB1c2UgdGhlIG5hbWVkIGFyZ3VtZW50IHN5bnRheC5cbiAgXG5gYGBqYXZhXG4vLyBKYXZhXG5wdWJsaWMgQGludGVyZmFjZSBBbm4ge1xuICAgIGludCBpbnRWYWx1ZSgpO1xuICAgIFN0cmluZyBzdHJpbmdWYWx1ZSgpO1xufVxuYGBgXG4gIFxuYGBga290bGluXG4vLyBLb3RsaW5cbkBBbm4oaW50VmFsdWUgPSAxLCBzdHJpbmdWYWx1ZSA9ICZxdW90O2FiYyZxdW90OykgY2xhc3MgQ1xuYGBgXG4gIFxuSnVzdCBsaWtlIGluIEphdmEsIGEgc3BlY2lhbCBjYXNlIGlzIHRoZSBgdmFsdWVgIHBhcmFtZXRlcjsgaXRzIHZhbHVlIGNhbiBiZSBzcGVjaWZpZWQgd2l0aG91dCBhbiBleHBsaWNpdCBuYW1lLlxuICBcbmBgYGphdmFcbi8vIEphdmFcbnB1YmxpYyBAaW50ZXJmYWNlIEFubldpdGhWYWx1ZSB7XG4gICAgU3RyaW5nIHZhbHVlKCk7XG59XG5gYGBcbiAgXG5gYGBrb3RsaW5cbi8vIEtvdGxpblxuQEFubldpdGhWYWx1ZSgmcXVvdDthYmMmcXVvdDspIGNsYXNzIENcbmBgYFxuICBcbklmIHRoZSBgdmFsdWVgIGFyZ3VtZW50IGluIEphdmEgaGFzIGFuIGFycmF5IHR5cGUsIGl0IGJlY29tZXMgYSBgdmFyYXJnYCBwYXJhbWV0ZXIgaW4gS290bGluOlxuICBcbmBgYGphdmFcbi8vIEphdmFcbnB1YmxpYyBAaW50ZXJmYWNlIEFubldpdGhBcnJheVZhbHVlIHtcbiAgICBTdHJpbmdbXSB2YWx1ZSgpO1xufVxuYGBgXG4gIFxuYGBga290bGluXG4vLyBLb3RsaW5cbkBBbm5XaXRoQXJyYXlWYWx1ZSgmcXVvdDthYmMmcXVvdDssICZxdW90O2ZvbyZxdW90OywgJnF1b3Q7YmFyJnF1b3Q7KSBjbGFzcyBDXG5gYGBcbiAgXG5Gb3Igb3RoZXIgYXJndW1lbnRzIHRoYXQgaGF2ZSBhbiBhcnJheSB0eXBlLCB5b3UgbmVlZCB0byB1c2UgYGFycmF5T2ZgIGV4cGxpY2l0bHk6XG4gIFxuYGBgamF2YVxuLy8gSmF2YVxucHVibGljIEBpbnRlcmZhY2UgQW5uV2l0aEFycmF5TWV0aG9kIHtcbiAgICBTdHJpbmdbXSBuYW1lcygpO1xufVxuYGBgXG4gIFxuYGBga290bGluXG4vLyBLb3RsaW5cbkBBbm5XaXRoQXJyYXlNZXRob2QobmFtZXMgPSBhcnJheU9mKCZxdW90O2FiYyZxdW90OywgJnF1b3Q7Zm9vJnF1b3Q7LCAmcXVvdDtiYXImcXVvdDspKSBjbGFzcyBDXG5gYGBcbiAgXG5WYWx1ZXMgb2YgYW4gYW5ub3RhdGlvbiBpbnN0YW5jZSBhcmUgZXhwb3NlZCBhcyBwcm9wZXJ0aWVzIHRvIEtvdGxpbiBjb2RlLlxuICBcbmBgYGphdmFcbi8vIEphdmFcbnB1YmxpYyBAaW50ZXJmYWNlIEFubiB7XG4gICAgaW50IHZhbHVlKCk7XG59XG5gYGBcbiAgXG5gYGBrb3RsaW5cbi8vIEtvdGxpblxuZnVuIGZvbyhhbm46IEFubikge1xuICAgIHZhbCBpID0gYW5uLnZhbHVlXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/annotations.html#java-annotations"
            ],
            "flags": 0,
            "guid": "rm}pZ_Apcv",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Annotations",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Reflection:</b>&nbsp;basic information",
                "<p>Reflection is a set of language and library features that allows for introspecting the structure of your own program at runtime.</p>\n<p>Kotlin makes functions and properties first-class citizens in the language, and introspecting them (i.e. learning a name or a type of a property or function at runtime) is closely intertwined with simply using a functional or reactive style.</p>\n<blockquote>\n<p class=\"note\">On the Java platform, the runtime component required for using the reflection features is distributed as a separate JAR file (<code>kotlin-reflect.jar</code>). This is done to reduce the required size of the runtime library for applications that do not use reflection features. If you do use reflection, please make sure that the .jar file is added to the classpath of your project.<br /></p>\n</blockquote><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTI1MzYsICJpZCI6ICIxNDg4MDU1MTY0NjI3LTAwMSIsICJtZCI6ICJSZWZsZWN0aW9uIGlzIGEgc2V0IG9mIGxhbmd1YWdlIGFuZCBsaWJyYXJ5IGZlYXR1cmVzIHRoYXQgYWxsb3dzIGZvciBpbnRyb3NwZWN0aW5nIHRoZSBzdHJ1Y3R1cmUgb2YgeW91ciBvd24gcHJvZ3JhbSBhdCBydW50aW1lLlxuICBcbktvdGxpbiBtYWtlcyBmdW5jdGlvbnMgYW5kIHByb3BlcnRpZXMgZmlyc3QtY2xhc3MgY2l0aXplbnMgaW4gdGhlIGxhbmd1YWdlLCBhbmQgaW50cm9zcGVjdGluZyB0aGVtIChpLmUuIGxlYXJuaW5nIGEgbmFtZSBvciBhIHR5cGUgb2YgYSBwcm9wZXJ0eSBvciBmdW5jdGlvbiBhdCBydW50aW1lKSBpcyBjbG9zZWx5IGludGVydHdpbmVkIHdpdGggc2ltcGx5IHVzaW5nIGEgZnVuY3Rpb25hbCBvciByZWFjdGl2ZSBzdHlsZS5cbiAgXG4mZ3Q7IE9uIHRoZSBKYXZhIHBsYXRmb3JtLCB0aGUgcnVudGltZSBjb21wb25lbnQgcmVxdWlyZWQgZm9yIHVzaW5nIHRoZSByZWZsZWN0aW9uIGZlYXR1cmVzIGlzIGRpc3RyaWJ1dGVkIGFzIGEgc2VwYXJhdGUgSkFSIGZpbGUgKGBrb3RsaW4tcmVmbGVjdC5qYXJgKS4gVGhpcyBpcyBkb25lIHRvIHJlZHVjZSB0aGUgcmVxdWlyZWQgc2l6ZSBvZiB0aGUgcnVudGltZSBsaWJyYXJ5IGZvciBhcHBsaWNhdGlvbnMgdGhhdCBkbyBub3QgdXNlIHJlZmxlY3Rpb24gZmVhdHVyZXMuIElmIHlvdSBkbyB1c2UgcmVmbGVjdGlvbiwgcGxlYXNlIG1ha2Ugc3VyZSB0aGF0IHRoZSAuamFyIGZpbGUgaXMgYWRkZWQgdG8gdGhlIGNsYXNzcGF0aCBvZiB5b3VyIHByb2plY3QuXG57OiAubm90ZX1cbiJ9---->",
                "https://kotlinlang.org/docs/reference/reflection.html#reflection"
            ],
            "flags": 0,
            "guid": "k2HYKgZZL8",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Reflection"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Reflection:&nbsp;</b>Class References",
                "<p>The most basic reflection feature is getting the runtime reference to a Kotlin class. To obtain the reference to a statically known Kotlin class, you can use the <em>class literal</em> syntax:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">c</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">MyClass</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #204a87; font-weight: bold\">class</span>\n</pre></div>\n<p>The reference is a value of type <a href=\"/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html\">KClass</a>.</p>\n<p>Note that a Kotlin class reference is not the same as a Java class reference. To obtain a Java class reference, use the <code>.java</code> property on a <code>KClass</code> instance.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTI1NTUsICJpZCI6ICIxNDg4MDU1MjI1NDg0LTAwMSIsICJtZCI6ICJUaGUgbW9zdCBiYXNpYyByZWZsZWN0aW9uIGZlYXR1cmUgaXMgZ2V0dGluZyB0aGUgcnVudGltZSByZWZlcmVuY2UgdG8gYSBLb3RsaW4gY2xhc3MuIFRvIG9idGFpbiB0aGUgcmVmZXJlbmNlIHRvIGEgc3RhdGljYWxseSBrbm93biBLb3RsaW4gY2xhc3MsIHlvdSBjYW4gdXNlIHRoZSBfY2xhc3MgbGl0ZXJhbF8gc3ludGF4OlxuICBcbmBgYGtvdGxpblxudmFsIGMgPSBNeUNsYXNzOjpjbGFzc1xuYGBgXG4gIFxuVGhlIHJlZmVyZW5jZSBpcyBhIHZhbHVlIG9mIHR5cGUgW0tDbGFzc10oL2FwaS9sYXRlc3QvanZtL3N0ZGxpYi9rb3RsaW4ucmVmbGVjdC8tay1jbGFzcy9pbmRleC5odG1sKS5cbiAgXG5Ob3RlIHRoYXQgYSBLb3RsaW4gY2xhc3MgcmVmZXJlbmNlIGlzIG5vdCB0aGUgc2FtZSBhcyBhIEphdmEgY2xhc3MgcmVmZXJlbmNlLiBUbyBvYnRhaW4gYSBKYXZhIGNsYXNzIHJlZmVyZW5jZSwgdXNlIHRoZSBgLmphdmFgIHByb3BlcnR5IG9uIGEgYEtDbGFzc2AgaW5zdGFuY2UuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/reflection.html#class-references"
            ],
            "flags": 0,
            "guid": "EM{s{MsfqP",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Reflection"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Reflection:</b> Function <b>References</b>",
                "<p>When we have a named function declared like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">isOdd</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">%</span> <span style=\"color: #0000cf; font-weight: bold\">2</span> <span style=\"color: #000000; font-weight: bold\">!=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n</pre></div>\n<p>We can easily call it directly (<code>isOdd(5)</code>), but we can also pass it as a value, e.g. to another function.<br />\nTo do this, we use the <code>::</code> operator:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">numbers</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">numbers</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">isOdd</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #8f5902; font-style: italic\">// prints [1, 3]</span>\n</pre></div>\n<p>Here <code>::isOdd</code> is a value of function type <code>(Int) -&gt; Boolean</code>.</p>\n<p><code>::</code> can be used with overloaded functions when the expected type is known from the context.<br />\nFor example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">isOdd</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">%</span> <span style=\"color: #0000cf; font-weight: bold\">2</span> <span style=\"color: #000000; font-weight: bold\">!=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">isOdd</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">s</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">s</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #4e9a06\">\"brillig\"</span> <span style=\"color: #000000; font-weight: bold\">||</span> <span style=\"color: #000000\">s</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #4e9a06\">\"slithy\"</span> <span style=\"color: #000000; font-weight: bold\">||</span> <span style=\"color: #000000\">s</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #4e9a06\">\"tove\"</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">numbers</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">numbers</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">isOdd</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #8f5902; font-style: italic\">// refers to isOdd(x: Int)</span>\n</pre></div>\n<p>Alternatively, you can provide the necessary context by storing the method reference in a variable with an explicitly specified type:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">predicate</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Boolean</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">isOdd</span>   <span style=\"color: #8f5902; font-style: italic\">// refers to isOdd(x: String)</span>\n</pre></div>\n<p>If we need to use a member of a class, or an extension function, it needs to be qualified.<br />\ne.g. <code>String::toCharArray</code> gives us an extension function for type <code>String</code>: <code>String.() -&gt; CharArray</code>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTI2MjAsICJpZCI6ICIxNDg4MDU1MjUzNTI4LTAwMSIsICJtZCI6ICJXaGVuIHdlIGhhdmUgYSBuYW1lZCBmdW5jdGlvbiBkZWNsYXJlZCBsaWtlIHRoaXM6XG4gIFxuYGBga290bGluXG5mdW4gaXNPZGQoeDogSW50KSA9IHggJSAyICE9IDBcbmBgYFxuICBcbldlIGNhbiBlYXNpbHkgY2FsbCBpdCBkaXJlY3RseSAoYGlzT2RkKDUpYCksIGJ1dCB3ZSBjYW4gYWxzbyBwYXNzIGl0IGFzIGEgdmFsdWUsIGUuZy4gdG8gYW5vdGhlciBmdW5jdGlvbi5cblRvIGRvIHRoaXMsIHdlIHVzZSB0aGUgYDo6YCBvcGVyYXRvcjpcbiAgXG5gYGBrb3RsaW5cbnZhbCBudW1iZXJzID0gbGlzdE9mKDEsIDIsIDMpXG5wcmludGxuKG51bWJlcnMuZmlsdGVyKDo6aXNPZGQpKSAvLyBwcmludHMgWzEsIDNdXG5gYGBcbiAgXG5IZXJlIGA6OmlzT2RkYCBpcyBhIHZhbHVlIG9mIGZ1bmN0aW9uIHR5cGUgYChJbnQpIC0mZ3Q7IEJvb2xlYW5gLlxuICBcbmA6OmAgY2FuIGJlIHVzZWQgd2l0aCBvdmVybG9hZGVkIGZ1bmN0aW9ucyB3aGVuIHRoZSBleHBlY3RlZCB0eXBlIGlzIGtub3duIGZyb20gdGhlIGNvbnRleHQuXG5Gb3IgZXhhbXBsZTpcbiAgXG5gYGBrb3RsaW5cbmZ1biBpc09kZCh4OiBJbnQpID0geCAlIDIgIT0gMFxuZnVuIGlzT2RkKHM6IFN0cmluZykgPSBzID09ICZxdW90O2JyaWxsaWcmcXVvdDsgfHwgcyA9PSAmcXVvdDtzbGl0aHkmcXVvdDsgfHwgcyA9PSAmcXVvdDt0b3ZlJnF1b3Q7XG4gIFxudmFsIG51bWJlcnMgPSBsaXN0T2YoMSwgMiwgMylcbnByaW50bG4obnVtYmVycy5maWx0ZXIoOjppc09kZCkpIC8vIHJlZmVycyB0byBpc09kZCh4OiBJbnQpXG5gYGBcbiAgXG5BbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHByb3ZpZGUgdGhlIG5lY2Vzc2FyeSBjb250ZXh0IGJ5IHN0b3JpbmcgdGhlIG1ldGhvZCByZWZlcmVuY2UgaW4gYSB2YXJpYWJsZSB3aXRoIGFuIGV4cGxpY2l0bHkgc3BlY2lmaWVkIHR5cGU6XG4gIFxuYGBga290bGluXG52YWwgcHJlZGljYXRlOiAoU3RyaW5nKSAtJmd0OyBCb29sZWFuID0gOjppc09kZCAgIC8vIHJlZmVycyB0byBpc09kZCh4OiBTdHJpbmcpXG5gYGBcbiAgXG5JZiB3ZSBuZWVkIHRvIHVzZSBhIG1lbWJlciBvZiBhIGNsYXNzLCBvciBhbiBleHRlbnNpb24gZnVuY3Rpb24sIGl0IG5lZWRzIHRvIGJlIHF1YWxpZmllZC5cbmUuZy4gYFN0cmluZzo6dG9DaGFyQXJyYXlgIGdpdmVzIHVzIGFuIGV4dGVuc2lvbiBmdW5jdGlvbiBmb3IgdHlwZSBgU3RyaW5nYDogYFN0cmluZy4oKSAtJmd0OyBDaGFyQXJyYXlgLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/reflection.html#function-references"
            ],
            "flags": 0,
            "guid": "zu:pHg_Puf",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Reflection"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Reflection:</b> Property <b>References</b>",
                "<p>To access properties as first-class objects in Kotlin, we can also use the <code>::</code> operator:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">var</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">())</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"1\"</span>\n    <span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #204a87; font-weight: bold\">set</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span>         <span style=\"color: #8f5902; font-style: italic\">// prints \"2\"</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The expression <code>::x</code> evaluates to a property object of type <code>KProperty&lt;Int&gt;</code>, which allows us to read its value using <code>get()</code> or retrieve the property name using the <code>name</code> property.<br />\nFor more information, please refer to the <a href=\"/api/latest/jvm/stdlib/kotlin.reflect/-k-property/index.html\">docs on the <code>KProperty</code> class</a>.</p>\n<p>For a mutable property, e.g. <code>var y = 1</code>, <code>::y</code> returns a value of type <a href=\"/api/latest/jvm/stdlib/kotlin.reflect/-k-mutable-property/index.html\"><code>KMutableProperty&lt;Int&gt;</code></a>, which has a <code>set()</code> method.</p>\n<p>A property reference can be used where a function with no parameters is expected:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">strs</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"bc\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"def\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">strs</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">String</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">length</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #8f5902; font-style: italic\">// prints [1, 2, 3]</span>\n</pre></div>\n<p>To access a property that is a member of a class, we qualify it:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">prop</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">A</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">p</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)))</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"1\"</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>For an extension property:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">lastChar</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Char</span>\n    <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">length</span> <span style=\"color: #000000; font-weight: bold\">-</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">]</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">String</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">lastChar</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"abc\"</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"c\"</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTI2OTMsICJpZCI6ICIxNDg4MDU1MzA4NTk3LTAwMSIsICJtZCI6ICJUbyBhY2Nlc3MgcHJvcGVydGllcyBhcyBmaXJzdC1jbGFzcyBvYmplY3RzIGluIEtvdGxpbiwgd2UgY2FuIGFsc28gdXNlIHRoZSBgOjpgIG9wZXJhdG9yOlxuICBcbmBgYGtvdGxpblxudmFyIHggPSAxXG4gIFxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHByaW50bG4oOjp4LmdldCgpKSAvLyBwcmludHMgJnF1b3Q7MSZxdW90O1xuICAgIDo6eC5zZXQoMilcbiAgICBwcmludGxuKHgpICAgICAgICAgLy8gcHJpbnRzICZxdW90OzImcXVvdDtcbn1cbmBgYFxuICBcblRoZSBleHByZXNzaW9uIGA6OnhgIGV2YWx1YXRlcyB0byBhIHByb3BlcnR5IG9iamVjdCBvZiB0eXBlIGBLUHJvcGVydHkmbHQ7SW50Jmd0O2AsIHdoaWNoIGFsbG93cyB1cyB0byByZWFkIGl0cyB2YWx1ZSB1c2luZyBgZ2V0KClgIG9yIHJldHJpZXZlIHRoZSBwcm9wZXJ0eSBuYW1lIHVzaW5nIHRoZSBgbmFtZWAgcHJvcGVydHkuXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHJlZmVyIHRvIHRoZSBbZG9jcyBvbiB0aGUgYEtQcm9wZXJ0eWAgY2xhc3NdKC9hcGkvbGF0ZXN0L2p2bS9zdGRsaWIva290bGluLnJlZmxlY3QvLWstcHJvcGVydHkvaW5kZXguaHRtbCkuXG4gIFxuRm9yIGEgbXV0YWJsZSBwcm9wZXJ0eSwgZS5nLiBgdmFyIHkgPSAxYCwgYDo6eWAgcmV0dXJucyBhIHZhbHVlIG9mIHR5cGUgW2BLTXV0YWJsZVByb3BlcnR5Jmx0O0ludCZndDtgXSgvYXBpL2xhdGVzdC9qdm0vc3RkbGliL2tvdGxpbi5yZWZsZWN0Ly1rLW11dGFibGUtcHJvcGVydHkvaW5kZXguaHRtbCksIHdoaWNoIGhhcyBhIGBzZXQoKWAgbWV0aG9kLlxuICBcbkEgcHJvcGVydHkgcmVmZXJlbmNlIGNhbiBiZSB1c2VkIHdoZXJlIGEgZnVuY3Rpb24gd2l0aCBubyBwYXJhbWV0ZXJzIGlzIGV4cGVjdGVkOlxuIFxuYGBga290bGluXG52YWwgc3RycyA9IGxpc3RPZigmcXVvdDthJnF1b3Q7LCAmcXVvdDtiYyZxdW90OywgJnF1b3Q7ZGVmJnF1b3Q7KVxucHJpbnRsbihzdHJzLm1hcChTdHJpbmc6Omxlbmd0aCkpIC8vIHByaW50cyBbMSwgMiwgM11cbmBgYFxuICBcblRvIGFjY2VzcyBhIHByb3BlcnR5IHRoYXQgaXMgYSBtZW1iZXIgb2YgYSBjbGFzcywgd2UgcXVhbGlmeSBpdDpcbiAgXG5gYGBrb3RsaW5cbmNsYXNzIEEodmFsIHA6IEludClcbiAgXG5mdW4gbWFpbihhcmdzOiBBcnJheSZsdDtTdHJpbmcmZ3Q7KSB7XG4gICAgdmFsIHByb3AgPSBBOjpwXG4gICAgcHJpbnRsbihwcm9wLmdldChBKDEpKSkgLy8gcHJpbnRzICZxdW90OzEmcXVvdDtcbn1cbmBgYFxuICBcbkZvciBhbiBleHRlbnNpb24gcHJvcGVydHk6XG4gIFxuICBcbmBgYGtvdGxpblxudmFsIFN0cmluZy5sYXN0Q2hhcjogQ2hhclxuICAgIGdldCgpID0gdGhpc1tsZW5ndGggLSAxXVxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICBwcmludGxuKFN0cmluZzo6bGFzdENoYXIuZ2V0KCZxdW90O2FiYyZxdW90OykpIC8vIHByaW50cyAmcXVvdDtjJnF1b3Q7XG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/reflection.html#property-references"
            ],
            "flags": 0,
            "guid": "gSE(z2zhLr",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Reflection"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Interoperability With Java <b>Reflection</b>",
                "<p>On the Java platform, standard library contains extensions for reflection classes that provide a mapping to and from Java reflection objects (see package <code>kotlin.reflect.jvm</code>).<br />\nFor example, to find a backing field or a Java method that serves as a getter for a Kotlin property, you can say something like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">import</span> <span style=\"color: #000000\">kotlin.reflect.jvm.*</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">A</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">javaGetter</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"public final int A.getP()\"</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">A</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">javaField</span><span style=\"color: #000000; font-weight: bold\">)</span>  <span style=\"color: #8f5902; font-style: italic\">// prints \"private final int A.p\"</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>To get the Kotlin class corresponding to a Java class, use the <code>.kotlin</code> extension property:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">getKClass</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">o</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">KClass</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">o</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">javaClass</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">kotlin</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTI3MjUsICJpZCI6ICIxNDg4MDU1MzY4MDA2LTAwMSIsICJtZCI6ICJPbiB0aGUgSmF2YSBwbGF0Zm9ybSwgc3RhbmRhcmQgbGlicmFyeSBjb250YWlucyBleHRlbnNpb25zIGZvciByZWZsZWN0aW9uIGNsYXNzZXMgdGhhdCBwcm92aWRlIGEgbWFwcGluZyB0byBhbmQgZnJvbSBKYXZhIHJlZmxlY3Rpb24gb2JqZWN0cyAoc2VlIHBhY2thZ2UgYGtvdGxpbi5yZWZsZWN0Lmp2bWApLlxuRm9yIGV4YW1wbGUsIHRvIGZpbmQgYSBiYWNraW5nIGZpZWxkIG9yIGEgSmF2YSBtZXRob2QgdGhhdCBzZXJ2ZXMgYXMgYSBnZXR0ZXIgZm9yIGEgS290bGluIHByb3BlcnR5LCB5b3UgY2FuIHNheSBzb21ldGhpbmcgbGlrZSB0aGlzOlxuICBcbiAgXG5gYGBrb3RsaW5cbmltcG9ydCBrb3RsaW4ucmVmbGVjdC5qdm0uKlxuIFxuY2xhc3MgQSh2YWwgcDogSW50KVxuIFxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHByaW50bG4oQTo6cC5qYXZhR2V0dGVyKSAvLyBwcmludHMgJnF1b3Q7cHVibGljIGZpbmFsIGludCBBLmdldFAoKSZxdW90O1xuICAgIHByaW50bG4oQTo6cC5qYXZhRmllbGQpICAvLyBwcmludHMgJnF1b3Q7cHJpdmF0ZSBmaW5hbCBpbnQgQS5wJnF1b3Q7XG59XG5gYGBcbiAgXG5UbyBnZXQgdGhlIEtvdGxpbiBjbGFzcyBjb3JyZXNwb25kaW5nIHRvIGEgSmF2YSBjbGFzcywgdXNlIHRoZSBgLmtvdGxpbmAgZXh0ZW5zaW9uIHByb3BlcnR5OlxuICBcbmBgYGtvdGxpblxuZnVuIGdldEtDbGFzcyhvOiBBbnkpOiBLQ2xhc3MmbHQ7QW55Jmd0OyA9IG8uamF2YUNsYXNzLmtvdGxpblxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/reflection.html#interoperability-with-java-reflection"
            ],
            "flags": 0,
            "guid": "pm:v4]?akb",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Reflection"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Reflection:</b> Constructor <b>References</b>",
                "<p>Constructors can be referenced just like methods and properties. They can be used wherever an object of function type is expected that takes the same parameters as the constructor and returns an object of the appropriate type.</p>\n<p>Constructors are referenced by using the <code>::</code> operator and adding the class name.<br />\nConsider the following function that expects a function parameter with no parameters and return type <code>Foo</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Foo</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">function</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">factory</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Foo</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Foo</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">factory</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Using <code>::Foo</code>, the zero-argument constructor of the class Foo, we can simply call it like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">function</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">Foo</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTI1OTU0NzgsICJpZCI6ICIxNDg4MDU1MzgzNDA2LTAwMSIsICJtZCI6ICJDb25zdHJ1Y3RvcnMgY2FuIGJlIHJlZmVyZW5jZWQganVzdCBsaWtlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMuIFRoZXkgY2FuIGJlIHVzZWQgd2hlcmV2ZXIgYW4gb2JqZWN0IG9mIGZ1bmN0aW9uIHR5cGUgaXMgZXhwZWN0ZWQgdGhhdCB0YWtlcyB0aGUgc2FtZSBwYXJhbWV0ZXJzIGFzIHRoZSBjb25zdHJ1Y3RvciBhbmQgcmV0dXJucyBhbiBvYmplY3Qgb2YgdGhlIGFwcHJvcHJpYXRlIHR5cGUuXG4gIFxuQ29uc3RydWN0b3JzIGFyZSByZWZlcmVuY2VkIGJ5IHVzaW5nIHRoZSBgOjpgIG9wZXJhdG9yIGFuZCBhZGRpbmcgdGhlIGNsYXNzIG5hbWUuXG5Db25zaWRlciB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uIHRoYXQgZXhwZWN0cyBhIGZ1bmN0aW9uIHBhcmFtZXRlciB3aXRoIG5vIHBhcmFtZXRlcnMgYW5kIHJldHVybiB0eXBlIGBGb29gOlxuICBcbmBgYGtvdGxpblxuY2xhc3MgRm9vXG4gIFxuZnVuIGZ1bmN0aW9uKGZhY3Rvcnk6ICgpIC0mZ3Q7IEZvbykge1xuICAgIHZhbCB4OiBGb28gPSBmYWN0b3J5KClcbn1cbmBgYFxuICBcblVzaW5nIGA6OkZvb2AsIHRoZSB6ZXJvLWFyZ3VtZW50IGNvbnN0cnVjdG9yIG9mIHRoZSBjbGFzcyBGb28sIHdlIGNhbiBzaW1wbHkgY2FsbCBpdCBsaWtlIHRoaXM6XG4gIFxuYGBga290bGluXG5mdW5jdGlvbig6OkZvbylcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/reflection.html#constructor-references"
            ],
            "flags": 0,
            "guid": "#FfD:BBnf",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Reflection"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Type-Safe <b>Builders:</b>&nbsp;basic information",
                "<p>The concept of <a href=\"http://www.groovy-lang.org/dsls.html#_nodebuilder\">builders</a> is rather popular in the <em>Groovy</em> community.<br />\nBuilders allow for defining data in a semi-declarative way. Builders are good for <a href=\"http://www.groovy-lang.org/processing-xml.html#_creating_xml\">generating XML</a>, <a href=\"http://www.groovy-lang.org/swing.html\">laying out UI components</a>, <a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=296081\">describing 3D scenes</a> and more...</p>\n<p>For many use cases, Kotlin allows to <em>type-check</em> builders, which makes them even more attractive than the dynamically-typed implementation made in Groovy itself.</p>\n<p>For the rest of the cases, Kotlin supports Dynamic types builders.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTI4ODgsICJpZCI6ICIxNDg4MDU1NDA1MjExLTAwMSIsICJtZCI6ICJUaGUgY29uY2VwdCBvZiBbYnVpbGRlcnNdKGh0dHA6Ly93d3cuZ3Jvb3Z5LWxhbmcub3JnL2RzbHMuaHRtbCNfbm9kZWJ1aWxkZXIpIGlzIHJhdGhlciBwb3B1bGFyIGluIHRoZSAqR3Jvb3Z5KiBjb21tdW5pdHkuXG5CdWlsZGVycyBhbGxvdyBmb3IgZGVmaW5pbmcgZGF0YSBpbiBhIHNlbWktZGVjbGFyYXRpdmUgd2F5LiBCdWlsZGVycyBhcmUgZ29vZCBmb3IgW2dlbmVyYXRpbmcgWE1MXShodHRwOi8vd3d3Lmdyb292eS1sYW5nLm9yZy9wcm9jZXNzaW5nLXhtbC5odG1sI19jcmVhdGluZ194bWwpLCBbbGF5aW5nIG91dCBVSSBjb21wb25lbnRzXShodHRwOi8vd3d3Lmdyb292eS1sYW5nLm9yZy9zd2luZy5odG1sKSwgW2Rlc2NyaWJpbmcgM0Qgc2NlbmVzXShodHRwOi8vd3d3LmFydGltYS5jb20vd2VibG9ncy92aWV3cG9zdC5qc3A/dGhyZWFkPTI5NjA4MSkgYW5kIG1vcmUuLi5cbiAgXG5Gb3IgbWFueSB1c2UgY2FzZXMsIEtvdGxpbiBhbGxvd3MgdG8gKnR5cGUtY2hlY2sqIGJ1aWxkZXJzLCB3aGljaCBtYWtlcyB0aGVtIGV2ZW4gbW9yZSBhdHRyYWN0aXZlIHRoYW4gdGhlIGR5bmFtaWNhbGx5LXR5cGVkIGltcGxlbWVudGF0aW9uIG1hZGUgaW4gR3Jvb3Z5IGl0c2VsZi5cbiAgXG5Gb3IgdGhlIHJlc3Qgb2YgdGhlIGNhc2VzLCBLb3RsaW4gc3VwcG9ydHMgRHluYW1pYyB0eXBlcyBidWlsZGVycy5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/type-safe-builders.html#type-safe-builders"
            ],
            "flags": 0,
            "guid": "cv]ayQfUDa",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "TypeSafeBuilders"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Classes</b>",
                "<p>Classes in Kotlin are declared using the keyword <em class=\"keyword\">class</em>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Invoice</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The class declaration consists of the class name, the class header (specifying its type parameters, the primary constructor etc.) and the class body, surrounded by curly braces.<br />\nBoth the header and the body are optional; if the class has no body, curly braces can be omitted.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Empty</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjAzODEsICJpZCI6ICIxNDg4MTAyNjQ0MjU0LTAwMSIsICJtZCI6ICJDbGFzc2VzIGluIEtvdGxpbiBhcmUgZGVjbGFyZWQgdXNpbmcgdGhlIGtleXdvcmQgKmNsYXNzKns6IC5rZXl3b3JkIH06XG4gIFxuYGBgIGtvdGxpblxuY2xhc3MgSW52b2ljZSB7XG59XG5gYGBcbiAgXG5UaGUgY2xhc3MgZGVjbGFyYXRpb24gY29uc2lzdHMgb2YgdGhlIGNsYXNzIG5hbWUsIHRoZSBjbGFzcyBoZWFkZXIgKHNwZWNpZnlpbmcgaXRzIHR5cGUgcGFyYW1ldGVycywgdGhlIHByaW1hcnkgY29uc3RydWN0b3IgZXRjLikgYW5kIHRoZSBjbGFzcyBib2R5LCBzdXJyb3VuZGVkIGJ5IGN1cmx5IGJyYWNlcy5cbkJvdGggdGhlIGhlYWRlciBhbmQgdGhlIGJvZHkgYXJlIG9wdGlvbmFsOyBpZiB0aGUgY2xhc3MgaGFzIG5vIGJvZHksIGN1cmx5IGJyYWNlcyBjYW4gYmUgb21pdHRlZC5cbiAgXG5gYGAga290bGluXG5jbGFzcyBFbXB0eVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/classes.html#classes"
            ],
            "flags": 0,
            "guid": "gv7{GL+`(m",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndInheritance",
                "ClassesAndObjects",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Constructors</b>",
                "<p>A class in Kotlin can have a <strong>primary constructor</strong> and one or more <strong>secondary constructors</strong>.<br />\nThe <code class=\"kbd\">primary constructor is part of the class header</code>: it goes after the class name (and optional type parameters).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk5MjcyODEsICJpZCI6ICIxNDg4MTAyNjg3MTM0LTAwMSIsICJtZCI6ICJBIGNsYXNzIGluIEtvdGxpbiBjYW4gaGF2ZSBhICoqcHJpbWFyeSBjb25zdHJ1Y3RvcioqIGFuZCBvbmUgb3IgbW9yZSAqKnNlY29uZGFyeSBjb25zdHJ1Y3RvcnMqKi5cblRoZSBgcHJpbWFyeSBjb25zdHJ1Y3RvciBpcyBwYXJ0IG9mIHRoZSBjbGFzcyBoZWFkZXJgezogLmtiZH06IGl0IGdvZXMgYWZ0ZXIgdGhlIGNsYXNzIG5hbWUgKGFuZCBvcHRpb25hbCB0eXBlIHBhcmFtZXRlcnMpLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/classes.html#constructors"
            ],
            "flags": 0,
            "guid": "u$;o@-6+|K",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndInheritance",
                "ClassesAndObjects",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Primary</b>&nbsp;constructors",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Person</span> <span style=\"color: #000000\">constructor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">firstName</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>If the primary constructor does not have any annotations or visibility modifiers, the <em class=\"keyword\">constructor</em> keyword can be omitted:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Person</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">firstName</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p><strong>The primary constructor cannot contain any code.</strong> Initialization code can be placed in <strong>initializer blocks</strong>, which are prefixed with the <em class=\"keyword\">init</em> keyword:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Customer</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">init</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">logger</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">info</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Customer initialized with value ${name}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Note that parameters of the primary constructor can be used in the initializer blocks. They can also be used in property initializers declared in the class body:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Customer</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">customerKey</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toUpperCase</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>In fact, for declaring properties and initializing them from the primary constructor, Kotlin has a concise syntax:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Person</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">firstName</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">lastName</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Much the same way as regular properties, the properties declared in the primary constructor can be<br />\nmutable (<em class=\"keyword\">var</em>) or read-only (<em class=\"keyword\">val</em>).</p>\n<p>If the constructor has annotations or visibility modifiers, the <em class=\"keyword\">constructor</em> keyword is required, and the modifiers go before it:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Customer</span> <span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #000000\">@Inject</span> <span style=\"color: #000000\">constructor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTMxMTIwNzAsICJpZCI6ICIxNDg4MTAyNzI3MzAwLTAwMSIsICJtZCI6ICJgYGAga290bGluXG5jbGFzcyBQZXJzb24gY29uc3RydWN0b3IoZmlyc3ROYW1lOiBTdHJpbmcpIHtcbn1cbmBgYFxuICBcbklmIHRoZSBwcmltYXJ5IGNvbnN0cnVjdG9yIGRvZXMgbm90IGhhdmUgYW55IGFubm90YXRpb25zIG9yIHZpc2liaWxpdHkgbW9kaWZpZXJzLCB0aGUgKmNvbnN0cnVjdG9yKns6IC5rZXl3b3JkIH0ga2V5d29yZCBjYW4gYmUgb21pdHRlZDpcbiAgXG5gYGAga290bGluXG5jbGFzcyBQZXJzb24oZmlyc3ROYW1lOiBTdHJpbmcpIHtcbn1cbmBgYFxuICBcbioqVGhlIHByaW1hcnkgY29uc3RydWN0b3IgY2Fubm90IGNvbnRhaW4gYW55IGNvZGUuKiogSW5pdGlhbGl6YXRpb24gY29kZSBjYW4gYmUgcGxhY2VkIGluICoqaW5pdGlhbGl6ZXIgYmxvY2tzKiosIHdoaWNoIGFyZSBwcmVmaXhlZCB3aXRoIHRoZSAqaW5pdCp7OiAua2V5d29yZCB9IGtleXdvcmQ6XG4gIFxuYGBgIGtvdGxpblxuY2xhc3MgQ3VzdG9tZXIobmFtZTogU3RyaW5nKSB7XG4gICAgaW5pdCB7XG4gICAgICAgIGxvZ2dlci5pbmZvKCZxdW90O0N1c3RvbWVyIGluaXRpYWxpemVkIHdpdGggdmFsdWUgJHtuYW1lfSZxdW90OylcbiAgICB9XG59XG5gYGBcbiAgXG5Ob3RlIHRoYXQgcGFyYW1ldGVycyBvZiB0aGUgcHJpbWFyeSBjb25zdHJ1Y3RvciBjYW4gYmUgdXNlZCBpbiB0aGUgaW5pdGlhbGl6ZXIgYmxvY2tzLiBUaGV5IGNhbiBhbHNvIGJlIHVzZWQgaW4gcHJvcGVydHkgaW5pdGlhbGl6ZXJzIGRlY2xhcmVkIGluIHRoZSBjbGFzcyBib2R5OlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIEN1c3RvbWVyKG5hbWU6IFN0cmluZykge1xuICAgIHZhbCBjdXN0b21lcktleSA9IG5hbWUudG9VcHBlckNhc2UoKVxufVxuYGBgXG4gIFxuSW4gZmFjdCwgZm9yIGRlY2xhcmluZyBwcm9wZXJ0aWVzIGFuZCBpbml0aWFsaXppbmcgdGhlbSBmcm9tIHRoZSBwcmltYXJ5IGNvbnN0cnVjdG9yLCBLb3RsaW4gaGFzIGEgY29uY2lzZSBzeW50YXg6XG4gIFxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIFBlcnNvbih2YWwgZmlyc3ROYW1lOiBTdHJpbmcsIHZhbCBsYXN0TmFtZTogU3RyaW5nLCB2YXIgYWdlOiBJbnQpIHtcbiAgICAvLyAuLi5cbn1cbmBgYFxuICBcbk11Y2ggdGhlIHNhbWUgd2F5IGFzIHJlZ3VsYXIgcHJvcGVydGllcywgdGhlIHByb3BlcnRpZXMgZGVjbGFyZWQgaW4gdGhlIHByaW1hcnkgY29uc3RydWN0b3IgY2FuIGJlXG5tdXRhYmxlICgqdmFyKns6IC5rZXl3b3JkIH0pIG9yIHJlYWQtb25seSAoKnZhbCp7OiAua2V5d29yZCB9KS5cbiAgXG5JZiB0aGUgY29uc3RydWN0b3IgaGFzIGFubm90YXRpb25zIG9yIHZpc2liaWxpdHkgbW9kaWZpZXJzLCB0aGUgKmNvbnN0cnVjdG9yKns6IC5rZXl3b3JkIH0ga2V5d29yZCBpcyByZXF1aXJlZCwgYW5kIHRoZSBtb2RpZmllcnMgZ28gYmVmb3JlIGl0OlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIEN1c3RvbWVyIHB1YmxpYyBASW5qZWN0IGNvbnN0cnVjdG9yKG5hbWU6IFN0cmluZykgeyAuLi4gfVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/classes.html#constructors"
            ],
            "flags": 0,
            "guid": "Du%v_%n45#",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndInheritance",
                "ClassesAndObjects",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Secondary</b> Constructors",
                "<p>The class can also declare <strong>secondary constructors</strong>, which are prefixed with <em class=\"keyword\">constructor</em>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Person</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">constructor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">parent</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Person</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">parent</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">children</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>If the class has a primary constructor, each secondary constructor needs to delegate to the primary constructor, either<br />\ndirectly or indirectly through another secondary constructor(s). Delegation to another constructor of the same class is done using the <em class=\"keyword\">this</em> keyword:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Person</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">constructor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">parent</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Person</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">parent</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">children</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>If a non-abstract class does not declare any constructors (primary or secondary), it will have a generated primary constructor with no arguments. The visibility of the constructor will be public. If you do not want your class to have a public constructor, you need to declare an empty primary constructor with non-default visibility:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">DontCreateMe</span> <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #000000\">constructor</span> <span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<blockquote>\n<p><strong>NOTE</strong>: On the JVM, if all of the parameters of the primary constructor have default values, the compiler will<br />\ngenerate an additional parameterless constructor which will use the default values. This makes it easier to use<br />\nKotlin with libraries such as Jackson or JPA that create class instances through parameterless constructors.</p>\n</blockquote>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Customer</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">customerName</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA0MzMsICJpZCI6ICIxNDg4MTAyNzY5OTU2LTAwMSIsICJtZCI6ICJUaGUgY2xhc3MgY2FuIGFsc28gZGVjbGFyZSAqKnNlY29uZGFyeSBjb25zdHJ1Y3RvcnMqKiwgd2hpY2ggYXJlIHByZWZpeGVkIHdpdGggKmNvbnN0cnVjdG9yKns6IC5rZXl3b3JkIH06XG4gIFxuYGBgIGtvdGxpblxuY2xhc3MgUGVyc29uIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQ6IFBlcnNvbikge1xuICAgICAgICBwYXJlbnQuY2hpbGRyZW4uYWRkKHRoaXMpXG4gICAgfVxufVxuYGBgXG4gIFxuSWYgdGhlIGNsYXNzIGhhcyBhIHByaW1hcnkgY29uc3RydWN0b3IsIGVhY2ggc2Vjb25kYXJ5IGNvbnN0cnVjdG9yIG5lZWRzIHRvIGRlbGVnYXRlIHRvIHRoZSBwcmltYXJ5IGNvbnN0cnVjdG9yLCBlaXRoZXJcbmRpcmVjdGx5IG9yIGluZGlyZWN0bHkgdGhyb3VnaCBhbm90aGVyIHNlY29uZGFyeSBjb25zdHJ1Y3RvcihzKS4gRGVsZWdhdGlvbiB0byBhbm90aGVyIGNvbnN0cnVjdG9yIG9mIHRoZSBzYW1lIGNsYXNzIGlzIGRvbmUgdXNpbmcgdGhlICp0aGlzKns6IC5rZXl3b3JkIH0ga2V5d29yZDpcbiAgXG5gYGAga290bGluXG5jbGFzcyBQZXJzb24odmFsIG5hbWU6IFN0cmluZykge1xuICAgIGNvbnN0cnVjdG9yKG5hbWU6IFN0cmluZywgcGFyZW50OiBQZXJzb24pIDogdGhpcyhuYW1lKSB7XG4gICAgICAgIHBhcmVudC5jaGlsZHJlbi5hZGQodGhpcylcbiAgICB9XG59XG5gYGBcbiAgXG5JZiBhIG5vbi1hYnN0cmFjdCBjbGFzcyBkb2VzIG5vdCBkZWNsYXJlIGFueSBjb25zdHJ1Y3RvcnMgKHByaW1hcnkgb3Igc2Vjb25kYXJ5KSwgaXQgd2lsbCBoYXZlIGEgZ2VuZXJhdGVkIHByaW1hcnkgY29uc3RydWN0b3Igd2l0aCBubyBhcmd1bWVudHMuIFRoZSB2aXNpYmlsaXR5IG9mIHRoZSBjb25zdHJ1Y3RvciB3aWxsIGJlIHB1YmxpYy4gSWYgeW91IGRvIG5vdCB3YW50IHlvdXIgY2xhc3MgdG8gaGF2ZSBhIHB1YmxpYyBjb25zdHJ1Y3RvciwgeW91IG5lZWQgdG8gZGVjbGFyZSBhbiBlbXB0eSBwcmltYXJ5IGNvbnN0cnVjdG9yIHdpdGggbm9uLWRlZmF1bHQgdmlzaWJpbGl0eTpcbiAgXG5gYGAga290bGluXG5jbGFzcyBEb250Q3JlYXRlTWUgcHJpdmF0ZSBjb25zdHJ1Y3RvciAoKSB7XG59XG5gYGBcbiAgXG4mZ3Q7ICoqTk9URSoqOiBPbiB0aGUgSlZNLCBpZiBhbGwgb2YgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIHByaW1hcnkgY29uc3RydWN0b3IgaGF2ZSBkZWZhdWx0IHZhbHVlcywgdGhlIGNvbXBpbGVyIHdpbGxcbiZndDsgZ2VuZXJhdGUgYW4gYWRkaXRpb25hbCBwYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yIHdoaWNoIHdpbGwgdXNlIHRoZSBkZWZhdWx0IHZhbHVlcy4gVGhpcyBtYWtlcyBpdCBlYXNpZXIgdG8gdXNlXG4mZ3Q7IEtvdGxpbiB3aXRoIGxpYnJhcmllcyBzdWNoIGFzIEphY2tzb24gb3IgSlBBIHRoYXQgY3JlYXRlIGNsYXNzIGluc3RhbmNlcyB0aHJvdWdoIHBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3JzLlxuJmd0O1xuYGBgIGtvdGxpblxuY2xhc3MgQ3VzdG9tZXIodmFsIGN1c3RvbWVyTmFtZTogU3RyaW5nID0gJnF1b3Q7JnF1b3Q7KVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/classes.html#constructors"
            ],
            "flags": 0,
            "guid": "os`lXI23_s",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndInheritance",
                "ClassesAndObjects",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Creating instances</b> of classes",
                "<p>To create an instance of a class, we call the constructor as if it were a regular function:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">invoice</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Invoice</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">customer</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Customer</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Joe Smith\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>Note that Kotlin does not have a <em class=\"keyword\">new</em> keyword.</p>\n<p>Creating instances of nested, inner and anonymous inner classes is described in <a href=\"nested-classes.html\">Nested classes</a>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4Mjg4OTcsICJpZCI6ICIxNDg4MTAyODIxOTMzLTAwMSIsICJtZCI6ICJUbyBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgYSBjbGFzcywgd2UgY2FsbCB0aGUgY29uc3RydWN0b3IgYXMgaWYgaXQgd2VyZSBhIHJlZ3VsYXIgZnVuY3Rpb246XG4gIFxuYGBgIGtvdGxpblxudmFsIGludm9pY2UgPSBJbnZvaWNlKClcbiAgXG52YWwgY3VzdG9tZXIgPSBDdXN0b21lcigmcXVvdDtKb2UgU21pdGgmcXVvdDspXG5gYGBcbiAgXG5Ob3RlIHRoYXQgS290bGluIGRvZXMgbm90IGhhdmUgYSAqbmV3Kns6IC5rZXl3b3JkIH0ga2V5d29yZC5cbiAgXG5DcmVhdGluZyBpbnN0YW5jZXMgb2YgbmVzdGVkLCBpbm5lciBhbmQgYW5vbnltb3VzIGlubmVyIGNsYXNzZXMgaXMgZGVzY3JpYmVkIGluIFtOZXN0ZWQgY2xhc3Nlc10obmVzdGVkLWNsYXNzZXMuaHRtbCkuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/classes.html#creating-instances-of-classes"
            ],
            "flags": 0,
            "guid": "IS_>Qns1pj",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndInheritance",
                "ClassesAndObjects",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Class <b>Members</b>",
                "<p>Classes can contain:</p>\n<ul>\n<li align=\"left\">Constructors and initializer blocks</li>\n<li align=\"left\"><a href=\"functions.html\">Functions</a></li>\n<li align=\"left\"><a href=\"properties.html\">Properties</a></li>\n<li align=\"left\"><a href=\"nested-classes.html\">Nested and Inner Classes</a></li>\n<li align=\"left\"><a href=\"object-declarations.html\">Object Declarations</a></li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4Mjg5MjUsICJpZCI6ICIxNDg4MTAyODQ1OTk4LTAwMSIsICJtZCI6ICJDbGFzc2VzIGNhbiBjb250YWluOlxuICBcbiogQ29uc3RydWN0b3JzIGFuZCBpbml0aWFsaXplciBibG9ja3NcbiogW0Z1bmN0aW9uc10oZnVuY3Rpb25zLmh0bWwpXG4qIFtQcm9wZXJ0aWVzXShwcm9wZXJ0aWVzLmh0bWwpXG4qIFtOZXN0ZWQgYW5kIElubmVyIENsYXNzZXNdKG5lc3RlZC1jbGFzc2VzLmh0bWwpXG4qIFtPYmplY3QgRGVjbGFyYXRpb25zXShvYmplY3QtZGVjbGFyYXRpb25zLmh0bWwpXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/classes.html#class-members"
            ],
            "flags": 0,
            "guid": "N4^2}>t2mN",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndInheritance",
                "ClassesAndObjects",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Inheritance</b>",
                "<p>All classes in Kotlin have a common superclass <code>Any</code>, that is a default super for a class with no supertypes declared:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Example</span> <span style=\"color: #8f5902; font-style: italic\">// Implicitly inherits from Any</span>\n</pre></div>\n<p><code>Any</code> is not <code>java.lang.Object</code>; in particular, it does not have any members other than <code>equals()</code>, <code>hashCode()</code> and <code>toString()</code>.<br />\nPlease consult the <a href=\"java-interop.html#object-methods\">Java interoperability</a> section for more details.</p>\n<p>To declare an explicit supertype, we place the type after a colon in the class header:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Base</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Derived</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Base</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>If the class has a primary constructor, the base type can (and must) be initialized right there, using the parameters of the primary constructor.</p>\n<p>If the class has no primary constructor, then each secondary constructor has to initialize the base type using the <em class=\"keyword\">super</em> keyword, or to delegate to another constructor which does that.<br />\nNote that in this case different secondary constructors can call different constructors of the base type:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">MyView</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">View</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">constructor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ctx</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Context</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #204a87; font-weight: bold\">super</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ctx</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #000000\">constructor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ctx</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Context</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">attrs</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">AttributeSet</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #204a87; font-weight: bold\">super</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ctx</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">attrs</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The <em class=\"keyword\">open</em> annotation on a class is the opposite of Java's <em class=\"keyword\">final</em>: it allows others to inherit from this class. By default, all classes in Kotlin are final, which corresponds to <a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\">Effective Java</a>, Item 17: <em>Design and document for inheritance or else prohibit it</em>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA0NjQsICJpZCI6ICIxNDg4MTAyODU4NDAzLTAwMSIsICJtZCI6ICJBbGwgY2xhc3NlcyBpbiBLb3RsaW4gaGF2ZSBhIGNvbW1vbiBzdXBlcmNsYXNzIGBBbnlgLCB0aGF0IGlzIGEgZGVmYXVsdCBzdXBlciBmb3IgYSBjbGFzcyB3aXRoIG5vIHN1cGVydHlwZXMgZGVjbGFyZWQ6XG4gIFxuYGBgIGtvdGxpblxuY2xhc3MgRXhhbXBsZSAvLyBJbXBsaWNpdGx5IGluaGVyaXRzIGZyb20gQW55XG5gYGBcbiAgXG5gQW55YCBpcyBub3QgYGphdmEubGFuZy5PYmplY3RgOyBpbiBwYXJ0aWN1bGFyLCBpdCBkb2VzIG5vdCBoYXZlIGFueSBtZW1iZXJzIG90aGVyIHRoYW4gYGVxdWFscygpYCwgYGhhc2hDb2RlKClgIGFuZCBgdG9TdHJpbmcoKWAuXG5QbGVhc2UgY29uc3VsdCB0aGUgW0phdmEgaW50ZXJvcGVyYWJpbGl0eV0oamF2YS1pbnRlcm9wLmh0bWwjb2JqZWN0LW1ldGhvZHMpIHNlY3Rpb24gZm9yIG1vcmUgZGV0YWlscy5cbiAgXG5UbyBkZWNsYXJlIGFuIGV4cGxpY2l0IHN1cGVydHlwZSwgd2UgcGxhY2UgdGhlIHR5cGUgYWZ0ZXIgYSBjb2xvbiBpbiB0aGUgY2xhc3MgaGVhZGVyOlxuICBcbmBgYCBrb3RsaW5cbm9wZW4gY2xhc3MgQmFzZShwOiBJbnQpXG4gIFxuY2xhc3MgRGVyaXZlZChwOiBJbnQpIDogQmFzZShwKVxuYGBgXG4gIFxuSWYgdGhlIGNsYXNzIGhhcyBhIHByaW1hcnkgY29uc3RydWN0b3IsIHRoZSBiYXNlIHR5cGUgY2FuIChhbmQgbXVzdCkgYmUgaW5pdGlhbGl6ZWQgcmlnaHQgdGhlcmUsIHVzaW5nIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBwcmltYXJ5IGNvbnN0cnVjdG9yLlxuICBcbklmIHRoZSBjbGFzcyBoYXMgbm8gcHJpbWFyeSBjb25zdHJ1Y3RvciwgdGhlbiBlYWNoIHNlY29uZGFyeSBjb25zdHJ1Y3RvciBoYXMgdG8gaW5pdGlhbGl6ZSB0aGUgYmFzZSB0eXBlIHVzaW5nIHRoZSAqc3VwZXIqezogLmtleXdvcmQgfSBrZXl3b3JkLCBvciB0byBkZWxlZ2F0ZSB0byBhbm90aGVyIGNvbnN0cnVjdG9yIHdoaWNoIGRvZXMgdGhhdC5cbk5vdGUgdGhhdCBpbiB0aGlzIGNhc2UgZGlmZmVyZW50IHNlY29uZGFyeSBjb25zdHJ1Y3RvcnMgY2FuIGNhbGwgZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBvZiB0aGUgYmFzZSB0eXBlOlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIE15VmlldyA6IFZpZXcge1xuICAgIGNvbnN0cnVjdG9yKGN0eDogQ29udGV4dCkgOiBzdXBlcihjdHgpXG4gIFxuICAgIGNvbnN0cnVjdG9yKGN0eDogQ29udGV4dCwgYXR0cnM6IEF0dHJpYnV0ZVNldCkgOiBzdXBlcihjdHgsIGF0dHJzKVxufVxuYGBgXG4gIFxuVGhlICpvcGVuKns6IC5rZXl3b3JkIH0gYW5ub3RhdGlvbiBvbiBhIGNsYXNzIGlzIHRoZSBvcHBvc2l0ZSBvZiBKYXZhJmFwb3M7cyAqZmluYWwqezogLmtleXdvcmQgfTogaXQgYWxsb3dzIG90aGVycyB0byBpbmhlcml0IGZyb20gdGhpcyBjbGFzcy4gQnkgZGVmYXVsdCwgYWxsIGNsYXNzZXMgaW4gS290bGluIGFyZSBmaW5hbCwgd2hpY2ggY29ycmVzcG9uZHMgdG8gW0VmZmVjdGl2ZSBKYXZhXShodHRwOi8vd3d3Lm9yYWNsZS5jb20vdGVjaG5ldHdvcmsvamF2YS9lZmZlY3RpdmVqYXZhLTEzNjE3NC5odG1sKSwgSXRlbSAxNzogKkRlc2lnbiBhbmQgZG9jdW1lbnQgZm9yIGluaGVyaXRhbmNlIG9yIGVsc2UgcHJvaGliaXQgaXQqLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/classes.html#inheritance"
            ],
            "flags": 0,
            "guid": "I{eBsd_f*[",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndInheritance",
                "ClassesAndObjects",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Overriding</b> Methods",
                "<p>As we mentioned before, we stick to making things explicit in Kotlin. And unlike Java, Kotlin requires explicit annotations for overridable members (we call them <em>open</em>) and for overrides:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Base</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">v</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">nv</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Derived</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Base</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">v</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The <em class=\"keyword\">override</em> annotation is required for <code>Derived.v()</code>. If it were missing, the compiler would complain.<br />\nIf there is no <em class=\"keyword\">open</em> annotation on a function, like <code>Base.nv()</code>, declaring a method with the same signature in a subclass is illegal, either with <em class=\"keyword\">override</em> or without it. In a final class (e.g. a class with no <em class=\"keyword\">open</em> annotation), open members are prohibited.</p>\n<p>A member marked <em class=\"keyword\">override</em> is itself open, i.e. it may be overridden in subclasses. <br />\nIf you want to prohibit re-overriding, use <em class=\"keyword\">final</em>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">AnotherDerived</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Base</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">final</span> <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">v</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA0ODYsICJpZCI6ICIxNDg4MTAyODgwMTkzLTAwMSIsICJtZCI6ICJBcyB3ZSBtZW50aW9uZWQgYmVmb3JlLCB3ZSBzdGljayB0byBtYWtpbmcgdGhpbmdzIGV4cGxpY2l0IGluIEtvdGxpbi4gQW5kIHVubGlrZSBKYXZhLCBLb3RsaW4gcmVxdWlyZXMgZXhwbGljaXQgYW5ub3RhdGlvbnMgZm9yIG92ZXJyaWRhYmxlIG1lbWJlcnMgKHdlIGNhbGwgdGhlbSAqb3BlbiopIGFuZCBmb3Igb3ZlcnJpZGVzOlxuICBcbmBgYCBrb3RsaW5cbm9wZW4gY2xhc3MgQmFzZSB7XG4gICAgb3BlbiBmdW4gdigpIHt9XG4gICAgZnVuIG52KCkge31cbn1cbmNsYXNzIERlcml2ZWQoKSA6IEJhc2UoKSB7XG4gICAgb3ZlcnJpZGUgZnVuIHYoKSB7fVxufVxuYGBgXG4gIFxuVGhlICpvdmVycmlkZSp7OiAua2V5d29yZCB9IGFubm90YXRpb24gaXMgcmVxdWlyZWQgZm9yIGBEZXJpdmVkLnYoKWAuIElmIGl0IHdlcmUgbWlzc2luZywgdGhlIGNvbXBpbGVyIHdvdWxkIGNvbXBsYWluLlxuSWYgdGhlcmUgaXMgbm8gKm9wZW4qezogLmtleXdvcmQgfSBhbm5vdGF0aW9uIG9uIGEgZnVuY3Rpb24sIGxpa2UgYEJhc2UubnYoKWAsIGRlY2xhcmluZyBhIG1ldGhvZCB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZSBpbiBhIHN1YmNsYXNzIGlzIGlsbGVnYWwsIGVpdGhlciB3aXRoICpvdmVycmlkZSp7OiAua2V5d29yZCB9IG9yIHdpdGhvdXQgaXQuIEluIGEgZmluYWwgY2xhc3MgKGUuZy4gYSBjbGFzcyB3aXRoIG5vICpvcGVuKns6IC5rZXl3b3JkIH0gYW5ub3RhdGlvbiksIG9wZW4gbWVtYmVycyBhcmUgcHJvaGliaXRlZC5cbiAgXG5BIG1lbWJlciBtYXJrZWQgKm92ZXJyaWRlKns6IC5rZXl3b3JkIH0gaXMgaXRzZWxmIG9wZW4sIGkuZS4gaXQgbWF5IGJlIG92ZXJyaWRkZW4gaW4gc3ViY2xhc3Nlcy4gXG5JZiB5b3Ugd2FudCB0byBwcm9oaWJpdCByZS1vdmVycmlkaW5nLCB1c2UgKmZpbmFsKns6IC5rZXl3b3JkIH06XG4gIFxuYGBgIGtvdGxpblxub3BlbiBjbGFzcyBBbm90aGVyRGVyaXZlZCgpIDogQmFzZSgpIHtcbiAgICBmaW5hbCBvdmVycmlkZSBmdW4gdigpIHt9XG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/classes.html#overriding-methods"
            ],
            "flags": 0,
            "guid": "rbV.pJw]++",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndInheritance",
                "ClassesAndObjects",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Overriding</b> Properties",
                "<p>Overriding properties works in a similar way to overriding methods; properties declared on a superclass that are then redeclared on a derived class must be prefaced with <em class=\"keyword\">override</em>, and they must have a compatible type. Each declared property can be overridden by a property with an initializer or by a property with a getter method.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Foo</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #204a87; font-weight: bold\">get</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Bar1</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>You can also override a <code>val</code> property with a <code>var</code> property, but not vice versa. This is allowed because a <code>val</code> property essentially declares a getter method, and overriding it as a <code>var</code> additionally declares a setter method in the derived class.</p>\n<p>Note that you can use the <em class=\"keyword\">override</em> keyword as part of the property declaration in a primary constructor.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">Foo</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">count</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Bar1</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">count</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Foo</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Bar2</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Foo</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">count</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4Mjg5OTIsICJpZCI6ICIxNDg4MTAyOTAxMDcwLTAwMSIsICJtZCI6ICJPdmVycmlkaW5nIHByb3BlcnRpZXMgd29ya3MgaW4gYSBzaW1pbGFyIHdheSB0byBvdmVycmlkaW5nIG1ldGhvZHM7IHByb3BlcnRpZXMgZGVjbGFyZWQgb24gYSBzdXBlcmNsYXNzIHRoYXQgYXJlIHRoZW4gcmVkZWNsYXJlZCBvbiBhIGRlcml2ZWQgY2xhc3MgbXVzdCBiZSBwcmVmYWNlZCB3aXRoICpvdmVycmlkZSp7OiAua2V5d29yZCB9LCBhbmQgdGhleSBtdXN0IGhhdmUgYSBjb21wYXRpYmxlIHR5cGUuIEVhY2ggZGVjbGFyZWQgcHJvcGVydHkgY2FuIGJlIG92ZXJyaWRkZW4gYnkgYSBwcm9wZXJ0eSB3aXRoIGFuIGluaXRpYWxpemVyIG9yIGJ5IGEgcHJvcGVydHkgd2l0aCBhIGdldHRlciBtZXRob2QuXG4gIFxuYGBgIGtvdGxpblxub3BlbiBjbGFzcyBGb28ge1xuICAgIG9wZW4gdmFsIHg6IEludCBnZXQgeyAuLi4gfVxufVxuICBcbmNsYXNzIEJhcjEgOiBGb28oKSB7XG4gICAgb3ZlcnJpZGUgdmFsIHg6IEludCA9IC4uLlxufVxuYGBgXG4gIFxuWW91IGNhbiBhbHNvIG92ZXJyaWRlIGEgYHZhbGAgcHJvcGVydHkgd2l0aCBhIGB2YXJgIHByb3BlcnR5LCBidXQgbm90IHZpY2UgdmVyc2EuIFRoaXMgaXMgYWxsb3dlZCBiZWNhdXNlIGEgYHZhbGAgcHJvcGVydHkgZXNzZW50aWFsbHkgZGVjbGFyZXMgYSBnZXR0ZXIgbWV0aG9kLCBhbmQgb3ZlcnJpZGluZyBpdCBhcyBhIGB2YXJgIGFkZGl0aW9uYWxseSBkZWNsYXJlcyBhIHNldHRlciBtZXRob2QgaW4gdGhlIGRlcml2ZWQgY2xhc3MuXG4gIFxuTm90ZSB0aGF0IHlvdSBjYW4gdXNlIHRoZSAqb3ZlcnJpZGUqezogLmtleXdvcmQgfSBrZXl3b3JkIGFzIHBhcnQgb2YgdGhlIHByb3BlcnR5IGRlY2xhcmF0aW9uIGluIGEgcHJpbWFyeSBjb25zdHJ1Y3Rvci5cbiAgXG5gYGAga290bGluIFxuaW50ZXJmYWNlIEZvbyB7XG4gICAgdmFsIGNvdW50OiBJbnRcbn1cbiAgXG5jbGFzcyBCYXIxKG92ZXJyaWRlIHZhbCBjb3VudDogSW50KSA6IEZvb1xuICBcbmNsYXNzIEJhcjIgOiBGb28ge1xuICAgIG92ZXJyaWRlIHZhciBjb3VudDogSW50ID0gMFxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/classes.html#overriding-properties"
            ],
            "flags": 0,
            "guid": "Ds9SC{QL*:",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndInheritance",
                "ClassesAndObjects",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Overriding</b> Rules",
                "<p>In Kotlin, implementation inheritance is regulated by the following rule: if a class inherits many implementations of the same member from its immediate superclasses, it must override this member and provide its own implementation (perhaps, using one of the inherited ones).<br />\nTo denote the supertype from which the inherited implementation is taken, we use <em class=\"keyword\">super</em> qualified by the supertype name in angle brackets, e.g. <code>super&lt;Base&gt;</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">A</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"A\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">B</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"B\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #8f5902; font-style: italic\">// interface members are 'open' by default</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"b\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">(),</span> <span style=\"color: #000000\">B</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// The compiler requires f() to be overridden:</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">super</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #8f5902; font-style: italic\">// call to A.f()</span>\n        <span style=\"color: #204a87; font-weight: bold\">super</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">B</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #8f5902; font-style: italic\">// call to B.f()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>It's fine to inherit from both <code>A</code> and <code>B</code>, and we have no problems with <code>a()</code> and <code>b()</code> since <code>C</code> inherits only one implementation of each of these functions.<br />\nBut for <code>f()</code> we have two implementations inherited by <code>C</code>, and thus we have to override <code>f()</code> in <code>C</code> and provide our own implementation that eliminates the ambiguity.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA1MTIsICJpZCI6ICIxNDg4MTAyOTIzNzA3LTAwMSIsICJtZCI6ICJJbiBLb3RsaW4sIGltcGxlbWVudGF0aW9uIGluaGVyaXRhbmNlIGlzIHJlZ3VsYXRlZCBieSB0aGUgZm9sbG93aW5nIHJ1bGU6IGlmIGEgY2xhc3MgaW5oZXJpdHMgbWFueSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIHNhbWUgbWVtYmVyIGZyb20gaXRzIGltbWVkaWF0ZSBzdXBlcmNsYXNzZXMsIGl0IG11c3Qgb3ZlcnJpZGUgdGhpcyBtZW1iZXIgYW5kIHByb3ZpZGUgaXRzIG93biBpbXBsZW1lbnRhdGlvbiAocGVyaGFwcywgdXNpbmcgb25lIG9mIHRoZSBpbmhlcml0ZWQgb25lcykuXG5UbyBkZW5vdGUgdGhlIHN1cGVydHlwZSBmcm9tIHdoaWNoIHRoZSBpbmhlcml0ZWQgaW1wbGVtZW50YXRpb24gaXMgdGFrZW4sIHdlIHVzZSAqc3VwZXIqezogLmtleXdvcmQgfSBxdWFsaWZpZWQgYnkgdGhlIHN1cGVydHlwZSBuYW1lIGluIGFuZ2xlIGJyYWNrZXRzLCBlLmcuIGBzdXBlciZsdDtCYXNlJmd0O2A6XG4gIFxuYGBgIGtvdGxpblxub3BlbiBjbGFzcyBBIHtcbiAgICBvcGVuIGZ1biBmKCkgeyBwcmludCgmcXVvdDtBJnF1b3Q7KSB9XG4gICAgZnVuIGEoKSB7IHByaW50KCZxdW90O2EmcXVvdDspIH1cbn1cbiAgXG5pbnRlcmZhY2UgQiB7XG4gICAgZnVuIGYoKSB7IHByaW50KCZxdW90O0ImcXVvdDspIH0gLy8gaW50ZXJmYWNlIG1lbWJlcnMgYXJlICZhcG9zO29wZW4mYXBvczsgYnkgZGVmYXVsdFxuICAgIGZ1biBiKCkgeyBwcmludCgmcXVvdDtiJnF1b3Q7KSB9XG59XG4gIFxuY2xhc3MgQygpIDogQSgpLCBCIHtcbiAgICAvLyBUaGUgY29tcGlsZXIgcmVxdWlyZXMgZigpIHRvIGJlIG92ZXJyaWRkZW46XG4gICAgb3ZlcnJpZGUgZnVuIGYoKSB7XG4gICAgICAgIHN1cGVyJmx0O0EmZ3Q7LmYoKSAvLyBjYWxsIHRvIEEuZigpXG4gICAgICAgIHN1cGVyJmx0O0ImZ3Q7LmYoKSAvLyBjYWxsIHRvIEIuZigpXG4gICAgfVxufVxuYGBgXG4gIFxuSXQmYXBvcztzIGZpbmUgdG8gaW5oZXJpdCBmcm9tIGJvdGggYEFgIGFuZCBgQmAsIGFuZCB3ZSBoYXZlIG5vIHByb2JsZW1zIHdpdGggYGEoKWAgYW5kIGBiKClgIHNpbmNlIGBDYCBpbmhlcml0cyBvbmx5IG9uZSBpbXBsZW1lbnRhdGlvbiBvZiBlYWNoIG9mIHRoZXNlIGZ1bmN0aW9ucy5cbkJ1dCBmb3IgYGYoKWAgd2UgaGF2ZSB0d28gaW1wbGVtZW50YXRpb25zIGluaGVyaXRlZCBieSBgQ2AsIGFuZCB0aHVzIHdlIGhhdmUgdG8gb3ZlcnJpZGUgYGYoKWAgaW4gYENgIGFuZCBwcm92aWRlIG91ciBvd24gaW1wbGVtZW50YXRpb24gdGhhdCBlbGltaW5hdGVzIHRoZSBhbWJpZ3VpdHkuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/classes.html#overriding-rules"
            ],
            "flags": 0,
            "guid": "DhU?NB[J@r",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndInheritance",
                "ClassesAndObjects",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Abstract</b> Classes",
                "<p>A class and some of its members may be declared <em class=\"keyword\">abstract</em>.<br />\nAn abstract member does not have an implementation in its class.<br />\nNote that we do not need to annotate an abstract class or function with open – it goes without saying.</p>\n<p>We can override a non-abstract open member with an abstract one</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Base</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">abstract</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Derived</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Base</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">abstract</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MjkwODcsICJpZCI6ICIxNDg4MTAyOTQwNzI0LTAwMSIsICJtZCI6ICJBIGNsYXNzIGFuZCBzb21lIG9mIGl0cyBtZW1iZXJzIG1heSBiZSBkZWNsYXJlZCAqYWJzdHJhY3QqezogLmtleXdvcmQgfS5cbkFuIGFic3RyYWN0IG1lbWJlciBkb2VzIG5vdCBoYXZlIGFuIGltcGxlbWVudGF0aW9uIGluIGl0cyBjbGFzcy5cbk5vdGUgdGhhdCB3ZSBkbyBub3QgbmVlZCB0byBhbm5vdGF0ZSBhbiBhYnN0cmFjdCBjbGFzcyBvciBmdW5jdGlvbiB3aXRoIG9wZW4gXHUyMDEzIGl0IGdvZXMgd2l0aG91dCBzYXlpbmcuXG4gIFxuV2UgY2FuIG92ZXJyaWRlIGEgbm9uLWFic3RyYWN0IG9wZW4gbWVtYmVyIHdpdGggYW4gYWJzdHJhY3Qgb25lXG4gIFxuYGBgIGtvdGxpblxub3BlbiBjbGFzcyBCYXNlIHtcbiAgICBvcGVuIGZ1biBmKCkge31cbn1cbiAgXG5hYnN0cmFjdCBjbGFzcyBEZXJpdmVkIDogQmFzZSgpIHtcbiAgICBvdmVycmlkZSBhYnN0cmFjdCBmdW4gZigpXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/classes.html#abstract-classes"
            ],
            "flags": 0,
            "guid": "QDBE{]Ch0t",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndInheritance",
                "ClassesAndObjects",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Companion</b> Objects",
                "<p>In Kotlin, unlike Java or C#, classes do not have static methods. In most cases, it's recommended to simply use<br />\npackage-level functions instead.</p>\n<p>If you need to write a function that can be called without having a class instance but needs access to the internals of a class (for example, a factory method), you can write it as a member of an <a href=\"object-declarations.html\">object declaration</a> inside that class.</p>\n<p>Even more specifically, if you declare a <a href=\"object-declarations.html#companion-objects\">companion object</a> inside your class, you'll be able to call its members with the same syntax as calling static methods in Java/C#, using only the class name as a qualifier.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA1MzksICJpZCI6ICIxNDg4MTAyOTU1NDg2LTAwMSIsICJtZCI6ICJJbiBLb3RsaW4sIHVubGlrZSBKYXZhIG9yIEMjLCBjbGFzc2VzIGRvIG5vdCBoYXZlIHN0YXRpYyBtZXRob2RzLiBJbiBtb3N0IGNhc2VzLCBpdCZhcG9zO3MgcmVjb21tZW5kZWQgdG8gc2ltcGx5IHVzZVxucGFja2FnZS1sZXZlbCBmdW5jdGlvbnMgaW5zdGVhZC5cbiAgXG5JZiB5b3UgbmVlZCB0byB3cml0ZSBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIGNhbGxlZCB3aXRob3V0IGhhdmluZyBhIGNsYXNzIGluc3RhbmNlIGJ1dCBuZWVkcyBhY2Nlc3MgdG8gdGhlIGludGVybmFscyBvZiBhIGNsYXNzIChmb3IgZXhhbXBsZSwgYSBmYWN0b3J5IG1ldGhvZCksIHlvdSBjYW4gd3JpdGUgaXQgYXMgYSBtZW1iZXIgb2YgYW4gW29iamVjdCBkZWNsYXJhdGlvbl0ob2JqZWN0LWRlY2xhcmF0aW9ucy5odG1sKSBpbnNpZGUgdGhhdCBjbGFzcy5cbiAgXG5FdmVuIG1vcmUgc3BlY2lmaWNhbGx5LCBpZiB5b3UgZGVjbGFyZSBhIFtjb21wYW5pb24gb2JqZWN0XShvYmplY3QtZGVjbGFyYXRpb25zLmh0bWwjY29tcGFuaW9uLW9iamVjdHMpIGluc2lkZSB5b3VyIGNsYXNzLCB5b3UmYXBvcztsbCBiZSBhYmxlIHRvIGNhbGwgaXRzIG1lbWJlcnMgd2l0aCB0aGUgc2FtZSBzeW50YXggYXMgY2FsbGluZyBzdGF0aWMgbWV0aG9kcyBpbiBKYXZhL0MjLCB1c2luZyBvbmx5IHRoZSBjbGFzcyBuYW1lIGFzIGEgcXVhbGlmaWVyLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/classes.html#companion-objects"
            ],
            "flags": 0,
            "guid": "Pc!fH}S-06",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndInheritance",
                "ClassesAndObjects",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Declaring <b>Properties</b>",
                "<p>Classes in Kotlin can have properties.<br />\nThese can be declared as mutable, using the <em class=\"keyword\">var</em> keyword or read-only using the <em class=\"keyword\">val</em> keyword.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Address</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">street</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">city</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">state</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">zip</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>To use a property, we simply refer to it by name, as if it were a field in Java:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">copyAddress</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">address</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Address</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Address</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">result</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Address</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #8f5902; font-style: italic\">// there's no 'new' keyword in Kotlin</span>\n    <span style=\"color: #000000\">result</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">address</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span> <span style=\"color: #8f5902; font-style: italic\">// accessors are called</span>\n    <span style=\"color: #000000\">result</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">street</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">address</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">street</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">result</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MjkyOTAsICJpZCI6ICIxNDg4MTAyOTg1NzQyLTAwMSIsICJtZCI6ICJDbGFzc2VzIGluIEtvdGxpbiBjYW4gaGF2ZSBwcm9wZXJ0aWVzLlxuVGhlc2UgY2FuIGJlIGRlY2xhcmVkIGFzIG11dGFibGUsIHVzaW5nIHRoZSAqdmFyKns6IC5rZXl3b3JkIH0ga2V5d29yZCBvciByZWFkLW9ubHkgdXNpbmcgdGhlICp2YWwqezogLmtleXdvcmQgfSBrZXl3b3JkLlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIEFkZHJlc3Mge1xuICAgIHZhciBuYW1lOiBTdHJpbmcgPSAuLi5cbiAgICB2YXIgc3RyZWV0OiBTdHJpbmcgPSAuLi5cbiAgICB2YXIgY2l0eTogU3RyaW5nID0gLi4uXG4gICAgdmFyIHN0YXRlOiBTdHJpbmc/ID0gLi4uXG4gICAgdmFyIHppcDogU3RyaW5nID0gLi4uXG59XG5gYGBcbiAgXG5UbyB1c2UgYSBwcm9wZXJ0eSwgd2Ugc2ltcGx5IHJlZmVyIHRvIGl0IGJ5IG5hbWUsIGFzIGlmIGl0IHdlcmUgYSBmaWVsZCBpbiBKYXZhOlxuICBcbmBgYCBrb3RsaW5cbmZ1biBjb3B5QWRkcmVzcyhhZGRyZXNzOiBBZGRyZXNzKTogQWRkcmVzcyB7XG4gICAgdmFsIHJlc3VsdCA9IEFkZHJlc3MoKSAvLyB0aGVyZSZhcG9zO3Mgbm8gJmFwb3M7bmV3JmFwb3M7IGtleXdvcmQgaW4gS290bGluXG4gICAgcmVzdWx0Lm5hbWUgPSBhZGRyZXNzLm5hbWUgLy8gYWNjZXNzb3JzIGFyZSBjYWxsZWRcbiAgICByZXN1bHQuc3RyZWV0ID0gYWRkcmVzcy5zdHJlZXRcbiAgICAvLyAuLi5cbiAgICByZXR1cm4gcmVzdWx0XG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/properties.html#declaring-properties"
            ],
            "flags": 0,
            "guid": "ste~/VhC}V",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "PropertiesAndFields"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Getters</b> and <b>Setters</b>",
                "<p>The full syntax for declaring a property is</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">var</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">propertyName</span><span style=\"color: #000000; font-weight: bold\">&gt;[:</span> <span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">PropertyType</span><span style=\"color: #000000; font-weight: bold\">&gt;]</span> <span style=\"color: #000000; font-weight: bold\">[=</span> <span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">property_initializer</span><span style=\"color: #000000; font-weight: bold\">&gt;]</span>\n<span style=\"color: #c4a000\">    [&lt;getter&gt;]</span>\n<span style=\"color: #c4a000\">    [&lt;setter&gt;]</span>\n</pre></div>\n<p>The initializer, getter and setter are optional. Property type is optional if it can be inferred from the initializer (or from the getter return type, as shown below).</p>\n<p>Examples:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">allByDefault</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #8f5902; font-style: italic\">// error: explicit initializer required, default getter and setter implied</span>\n<span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">initialized</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #8f5902; font-style: italic\">// has type Int, default getter and setter</span>\n</pre></div>\n<p>The full syntax of a read-only property declaration differs from a mutable one in two ways: it starts with <code>val</code> instead of <code>var</code> and does not allow a setter:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">simple</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #8f5902; font-style: italic\">// has type Int, default getter, must be initialized in constructor</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">inferredType</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #8f5902; font-style: italic\">// has type Int and a default getter</span>\n</pre></div>\n<p>We can write custom accessors, very much like ordinary functions, right inside a property declaration. Here's an example of a custom getter:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">isEmpty</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Boolean</span>\n    <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n</pre></div>\n<p>A custom setter looks like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">stringRepresentation</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span>\n    <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toString</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #204a87; font-weight: bold\">set</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">setDataFromString</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// parses the string and assigns values to other properties</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>By convention, the name of the setter parameter is <code>value</code>, but you can choose a different name if you prefer.</p>\n<p>Since Kotlin 1.1, you can omit the property type if it can be inferred from the getter:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">isEmpty</span> <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>  <span style=\"color: #8f5902; font-style: italic\">// has type Boolean</span>\n</pre></div>\n<p>If you need to change the visibility of an accessor or to annotate it, but don't need to change the default implementation, you can define the accessor without defining its body:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">setterVisibility</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"abc\"</span>\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">set</span> <span style=\"color: #8f5902; font-style: italic\">// the setter is private and has the default implementation</span>\n\n<span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">setterWithAnnotation</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n    <span style=\"color: #000000\">@Inject</span> <span style=\"color: #204a87; font-weight: bold\">set</span> <span style=\"color: #8f5902; font-style: italic\">// annotate the setter with Inject</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA1NzQsICJpZCI6ICIxNDg4MTAzMDIxNDg3LTAwMSIsICJtZCI6ICJUaGUgZnVsbCBzeW50YXggZm9yIGRlY2xhcmluZyBhIHByb3BlcnR5IGlzXG4gIFxuYGBgIGtvdGxpblxudmFyICZsdDtwcm9wZXJ0eU5hbWUmZ3Q7WzogJmx0O1Byb3BlcnR5VHlwZSZndDtdIFs9ICZsdDtwcm9wZXJ0eV9pbml0aWFsaXplciZndDtdXG4gICAgWyZsdDtnZXR0ZXImZ3Q7XVxuICAgIFsmbHQ7c2V0dGVyJmd0O11cbmBgYFxuICBcblRoZSBpbml0aWFsaXplciwgZ2V0dGVyIGFuZCBzZXR0ZXIgYXJlIG9wdGlvbmFsLiBQcm9wZXJ0eSB0eXBlIGlzIG9wdGlvbmFsIGlmIGl0IGNhbiBiZSBpbmZlcnJlZCBmcm9tIHRoZSBpbml0aWFsaXplciAob3IgZnJvbSB0aGUgZ2V0dGVyIHJldHVybiB0eXBlLCBhcyBzaG93biBiZWxvdykuXG4gIFxuRXhhbXBsZXM6XG4gIFxuYGBgIGtvdGxpblxudmFyIGFsbEJ5RGVmYXVsdDogSW50PyAvLyBlcnJvcjogZXhwbGljaXQgaW5pdGlhbGl6ZXIgcmVxdWlyZWQsIGRlZmF1bHQgZ2V0dGVyIGFuZCBzZXR0ZXIgaW1wbGllZFxudmFyIGluaXRpYWxpemVkID0gMSAvLyBoYXMgdHlwZSBJbnQsIGRlZmF1bHQgZ2V0dGVyIGFuZCBzZXR0ZXJcbmBgYFxuICBcblRoZSBmdWxsIHN5bnRheCBvZiBhIHJlYWQtb25seSBwcm9wZXJ0eSBkZWNsYXJhdGlvbiBkaWZmZXJzIGZyb20gYSBtdXRhYmxlIG9uZSBpbiB0d28gd2F5czogaXQgc3RhcnRzIHdpdGggYHZhbGAgaW5zdGVhZCBvZiBgdmFyYCBhbmQgZG9lcyBub3QgYWxsb3cgYSBzZXR0ZXI6XG4gIFxuYGBgIGtvdGxpblxudmFsIHNpbXBsZTogSW50PyAvLyBoYXMgdHlwZSBJbnQsIGRlZmF1bHQgZ2V0dGVyLCBtdXN0IGJlIGluaXRpYWxpemVkIGluIGNvbnN0cnVjdG9yXG52YWwgaW5mZXJyZWRUeXBlID0gMSAvLyBoYXMgdHlwZSBJbnQgYW5kIGEgZGVmYXVsdCBnZXR0ZXJcbmBgYFxuICBcbldlIGNhbiB3cml0ZSBjdXN0b20gYWNjZXNzb3JzLCB2ZXJ5IG11Y2ggbGlrZSBvcmRpbmFyeSBmdW5jdGlvbnMsIHJpZ2h0IGluc2lkZSBhIHByb3BlcnR5IGRlY2xhcmF0aW9uLiBIZXJlJmFwb3M7cyBhbiBleGFtcGxlIG9mIGEgY3VzdG9tIGdldHRlcjpcbiAgXG5gYGAga290bGluXG52YWwgaXNFbXB0eTogQm9vbGVhblxuICAgIGdldCgpID0gdGhpcy5zaXplID09IDBcbmBgYFxuICBcbkEgY3VzdG9tIHNldHRlciBsb29rcyBsaWtlIHRoaXM6XG4gIFxuYGBgIGtvdGxpblxudmFyIHN0cmluZ1JlcHJlc2VudGF0aW9uOiBTdHJpbmdcbiAgICBnZXQoKSA9IHRoaXMudG9TdHJpbmcoKVxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgICBzZXREYXRhRnJvbVN0cmluZyh2YWx1ZSkgLy8gcGFyc2VzIHRoZSBzdHJpbmcgYW5kIGFzc2lnbnMgdmFsdWVzIHRvIG90aGVyIHByb3BlcnRpZXNcbiAgICB9XG5gYGBcbiAgXG5CeSBjb252ZW50aW9uLCB0aGUgbmFtZSBvZiB0aGUgc2V0dGVyIHBhcmFtZXRlciBpcyBgdmFsdWVgLCBidXQgeW91IGNhbiBjaG9vc2UgYSBkaWZmZXJlbnQgbmFtZSBpZiB5b3UgcHJlZmVyLlxuICBcblNpbmNlIEtvdGxpbiAxLjEsIHlvdSBjYW4gb21pdCB0aGUgcHJvcGVydHkgdHlwZSBpZiBpdCBjYW4gYmUgaW5mZXJyZWQgZnJvbSB0aGUgZ2V0dGVyOlxuICBcbmBgYCBrb3RsaW5cbnZhbCBpc0VtcHR5IGdldCgpID0gdGhpcy5zaXplID09IDAgIC8vIGhhcyB0eXBlIEJvb2xlYW5cbmBgYFxuICBcbklmIHlvdSBuZWVkIHRvIGNoYW5nZSB0aGUgdmlzaWJpbGl0eSBvZiBhbiBhY2Nlc3NvciBvciB0byBhbm5vdGF0ZSBpdCwgYnV0IGRvbiZhcG9zO3QgbmVlZCB0byBjaGFuZ2UgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24sIHlvdSBjYW4gZGVmaW5lIHRoZSBhY2Nlc3NvciB3aXRob3V0IGRlZmluaW5nIGl0cyBib2R5OlxuICBcbmBgYCBrb3RsaW5cbnZhciBzZXR0ZXJWaXNpYmlsaXR5OiBTdHJpbmcgPSAmcXVvdDthYmMmcXVvdDtcbiAgICBwcml2YXRlIHNldCAvLyB0aGUgc2V0dGVyIGlzIHByaXZhdGUgYW5kIGhhcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvblxuICBcbnZhciBzZXR0ZXJXaXRoQW5ub3RhdGlvbjogQW55PyA9IG51bGxcbiAgICBASW5qZWN0IHNldCAvLyBhbm5vdGF0ZSB0aGUgc2V0dGVyIHdpdGggSW5qZWN0XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/properties.html#getters-and-setters"
            ],
            "flags": 0,
            "guid": "b:4EZieFIU",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "PropertiesAndFields"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Backing</b> Fields",
                "<p>Classes in Kotlin cannot have fields. However, sometimes it is necessary to have a backing field when using custom accessors. For these purposes, Kotlin provides an automatic backing field which can be accessed using the <code>field</code> identifier:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">var</span> <span style=\"color: #000000\">counter</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> <span style=\"color: #8f5902; font-style: italic\">// the initializer value is written directly to the backing field</span>\n    <span style=\"color: #204a87; font-weight: bold\">set</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span> <span style=\"color: #000000; font-weight: bold\">&gt;=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">field</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">value</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The <code>field</code> identifier can only be used in the accessors of the property.</p>\n<p>A backing field will be generated for a property if it uses the default implementation of at least one of the accessors, or if a custom accessor references it through the <code>field</code> identifier.</p>\n<p>For example, in the following case there will be no backing field:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">isEmpty</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Boolean</span>\n    <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA1ODcsICJpZCI6ICIxNDg4MTAzMDc5NDQ1LTAwMSIsICJtZCI6ICJDbGFzc2VzIGluIEtvdGxpbiBjYW5ub3QgaGF2ZSBmaWVsZHMuIEhvd2V2ZXIsIHNvbWV0aW1lcyBpdCBpcyBuZWNlc3NhcnkgdG8gaGF2ZSBhIGJhY2tpbmcgZmllbGQgd2hlbiB1c2luZyBjdXN0b20gYWNjZXNzb3JzLiBGb3IgdGhlc2UgcHVycG9zZXMsIEtvdGxpbiBwcm92aWRlcyBhbiBhdXRvbWF0aWMgYmFja2luZyBmaWVsZCB3aGljaCBjYW4gYmUgYWNjZXNzZWQgdXNpbmcgdGhlIGBmaWVsZGAgaWRlbnRpZmllcjpcbiAgXG5gYGAga290bGluXG52YXIgY291bnRlciA9IDAgLy8gdGhlIGluaXRpYWxpemVyIHZhbHVlIGlzIHdyaXR0ZW4gZGlyZWN0bHkgdG8gdGhlIGJhY2tpbmcgZmllbGRcbiAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICZndDs9IDApIGZpZWxkID0gdmFsdWVcbiAgICB9XG5gYGBcbiAgXG5UaGUgYGZpZWxkYCBpZGVudGlmaWVyIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGFjY2Vzc29ycyBvZiB0aGUgcHJvcGVydHkuXG4gIFxuQSBiYWNraW5nIGZpZWxkIHdpbGwgYmUgZ2VuZXJhdGVkIGZvciBhIHByb3BlcnR5IGlmIGl0IHVzZXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgYXQgbGVhc3Qgb25lIG9mIHRoZSBhY2Nlc3NvcnMsIG9yIGlmIGEgY3VzdG9tIGFjY2Vzc29yIHJlZmVyZW5jZXMgaXQgdGhyb3VnaCB0aGUgYGZpZWxkYCBpZGVudGlmaWVyLlxuICBcbkZvciBleGFtcGxlLCBpbiB0aGUgZm9sbG93aW5nIGNhc2UgdGhlcmUgd2lsbCBiZSBubyBiYWNraW5nIGZpZWxkOlxuICBcbmBgYCBrb3RsaW5cbnZhbCBpc0VtcHR5OiBCb29sZWFuXG4gICAgZ2V0KCkgPSB0aGlzLnNpemUgPT0gMFxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/properties.html#backing-fields"
            ],
            "flags": 0,
            "guid": "mgLEFcieRH",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "PropertiesAndFields"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Backing</b> Properties",
                "<p>If you want to do something that does not fit into this \"implicit backing field\" scheme, you can always fall back to having a <em>backing property</em>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">_table</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Map</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n<span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">table</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Map</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;</span>\n    <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">_table</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">_table</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">HashMap</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #8f5902; font-style: italic\">// Type parameters are inferred</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">_table</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">AssertionError</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Set to null by another thread\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>In all respects, this is just the same as in Java since access to private properties with default getters and setters is optimized so that no function call overhead is introduced.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MjkzNTEsICJpZCI6ICIxNDg4MTAzMTExOTU4LTAwMSIsICJtZCI6ICJJZiB5b3Ugd2FudCB0byBkbyBzb21ldGhpbmcgdGhhdCBkb2VzIG5vdCBmaXQgaW50byB0aGlzICZxdW90O2ltcGxpY2l0IGJhY2tpbmcgZmllbGQmcXVvdDsgc2NoZW1lLCB5b3UgY2FuIGFsd2F5cyBmYWxsIGJhY2sgdG8gaGF2aW5nIGEgKmJhY2tpbmcgcHJvcGVydHkqOlxuICBcbmBgYCBrb3RsaW5cbnByaXZhdGUgdmFyIF90YWJsZTogTWFwJmx0O1N0cmluZywgSW50Jmd0Oz8gPSBudWxsXG5wdWJsaWMgdmFsIHRhYmxlOiBNYXAmbHQ7U3RyaW5nLCBJbnQmZ3Q7XG4gICAgZ2V0KCkge1xuICAgICAgICBpZiAoX3RhYmxlID09IG51bGwpIHtcbiAgICAgICAgICAgIF90YWJsZSA9IEhhc2hNYXAoKSAvLyBUeXBlIHBhcmFtZXRlcnMgYXJlIGluZmVycmVkXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90YWJsZSA/OiB0aHJvdyBBc3NlcnRpb25FcnJvcigmcXVvdDtTZXQgdG8gbnVsbCBieSBhbm90aGVyIHRocmVhZCZxdW90OylcbiAgICB9XG5gYGBcbiAgXG5JbiBhbGwgcmVzcGVjdHMsIHRoaXMgaXMganVzdCB0aGUgc2FtZSBhcyBpbiBKYXZhIHNpbmNlIGFjY2VzcyB0byBwcml2YXRlIHByb3BlcnRpZXMgd2l0aCBkZWZhdWx0IGdldHRlcnMgYW5kIHNldHRlcnMgaXMgb3B0aW1pemVkIHNvIHRoYXQgbm8gZnVuY3Rpb24gY2FsbCBvdmVyaGVhZCBpcyBpbnRyb2R1Y2VkLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/properties.html#backing-properties"
            ],
            "flags": 0,
            "guid": "I=,1pV*ane",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "PropertiesAndFields"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Compile-Time</b> Constants",
                "<p>Properties the value of which is known at compile time can be marked as <em>compile time constants</em> using the <code>const</code> modifier.<br />\nSuch properties need to fulfil the following requirements:</p>\n<ul>\n<li align=\"left\">Top-level or member of an <code>object</code></li>\n<li align=\"left\">Initialized with a value of type <code>String</code> or a primitive type</li>\n<li align=\"left\">No custom getter</li>\n</ul>\n<p>Such properties can be used in annotations:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">const</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">SUBSYSTEM_DEPRECATED</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"This subsystem is deprecated\"</span>\n\n<span style=\"color: #000000\">@Deprecated</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">SUBSYSTEM_DEPRECATED</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4Mjk3OTUsICJpZCI6ICIxNDg4MTAzMTI5MjYxLTAwMSIsICJtZCI6ICJQcm9wZXJ0aWVzIHRoZSB2YWx1ZSBvZiB3aGljaCBpcyBrbm93biBhdCBjb21waWxlIHRpbWUgY2FuIGJlIG1hcmtlZCBhcyBfY29tcGlsZSB0aW1lIGNvbnN0YW50c18gdXNpbmcgdGhlIGBjb25zdGAgbW9kaWZpZXIuXG5TdWNoIHByb3BlcnRpZXMgbmVlZCB0byBmdWxmaWwgdGhlIGZvbGxvd2luZyByZXF1aXJlbWVudHM6XG4gIFxuICAqIFRvcC1sZXZlbCBvciBtZW1iZXIgb2YgYW4gYG9iamVjdGBcbiAgKiBJbml0aWFsaXplZCB3aXRoIGEgdmFsdWUgb2YgdHlwZSBgU3RyaW5nYCBvciBhIHByaW1pdGl2ZSB0eXBlXG4gICogTm8gY3VzdG9tIGdldHRlclxuICBcblN1Y2ggcHJvcGVydGllcyBjYW4gYmUgdXNlZCBpbiBhbm5vdGF0aW9uczpcbiAgXG5gYGAga290bGluXG5jb25zdCB2YWwgU1VCU1lTVEVNX0RFUFJFQ0FURUQ6IFN0cmluZyA9ICZxdW90O1RoaXMgc3Vic3lzdGVtIGlzIGRlcHJlY2F0ZWQmcXVvdDtcbiAgXG5ARGVwcmVjYXRlZChTVUJTWVNURU1fREVQUkVDQVRFRCkgZnVuIGZvbygpIHsgLi4uIH1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/properties.html#compile-time-constants"
            ],
            "flags": 0,
            "guid": "H4<O+G8/W4",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "PropertiesAndFields"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Late-Initialized</b> Properties",
                "<p>Normally, properties declared as having a non-null type must be initialized in the constructor.<br />\nHowever, fairly often this is not convenient. For example, properties can be initialized through dependency injection, or in the setup method of a unit test. In this case, you cannot supply a non-null initializer in the constructor, but you still want to avoid null checks when referencing the property inside the body of a class.</p>\n<p>To handle this case, you can mark the property with the <code>lateinit</code> modifier:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">public</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">MyTest</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">lateinit</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">subject</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">TestSubject</span>\n\n    <span style=\"color: #000000\">@SetUp</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">setup</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">subject</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">TestSubject</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #000000\">@Test</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">test</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">subject</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">method</span><span style=\"color: #000000; font-weight: bold\">()</span>  <span style=\"color: #8f5902; font-style: italic\">// dereference directly</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The modifier can only be used on <code>var</code> properties declared inside the body of a class (not in the primary constructor), and only when the property does not have a custom getter or setter. The type of the property must be non-null, and it must not be a primitive type.</p>\n<p>Accessing a <code>lateinit</code> property before it has been initialized throws a special exception that clearly identifies the property<br />\nbeing accessed and the fact that it hasn't been initialized.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA2MjEsICJpZCI6ICIxNDg4MTAzMTUyNjgwLTAwMSIsICJtZCI6ICJOb3JtYWxseSwgcHJvcGVydGllcyBkZWNsYXJlZCBhcyBoYXZpbmcgYSBub24tbnVsbCB0eXBlIG11c3QgYmUgaW5pdGlhbGl6ZWQgaW4gdGhlIGNvbnN0cnVjdG9yLlxuSG93ZXZlciwgZmFpcmx5IG9mdGVuIHRoaXMgaXMgbm90IGNvbnZlbmllbnQuIEZvciBleGFtcGxlLCBwcm9wZXJ0aWVzIGNhbiBiZSBpbml0aWFsaXplZCB0aHJvdWdoIGRlcGVuZGVuY3kgaW5qZWN0aW9uLCBvciBpbiB0aGUgc2V0dXAgbWV0aG9kIG9mIGEgdW5pdCB0ZXN0LiBJbiB0aGlzIGNhc2UsIHlvdSBjYW5ub3Qgc3VwcGx5IGEgbm9uLW51bGwgaW5pdGlhbGl6ZXIgaW4gdGhlIGNvbnN0cnVjdG9yLCBidXQgeW91IHN0aWxsIHdhbnQgdG8gYXZvaWQgbnVsbCBjaGVja3Mgd2hlbiByZWZlcmVuY2luZyB0aGUgcHJvcGVydHkgaW5zaWRlIHRoZSBib2R5IG9mIGEgY2xhc3MuXG4gIFxuVG8gaGFuZGxlIHRoaXMgY2FzZSwgeW91IGNhbiBtYXJrIHRoZSBwcm9wZXJ0eSB3aXRoIHRoZSBgbGF0ZWluaXRgIG1vZGlmaWVyOlxuICBcbmBgYCBrb3RsaW5cbnB1YmxpYyBjbGFzcyBNeVRlc3Qge1xuICAgIGxhdGVpbml0IHZhciBzdWJqZWN0OiBUZXN0U3ViamVjdFxuICBcbiAgICBAU2V0VXAgZnVuIHNldHVwKCkge1xuICAgICAgICBzdWJqZWN0ID0gVGVzdFN1YmplY3QoKVxuICAgIH1cbiAgXG4gICAgQFRlc3QgZnVuIHRlc3QoKSB7XG4gICAgICAgIHN1YmplY3QubWV0aG9kKCkgIC8vIGRlcmVmZXJlbmNlIGRpcmVjdGx5XG4gICAgfVxufVxuYGBgXG4gIFxuVGhlIG1vZGlmaWVyIGNhbiBvbmx5IGJlIHVzZWQgb24gYHZhcmAgcHJvcGVydGllcyBkZWNsYXJlZCBpbnNpZGUgdGhlIGJvZHkgb2YgYSBjbGFzcyAobm90IGluIHRoZSBwcmltYXJ5IGNvbnN0cnVjdG9yKSwgYW5kIG9ubHkgd2hlbiB0aGUgcHJvcGVydHkgZG9lcyBub3QgaGF2ZSBhIGN1c3RvbSBnZXR0ZXIgb3Igc2V0dGVyLiBUaGUgdHlwZSBvZiB0aGUgcHJvcGVydHkgbXVzdCBiZSBub24tbnVsbCwgYW5kIGl0IG11c3Qgbm90IGJlIGEgcHJpbWl0aXZlIHR5cGUuXG4gIFxuQWNjZXNzaW5nIGEgYGxhdGVpbml0YCBwcm9wZXJ0eSBiZWZvcmUgaXQgaGFzIGJlZW4gaW5pdGlhbGl6ZWQgdGhyb3dzIGEgc3BlY2lhbCBleGNlcHRpb24gdGhhdCBjbGVhcmx5IGlkZW50aWZpZXMgdGhlIHByb3BlcnR5XG5iZWluZyBhY2Nlc3NlZCBhbmQgdGhlIGZhY3QgdGhhdCBpdCBoYXNuJmFwb3M7dCBiZWVuIGluaXRpYWxpemVkLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties"
            ],
            "flags": 0,
            "guid": "rao-_lr_PJ",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "PropertiesAndFields"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Delegated</b> Properties",
                "<p>The most common kind of properties simply reads from (and maybe writes to) a backing field. <br />\nOn the other hand, with custom getters and setters one can implement any behaviour of a property.<br />\nSomewhere in between, there are certain common patterns of how a property may work. </p>\n<p><em>A few examples</em>: lazy values, reading from a map by a given key, accessing a database, notifying listener on access, etc.</p>\n<p>Such common behaviours can be implemented as libraries using <a href=\"delegated-properties.html\"><em>delegated properties</em></a>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4Mjk4NjUsICJpZCI6ICIxNDg4MTAzMTczNzE4LTAwMSIsICJtZCI6ICJUaGUgbW9zdCBjb21tb24ga2luZCBvZiBwcm9wZXJ0aWVzIHNpbXBseSByZWFkcyBmcm9tIChhbmQgbWF5YmUgd3JpdGVzIHRvKSBhIGJhY2tpbmcgZmllbGQuIFxuT24gdGhlIG90aGVyIGhhbmQsIHdpdGggY3VzdG9tIGdldHRlcnMgYW5kIHNldHRlcnMgb25lIGNhbiBpbXBsZW1lbnQgYW55IGJlaGF2aW91ciBvZiBhIHByb3BlcnR5LlxuU29tZXdoZXJlIGluIGJldHdlZW4sIHRoZXJlIGFyZSBjZXJ0YWluIGNvbW1vbiBwYXR0ZXJucyBvZiBob3cgYSBwcm9wZXJ0eSBtYXkgd29yay4gXG4gIFxuX0EgZmV3IGV4YW1wbGVzXzogbGF6eSB2YWx1ZXMsIHJlYWRpbmcgZnJvbSBhIG1hcCBieSBhIGdpdmVuIGtleSwgYWNjZXNzaW5nIGEgZGF0YWJhc2UsIG5vdGlmeWluZyBsaXN0ZW5lciBvbiBhY2Nlc3MsIGV0Yy5cbiAgXG5TdWNoIGNvbW1vbiBiZWhhdmlvdXJzIGNhbiBiZSBpbXBsZW1lbnRlZCBhcyBsaWJyYXJpZXMgdXNpbmcgW19kZWxlZ2F0ZWQgcHJvcGVydGllc19dKGRlbGVnYXRlZC1wcm9wZXJ0aWVzLmh0bWwpLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/properties.html#delegated-properties"
            ],
            "flags": 0,
            "guid": "b:a:Q*K{`x",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "PropertiesAndFields"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Interfaces</b>",
                "<p>Interfaces in Kotlin are very similar to Java 8. They can contain declarations of abstract methods, as well as method<br />\nimplementations. What makes them different from abstract classes is that interfaces cannot store state. They can have<br />\nproperties but these need to be abstract or to provide accessor implementations.</p>\n<p>An interface is defined using the keyword <em class=\"keyword\">interface</em></p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">MyInterface</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n      <span style=\"color: #8f5902; font-style: italic\">// optional body</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4Mjk5MDcsICJpZCI6ICIxNDg4MTAzMjAwNjA1LTAwMSIsICJtZCI6ICJJbnRlcmZhY2VzIGluIEtvdGxpbiBhcmUgdmVyeSBzaW1pbGFyIHRvIEphdmEgOC4gVGhleSBjYW4gY29udGFpbiBkZWNsYXJhdGlvbnMgb2YgYWJzdHJhY3QgbWV0aG9kcywgYXMgd2VsbCBhcyBtZXRob2RcbmltcGxlbWVudGF0aW9ucy4gV2hhdCBtYWtlcyB0aGVtIGRpZmZlcmVudCBmcm9tIGFic3RyYWN0IGNsYXNzZXMgaXMgdGhhdCBpbnRlcmZhY2VzIGNhbm5vdCBzdG9yZSBzdGF0ZS4gVGhleSBjYW4gaGF2ZVxucHJvcGVydGllcyBidXQgdGhlc2UgbmVlZCB0byBiZSBhYnN0cmFjdCBvciB0byBwcm92aWRlIGFjY2Vzc29yIGltcGxlbWVudGF0aW9ucy5cbiAgXG5BbiBpbnRlcmZhY2UgaXMgZGVmaW5lZCB1c2luZyB0aGUga2V5d29yZCAqaW50ZXJmYWNlKns6IC5rZXl3b3JkIH1cbiAgXG5gYGAga290bGluXG5pbnRlcmZhY2UgTXlJbnRlcmZhY2Uge1xuICAgIGZ1biBiYXIoKVxuICAgIGZ1biBmb28oKSB7XG4gICAgICAvLyBvcHRpb25hbCBib2R5XG4gICAgfVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/interfaces.html#interfaces"
            ],
            "flags": 0,
            "guid": "zxSs0zi/xG",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Interfaces",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Implementing</b> Interfaces",
                "<p>A class or object can implement one or more interfaces</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Child</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MyInterface</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// body</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4Mjk5MTYsICJpZCI6ICIxNDg4MTAzMjM0MDY2LTAwMSIsICJtZCI6ICJBIGNsYXNzIG9yIG9iamVjdCBjYW4gaW1wbGVtZW50IG9uZSBvciBtb3JlIGludGVyZmFjZXNcbiAgXG5gYGAga290bGluXG5jbGFzcyBDaGlsZCA6IE15SW50ZXJmYWNlIHtcbiAgICBvdmVycmlkZSBmdW4gYmFyKCkge1xuICAgICAgICAvLyBib2R5XG4gICAgfVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/interfaces.html#implementing-interfaces"
            ],
            "flags": 0,
            "guid": "xSrs3jpuY!",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Interfaces",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Properties</b> in Interfaces",
                "<p>You can declare properties in interfaces. A property declared in an interface can either be abstract, or it can provide<br />\nimplementations for accessors. Properties declared in interfaces can't have backing fields, and therefore accessors<br />\ndeclared in interfaces can't reference them.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">MyInterface</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #8f5902; font-style: italic\">// abstract</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">propertyWithImplementation</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span>\n        <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"foo\"</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Child</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MyInterface</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">29</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4Mjk5MzIsICJpZCI6ICIxNDg4MTAzMjUzNTMwLTAwMSIsICJtZCI6ICJZb3UgY2FuIGRlY2xhcmUgcHJvcGVydGllcyBpbiBpbnRlcmZhY2VzLiBBIHByb3BlcnR5IGRlY2xhcmVkIGluIGFuIGludGVyZmFjZSBjYW4gZWl0aGVyIGJlIGFic3RyYWN0LCBvciBpdCBjYW4gcHJvdmlkZVxuaW1wbGVtZW50YXRpb25zIGZvciBhY2Nlc3NvcnMuIFByb3BlcnRpZXMgZGVjbGFyZWQgaW4gaW50ZXJmYWNlcyBjYW4mYXBvczt0IGhhdmUgYmFja2luZyBmaWVsZHMsIGFuZCB0aGVyZWZvcmUgYWNjZXNzb3JzXG5kZWNsYXJlZCBpbiBpbnRlcmZhY2VzIGNhbiZhcG9zO3QgcmVmZXJlbmNlIHRoZW0uXG4gIFxuYGBgIGtvdGxpblxuaW50ZXJmYWNlIE15SW50ZXJmYWNlIHtcbiAgICB2YWwgcHJvcDogSW50IC8vIGFic3RyYWN0XG4gIFxuICAgIHZhbCBwcm9wZXJ0eVdpdGhJbXBsZW1lbnRhdGlvbjogU3RyaW5nXG4gICAgICAgIGdldCgpID0gJnF1b3Q7Zm9vJnF1b3Q7XG4gIFxuICAgIGZ1biBmb28oKSB7XG4gICAgICAgIHByaW50KHByb3ApXG4gICAgfVxufVxuICBcbmNsYXNzIENoaWxkIDogTXlJbnRlcmZhY2Uge1xuICAgIG92ZXJyaWRlIHZhbCBwcm9wOiBJbnQgPSAyOVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/interfaces.html#properties-in-interfaces"
            ],
            "flags": 0,
            "guid": "M%HutOo`uX",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Interfaces",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Resolving <b>overriding conflicts</b>",
                "<p>When we declare many types in our supertype list, it may appear that we inherit more than one implementation of the same method. For example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">A</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"A\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">B</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"B\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"bar\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">A</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"bar\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">D</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">B</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">super</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span>\n        <span style=\"color: #204a87; font-weight: bold\">super</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">B</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">super</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">B</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Interfaces <em>A</em> and <em>B</em> both declare functions <em>foo()</em> and <em>bar()</em>. Both of them implement <em>foo()</em>, but only <em>B</em> implements <em>bar()</em> (<em>bar()</em> is not marked abstract in <em>A</em>, because this is the default for interfaces, if the function has no body). Now, if we derive a concrete class <em>C</em> from <em>A</em>, we, obviously, have to override <em>bar()</em> and provide an implementation.</p>\n<p>However, if we derive <em>D</em> from <em>A</em> and <em>B</em>, we need to implement all the methods which we have inherited from multiple interfaces, and to specify how exactly <em>D</em> should implement them. This rule applies both to methods for which we've inherited a single implementation (<em>bar()</em>) and multiple implementations (<em>foo()</em>).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA2NTEsICJpZCI6ICIxNDg4MTAzMjY4MzgzLTAwMSIsICJtZCI6ICJXaGVuIHdlIGRlY2xhcmUgbWFueSB0eXBlcyBpbiBvdXIgc3VwZXJ0eXBlIGxpc3QsIGl0IG1heSBhcHBlYXIgdGhhdCB3ZSBpbmhlcml0IG1vcmUgdGhhbiBvbmUgaW1wbGVtZW50YXRpb24gb2YgdGhlIHNhbWUgbWV0aG9kLiBGb3IgZXhhbXBsZTpcbiAgXG5gYGAga290bGluXG5pbnRlcmZhY2UgQSB7XG4gICAgZnVuIGZvbygpIHsgcHJpbnQoJnF1b3Q7QSZxdW90OykgfVxuICAgIGZ1biBiYXIoKVxufVxuICBcbmludGVyZmFjZSBCIHtcbiAgICBmdW4gZm9vKCkgeyBwcmludCgmcXVvdDtCJnF1b3Q7KSB9XG4gICAgZnVuIGJhcigpIHsgcHJpbnQoJnF1b3Q7YmFyJnF1b3Q7KSB9XG59XG4gIFxuY2xhc3MgQyA6IEEge1xuICAgIG92ZXJyaWRlIGZ1biBiYXIoKSB7IHByaW50KCZxdW90O2JhciZxdW90OykgfVxufVxuICBcbmNsYXNzIEQgOiBBLCBCIHtcbiAgICBvdmVycmlkZSBmdW4gZm9vKCkge1xuICAgICAgICBzdXBlciZsdDtBJmd0Oy5mb28oKVxuICAgICAgICBzdXBlciZsdDtCJmd0Oy5mb28oKVxuICAgIH1cbiAgXG4gICAgb3ZlcnJpZGUgZnVuIGJhcigpIHtcbiAgICAgICAgc3VwZXImbHQ7QiZndDsuYmFyKClcbiAgICB9XG59XG5gYGBcbiAgXG5JbnRlcmZhY2VzICpBKiBhbmQgKkIqIGJvdGggZGVjbGFyZSBmdW5jdGlvbnMgKmZvbygpKiBhbmQgKmJhcigpKi4gQm90aCBvZiB0aGVtIGltcGxlbWVudCAqZm9vKCkqLCBidXQgb25seSAqQiogaW1wbGVtZW50cyAqYmFyKCkqICgqYmFyKCkqIGlzIG5vdCBtYXJrZWQgYWJzdHJhY3QgaW4gKkEqLCBiZWNhdXNlIHRoaXMgaXMgdGhlIGRlZmF1bHQgZm9yIGludGVyZmFjZXMsIGlmIHRoZSBmdW5jdGlvbiBoYXMgbm8gYm9keSkuIE5vdywgaWYgd2UgZGVyaXZlIGEgY29uY3JldGUgY2xhc3MgKkMqIGZyb20gKkEqLCB3ZSwgb2J2aW91c2x5LCBoYXZlIHRvIG92ZXJyaWRlICpiYXIoKSogYW5kIHByb3ZpZGUgYW4gaW1wbGVtZW50YXRpb24uXG4gIFxuSG93ZXZlciwgaWYgd2UgZGVyaXZlICpEKiBmcm9tICpBKiBhbmQgKkIqLCB3ZSBuZWVkIHRvIGltcGxlbWVudCBhbGwgdGhlIG1ldGhvZHMgd2hpY2ggd2UgaGF2ZSBpbmhlcml0ZWQgZnJvbSBtdWx0aXBsZSBpbnRlcmZhY2VzLCBhbmQgdG8gc3BlY2lmeSBob3cgZXhhY3RseSAqRCogc2hvdWxkIGltcGxlbWVudCB0aGVtLiBUaGlzIHJ1bGUgYXBwbGllcyBib3RoIHRvIG1ldGhvZHMgZm9yIHdoaWNoIHdlJmFwb3M7dmUgaW5oZXJpdGVkIGEgc2luZ2xlIGltcGxlbWVudGF0aW9uICgqYmFyKCkqKSBhbmQgbXVsdGlwbGUgaW1wbGVtZW50YXRpb25zICgqZm9vKCkqKS5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/interfaces.html#resolving-overriding-conflicts"
            ],
            "flags": 0,
            "guid": "l$K|FXzsSP",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Interfaces",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Visibility</b> Modifiers",
                "<p>Classes, objects, interfaces, constructors, functions, properties and their setters can have <em>visibility modifiers</em>.<br />\n(Getters always have the same visibility as the property.) <br />\nThere are four visibility modifiers in Kotlin: <code>private</code>, <code>protected</code>, <code>internal</code> and <code>public</code>.<br />\nThe default visibility, used if there is no explicit modifier, is <code>public</code>.</p>\n<p>Below please find explanations of these for different type of declaring scopes.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzAwNDUsICJpZCI6ICIxNDg4MTAzMjkzODY5LTAwMSIsICJtZCI6ICJDbGFzc2VzLCBvYmplY3RzLCBpbnRlcmZhY2VzLCBjb25zdHJ1Y3RvcnMsIGZ1bmN0aW9ucywgcHJvcGVydGllcyBhbmQgdGhlaXIgc2V0dGVycyBjYW4gaGF2ZSBfdmlzaWJpbGl0eSBtb2RpZmllcnNfLlxuKEdldHRlcnMgYWx3YXlzIGhhdmUgdGhlIHNhbWUgdmlzaWJpbGl0eSBhcyB0aGUgcHJvcGVydHkuKSBcblRoZXJlIGFyZSBmb3VyIHZpc2liaWxpdHkgbW9kaWZpZXJzIGluIEtvdGxpbjogYHByaXZhdGVgLCBgcHJvdGVjdGVkYCwgYGludGVybmFsYCBhbmQgYHB1YmxpY2AuXG5UaGUgZGVmYXVsdCB2aXNpYmlsaXR5LCB1c2VkIGlmIHRoZXJlIGlzIG5vIGV4cGxpY2l0IG1vZGlmaWVyLCBpcyBgcHVibGljYC5cbiAgXG5CZWxvdyBwbGVhc2UgZmluZCBleHBsYW5hdGlvbnMgb2YgdGhlc2UgZm9yIGRpZmZlcmVudCB0eXBlIG9mIGRlY2xhcmluZyBzY29wZXMuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/visibility-modifiers.html#visibility-modifiers"
            ],
            "flags": 0,
            "guid": "U+Kg-I2Dl",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "VisibilityModifiers"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Visibility modifiers for <b>Packages</b>",
                "<p>Functions, properties and classes, objects and interfaces can be declared on the \"top-level\", i.e. directly inside a package:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">// file name: example.kt</span>\n<span style=\"color: #204a87; font-weight: bold\">package</span> <span style=\"color: #000000\">foo</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">baz</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Bar</span> <span style=\"color: #000000; font-weight: bold\">{}</span>\n</pre></div>\n<ul>\n<li align=\"left\">If you do not specify any visibility modifier, <code>public</code> is used by default, which means that your declarations will be visible everywhere;</li>\n<li align=\"left\">If you mark a declaration <code>private</code>, it will only be visible inside the file containing the declaration;</li>\n<li align=\"left\">If you mark it <code>internal</code>, it is visible everywhere in the same <a href=\"#modules\">module</a>;</li>\n<li align=\"left\"><code>protected</code> is not available for top-level declarations.</li>\n</ul>\n<p>Examples:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// file name: example.kt</span>\n<span style=\"color: #204a87; font-weight: bold\">package</span> <span style=\"color: #000000\">foo</span>\n\n<span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{}</span> <span style=\"color: #8f5902; font-style: italic\">// visible inside example.kt</span>\n\n<span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">5</span> <span style=\"color: #8f5902; font-style: italic\">// property is visible everywhere</span>\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">set</span>         <span style=\"color: #8f5902; font-style: italic\">// setter is visible only in example.kt</span>\n\n<span style=\"color: #204a87; font-weight: bold\">internal</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">baz</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">6</span>    <span style=\"color: #8f5902; font-style: italic\">// visible inside the same module</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA2NzMsICJpZCI6ICIxNDg4MTAzMzMyMTc1LTAwMSIsICJtZCI6ICJGdW5jdGlvbnMsIHByb3BlcnRpZXMgYW5kIGNsYXNzZXMsIG9iamVjdHMgYW5kIGludGVyZmFjZXMgY2FuIGJlIGRlY2xhcmVkIG9uIHRoZSAmcXVvdDt0b3AtbGV2ZWwmcXVvdDssIGkuZS4gZGlyZWN0bHkgaW5zaWRlIGEgcGFja2FnZTpcbiAgXG5gYGAga290bGluXG4vLyBmaWxlIG5hbWU6IGV4YW1wbGUua3RcbnBhY2thZ2UgZm9vXG4gIFxuZnVuIGJheigpIHt9XG5jbGFzcyBCYXIge31cbmBgYFxuICBcbiogSWYgeW91IGRvIG5vdCBzcGVjaWZ5IGFueSB2aXNpYmlsaXR5IG1vZGlmaWVyLCBgcHVibGljYCBpcyB1c2VkIGJ5IGRlZmF1bHQsIHdoaWNoIG1lYW5zIHRoYXQgeW91ciBkZWNsYXJhdGlvbnMgd2lsbCBiZSB2aXNpYmxlIGV2ZXJ5d2hlcmU7XG4qIElmIHlvdSBtYXJrIGEgZGVjbGFyYXRpb24gYHByaXZhdGVgLCBpdCB3aWxsIG9ubHkgYmUgdmlzaWJsZSBpbnNpZGUgdGhlIGZpbGUgY29udGFpbmluZyB0aGUgZGVjbGFyYXRpb247XG4qIElmIHlvdSBtYXJrIGl0IGBpbnRlcm5hbGAsIGl0IGlzIHZpc2libGUgZXZlcnl3aGVyZSBpbiB0aGUgc2FtZSBbbW9kdWxlXSgjbW9kdWxlcyk7XG4qIGBwcm90ZWN0ZWRgIGlzIG5vdCBhdmFpbGFibGUgZm9yIHRvcC1sZXZlbCBkZWNsYXJhdGlvbnMuXG4gIFxuRXhhbXBsZXM6XG4gIFxuYGBgIGtvdGxpblxuLy8gZmlsZSBuYW1lOiBleGFtcGxlLmt0XG5wYWNrYWdlIGZvb1xuICBcbnByaXZhdGUgZnVuIGZvbygpIHt9IC8vIHZpc2libGUgaW5zaWRlIGV4YW1wbGUua3RcbiAgXG5wdWJsaWMgdmFyIGJhcjogSW50ID0gNSAvLyBwcm9wZXJ0eSBpcyB2aXNpYmxlIGV2ZXJ5d2hlcmVcbiAgICBwcml2YXRlIHNldCAgICAgICAgIC8vIHNldHRlciBpcyB2aXNpYmxlIG9ubHkgaW4gZXhhbXBsZS5rdFxuICBcbmludGVybmFsIHZhbCBiYXogPSA2ICAgIC8vIHZpc2libGUgaW5zaWRlIHRoZSBzYW1lIG1vZHVsZVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/visibility-modifiers.html#packages"
            ],
            "flags": 0,
            "guid": "GP|,e]urf@",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "VisibilityModifiers"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Visibility Modifiers for&nbsp;<b>Classes and Interfaces</b>",
                "<p>For members declared inside a class:</p>\n<ul>\n<li align=\"left\"><code>private</code> means visible inside this class only (including all its members);</li>\n<li align=\"left\"><code>protected</code> --- same as <code>private</code> + visible in subclasses too;</li>\n<li align=\"left\"><code>internal</code> --- any client <em>inside this module</em> who sees the declaring class sees its <code>internal</code> members;</li>\n<li align=\"left\"><code>public</code> --- any client who sees the declaring class sees its <code>public</code> members.</li>\n</ul>\n<p><em>NOTE</em> for Java users: outer class does not see private members of its inner classes in Kotlin.</p>\n<p>If you override a <code>protected</code> member and do not specify the visibility explicitly, the overriding member will also have <code>protected</code> visibility.</p>\n<p>Examples:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Outer</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n    <span style=\"color: #204a87; font-weight: bold\">protected</span> <span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">2</span>\n    <span style=\"color: #204a87; font-weight: bold\">internal</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">c</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">3</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">d</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">4</span>  <span style=\"color: #8f5902; font-style: italic\">// public by default</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">protected</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Nested</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">5</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Subclass</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Outer</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// a is not visible</span>\n    <span style=\"color: #8f5902; font-style: italic\">// b, c and d are visible</span>\n    <span style=\"color: #8f5902; font-style: italic\">// Nested and e are visible</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">5</span>   <span style=\"color: #8f5902; font-style: italic\">// 'b' is protected</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Unrelated</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">o</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Outer</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// o.a, o.b are not visible</span>\n    <span style=\"color: #8f5902; font-style: italic\">// o.c and o.d are visible (same module)</span>\n    <span style=\"color: #8f5902; font-style: italic\">// Outer.Nested is not visible, and Nested::e is not visible either </span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzAxMzYsICJpZCI6ICIxNDg4MTAzMzkyNzM3LTAwMSIsICJtZCI6ICJGb3IgbWVtYmVycyBkZWNsYXJlZCBpbnNpZGUgYSBjbGFzczpcbiAgXG4qIGBwcml2YXRlYCBtZWFucyB2aXNpYmxlIGluc2lkZSB0aGlzIGNsYXNzIG9ubHkgKGluY2x1ZGluZyBhbGwgaXRzIG1lbWJlcnMpO1xuKiBgcHJvdGVjdGVkYCAtLS0gc2FtZSBhcyBgcHJpdmF0ZWAgKyB2aXNpYmxlIGluIHN1YmNsYXNzZXMgdG9vO1xuKiBgaW50ZXJuYWxgIC0tLSBhbnkgY2xpZW50ICppbnNpZGUgdGhpcyBtb2R1bGUqIHdobyBzZWVzIHRoZSBkZWNsYXJpbmcgY2xhc3Mgc2VlcyBpdHMgYGludGVybmFsYCBtZW1iZXJzO1xuKiBgcHVibGljYCAtLS0gYW55IGNsaWVudCB3aG8gc2VlcyB0aGUgZGVjbGFyaW5nIGNsYXNzIHNlZXMgaXRzIGBwdWJsaWNgIG1lbWJlcnMuXG4gIFxuKk5PVEUqIGZvciBKYXZhIHVzZXJzOiBvdXRlciBjbGFzcyBkb2VzIG5vdCBzZWUgcHJpdmF0ZSBtZW1iZXJzIG9mIGl0cyBpbm5lciBjbGFzc2VzIGluIEtvdGxpbi5cbiAgXG5JZiB5b3Ugb3ZlcnJpZGUgYSBgcHJvdGVjdGVkYCBtZW1iZXIgYW5kIGRvIG5vdCBzcGVjaWZ5IHRoZSB2aXNpYmlsaXR5IGV4cGxpY2l0bHksIHRoZSBvdmVycmlkaW5nIG1lbWJlciB3aWxsIGFsc28gaGF2ZSBgcHJvdGVjdGVkYCB2aXNpYmlsaXR5LlxuIFxuRXhhbXBsZXM6XG4gIFxuYGBgIGtvdGxpblxub3BlbiBjbGFzcyBPdXRlciB7XG4gICAgcHJpdmF0ZSB2YWwgYSA9IDFcbiAgICBwcm90ZWN0ZWQgb3BlbiB2YWwgYiA9IDJcbiAgICBpbnRlcm5hbCB2YWwgYyA9IDNcbiAgICB2YWwgZCA9IDQgIC8vIHB1YmxpYyBieSBkZWZhdWx0XG4gICAgXG4gICAgcHJvdGVjdGVkIGNsYXNzIE5lc3RlZCB7XG4gICAgICAgIHB1YmxpYyB2YWwgZTogSW50ID0gNVxuICAgIH1cbn1cbiAgXG5jbGFzcyBTdWJjbGFzcyA6IE91dGVyKCkge1xuICAgIC8vIGEgaXMgbm90IHZpc2libGVcbiAgICAvLyBiLCBjIGFuZCBkIGFyZSB2aXNpYmxlXG4gICAgLy8gTmVzdGVkIGFuZCBlIGFyZSB2aXNpYmxlXG4gIFxuICAgIG92ZXJyaWRlIHZhbCBiID0gNSAgIC8vICZhcG9zO2ImYXBvczsgaXMgcHJvdGVjdGVkXG59XG4gIFxuY2xhc3MgVW5yZWxhdGVkKG86IE91dGVyKSB7XG4gICAgLy8gby5hLCBvLmIgYXJlIG5vdCB2aXNpYmxlXG4gICAgLy8gby5jIGFuZCBvLmQgYXJlIHZpc2libGUgKHNhbWUgbW9kdWxlKVxuICAgIC8vIE91dGVyLk5lc3RlZCBpcyBub3QgdmlzaWJsZSwgYW5kIE5lc3RlZDo6ZSBpcyBub3QgdmlzaWJsZSBlaXRoZXIgXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/visibility-modifiers.html#classes-and-interfaces"
            ],
            "flags": 0,
            "guid": "dgQ/<If)A!",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "VisibilityModifiers"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Visibility Modifiers for <b>Constructors</b>",
                "<p>To specify a visibility of the primary constructor of a class, use the following syntax (note that you need to add an<br />\nexplicit <em class=\"keyword\">constructor</em> keyword):</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #000000\">constructor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Here the constructor is private. By default, all constructors are <code>public</code>, which effectively amounts to them being visible everywhere where the class is visible (i.e. a constructor of an <code>internal</code> class is only visible within the same module).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA2ODksICJpZCI6ICIxNDg4MTAzNDUyMTgzLTAwMSIsICJtZCI6ICJUbyBzcGVjaWZ5IGEgdmlzaWJpbGl0eSBvZiB0aGUgcHJpbWFyeSBjb25zdHJ1Y3RvciBvZiBhIGNsYXNzLCB1c2UgdGhlIGZvbGxvd2luZyBzeW50YXggKG5vdGUgdGhhdCB5b3UgbmVlZCB0byBhZGQgYW5cbmV4cGxpY2l0ICpjb25zdHJ1Y3Rvcip7OiAua2V5d29yZCB9IGtleXdvcmQpOlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIEMgcHJpdmF0ZSBjb25zdHJ1Y3RvcihhOiBJbnQpIHsgLi4uIH1cbmBgYFxuICBcbkhlcmUgdGhlIGNvbnN0cnVjdG9yIGlzIHByaXZhdGUuIEJ5IGRlZmF1bHQsIGFsbCBjb25zdHJ1Y3RvcnMgYXJlIGBwdWJsaWNgLCB3aGljaCBlZmZlY3RpdmVseSBhbW91bnRzIHRvIHRoZW0gYmVpbmcgdmlzaWJsZSBldmVyeXdoZXJlIHdoZXJlIHRoZSBjbGFzcyBpcyB2aXNpYmxlIChpLmUuIGEgY29uc3RydWN0b3Igb2YgYW4gYGludGVybmFsYCBjbGFzcyBpcyBvbmx5IHZpc2libGUgd2l0aGluIHRoZSBzYW1lIG1vZHVsZSkuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/visibility-modifiers.html#constructors"
            ],
            "flags": 0,
            "guid": "o!HsrD2p;&",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "VisibilityModifiers"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Visibility Modifiers for&nbsp;<b>Local declarations</b>",
                "<p>Local variables, functions and classes can not have visibility modifiers.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzAxNjMsICJpZCI6ICIxNDg4MTAzNDgzNTA3LTAwMSIsICJtZCI6ICJMb2NhbCB2YXJpYWJsZXMsIGZ1bmN0aW9ucyBhbmQgY2xhc3NlcyBjYW4gbm90IGhhdmUgdmlzaWJpbGl0eSBtb2RpZmllcnMuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/visibility-modifiers.html#local-declarations"
            ],
            "flags": 0,
            "guid": "y?J~oRZ3QK",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "VisibilityModifiers"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Visibility Modifiers for&nbsp;<b>Modules</b>",
                "<p>The <code>internal</code> visibility modifier means that the member is visible with the same module. More specifically,<br />\na module is a set of Kotlin files compiled together:</p>\n<ul>\n<li align=\"left\">an IntelliJ IDEA module;</li>\n<li align=\"left\">a Maven or Gradle project;</li>\n<li align=\"left\">a Gradle source set;</li>\n<li align=\"left\">a set of files compiled with one invocation of the <kotlinc> Ant task.</kotlinc></li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzA4NTksICJpZCI6ICIxNDg4MTAzNTA3NDMxLTAwMSIsICJtZCI6ICJUaGUgYGludGVybmFsYCB2aXNpYmlsaXR5IG1vZGlmaWVyIG1lYW5zIHRoYXQgdGhlIG1lbWJlciBpcyB2aXNpYmxlIHdpdGggdGhlIHNhbWUgbW9kdWxlLiBNb3JlIHNwZWNpZmljYWxseSxcbmEgbW9kdWxlIGlzIGEgc2V0IG9mIEtvdGxpbiBmaWxlcyBjb21waWxlZCB0b2dldGhlcjpcbiAgXG4gICogYW4gSW50ZWxsaUogSURFQSBtb2R1bGU7XG4gICogYSBNYXZlbiBvciBHcmFkbGUgcHJvamVjdDtcbiAgKiBhIEdyYWRsZSBzb3VyY2Ugc2V0O1xuICAqIGEgc2V0IG9mIGZpbGVzIGNvbXBpbGVkIHdpdGggb25lIGludm9jYXRpb24gb2YgdGhlICZsdDtrb3RsaW5jJmd0OyBBbnQgdGFzay5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/visibility-modifiers.html#modules"
            ],
            "flags": 0,
            "guid": "A4l2([/rY#",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "VisibilityModifiers"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Extensions</b>",
                "<p>Kotlin, similar to C# and Gosu, provides the ability to extend a class with new functionality without having to inherit from the class or use any type of design pattern such as Decorator.<br />\nThis is done via special declarations called <em>extensions</em>. Kotlin supports <em>extension functions</em> and <em>extension properties</em>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzAyMTMsICJpZCI6ICIxNDg4MTAzNTIzMjQ4LTAwMSIsICJtZCI6ICJLb3RsaW4sIHNpbWlsYXIgdG8gQyMgYW5kIEdvc3UsIHByb3ZpZGVzIHRoZSBhYmlsaXR5IHRvIGV4dGVuZCBhIGNsYXNzIHdpdGggbmV3IGZ1bmN0aW9uYWxpdHkgd2l0aG91dCBoYXZpbmcgdG8gaW5oZXJpdCBmcm9tIHRoZSBjbGFzcyBvciB1c2UgYW55IHR5cGUgb2YgZGVzaWduIHBhdHRlcm4gc3VjaCBhcyBEZWNvcmF0b3IuXG5UaGlzIGlzIGRvbmUgdmlhIHNwZWNpYWwgZGVjbGFyYXRpb25zIGNhbGxlZCBfZXh0ZW5zaW9uc18uIEtvdGxpbiBzdXBwb3J0cyBfZXh0ZW5zaW9uIGZ1bmN0aW9uc18gYW5kIF9leHRlbnNpb24gcHJvcGVydGllc18uXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/extensions.html#extensions"
            ],
            "flags": 0,
            "guid": "J@v?WNCkOb",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Extensions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Extension</b> Functions",
                "<p>To declare an extension function, we need to prefix its name with a <em>receiver type</em>, i.e. the type being extended.<br />\nThe following adds a <code>swap</code> function to <code>MutableList&lt;Int&gt;</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">MutableList</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">swap</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">index1</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">index2</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">tmp</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">index1</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #8f5902; font-style: italic\">// 'this' corresponds to the list</span>\n    <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">index1</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">index2</span><span style=\"color: #000000; font-weight: bold\">]</span>\n    <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">index2</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">tmp</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The <em class=\"keyword\">this</em> keyword inside an extension function corresponds to the receiver object (the one that is passed before the dot). <br />\nNow, we can call such a function on any <code>MutableList&lt;Int&gt;</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">l</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">mutableListOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">l</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">swap</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// 'this' inside 'swap()' will hold the value of 'l'</span>\n</pre></div>\n<p>Of course, this function makes sense for any <code>MutableList&lt;T&gt;</code>, and we can make it generic:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">MutableList</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">swap</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">index1</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">index2</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">tmp</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">index1</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #8f5902; font-style: italic\">// 'this' corresponds to the list</span>\n    <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">index1</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">index2</span><span style=\"color: #000000; font-weight: bold\">]</span>\n    <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">index2</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">tmp</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>We declare the generic type parameter before the function name for it to be available in the receiver type expression.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzAyNzMsICJpZCI6ICIxNDg4MTAzNjA4NTY0LTAwMSIsICJtZCI6ICJUbyBkZWNsYXJlIGFuIGV4dGVuc2lvbiBmdW5jdGlvbiwgd2UgbmVlZCB0byBwcmVmaXggaXRzIG5hbWUgd2l0aCBhIF9yZWNlaXZlciB0eXBlXywgaS5lLiB0aGUgdHlwZSBiZWluZyBleHRlbmRlZC5cblRoZSBmb2xsb3dpbmcgYWRkcyBhIGBzd2FwYCBmdW5jdGlvbiB0byBgTXV0YWJsZUxpc3QmbHQ7SW50Jmd0O2A6XG4gIFxuYGBgIGtvdGxpblxuZnVuIE11dGFibGVMaXN0Jmx0O0ludCZndDsuc3dhcChpbmRleDE6IEludCwgaW5kZXgyOiBJbnQpIHtcbiAgICB2YWwgdG1wID0gdGhpc1tpbmRleDFdIC8vICZhcG9zO3RoaXMmYXBvczsgY29ycmVzcG9uZHMgdG8gdGhlIGxpc3RcbiAgICB0aGlzW2luZGV4MV0gPSB0aGlzW2luZGV4Ml1cbiAgICB0aGlzW2luZGV4Ml0gPSB0bXBcbn1cbmBgYFxuICBcblRoZSAqdGhpcyp7OiAua2V5d29yZCB9IGtleXdvcmQgaW5zaWRlIGFuIGV4dGVuc2lvbiBmdW5jdGlvbiBjb3JyZXNwb25kcyB0byB0aGUgcmVjZWl2ZXIgb2JqZWN0ICh0aGUgb25lIHRoYXQgaXMgcGFzc2VkIGJlZm9yZSB0aGUgZG90KS4gXG5Ob3csIHdlIGNhbiBjYWxsIHN1Y2ggYSBmdW5jdGlvbiBvbiBhbnkgYE11dGFibGVMaXN0Jmx0O0ludCZndDtgOlxuICBcbmBgYCBrb3RsaW5cbnZhbCBsID0gbXV0YWJsZUxpc3RPZigxLCAyLCAzKVxubC5zd2FwKDAsIDIpIC8vICZhcG9zO3RoaXMmYXBvczsgaW5zaWRlICZhcG9zO3N3YXAoKSZhcG9zOyB3aWxsIGhvbGQgdGhlIHZhbHVlIG9mICZhcG9zO2wmYXBvcztcbmBgYFxuICBcbk9mIGNvdXJzZSwgdGhpcyBmdW5jdGlvbiBtYWtlcyBzZW5zZSBmb3IgYW55IGBNdXRhYmxlTGlzdCZsdDtUJmd0O2AsIGFuZCB3ZSBjYW4gbWFrZSBpdCBnZW5lcmljOlxuICBcbmBgYCBrb3RsaW5cbmZ1biAmbHQ7VCZndDsgTXV0YWJsZUxpc3QmbHQ7VCZndDsuc3dhcChpbmRleDE6IEludCwgaW5kZXgyOiBJbnQpIHtcbiAgICB2YWwgdG1wID0gdGhpc1tpbmRleDFdIC8vICZhcG9zO3RoaXMmYXBvczsgY29ycmVzcG9uZHMgdG8gdGhlIGxpc3RcbiAgICB0aGlzW2luZGV4MV0gPSB0aGlzW2luZGV4Ml1cbiAgICB0aGlzW2luZGV4Ml0gPSB0bXBcbn1cbmBgYFxuICBcbldlIGRlY2xhcmUgdGhlIGdlbmVyaWMgdHlwZSBwYXJhbWV0ZXIgYmVmb3JlIHRoZSBmdW5jdGlvbiBuYW1lIGZvciBpdCB0byBiZSBhdmFpbGFibGUgaW4gdGhlIHJlY2VpdmVyIHR5cGUgZXhwcmVzc2lvbi5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/extensions.html#extension-functions"
            ],
            "flags": 0,
            "guid": "j-;`D#+;w@",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Extensions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Extensions are <b>resolved statically</b>",
                "<p>Extensions do not actually modify classes they extend. By defining an extension, you do not insert new members into a class, but merely make new functions callable with the dot-notation on variables of this type.</p>\n<p>We would like to emphasize that extension functions are dispatched <strong>statically</strong>, i.e. they are not virtual by receiver type.<br />\nThis means that the extension function being called is determined by the type of the expression on which the function is invoked, not by the type of the result of evaluating that expression at runtime. For example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">D</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">C</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">C</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"c\"</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">D</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"d\"</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">printFoo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">c</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">C</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">c</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">())</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">printFoo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">D</span><span style=\"color: #000000; font-weight: bold\">())</span>\n</pre></div>\n<p>This example will print \"c\", because the extension function being called depends only on the declared type of the parameter <code>c</code>, which is the <code>C</code> class.</p>\n<p>If a class has a member function, and an extension function is defined which has the same receiver type, the same name and is applicable to given arguments, the <strong>member always wins</strong>.<br />\nFor example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"member\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">C</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"extension\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>If we call <code>c.foo()</code> of any <code>c</code> of type <code>C</code>, it will print \"member\", not \"extension\".</p>\n<p>However, it's perfectly OK for extension functions to overload member functions which have the same name but a different signature:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"member\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">C</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"extension\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The call to <code>C().foo(1)</code> will print \"extension\".</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA3NDMsICJpZCI6ICIxNDg4MTAzNjI1ODkzLTAwMSIsICJtZCI6ICJFeHRlbnNpb25zIGRvIG5vdCBhY3R1YWxseSBtb2RpZnkgY2xhc3NlcyB0aGV5IGV4dGVuZC4gQnkgZGVmaW5pbmcgYW4gZXh0ZW5zaW9uLCB5b3UgZG8gbm90IGluc2VydCBuZXcgbWVtYmVycyBpbnRvIGEgY2xhc3MsIGJ1dCBtZXJlbHkgbWFrZSBuZXcgZnVuY3Rpb25zIGNhbGxhYmxlIHdpdGggdGhlIGRvdC1ub3RhdGlvbiBvbiB2YXJpYWJsZXMgb2YgdGhpcyB0eXBlLlxuICBcbldlIHdvdWxkIGxpa2UgdG8gZW1waGFzaXplIHRoYXQgZXh0ZW5zaW9uIGZ1bmN0aW9ucyBhcmUgZGlzcGF0Y2hlZCAqKnN0YXRpY2FsbHkqKiwgaS5lLiB0aGV5IGFyZSBub3QgdmlydHVhbCBieSByZWNlaXZlciB0eXBlLlxuVGhpcyBtZWFucyB0aGF0IHRoZSBleHRlbnNpb24gZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGlzIGRldGVybWluZWQgYnkgdGhlIHR5cGUgb2YgdGhlIGV4cHJlc3Npb24gb24gd2hpY2ggdGhlIGZ1bmN0aW9uIGlzIGludm9rZWQsIG5vdCBieSB0aGUgdHlwZSBvZiB0aGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhhdCBleHByZXNzaW9uIGF0IHJ1bnRpbWUuIEZvciBleGFtcGxlOlxuICBcbmBgYCBrb3RsaW5cbm9wZW4gY2xhc3MgQ1xuICBcbmNsYXNzIEQ6IEMoKVxuICBcbmZ1biBDLmZvbygpID0gJnF1b3Q7YyZxdW90O1xuICBcbmZ1biBELmZvbygpID0gJnF1b3Q7ZCZxdW90O1xuICBcbmZ1biBwcmludEZvbyhjOiBDKSB7XG4gICAgcHJpbnRsbihjLmZvbygpKVxufVxuICBcbnByaW50Rm9vKEQoKSlcbmBgYFxuICBcblRoaXMgZXhhbXBsZSB3aWxsIHByaW50ICZxdW90O2MmcXVvdDssIGJlY2F1c2UgdGhlIGV4dGVuc2lvbiBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbmx5IG9uIHRoZSBkZWNsYXJlZCB0eXBlIG9mIHRoZSBwYXJhbWV0ZXIgYGNgLCB3aGljaCBpcyB0aGUgYENgIGNsYXNzLlxuICBcbklmIGEgY2xhc3MgaGFzIGEgbWVtYmVyIGZ1bmN0aW9uLCBhbmQgYW4gZXh0ZW5zaW9uIGZ1bmN0aW9uIGlzIGRlZmluZWQgd2hpY2ggaGFzIHRoZSBzYW1lIHJlY2VpdmVyIHR5cGUsIHRoZSBzYW1lIG5hbWUgYW5kIGlzIGFwcGxpY2FibGUgdG8gZ2l2ZW4gYXJndW1lbnRzLCB0aGUgKiptZW1iZXIgYWx3YXlzIHdpbnMqKi5cbkZvciBleGFtcGxlOlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIEMge1xuICAgIGZ1biBmb28oKSB7IHByaW50bG4oJnF1b3Q7bWVtYmVyJnF1b3Q7KSB9XG59XG4gIFxuZnVuIEMuZm9vKCkgeyBwcmludGxuKCZxdW90O2V4dGVuc2lvbiZxdW90OykgfVxuYGBgXG4gIFxuSWYgd2UgY2FsbCBgYy5mb28oKWAgb2YgYW55IGBjYCBvZiB0eXBlIGBDYCwgaXQgd2lsbCBwcmludCAmcXVvdDttZW1iZXImcXVvdDssIG5vdCAmcXVvdDtleHRlbnNpb24mcXVvdDsuXG4gIFxuSG93ZXZlciwgaXQmYXBvcztzIHBlcmZlY3RseSBPSyBmb3IgZXh0ZW5zaW9uIGZ1bmN0aW9ucyB0byBvdmVybG9hZCBtZW1iZXIgZnVuY3Rpb25zIHdoaWNoIGhhdmUgdGhlIHNhbWUgbmFtZSBidXQgYSBkaWZmZXJlbnQgc2lnbmF0dXJlOlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIEMge1xuICAgIGZ1biBmb28oKSB7IHByaW50bG4oJnF1b3Q7bWVtYmVyJnF1b3Q7KSB9XG59XG4gIFxuZnVuIEMuZm9vKGk6IEludCkgeyBwcmludGxuKCZxdW90O2V4dGVuc2lvbiZxdW90OykgfVxuYGBgXG4gIFxuVGhlIGNhbGwgdG8gYEMoKS5mb28oMSlgIHdpbGwgcHJpbnQgJnF1b3Q7ZXh0ZW5zaW9uJnF1b3Q7LlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/extensions.html#extensions-are-resolved-statically"
            ],
            "flags": 0,
            "guid": "Q?R)n_j2k:",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Extensions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Nullable Receiver</b> in <i>Extension Functions</i>",
                "<p>Note that extensions can be defined with a nullable receiver type.<br />\nSuch extensions can be called on an object variable even if its value is null, and can check for <code>this == null</code> inside the body.<br />\nThis is what allows you to call toString() in Kotlin without checking for null: the check happens inside the extension function.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">Any</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">toString</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #4e9a06\">\"null\"</span>\n    <span style=\"color: #8f5902; font-style: italic\">// after the null check, 'this' is autocast to a non-null type, so the toString() below</span>\n    <span style=\"color: #8f5902; font-style: italic\">// resolves to the member function of the Any class</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">toString</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA3NjAsICJpZCI6ICIxNDg4MTAzNjYzMzA2LTAwMSIsICJtZCI6ICJOb3RlIHRoYXQgZXh0ZW5zaW9ucyBjYW4gYmUgZGVmaW5lZCB3aXRoIGEgbnVsbGFibGUgcmVjZWl2ZXIgdHlwZS5cblN1Y2ggZXh0ZW5zaW9ucyBjYW4gYmUgY2FsbGVkIG9uIGFuIG9iamVjdCB2YXJpYWJsZSBldmVuIGlmIGl0cyB2YWx1ZSBpcyBudWxsLCBhbmQgY2FuIGNoZWNrIGZvciBgdGhpcyA9PSBudWxsYCBpbnNpZGUgdGhlIGJvZHkuXG5UaGlzIGlzIHdoYXQgYWxsb3dzIHlvdSB0byBjYWxsIHRvU3RyaW5nKCkgaW4gS290bGluIHdpdGhvdXQgY2hlY2tpbmcgZm9yIG51bGw6IHRoZSBjaGVjayBoYXBwZW5zIGluc2lkZSB0aGUgZXh0ZW5zaW9uIGZ1bmN0aW9uLlxuICBcbmBgYCBrb3RsaW5cbmZ1biBBbnk/LnRvU3RyaW5nKCk6IFN0cmluZyB7XG4gICAgaWYgKHRoaXMgPT0gbnVsbCkgcmV0dXJuICZxdW90O251bGwmcXVvdDtcbiAgICAvLyBhZnRlciB0aGUgbnVsbCBjaGVjaywgJmFwb3M7dGhpcyZhcG9zOyBpcyBhdXRvY2FzdCB0byBhIG5vbi1udWxsIHR5cGUsIHNvIHRoZSB0b1N0cmluZygpIGJlbG93XG4gICAgLy8gcmVzb2x2ZXMgdG8gdGhlIG1lbWJlciBmdW5jdGlvbiBvZiB0aGUgQW55IGNsYXNzXG4gICAgcmV0dXJuIHRvU3RyaW5nKClcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/extensions.html#nullable-receiver"
            ],
            "flags": 0,
            "guid": "AjI)7j{w;+",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Extensions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Extension</b> Properties",
                "<p>Similarly to functions, Kotlin supports extension properties:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">lastIndex</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span>\n    <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">size</span> <span style=\"color: #000000; font-weight: bold\">-</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n</pre></div>\n<p>Note that, since extensions do not actually insert members into classes, there's no efficient way for an extension property to have a <a href=\"properties.html#backing-fields\">backing field</a>. This is why <strong>initializers are not allowed for extension properties</strong>.<br />\nTheir behavior can only be defined by explicitly providing getters/setters.</p>\n<p>Example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">Foo</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">bar</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #8f5902; font-style: italic\">// error: initializers are not allowed for extension properties</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA3NzksICJpZCI6ICIxNDg4MTAzNzIxMTgwLTAwMSIsICJtZCI6ICJTaW1pbGFybHkgdG8gZnVuY3Rpb25zLCBLb3RsaW4gc3VwcG9ydHMgZXh0ZW5zaW9uIHByb3BlcnRpZXM6XG4gIFxuYGBgIGtvdGxpblxudmFsICZsdDtUJmd0OyBMaXN0Jmx0O1QmZ3Q7Lmxhc3RJbmRleDogSW50XG4gICAgZ2V0KCkgPSBzaXplIC0gMVxuYGBgXG4gIFxuTm90ZSB0aGF0LCBzaW5jZSBleHRlbnNpb25zIGRvIG5vdCBhY3R1YWxseSBpbnNlcnQgbWVtYmVycyBpbnRvIGNsYXNzZXMsIHRoZXJlJmFwb3M7cyBubyBlZmZpY2llbnQgd2F5IGZvciBhbiBleHRlbnNpb24gcHJvcGVydHkgdG8gaGF2ZSBhIFtiYWNraW5nIGZpZWxkXShwcm9wZXJ0aWVzLmh0bWwjYmFja2luZy1maWVsZHMpLiBUaGlzIGlzIHdoeSAqKmluaXRpYWxpemVycyBhcmUgbm90IGFsbG93ZWQgZm9yIGV4dGVuc2lvbiBwcm9wZXJ0aWVzKiouXG5UaGVpciBiZWhhdmlvciBjYW4gb25seSBiZSBkZWZpbmVkIGJ5IGV4cGxpY2l0bHkgcHJvdmlkaW5nIGdldHRlcnMvc2V0dGVycy5cbiAgXG5FeGFtcGxlOlxuICBcbmBgYCBrb3RsaW5cbnZhbCBGb28uYmFyID0gMSAvLyBlcnJvcjogaW5pdGlhbGl6ZXJzIGFyZSBub3QgYWxsb3dlZCBmb3IgZXh0ZW5zaW9uIHByb3BlcnRpZXNcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/extensions.html#extension-properties"
            ],
            "flags": 0,
            "guid": "wcdI&dJoCn",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Extensions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Companion Object</b> Extensions",
                "<p>If a class has a <a href=\"object-declarations.html#companion-objects\">companion object</a> defined, you can also define extension functions and properties for the companion object:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">MyClass</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">companion</span> <span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">{ }  // </span><span style=\"color: #000000\">will</span> <span style=\"color: #000000\">be</span> <span style=\"color: #000000\">called</span> <span style=\"color: #4e9a06\">\"Companion\"</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">MyClass</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Companion</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Just like regular members of the companion object, they can be called using only the class name as the qualifier:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">MyClass</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA3OTEsICJpZCI6ICIxNDg4MTAzNzQxODk1LTAwMSIsICJtZCI6ICJJZiBhIGNsYXNzIGhhcyBhIFtjb21wYW5pb24gb2JqZWN0XShvYmplY3QtZGVjbGFyYXRpb25zLmh0bWwjY29tcGFuaW9uLW9iamVjdHMpIGRlZmluZWQsIHlvdSBjYW4gYWxzbyBkZWZpbmUgZXh0ZW5zaW9uIGZ1bmN0aW9ucyBhbmQgcHJvcGVydGllcyBmb3IgdGhlIGNvbXBhbmlvbiBvYmplY3Q6XG4gIFxuYGBgIGtvdGxpblxuY2xhc3MgTXlDbGFzcyB7XG4gICAgY29tcGFuaW9uIG9iamVjdCB7IH0gIC8vIHdpbGwgYmUgY2FsbGVkICZxdW90O0NvbXBhbmlvbiZxdW90O1xufVxuICBcbmZ1biBNeUNsYXNzLkNvbXBhbmlvbi5mb28oKSB7XG4gICAgLy8gLi4uXG59XG5gYGBcbiAgXG5KdXN0IGxpa2UgcmVndWxhciBtZW1iZXJzIG9mIHRoZSBjb21wYW5pb24gb2JqZWN0LCB0aGV5IGNhbiBiZSBjYWxsZWQgdXNpbmcgb25seSB0aGUgY2xhc3MgbmFtZSBhcyB0aGUgcXVhbGlmaWVyOlxuICBcbmBgYCBrb3RsaW5cbk15Q2xhc3MuZm9vKClcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/extensions.html#companion-object-extensions"
            ],
            "flags": 0,
            "guid": "rcmcWzWC~@",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Extensions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Scope</b> of Extensions",
                "<p>Most of the time we define extensions on the top level, i.e. directly under packages:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">package</span> <span style=\"color: #000000\">foo.bar</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">Baz</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">goo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span> \n</pre></div>\n<p>To use such an extension outside its declaring package, we need to import it at the call site:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">package</span> <span style=\"color: #000000\">com.example.usage</span>\n\n<span style=\"color: #204a87; font-weight: bold\">import</span> <span style=\"color: #000000\">foo.bar.goo</span> <span style=\"color: #8f5902; font-style: italic\">// importing all extensions by name \"goo\"</span>\n                   <span style=\"color: #8f5902; font-style: italic\">// or</span>\n<span style=\"color: #204a87; font-weight: bold\">import</span> <span style=\"color: #000000\">foo.bar.*</span>   <span style=\"color: #8f5902; font-style: italic\">// importing everything from \"foo.bar\"</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">usage</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">baz</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Baz</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">baz</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">goo</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYyNDcyMzgsICJpZCI6ICIxNDg4MTAzNzY3Mzg5LTAwMSIsICJtZCI6ICJNb3N0IG9mIHRoZSB0aW1lIHdlIGRlZmluZSBleHRlbnNpb25zIG9uIHRoZSB0b3AgbGV2ZWwsIGkuZS4gZGlyZWN0bHkgdW5kZXIgcGFja2FnZXM6XG4gIFxuYGBgIGtvdGxpblxucGFja2FnZSBmb28uYmFyXG4gIFxuZnVuIEJhei5nb28oKSB7IC4uLiB9IFxuYGBgIFxuICBcblRvIHVzZSBzdWNoIGFuIGV4dGVuc2lvbiBvdXRzaWRlIGl0cyBkZWNsYXJpbmcgcGFja2FnZSwgd2UgbmVlZCB0byBpbXBvcnQgaXQgYXQgdGhlIGNhbGwgc2l0ZTpcbiAgXG5gYGAga290bGluXG5wYWNrYWdlIGNvbS5leGFtcGxlLnVzYWdlXG4gIFxuaW1wb3J0IGZvby5iYXIuZ29vIC8vIGltcG9ydGluZyBhbGwgZXh0ZW5zaW9ucyBieSBuYW1lICZxdW90O2dvbyZxdW90O1xuICAgICAgICAgICAgICAgICAgIC8vIG9yXG5pbXBvcnQgZm9vLmJhci4qICAgLy8gaW1wb3J0aW5nIGV2ZXJ5dGhpbmcgZnJvbSAmcXVvdDtmb28uYmFyJnF1b3Q7XG4gIFxuZnVuIHVzYWdlKGJhejogQmF6KSB7XG4gICAgYmF6LmdvbygpXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/extensions.html#scope-of-extensions"
            ],
            "flags": 0,
            "guid": "sGq_BU`FPT",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Extensions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Declaring <b>Extensions</b> as <b>Members</b>",
                "<p>Inside a class, you can declare extensions for another class. Inside such an extension, there are multiple <em>implicit receivers</em> - objects members of which can be accessed without a qualifier.<br />\nThe instance of the class in which the extension is declared is called <em>dispatch receiver</em>, and the instance of the receiver type of the extension method is called <em>extension receiver</em>.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">D</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">baz</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">D</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span>   <span style=\"color: #8f5902; font-style: italic\">// calls D.bar</span>\n        <span style=\"color: #000000\">baz</span><span style=\"color: #000000; font-weight: bold\">()</span>   <span style=\"color: #8f5902; font-style: italic\">// calls C.baz</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">caller</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">d</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">D</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">d</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span>   <span style=\"color: #8f5902; font-style: italic\">// call the extension function</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>In case of a name conflict between the members of the dispatch receiver and the extension receiver, the extension receiver takes precedence. To refer to the member of the dispatch receiver you can use the <a href=\"this-expressions.html#qualified\">qualified <code>this</code> syntax</a>.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">D</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">toString</span><span style=\"color: #000000; font-weight: bold\">()</span>         <span style=\"color: #8f5902; font-style: italic\">// calls D.toString()</span>\n        <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000\">@C</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toString</span><span style=\"color: #000000; font-weight: bold\">()</span>  <span style=\"color: #8f5902; font-style: italic\">// calls C.toString()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Extensions declared as members can be declared as <code>open</code> and overridden in subclasses. This means that the dispatch of such functions is virtual with regard to the dispatch receiver type, but static with regard to the extension receiver type.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">D</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">D1</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">D</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">D</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"D.foo in C\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">D1</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"D1.foo in C\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">caller</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">d</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">D</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">d</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span>   <span style=\"color: #8f5902; font-style: italic\">// call the extension function</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C1</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">C</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">D</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"D.foo in C1\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">D1</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"D1.foo in C1\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">C</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">caller</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">D</span><span style=\"color: #000000; font-weight: bold\">())</span>   <span style=\"color: #8f5902; font-style: italic\">// prints \"D.foo in C\"</span>\n<span style=\"color: #000000\">C1</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">caller</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">D</span><span style=\"color: #000000; font-weight: bold\">())</span>  <span style=\"color: #8f5902; font-style: italic\">// prints \"D.foo in C1\" - dispatch receiver is resolved virtually</span>\n<span style=\"color: #000000\">C</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">caller</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">D1</span><span style=\"color: #000000; font-weight: bold\">())</span>  <span style=\"color: #8f5902; font-style: italic\">// prints \"D.foo in C\" - extension receiver is resolved statically</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA4MTcsICJpZCI6ICIxNDg4MTAzNzkxNTQxLTAwMSIsICJtZCI6ICJJbnNpZGUgYSBjbGFzcywgeW91IGNhbiBkZWNsYXJlIGV4dGVuc2lvbnMgZm9yIGFub3RoZXIgY2xhc3MuIEluc2lkZSBzdWNoIGFuIGV4dGVuc2lvbiwgdGhlcmUgYXJlIG11bHRpcGxlIF9pbXBsaWNpdCByZWNlaXZlcnNfIC0gb2JqZWN0cyBtZW1iZXJzIG9mIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZCB3aXRob3V0IGEgcXVhbGlmaWVyLlxuVGhlIGluc3RhbmNlIG9mIHRoZSBjbGFzcyBpbiB3aGljaCB0aGUgZXh0ZW5zaW9uIGlzIGRlY2xhcmVkIGlzIGNhbGxlZCBfZGlzcGF0Y2ggcmVjZWl2ZXJfLCBhbmQgdGhlIGluc3RhbmNlIG9mIHRoZSByZWNlaXZlciB0eXBlIG9mIHRoZSBleHRlbnNpb24gbWV0aG9kIGlzIGNhbGxlZCBfZXh0ZW5zaW9uIHJlY2VpdmVyXy5cbiAgXG5gYGAga290bGluXG5jbGFzcyBEIHtcbiAgICBmdW4gYmFyKCkgeyAuLi4gfVxufVxuICBcbmNsYXNzIEMge1xuICAgIGZ1biBiYXooKSB7IC4uLiB9XG4gIFxuICAgIGZ1biBELmZvbygpIHtcbiAgICAgICAgYmFyKCkgICAvLyBjYWxscyBELmJhclxuICAgICAgICBiYXooKSAgIC8vIGNhbGxzIEMuYmF6XG4gICAgfVxuICBcbiAgICBmdW4gY2FsbGVyKGQ6IEQpIHtcbiAgICAgICAgZC5mb28oKSAgIC8vIGNhbGwgdGhlIGV4dGVuc2lvbiBmdW5jdGlvblxuICAgIH1cbn1cbmBgYFxuICBcbkluIGNhc2Ugb2YgYSBuYW1lIGNvbmZsaWN0IGJldHdlZW4gdGhlIG1lbWJlcnMgb2YgdGhlIGRpc3BhdGNoIHJlY2VpdmVyIGFuZCB0aGUgZXh0ZW5zaW9uIHJlY2VpdmVyLCB0aGUgZXh0ZW5zaW9uIHJlY2VpdmVyIHRha2VzIHByZWNlZGVuY2UuIFRvIHJlZmVyIHRvIHRoZSBtZW1iZXIgb2YgdGhlIGRpc3BhdGNoIHJlY2VpdmVyIHlvdSBjYW4gdXNlIHRoZSBbcXVhbGlmaWVkIGB0aGlzYCBzeW50YXhdKHRoaXMtZXhwcmVzc2lvbnMuaHRtbCNxdWFsaWZpZWQpLlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIEMge1xuICAgIGZ1biBELmZvbygpIHtcbiAgICAgICAgdG9TdHJpbmcoKSAgICAgICAgIC8vIGNhbGxzIEQudG9TdHJpbmcoKVxuICAgICAgICB0aGlzQEMudG9TdHJpbmcoKSAgLy8gY2FsbHMgQy50b1N0cmluZygpXG4gICAgfVxuYGBgXG4gIFxuRXh0ZW5zaW9ucyBkZWNsYXJlZCBhcyBtZW1iZXJzIGNhbiBiZSBkZWNsYXJlZCBhcyBgb3BlbmAgYW5kIG92ZXJyaWRkZW4gaW4gc3ViY2xhc3Nlcy4gVGhpcyBtZWFucyB0aGF0IHRoZSBkaXNwYXRjaCBvZiBzdWNoIGZ1bmN0aW9ucyBpcyB2aXJ0dWFsIHdpdGggcmVnYXJkIHRvIHRoZSBkaXNwYXRjaCByZWNlaXZlciB0eXBlLCBidXQgc3RhdGljIHdpdGggcmVnYXJkIHRvIHRoZSBleHRlbnNpb24gcmVjZWl2ZXIgdHlwZS5cbiAgXG5gYGAga290bGluXG5vcGVuIGNsYXNzIEQge1xufVxuICBcbmNsYXNzIEQxIDogRCgpIHtcbn1cbiAgXG5vcGVuIGNsYXNzIEMge1xuICAgIG9wZW4gZnVuIEQuZm9vKCkge1xuICAgICAgICBwcmludGxuKCZxdW90O0QuZm9vIGluIEMmcXVvdDspXG4gICAgfVxuICBcbiAgICBvcGVuIGZ1biBEMS5mb28oKSB7XG4gICAgICAgIHByaW50bG4oJnF1b3Q7RDEuZm9vIGluIEMmcXVvdDspXG4gICAgfVxuICBcbiAgICBmdW4gY2FsbGVyKGQ6IEQpIHtcbiAgICAgICAgZC5mb28oKSAgIC8vIGNhbGwgdGhlIGV4dGVuc2lvbiBmdW5jdGlvblxuICAgIH1cbn1cbiAgXG5jbGFzcyBDMSA6IEMoKSB7XG4gICAgb3ZlcnJpZGUgZnVuIEQuZm9vKCkge1xuICAgICAgICBwcmludGxuKCZxdW90O0QuZm9vIGluIEMxJnF1b3Q7KVxuICAgIH1cbiAgXG4gICAgb3ZlcnJpZGUgZnVuIEQxLmZvbygpIHtcbiAgICAgICAgcHJpbnRsbigmcXVvdDtEMS5mb28gaW4gQzEmcXVvdDspXG4gICAgfVxufVxuICBcbkMoKS5jYWxsZXIoRCgpKSAgIC8vIHByaW50cyAmcXVvdDtELmZvbyBpbiBDJnF1b3Q7XG5DMSgpLmNhbGxlcihEKCkpICAvLyBwcmludHMgJnF1b3Q7RC5mb28gaW4gQzEmcXVvdDsgLSBkaXNwYXRjaCByZWNlaXZlciBpcyByZXNvbHZlZCB2aXJ0dWFsbHlcbkMoKS5jYWxsZXIoRDEoKSkgIC8vIHByaW50cyAmcXVvdDtELmZvbyBpbiBDJnF1b3Q7IC0gZXh0ZW5zaW9uIHJlY2VpdmVyIGlzIHJlc29sdmVkIHN0YXRpY2FsbHlcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/extensions.html#declaring-extensions-as-members"
            ],
            "flags": 0,
            "guid": "Lyc;vvF_-?",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Extensions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Motivation</b> for introducing <b>extension functions</b>",
                "<p>In Java, we are used to classes named \"*Utils\": <code>FileUtils</code>, <code>StringUtils</code> and so on. The famous <code>java.util.Collections</code> belongs to the same breed.<br />\nAnd the unpleasant part about these Utils-classes is that the code that uses them looks like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">// Java</span>\n<span style=\"color: #000000\">Collections</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">swap</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">list</span><span style=\"color: #ce5c00; font-weight: bold\">,</span> <span style=\"color: #000000\">Collections</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">binarySearch</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">list</span><span style=\"color: #ce5c00; font-weight: bold\">,</span> <span style=\"color: #000000\">Collections</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">max</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">otherList</span><span style=\"color: #ce5c00; font-weight: bold\">)),</span> <span style=\"color: #000000\">Collections</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">max</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">list</span><span style=\"color: #ce5c00; font-weight: bold\">))</span>\n</pre></div>\n<p>Those class names are always getting in the way. We can use static imports and get this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #000000\">swap</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">list</span><span style=\"color: #ce5c00; font-weight: bold\">,</span> <span style=\"color: #000000\">binarySearch</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">list</span><span style=\"color: #ce5c00; font-weight: bold\">,</span> <span style=\"color: #000000\">max</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">otherList</span><span style=\"color: #ce5c00; font-weight: bold\">)),</span> <span style=\"color: #000000\">max</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">list</span><span style=\"color: #ce5c00; font-weight: bold\">))</span>\n</pre></div>\n<p>This is a little better, but we have no or little help from the powerful code completion of the IDE. It would be so much better if we could say</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #000000\">list</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">swap</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">list</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">binarySearch</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">otherList</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">max</span><span style=\"color: #ce5c00; font-weight: bold\">()),</span> <span style=\"color: #000000\">list</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">max</span><span style=\"color: #ce5c00; font-weight: bold\">())</span>\n</pre></div>\n<p>But we don't want to implement all the possible methods inside the class <code>List</code>, right? This is where extensions help us.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzA0NDAsICJpZCI6ICIxNDg4MTAzODk0MjIyLTAwMSIsICJtZCI6ICJJbiBKYXZhLCB3ZSBhcmUgdXNlZCB0byBjbGFzc2VzIG5hbWVkICZxdW90O1xcKlV0aWxzJnF1b3Q7OiBgRmlsZVV0aWxzYCwgYFN0cmluZ1V0aWxzYCBhbmQgc28gb24uIFRoZSBmYW1vdXMgYGphdmEudXRpbC5Db2xsZWN0aW9uc2AgYmVsb25ncyB0byB0aGUgc2FtZSBicmVlZC5cbkFuZCB0aGUgdW5wbGVhc2FudCBwYXJ0IGFib3V0IHRoZXNlIFV0aWxzLWNsYXNzZXMgaXMgdGhhdCB0aGUgY29kZSB0aGF0IHVzZXMgdGhlbSBsb29rcyBsaWtlIHRoaXM6XG4gIFxuYGBgIGphdmFcbi8vIEphdmFcbkNvbGxlY3Rpb25zLnN3YXAobGlzdCwgQ29sbGVjdGlvbnMuYmluYXJ5U2VhcmNoKGxpc3QsIENvbGxlY3Rpb25zLm1heChvdGhlckxpc3QpKSwgQ29sbGVjdGlvbnMubWF4KGxpc3QpKVxuYGBgXG4gIFxuVGhvc2UgY2xhc3MgbmFtZXMgYXJlIGFsd2F5cyBnZXR0aW5nIGluIHRoZSB3YXkuIFdlIGNhbiB1c2Ugc3RhdGljIGltcG9ydHMgYW5kIGdldCB0aGlzOlxuICBcbmBgYCBqYXZhXG4vLyBKYXZhXG5zd2FwKGxpc3QsIGJpbmFyeVNlYXJjaChsaXN0LCBtYXgob3RoZXJMaXN0KSksIG1heChsaXN0KSlcbmBgYFxuICBcblRoaXMgaXMgYSBsaXR0bGUgYmV0dGVyLCBidXQgd2UgaGF2ZSBubyBvciBsaXR0bGUgaGVscCBmcm9tIHRoZSBwb3dlcmZ1bCBjb2RlIGNvbXBsZXRpb24gb2YgdGhlIElERS4gSXQgd291bGQgYmUgc28gbXVjaCBiZXR0ZXIgaWYgd2UgY291bGQgc2F5XG4gIFxuYGBgIGphdmFcbi8vIEphdmFcbmxpc3Quc3dhcChsaXN0LmJpbmFyeVNlYXJjaChvdGhlckxpc3QubWF4KCkpLCBsaXN0Lm1heCgpKVxuYGBgXG4gIFxuQnV0IHdlIGRvbiZhcG9zO3Qgd2FudCB0byBpbXBsZW1lbnQgYWxsIHRoZSBwb3NzaWJsZSBtZXRob2RzIGluc2lkZSB0aGUgY2xhc3MgYExpc3RgLCByaWdodD8gVGhpcyBpcyB3aGVyZSBleHRlbnNpb25zIGhlbHAgdXMuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/extensions.html#motivation"
            ],
            "flags": 0,
            "guid": "FWXA9Y]0`a",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Extensions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Data</b> Classes",
                "<p>We frequently create a class to do nothing but hold data. In such a class some standard functionality is often mechanically derivable from the data. In Kotlin, this is called a <em>data class</em> and is marked as <code>data</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">User</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>The compiler automatically derives the following members from all properties declared in the primary constructor:</p>\n<ul>\n<li align=\"left\"><code>equals()</code>/<code>hashCode()</code> pair, </li>\n<li align=\"left\"><code>toString()</code> of the form <code>\"User(name=John, age=42)\"</code>,</li>\n<li align=\"left\"><a href=\"multi-declarations.html\"><code>componentN()</code> functions</a> corresponding to the properties in their order of declaration,</li>\n<li align=\"left\"><code>copy()</code> function (see below).</li>\n</ul>\n<p>If any of these functions is explicitly defined in the class body or inherited from the base types, it will not be generated.</p>\n<p>To ensure consistency and meaningful behavior of the generated code, data classes have to fulfil the following requirements:</p>\n<ul>\n<li align=\"left\">The primary constructor needs to have at least one parameter;</li>\n<li align=\"left\">All primary constructor parameters need to be marked as <code>val</code> or <code>var</code>;</li>\n<li align=\"left\">Data classes cannot be abstract, open, sealed or inner;</li>\n<li align=\"left\">(before 1.1) Data classes may only implement interfaces.</li>\n</ul>\n<p>Since 1.1, data classes may extend other classes (see <a href=\"sealed-classes.html\">Sealed classes</a> for examples).</p>\n<p>On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see <a href=\"classes.html#constructors\">Constructors</a>).</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">User</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTQ2NjI3MDgsICJpZCI6ICIxNDg4MTAzOTI1NzM2LTAwMSIsICJtZCI6ICJXZSBmcmVxdWVudGx5IGNyZWF0ZSBhIGNsYXNzIHRvIGRvIG5vdGhpbmcgYnV0IGhvbGQgZGF0YS4gSW4gc3VjaCBhIGNsYXNzIHNvbWUgc3RhbmRhcmQgZnVuY3Rpb25hbGl0eSBpcyBvZnRlbiBtZWNoYW5pY2FsbHkgZGVyaXZhYmxlIGZyb20gdGhlIGRhdGEuIEluIEtvdGxpbiwgdGhpcyBpcyBjYWxsZWQgYSBfZGF0YSBjbGFzc18gYW5kIGlzIG1hcmtlZCBhcyBgZGF0YWA6XG4gIFxuYGBgIGtvdGxpblxuZGF0YSBjbGFzcyBVc2VyKHZhbCBuYW1lOiBTdHJpbmcsIHZhbCBhZ2U6IEludClcbmBgYFxuICBcblRoZSBjb21waWxlciBhdXRvbWF0aWNhbGx5IGRlcml2ZXMgdGhlIGZvbGxvd2luZyBtZW1iZXJzIGZyb20gYWxsIHByb3BlcnRpZXMgZGVjbGFyZWQgaW4gdGhlIHByaW1hcnkgY29uc3RydWN0b3I6XG4gIFxuICAqIGBlcXVhbHMoKWAvYGhhc2hDb2RlKClgIHBhaXIsIFxuICAqIGB0b1N0cmluZygpYCBvZiB0aGUgZm9ybSBgJnF1b3Q7VXNlcihuYW1lPUpvaG4sIGFnZT00MikmcXVvdDtgLFxuICAqIFtgY29tcG9uZW50TigpYCBmdW5jdGlvbnNdKG11bHRpLWRlY2xhcmF0aW9ucy5odG1sKSBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0aWVzIGluIHRoZWlyIG9yZGVyIG9mIGRlY2xhcmF0aW9uLFxuICAqIGBjb3B5KClgIGZ1bmN0aW9uIChzZWUgYmVsb3cpLlxuICBcbklmIGFueSBvZiB0aGVzZSBmdW5jdGlvbnMgaXMgZXhwbGljaXRseSBkZWZpbmVkIGluIHRoZSBjbGFzcyBib2R5IG9yIGluaGVyaXRlZCBmcm9tIHRoZSBiYXNlIHR5cGVzLCBpdCB3aWxsIG5vdCBiZSBnZW5lcmF0ZWQuXG4gIFxuVG8gZW5zdXJlIGNvbnNpc3RlbmN5IGFuZCBtZWFuaW5nZnVsIGJlaGF2aW9yIG9mIHRoZSBnZW5lcmF0ZWQgY29kZSwgZGF0YSBjbGFzc2VzIGhhdmUgdG8gZnVsZmlsIHRoZSBmb2xsb3dpbmcgcmVxdWlyZW1lbnRzOlxuICBcbiAgKiBUaGUgcHJpbWFyeSBjb25zdHJ1Y3RvciBuZWVkcyB0byBoYXZlIGF0IGxlYXN0IG9uZSBwYXJhbWV0ZXI7XG4gICogQWxsIHByaW1hcnkgY29uc3RydWN0b3IgcGFyYW1ldGVycyBuZWVkIHRvIGJlIG1hcmtlZCBhcyBgdmFsYCBvciBgdmFyYDtcbiAgKiBEYXRhIGNsYXNzZXMgY2Fubm90IGJlIGFic3RyYWN0LCBvcGVuLCBzZWFsZWQgb3IgaW5uZXI7XG4gICogKGJlZm9yZSAxLjEpIERhdGEgY2xhc3NlcyBtYXkgb25seSBpbXBsZW1lbnQgaW50ZXJmYWNlcy5cbiAgXG5TaW5jZSAxLjEsIGRhdGEgY2xhc3NlcyBtYXkgZXh0ZW5kIG90aGVyIGNsYXNzZXMgKHNlZSBbU2VhbGVkIGNsYXNzZXNdKHNlYWxlZC1jbGFzc2VzLmh0bWwpIGZvciBleGFtcGxlcykuXG4gIFxuT24gdGhlIEpWTSwgaWYgdGhlIGdlbmVyYXRlZCBjbGFzcyBuZWVkcyB0byBoYXZlIGEgcGFyYW1ldGVybGVzcyBjb25zdHJ1Y3RvciwgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCBwcm9wZXJ0aWVzIGhhdmUgdG8gYmUgc3BlY2lmaWVkIChzZWUgW0NvbnN0cnVjdG9yc10oY2xhc3Nlcy5odG1sI2NvbnN0cnVjdG9ycykpLlxuICBcbmBgYCBrb3RsaW5cbmRhdGEgY2xhc3MgVXNlcih2YWwgbmFtZTogU3RyaW5nID0gJnF1b3Q7JnF1b3Q7LCB2YWwgYWdlOiBJbnQgPSAwKVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/data-classes.html#data-classes"
            ],
            "flags": 0,
            "guid": "s^wa~GoW<p",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "DataClasses",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Copying</b> of data classes",
                "<p>It's often the case that we need to copy an object altering <em>some</em> of its properties, but keeping the rest unchanged. <br />\nThis is what <code>copy()</code> function is generated for.<br />\nFor the <code>User</code> class above, its implementation would be as follows:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">copy</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">User</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">)</span>    \n</pre></div>\n<p>This allows us to write</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">jack</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">User</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"Jack\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">age</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">olderJack</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">jack</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">copy</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">age</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA4NjQsICJpZCI6ICIxNDg4MTA0MjgyNDMzLTAwMSIsICJtZCI6ICJJdCZhcG9zO3Mgb2Z0ZW4gdGhlIGNhc2UgdGhhdCB3ZSBuZWVkIHRvIGNvcHkgYW4gb2JqZWN0IGFsdGVyaW5nIF9zb21lXyBvZiBpdHMgcHJvcGVydGllcywgYnV0IGtlZXBpbmcgdGhlIHJlc3QgdW5jaGFuZ2VkLiBcblRoaXMgaXMgd2hhdCBgY29weSgpYCBmdW5jdGlvbiBpcyBnZW5lcmF0ZWQgZm9yLlxuRm9yIHRoZSBgVXNlcmAgY2xhc3MgYWJvdmUsIGl0cyBpbXBsZW1lbnRhdGlvbiB3b3VsZCBiZSBhcyBmb2xsb3dzOlxuICBcbmBgYCBrb3RsaW5cbmZ1biBjb3B5KG5hbWU6IFN0cmluZyA9IHRoaXMubmFtZSwgYWdlOiBJbnQgPSB0aGlzLmFnZSkgPSBVc2VyKG5hbWUsIGFnZSkgICAgXG5gYGAgICAgXG4gIFxuVGhpcyBhbGxvd3MgdXMgdG8gd3JpdGVcbiAgXG5gYGAga290bGluXG52YWwgamFjayA9IFVzZXIobmFtZSA9ICZxdW90O0phY2smcXVvdDssIGFnZSA9IDEpXG52YWwgb2xkZXJKYWNrID0gamFjay5jb3B5KGFnZSA9IDIpXG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/data-classes.html#copying"
            ],
            "flags": 0,
            "guid": "y:X2b,~f^}",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "DataClasses",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Data</b> Classes and <b>Destructuring</b> Declarations",
                "<p><em>Component functions</em> generated for data classes enable their use in <a href=\"multi-declarations.html\">destructuring declarations</a>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">jane</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">User</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Jane\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">35</span><span style=\"color: #000000; font-weight: bold\">)</span> \n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">jane</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"$name, $age years of age\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"Jane, 35 years of age\"</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzA1MzIsICJpZCI6ICIxNDg4MTA0MzIzMzYxLTAwMSIsICJtZCI6ICJfQ29tcG9uZW50IGZ1bmN0aW9uc18gZ2VuZXJhdGVkIGZvciBkYXRhIGNsYXNzZXMgZW5hYmxlIHRoZWlyIHVzZSBpbiBbZGVzdHJ1Y3R1cmluZyBkZWNsYXJhdGlvbnNdKG11bHRpLWRlY2xhcmF0aW9ucy5odG1sKTpcbiAgXG5gYGAga290bGluXG52YWwgamFuZSA9IFVzZXIoJnF1b3Q7SmFuZSZxdW90OywgMzUpIFxudmFsIChuYW1lLCBhZ2UpID0gamFuZVxucHJpbnRsbigmcXVvdDskbmFtZSwgJGFnZSB5ZWFycyBvZiBhZ2UmcXVvdDspIC8vIHByaW50cyAmcXVvdDtKYW5lLCAzNSB5ZWFycyBvZiBhZ2UmcXVvdDtcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/data-classes.html#data-classes-and-destructuring-declarations"
            ],
            "flags": 0,
            "guid": "bA9vjw#sBE",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "DataClasses",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Standard <b>Data</b> Classes",
                "<p>The standard library provides <code>Pair</code> and <code>Triple</code>.<br />\nIn most cases, though, named data classes are a better design choice, because they make the code more readable by providing meaningful names for properties.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA4NzcsICJpZCI6ICIxNDg4MTA0MzQ0OTA1LTAwMSIsICJtZCI6ICJUaGUgc3RhbmRhcmQgbGlicmFyeSBwcm92aWRlcyBgUGFpcmAgYW5kIGBUcmlwbGVgLlxuSW4gbW9zdCBjYXNlcywgdGhvdWdoLCBuYW1lZCBkYXRhIGNsYXNzZXMgYXJlIGEgYmV0dGVyIGRlc2lnbiBjaG9pY2UsIGJlY2F1c2UgdGhleSBtYWtlIHRoZSBjb2RlIG1vcmUgcmVhZGFibGUgYnkgcHJvdmlkaW5nIG1lYW5pbmdmdWwgbmFtZXMgZm9yIHByb3BlcnRpZXMuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/data-classes.html#standard-data-classes"
            ],
            "flags": 0,
            "guid": "q40,S1dQCz",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "DataClasses",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Generics</b>",
                "<p>As in Java, classes in Kotlin may have type parameters:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Box</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;(</span><span style=\"color: #000000\">t</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">value</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">t</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>In general, to create an instance of such a class, we need to provide the type arguments:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">box</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Box</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Box</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p><strong>But if the parameters may be inferred</strong>, e.g. from the constructor arguments or by some other means, one is allowed to omit the type arguments:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">box</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Box</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// 1 has type Int, so the compiler figures out that we are talking about Box&lt;Int&gt;</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzA3MzQsICJpZCI6ICIxNDg4MTA0MzY0MTk1LTAwMSIsICJtZCI6ICJBcyBpbiBKYXZhLCBjbGFzc2VzIGluIEtvdGxpbiBtYXkgaGF2ZSB0eXBlIHBhcmFtZXRlcnM6XG4gIFxuYGBgIGtvdGxpblxuY2xhc3MgQm94Jmx0O1QmZ3Q7KHQ6IFQpIHtcbiAgICB2YXIgdmFsdWUgPSB0XG59XG5gYGBcbiAgXG5JbiBnZW5lcmFsLCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2Ygc3VjaCBhIGNsYXNzLCB3ZSBuZWVkIHRvIHByb3ZpZGUgdGhlIHR5cGUgYXJndW1lbnRzOlxuICBcbmBgYCBrb3RsaW5cbnZhbCBib3g6IEJveCZsdDtJbnQmZ3Q7ID0gQm94Jmx0O0ludCZndDsoMSlcbmBgYFxuICBcbioqQnV0IGlmIHRoZSBwYXJhbWV0ZXJzIG1heSBiZSBpbmZlcnJlZCoqLCBlLmcuIGZyb20gdGhlIGNvbnN0cnVjdG9yIGFyZ3VtZW50cyBvciBieSBzb21lIG90aGVyIG1lYW5zLCBvbmUgaXMgYWxsb3dlZCB0byBvbWl0IHRoZSB0eXBlIGFyZ3VtZW50czpcbiAgXG5gYGAga290bGluXG52YWwgYm94ID0gQm94KDEpIC8vIDEgaGFzIHR5cGUgSW50LCBzbyB0aGUgY29tcGlsZXIgZmlndXJlcyBvdXQgdGhhdCB3ZSBhcmUgdGFsa2luZyBhYm91dCBCb3gmbHQ7SW50Jmd0O1xuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/generics.html#generics"
            ],
            "flags": 0,
            "guid": "PV.&k!WPBR",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Generics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Generics&nbsp;<b>Variance</b>",
                "<p>One of the most tricky parts of Java's type system is wildcard types (see <a href=\"http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html\">Java Generics FAQ</a>).<br />\nAnd Kotlin doesn't have any. Instead, it has two other things: declaration-site variance and type projections.</p>\n<p>First, let's think about why Java needs those mysterious wildcards. The problem is explained in <a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\">Effective Java</a>, Item 28: <em>Use bounded wildcards to increase API flexibility</em>.</p>\n<p>First, generic types in Java are <strong>invariant</strong>, meaning that <code>List&lt;String&gt;</code> is <strong>not</strong> a subtype of <code>List&lt;Object&gt;</code>. <br />\nWhy so? If List was not <strong>invariant</strong>, it would have been no better than Java's arrays, since the following code would have compiled and caused an exception at runtime:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">// Java</span>\n<span style=\"color: #000000\">List</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">strs</span> <span style=\"color: #ce5c00; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">new</span> <span style=\"color: #000000\">ArrayList</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;();</span>\n<span style=\"color: #000000\">List</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Object</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">objs</span> <span style=\"color: #ce5c00; font-weight: bold\">=</span> <span style=\"color: #000000\">strs</span><span style=\"color: #ce5c00; font-weight: bold\">;</span> <span style=\"color: #8f5902; font-style: italic\">// !!! The cause of the upcoming problem sits here. Java prohibits this!</span>\n<span style=\"color: #000000\">objs</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">add</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #ce5c00; font-weight: bold\">);</span> <span style=\"color: #8f5902; font-style: italic\">// Here we put an Integer into a list of Strings</span>\n<span style=\"color: #000000\">String</span> <span style=\"color: #000000\">s</span> <span style=\"color: #ce5c00; font-weight: bold\">=</span> <span style=\"color: #000000\">strs</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">get</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #ce5c00; font-weight: bold\">);</span> <span style=\"color: #8f5902; font-style: italic\">// !!! ClassCastException: Cannot cast Integer to String</span>\n</pre></div>\n<p>So, Java prohibits such things in order to guarantee run-time safety. But this has some implications. For example, consider the <code>addAll()</code> method from <code>Collection</code> interface. What's the signature of this method? Intuitively, we'd put it this way:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">interface</span> <span style=\"color: #000000\">Collection</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">E</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #ce5c00; font-weight: bold\">...</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n  <span style=\"color: #204a87; font-weight: bold\">void</span> <span style=\"color: #000000\">addAll</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">Collection</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">E</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">items</span><span style=\"color: #ce5c00; font-weight: bold\">);</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p>But then, we would not be able to do the following simple thing (which is perfectly safe):</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">void</span> <span style=\"color: #000000\">copyAll</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">Collection</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Object</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">to</span><span style=\"color: #ce5c00; font-weight: bold\">,</span> <span style=\"color: #000000\">Collection</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">from</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n  <span style=\"color: #000000\">to</span><span style=\"color: #ce5c00; font-weight: bold\">.</span><span style=\"color: #c4a000\">addAll</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">from</span><span style=\"color: #ce5c00; font-weight: bold\">);</span> <span style=\"color: #8f5902; font-style: italic\">// !!! Would not compile with the naive declaration of addAll:</span>\n                   <span style=\"color: #8f5902; font-style: italic\">//       Collection&lt;String&gt; is not a subtype of Collection&lt;Object&gt;</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p>(In Java, we learned this lesson the hard way, see <a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\">Effective Java</a>, Item 25: <em>Prefer lists to arrays</em>)</p>\n<p>That's why the actual signature of <code>addAll()</code> is the following:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">interface</span> <span style=\"color: #000000\">Collection</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">E</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #ce5c00; font-weight: bold\">...</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n  <span style=\"color: #204a87; font-weight: bold\">void</span> <span style=\"color: #000000\">addAll</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">Collection</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;?</span> <span style=\"color: #204a87; font-weight: bold\">extends</span> <span style=\"color: #000000\">E</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">items</span><span style=\"color: #ce5c00; font-weight: bold\">);</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p>The <strong>wildcard type argument</strong> <code>? extends E</code> indicates that this method accepts a collection of objects of <code>E</code> <em>or some subtype of</em> <code>E</code>, not just <code>E</code> itself. <br />\nThis means that we can safely <strong>read</strong> <code>E</code>'s from items (elements of this collection are instances of a subclass of E), but <strong>cannot write</strong> to <br />\nit since we do not know what objects comply to that unknown subtype of <code>E</code>.<br />\nIn return for this limitation, we have the desired behaviour: <code>Collection&lt;String&gt;</code> <em>is</em> a subtype of <code>Collection&lt;? extends Object&gt;</code>. <br />\nIn \"clever words\", the wildcard with an <strong>extends</strong>-bound (<strong>upper</strong> bound) makes the type <strong>covariant</strong>.</p>\n<p>The key to understanding why this trick works is rather simple: if you can only <strong>take</strong> items from a collection, then using a collection of <code>String</code>s and reading <code>Object</code>s from it is fine. Conversely, if you can only <em>put</em> items into the collection, it's OK to take a collection of <code>Object</code>s and put <code>String</code>s into it: in Java we have <code>List&lt;? super String&gt;</code> a <strong>supertype</strong> of <code>List&lt;Object&gt;</code>.</p>\n<p>The latter is called <strong>contravariance</strong>, and you can only call methods that take String as an argument on <code>List&lt;? super String&gt;</code> (e.g., you can call <code>add(String)</code> or <code>set(int, String)</code>), while if you call something that returns <code>T</code> in <code>List&lt;T&gt;</code>, you don't get a <code>String</code>, but an <code>Object</code>.</p>\n<p>Joshua Bloch calls those objects you only <strong>read</strong> from <strong>Producers</strong>, and those you only <strong>write</strong> to <strong>Consumers</strong>. He recommends: \"<em>For maximum flexibility, use wildcard types on input parameters that represent producers or consumers</em>\", and proposes the following mnemonic:</p>\n<p><strong><em>PECS stands for Producer-Extends, Consumer-Super.</em></strong></p>\n<blockquote>\n<p><strong><em>NOTE</em>:</strong> if you use a producer-object, say, <code>List&lt;? extends Foo&gt;</code>, you are not allowed to call <code>add()</code> or <code>set()</code> on this object, but this does not mean that this object is <strong>immutable</strong>: for example, nothing prevents you from calling <code>clear()</code> to remove all items from the list, since <code>clear()</code> does not take any parameters at all. The only thing guaranteed by wildcards (or other types of variance) is <strong>type safety</strong>.<br />\nImmutability is a completely different story.</p>\n</blockquote><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzIxNjAsICJpZCI6ICIxNDg4MTA0MzgzOTU5LTAwMSIsICJtZCI6ICJPbmUgb2YgdGhlIG1vc3QgdHJpY2t5IHBhcnRzIG9mIEphdmEmYXBvcztzIHR5cGUgc3lzdGVtIGlzIHdpbGRjYXJkIHR5cGVzIChzZWUgW0phdmEgR2VuZXJpY3MgRkFRXShodHRwOi8vd3d3LmFuZ2VsaWthbGFuZ2VyLmNvbS9HZW5lcmljc0ZBUS9KYXZhR2VuZXJpY3NGQVEuaHRtbCkpLlxuQW5kIEtvdGxpbiBkb2VzbiZhcG9zO3QgaGF2ZSBhbnkuIEluc3RlYWQsIGl0IGhhcyB0d28gb3RoZXIgdGhpbmdzOiBkZWNsYXJhdGlvbi1zaXRlIHZhcmlhbmNlIGFuZCB0eXBlIHByb2plY3Rpb25zLlxuICBcbkZpcnN0LCBsZXQmYXBvcztzIHRoaW5rIGFib3V0IHdoeSBKYXZhIG5lZWRzIHRob3NlIG15c3RlcmlvdXMgd2lsZGNhcmRzLiBUaGUgcHJvYmxlbSBpcyBleHBsYWluZWQgaW4gW0VmZmVjdGl2ZSBKYXZhXShodHRwOi8vd3d3Lm9yYWNsZS5jb20vdGVjaG5ldHdvcmsvamF2YS9lZmZlY3RpdmVqYXZhLTEzNjE3NC5odG1sKSwgSXRlbSAyODogKlVzZSBib3VuZGVkIHdpbGRjYXJkcyB0byBpbmNyZWFzZSBBUEkgZmxleGliaWxpdHkqLlxuICBcbkZpcnN0LCBnZW5lcmljIHR5cGVzIGluIEphdmEgYXJlICoqaW52YXJpYW50KiosIG1lYW5pbmcgdGhhdCBgTGlzdCZsdDtTdHJpbmcmZ3Q7YCBpcyAqKm5vdCoqIGEgc3VidHlwZSBvZiBgTGlzdCZsdDtPYmplY3QmZ3Q7YC4gXG5XaHkgc28/IElmIExpc3Qgd2FzIG5vdCAqKmludmFyaWFudCoqLCBpdCB3b3VsZCBoYXZlIGJlZW4gbm8gYmV0dGVyIHRoYW4gSmF2YSZhcG9zO3MgYXJyYXlzLCBzaW5jZSB0aGUgZm9sbG93aW5nIGNvZGUgd291bGQgaGF2ZSBjb21waWxlZCBhbmQgY2F1c2VkIGFuIGV4Y2VwdGlvbiBhdCBydW50aW1lOlxuICBcbmBgYGphdmFcbi8vIEphdmFcbkxpc3QmbHQ7U3RyaW5nJmd0OyBzdHJzID0gbmV3IEFycmF5TGlzdCZsdDtTdHJpbmcmZ3Q7KCk7XG5MaXN0Jmx0O09iamVjdCZndDsgb2JqcyA9IHN0cnM7IC8vICEhISBUaGUgY2F1c2Ugb2YgdGhlIHVwY29taW5nIHByb2JsZW0gc2l0cyBoZXJlLiBKYXZhIHByb2hpYml0cyB0aGlzIVxub2Jqcy5hZGQoMSk7IC8vIEhlcmUgd2UgcHV0IGFuIEludGVnZXIgaW50byBhIGxpc3Qgb2YgU3RyaW5nc1xuU3RyaW5nIHMgPSBzdHJzLmdldCgwKTsgLy8gISEhIENsYXNzQ2FzdEV4Y2VwdGlvbjogQ2Fubm90IGNhc3QgSW50ZWdlciB0byBTdHJpbmdcbmBgYFxuICBcblNvLCBKYXZhIHByb2hpYml0cyBzdWNoIHRoaW5ncyBpbiBvcmRlciB0byBndWFyYW50ZWUgcnVuLXRpbWUgc2FmZXR5LiBCdXQgdGhpcyBoYXMgc29tZSBpbXBsaWNhdGlvbnMuIEZvciBleGFtcGxlLCBjb25zaWRlciB0aGUgYGFkZEFsbCgpYCBtZXRob2QgZnJvbSBgQ29sbGVjdGlvbmAgaW50ZXJmYWNlLiBXaGF0JmFwb3M7cyB0aGUgc2lnbmF0dXJlIG9mIHRoaXMgbWV0aG9kPyBJbnR1aXRpdmVseSwgd2UmYXBvcztkIHB1dCBpdCB0aGlzIHdheTpcbiAgXG5gYGBqYXZhXG4vLyBKYXZhXG5pbnRlcmZhY2UgQ29sbGVjdGlvbiZsdDtFJmd0OyAuLi4ge1xuICB2b2lkIGFkZEFsbChDb2xsZWN0aW9uJmx0O0UmZ3Q7IGl0ZW1zKTtcbn1cbmBgYFxuICBcbkJ1dCB0aGVuLCB3ZSB3b3VsZCBub3QgYmUgYWJsZSB0byBkbyB0aGUgZm9sbG93aW5nIHNpbXBsZSB0aGluZyAod2hpY2ggaXMgcGVyZmVjdGx5IHNhZmUpOlxuICBcbmBgYGphdmFcbi8vIEphdmFcbnZvaWQgY29weUFsbChDb2xsZWN0aW9uJmx0O09iamVjdCZndDsgdG8sIENvbGxlY3Rpb24mbHQ7U3RyaW5nJmd0OyBmcm9tKSB7XG4gIHRvLmFkZEFsbChmcm9tKTsgLy8gISEhIFdvdWxkIG5vdCBjb21waWxlIHdpdGggdGhlIG5haXZlIGRlY2xhcmF0aW9uIG9mIGFkZEFsbDpcbiAgICAgICAgICAgICAgICAgICAvLyAgICAgICBDb2xsZWN0aW9uJmx0O1N0cmluZyZndDsgaXMgbm90IGEgc3VidHlwZSBvZiBDb2xsZWN0aW9uJmx0O09iamVjdCZndDtcbn1cbmBgYFxuICBcbihJbiBKYXZhLCB3ZSBsZWFybmVkIHRoaXMgbGVzc29uIHRoZSBoYXJkIHdheSwgc2VlIFtFZmZlY3RpdmUgSmF2YV0oaHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL2phdmEvZWZmZWN0aXZlamF2YS0xMzYxNzQuaHRtbCksIEl0ZW0gMjU6ICpQcmVmZXIgbGlzdHMgdG8gYXJyYXlzKilcbiAgXG4gIFxuVGhhdCZhcG9zO3Mgd2h5IHRoZSBhY3R1YWwgc2lnbmF0dXJlIG9mIGBhZGRBbGwoKWAgaXMgdGhlIGZvbGxvd2luZzpcbiAgXG5gYGBqYXZhXG4vLyBKYXZhXG5pbnRlcmZhY2UgQ29sbGVjdGlvbiZsdDtFJmd0OyAuLi4ge1xuICB2b2lkIGFkZEFsbChDb2xsZWN0aW9uJmx0Oz8gZXh0ZW5kcyBFJmd0OyBpdGVtcyk7XG59XG5gYGBcbiAgXG5UaGUgKip3aWxkY2FyZCB0eXBlIGFyZ3VtZW50KiogYD8gZXh0ZW5kcyBFYCBpbmRpY2F0ZXMgdGhhdCB0aGlzIG1ldGhvZCBhY2NlcHRzIGEgY29sbGVjdGlvbiBvZiBvYmplY3RzIG9mIGBFYCAqb3Igc29tZSBzdWJ0eXBlIG9mKiBgRWAsIG5vdCBqdXN0IGBFYCBpdHNlbGYuIFxuVGhpcyBtZWFucyB0aGF0IHdlIGNhbiBzYWZlbHkgKipyZWFkKiogYEVgJmFwb3M7cyBmcm9tIGl0ZW1zIChlbGVtZW50cyBvZiB0aGlzIGNvbGxlY3Rpb24gYXJlIGluc3RhbmNlcyBvZiBhIHN1YmNsYXNzIG9mIEUpLCBidXQgKipjYW5ub3Qgd3JpdGUqKiB0byBcbml0IHNpbmNlIHdlIGRvIG5vdCBrbm93IHdoYXQgb2JqZWN0cyBjb21wbHkgdG8gdGhhdCB1bmtub3duIHN1YnR5cGUgb2YgYEVgLlxuSW4gcmV0dXJuIGZvciB0aGlzIGxpbWl0YXRpb24sIHdlIGhhdmUgdGhlIGRlc2lyZWQgYmVoYXZpb3VyOiBgQ29sbGVjdGlvbiZsdDtTdHJpbmcmZ3Q7YCAqaXMqIGEgc3VidHlwZSBvZiBgQ29sbGVjdGlvbiZsdDs/IGV4dGVuZHMgT2JqZWN0Jmd0O2AuIFxuSW4gJnF1b3Q7Y2xldmVyIHdvcmRzJnF1b3Q7LCB0aGUgd2lsZGNhcmQgd2l0aCBhbiAqKmV4dGVuZHMqKlxcLWJvdW5kICgqKnVwcGVyKiogYm91bmQpIG1ha2VzIHRoZSB0eXBlICoqY292YXJpYW50KiouXG4gIFxuICBcblRoZSBrZXkgdG8gdW5kZXJzdGFuZGluZyB3aHkgdGhpcyB0cmljayB3b3JrcyBpcyByYXRoZXIgc2ltcGxlOiBpZiB5b3UgY2FuIG9ubHkgKip0YWtlKiogaXRlbXMgZnJvbSBhIGNvbGxlY3Rpb24sIHRoZW4gdXNpbmcgYSBjb2xsZWN0aW9uIG9mIGBTdHJpbmdgcyBhbmQgcmVhZGluZyBgT2JqZWN0YHMgZnJvbSBpdCBpcyBmaW5lLiBDb252ZXJzZWx5LCBpZiB5b3UgY2FuIG9ubHkgX3B1dF8gaXRlbXMgaW50byB0aGUgY29sbGVjdGlvbiwgaXQmYXBvcztzIE9LIHRvIHRha2UgYSBjb2xsZWN0aW9uIG9mIGBPYmplY3RgcyBhbmQgcHV0IGBTdHJpbmdgcyBpbnRvIGl0OiBpbiBKYXZhIHdlIGhhdmUgYExpc3QmbHQ7PyBzdXBlciBTdHJpbmcmZ3Q7YCBhICoqc3VwZXJ0eXBlKiogb2YgYExpc3QmbHQ7T2JqZWN0Jmd0O2AuXG4gIFxuVGhlIGxhdHRlciBpcyBjYWxsZWQgKipjb250cmF2YXJpYW5jZSoqLCBhbmQgeW91IGNhbiBvbmx5IGNhbGwgbWV0aG9kcyB0aGF0IHRha2UgU3RyaW5nIGFzIGFuIGFyZ3VtZW50IG9uIGBMaXN0Jmx0Oz8gc3VwZXIgU3RyaW5nJmd0O2AgKGUuZy4sIHlvdSBjYW4gY2FsbCBgYWRkKFN0cmluZylgIG9yIGBzZXQoaW50LCBTdHJpbmcpYCksIHdoaWxlIGlmIHlvdSBjYWxsIHNvbWV0aGluZyB0aGF0IHJldHVybnMgYFRgIGluIGBMaXN0Jmx0O1QmZ3Q7YCwgeW91IGRvbiZhcG9zO3QgZ2V0IGEgYFN0cmluZ2AsIGJ1dCBhbiBgT2JqZWN0YC5cbiAgXG4gIFxuSm9zaHVhIEJsb2NoIGNhbGxzIHRob3NlIG9iamVjdHMgeW91IG9ubHkgKipyZWFkKiogZnJvbSAqKlByb2R1Y2VycyoqLCBhbmQgdGhvc2UgeW91IG9ubHkgKip3cml0ZSoqIHRvICoqQ29uc3VtZXJzKiouIEhlIHJlY29tbWVuZHM6ICZxdW90OypGb3IgbWF4aW11bSBmbGV4aWJpbGl0eSwgdXNlIHdpbGRjYXJkIHR5cGVzIG9uIGlucHV0IHBhcmFtZXRlcnMgdGhhdCByZXByZXNlbnQgcHJvZHVjZXJzIG9yIGNvbnN1bWVycyomcXVvdDssIGFuZCBwcm9wb3NlcyB0aGUgZm9sbG93aW5nIG1uZW1vbmljOlxuICBcbioqKlBFQ1Mgc3RhbmRzIGZvciBQcm9kdWNlci1FeHRlbmRzLCBDb25zdW1lci1TdXBlci4qKipcbiAgXG4mZ3Q7ICoqKk5PVEUqOioqIGlmIHlvdSB1c2UgYSBwcm9kdWNlci1vYmplY3QsIHNheSwgYExpc3QmbHQ7PyBleHRlbmRzIEZvbyZndDtgLCB5b3UgYXJlIG5vdCBhbGxvd2VkIHRvIGNhbGwgYGFkZCgpYCBvciBgc2V0KClgIG9uIHRoaXMgb2JqZWN0LCBidXQgdGhpcyBkb2VzIG5vdCBtZWFuIHRoYXQgdGhpcyBvYmplY3QgaXMgKippbW11dGFibGUqKjogZm9yIGV4YW1wbGUsIG5vdGhpbmcgcHJldmVudHMgeW91IGZyb20gY2FsbGluZyBgY2xlYXIoKWAgdG8gcmVtb3ZlIGFsbCBpdGVtcyBmcm9tIHRoZSBsaXN0LCBzaW5jZSBgY2xlYXIoKWAgZG9lcyBub3QgdGFrZSBhbnkgcGFyYW1ldGVycyBhdCBhbGwuIFRoZSBvbmx5IHRoaW5nIGd1YXJhbnRlZWQgYnkgd2lsZGNhcmRzIChvciBvdGhlciB0eXBlcyBvZiB2YXJpYW5jZSkgaXMgKip0eXBlIHNhZmV0eSoqLlxuSW1tdXRhYmlsaXR5IGlzIGEgY29tcGxldGVseSBkaWZmZXJlbnQgc3RvcnkuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/generics.html#variance"
            ],
            "flags": 0,
            "guid": "FWK!MBHDy|",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Generics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Declaration-site <b>variance</b> in <b>Generics</b>",
                "<p>Suppose we have a generic interface <code>Source&lt;T&gt;</code> that does not have any methods that take <code>T</code> as a parameter, only methods that return <code>T</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">interface</span> <span style=\"color: #000000\">Source</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n  <span style=\"color: #000000\">T</span> <span style=\"color: #000000\">nextT</span><span style=\"color: #ce5c00; font-weight: bold\">();</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p>Then, it would be perfectly safe to store a reference to an instance of <code>Source&lt;String&gt;</code> in a variable of type <code>Source&lt;Object&gt;</code> -- there are no consumer-methods to call. But Java does not know this, and still prohibits it:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Java</span>\n<span style=\"color: #204a87; font-weight: bold\">void</span> <span style=\"color: #000000\">demo</span><span style=\"color: #ce5c00; font-weight: bold\">(</span><span style=\"color: #000000\">Source</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">strs</span><span style=\"color: #ce5c00; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">{</span>\n  <span style=\"color: #000000\">Source</span><span style=\"color: #ce5c00; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Object</span><span style=\"color: #ce5c00; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">objects</span> <span style=\"color: #ce5c00; font-weight: bold\">=</span> <span style=\"color: #000000\">strs</span><span style=\"color: #ce5c00; font-weight: bold\">;</span> <span style=\"color: #8f5902; font-style: italic\">// !!! Not allowed in Java</span>\n  <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #ce5c00; font-weight: bold\">}</span>\n</pre></div>\n<p>To fix this, we have to declare objects of type <code>Source&lt;? extends Object&gt;</code>, which is sort of meaningless, because we can call all the same methods on such a variable as before, so there's no value added by the more complex type. But the compiler does not know that.</p>\n<p>In Kotlin, there is a way to explain this sort of thing to the compiler. This is called <strong>declaration-site variance</strong>: we can annotate the <strong>type parameter</strong> <code>T</code> of Source to make sure that it is only <strong>returned</strong> (produced) from members of <code>Source&lt;T&gt;</code>, and never consumed. <br />\nTo do this we provide the <strong>out</strong> modifier:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">abstract</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Source</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #204a87; font-weight: bold\">out</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">abstract</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">nextT</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">T</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">demo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">strs</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Source</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">objects</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Source</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">strs</span> <span style=\"color: #8f5902; font-style: italic\">// This is OK, since T is an out-parameter</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The general rule is: when a type parameter <code>T</code> of a class <code>C</code> is declared <strong>out</strong>, it may occur only in <strong>out</strong>-position in the members of <code>C</code>, but in return <code>C&lt;Base&gt;</code> can safely be a supertype of <code>C&lt;Derived&gt;</code>.</p>\n<p>In \"clever words\" they say that the class <code>C</code> is <strong>covariant</strong> in the parameter <code>T</code>, or that <code>T</code> is a <strong>covariant</strong> type parameter. <br />\nYou can think of <code>C</code> as being a <strong>producer</strong> of <code>T</code>'s, and NOT a <strong>consumer</strong> of <code>T</code>'s.</p>\n<p>The <strong>out</strong> modifier is called a <strong>variance annotation</strong>, and  since it is provided at the type parameter declaration site, we talk about <strong>declaration-site variance</strong>. <br />\nThis is in contrast with Java's <strong>use-site variance</strong> where wildcards in the type usages make the types covariant.</p>\n<p>In addition to <strong>out</strong>, Kotlin provides a complementary variance annotation: <strong>in</strong>. It makes a type parameter <strong>contravariant</strong>: it can only be consumed and never produced. A good example of a contravariant class is <code>Comparable</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">abstract</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Comparable</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">abstract</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">compareTo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">other</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Int</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">demo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Comparable</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Number</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">compareTo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1.0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// 1.0 has type Double, which is a subtype of Number</span>\n    <span style=\"color: #8f5902; font-style: italic\">// Thus, we can assign x to a variable of type Comparable&lt;Double&gt;</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Comparable</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Double</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">x</span> <span style=\"color: #8f5902; font-style: italic\">// OK!</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>We believe that the words <strong>in</strong> and <strong>out</strong> are self-explaining (as they were successfully used in C# for quite some time already), thus the mnemonic mentioned above is not really needed, and one can rephrase it for a higher purpose:</p>\n<blockquote>\n<p><strong><a href=\"http://en.wikipedia.org/wiki/Existentialism\">The Existential</a> Transformation: Consumer in, Producer out!</strong> :-)</p>\n</blockquote><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjE0MjIsICJpZCI6ICIxNDg4MTA0NDU2NjY1LTAwMSIsICJtZCI6ICJTdXBwb3NlIHdlIGhhdmUgYSBnZW5lcmljIGludGVyZmFjZSBgU291cmNlJmx0O1QmZ3Q7YCB0aGF0IGRvZXMgbm90IGhhdmUgYW55IG1ldGhvZHMgdGhhdCB0YWtlIGBUYCBhcyBhIHBhcmFtZXRlciwgb25seSBtZXRob2RzIHRoYXQgcmV0dXJuIGBUYDpcbiAgXG5gYGAgamF2YVxuLy8gSmF2YVxuaW50ZXJmYWNlIFNvdXJjZSZsdDtUJmd0OyB7XG4gIFQgbmV4dFQoKTtcbn1cbmBgYFxuICBcblRoZW4sIGl0IHdvdWxkIGJlIHBlcmZlY3RseSBzYWZlIHRvIHN0b3JlIGEgcmVmZXJlbmNlIHRvIGFuIGluc3RhbmNlIG9mIGBTb3VyY2UmbHQ7U3RyaW5nJmd0O2AgaW4gYSB2YXJpYWJsZSBvZiB0eXBlIGBTb3VyY2UmbHQ7T2JqZWN0Jmd0O2AgLS0gdGhlcmUgYXJlIG5vIGNvbnN1bWVyLW1ldGhvZHMgdG8gY2FsbC4gQnV0IEphdmEgZG9lcyBub3Qga25vdyB0aGlzLCBhbmQgc3RpbGwgcHJvaGliaXRzIGl0OlxuICBcbmBgYCBqYXZhXG4vLyBKYXZhXG52b2lkIGRlbW8oU291cmNlJmx0O1N0cmluZyZndDsgc3Rycykge1xuICBTb3VyY2UmbHQ7T2JqZWN0Jmd0OyBvYmplY3RzID0gc3RyczsgLy8gISEhIE5vdCBhbGxvd2VkIGluIEphdmFcbiAgLy8gLi4uXG59XG5gYGBcbiAgXG5UbyBmaXggdGhpcywgd2UgaGF2ZSB0byBkZWNsYXJlIG9iamVjdHMgb2YgdHlwZSBgU291cmNlJmx0Oz8gZXh0ZW5kcyBPYmplY3QmZ3Q7YCwgd2hpY2ggaXMgc29ydCBvZiBtZWFuaW5nbGVzcywgYmVjYXVzZSB3ZSBjYW4gY2FsbCBhbGwgdGhlIHNhbWUgbWV0aG9kcyBvbiBzdWNoIGEgdmFyaWFibGUgYXMgYmVmb3JlLCBzbyB0aGVyZSZhcG9zO3Mgbm8gdmFsdWUgYWRkZWQgYnkgdGhlIG1vcmUgY29tcGxleCB0eXBlLiBCdXQgdGhlIGNvbXBpbGVyIGRvZXMgbm90IGtub3cgdGhhdC5cbiAgXG5JbiBLb3RsaW4sIHRoZXJlIGlzIGEgd2F5IHRvIGV4cGxhaW4gdGhpcyBzb3J0IG9mIHRoaW5nIHRvIHRoZSBjb21waWxlci4gVGhpcyBpcyBjYWxsZWQgKipkZWNsYXJhdGlvbi1zaXRlIHZhcmlhbmNlKio6IHdlIGNhbiBhbm5vdGF0ZSB0aGUgKip0eXBlIHBhcmFtZXRlcioqIGBUYCBvZiBTb3VyY2UgdG8gbWFrZSBzdXJlIHRoYXQgaXQgaXMgb25seSAqKnJldHVybmVkKiogKHByb2R1Y2VkKSBmcm9tIG1lbWJlcnMgb2YgYFNvdXJjZSZsdDtUJmd0O2AsIGFuZCBuZXZlciBjb25zdW1lZC4gXG5UbyBkbyB0aGlzIHdlIHByb3ZpZGUgdGhlICoqb3V0KiogbW9kaWZpZXI6XG4gIFxuYGBgIGtvdGxpblxuYWJzdHJhY3QgY2xhc3MgU291cmNlJmx0O291dCBUJmd0OyB7XG4gICAgYWJzdHJhY3QgZnVuIG5leHRUKCk6IFRcbn1cbiAgXG5mdW4gZGVtbyhzdHJzOiBTb3VyY2UmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhbCBvYmplY3RzOiBTb3VyY2UmbHQ7QW55Jmd0OyA9IHN0cnMgLy8gVGhpcyBpcyBPSywgc2luY2UgVCBpcyBhbiBvdXQtcGFyYW1ldGVyXG4gICAgLy8gLi4uXG59XG5gYGBcbiAgXG5UaGUgZ2VuZXJhbCBydWxlIGlzOiB3aGVuIGEgdHlwZSBwYXJhbWV0ZXIgYFRgIG9mIGEgY2xhc3MgYENgIGlzIGRlY2xhcmVkICoqb3V0KiosIGl0IG1heSBvY2N1ciBvbmx5IGluICoqb3V0KipcXC1wb3NpdGlvbiBpbiB0aGUgbWVtYmVycyBvZiBgQ2AsIGJ1dCBpbiByZXR1cm4gYEMmbHQ7QmFzZSZndDtgIGNhbiBzYWZlbHkgYmUgYSBzdXBlcnR5cGUgb2YgYEMmbHQ7RGVyaXZlZCZndDtgLlxuICBcbkluICZxdW90O2NsZXZlciB3b3JkcyZxdW90OyB0aGV5IHNheSB0aGF0IHRoZSBjbGFzcyBgQ2AgaXMgKipjb3ZhcmlhbnQqKiBpbiB0aGUgcGFyYW1ldGVyIGBUYCwgb3IgdGhhdCBgVGAgaXMgYSAqKmNvdmFyaWFudCoqIHR5cGUgcGFyYW1ldGVyLiBcbllvdSBjYW4gdGhpbmsgb2YgYENgIGFzIGJlaW5nIGEgKipwcm9kdWNlcioqIG9mIGBUYCZhcG9zO3MsIGFuZCBOT1QgYSAqKmNvbnN1bWVyKiogb2YgYFRgJmFwb3M7cy5cbiAgXG5UaGUgKipvdXQqKiBtb2RpZmllciBpcyBjYWxsZWQgYSAqKnZhcmlhbmNlIGFubm90YXRpb24qKiwgYW5kICBzaW5jZSBpdCBpcyBwcm92aWRlZCBhdCB0aGUgdHlwZSBwYXJhbWV0ZXIgZGVjbGFyYXRpb24gc2l0ZSwgd2UgdGFsayBhYm91dCAqKmRlY2xhcmF0aW9uLXNpdGUgdmFyaWFuY2UqKi4gXG5UaGlzIGlzIGluIGNvbnRyYXN0IHdpdGggSmF2YSZhcG9zO3MgKip1c2Utc2l0ZSB2YXJpYW5jZSoqIHdoZXJlIHdpbGRjYXJkcyBpbiB0aGUgdHlwZSB1c2FnZXMgbWFrZSB0aGUgdHlwZXMgY292YXJpYW50LlxuICBcbkluIGFkZGl0aW9uIHRvICoqb3V0KiosIEtvdGxpbiBwcm92aWRlcyBhIGNvbXBsZW1lbnRhcnkgdmFyaWFuY2UgYW5ub3RhdGlvbjogKippbioqLiBJdCBtYWtlcyBhIHR5cGUgcGFyYW1ldGVyICoqY29udHJhdmFyaWFudCoqOiBpdCBjYW4gb25seSBiZSBjb25zdW1lZCBhbmQgbmV2ZXIgcHJvZHVjZWQuIEEgZ29vZCBleGFtcGxlIG9mIGEgY29udHJhdmFyaWFudCBjbGFzcyBpcyBgQ29tcGFyYWJsZWA6XG4gIFxuYGBgIGtvdGxpblxuYWJzdHJhY3QgY2xhc3MgQ29tcGFyYWJsZSZsdDtpbiBUJmd0OyB7XG4gICAgYWJzdHJhY3QgZnVuIGNvbXBhcmVUbyhvdGhlcjogVCk6IEludFxufVxuICBcbmZ1biBkZW1vKHg6IENvbXBhcmFibGUmbHQ7TnVtYmVyJmd0Oykge1xuICAgIHguY29tcGFyZVRvKDEuMCkgLy8gMS4wIGhhcyB0eXBlIERvdWJsZSwgd2hpY2ggaXMgYSBzdWJ0eXBlIG9mIE51bWJlclxuICAgIC8vIFRodXMsIHdlIGNhbiBhc3NpZ24geCB0byBhIHZhcmlhYmxlIG9mIHR5cGUgQ29tcGFyYWJsZSZsdDtEb3VibGUmZ3Q7XG4gICAgdmFsIHk6IENvbXBhcmFibGUmbHQ7RG91YmxlJmd0OyA9IHggLy8gT0shXG59XG5gYGBcbiAgXG5XZSBiZWxpZXZlIHRoYXQgdGhlIHdvcmRzICoqaW4qKiBhbmQgKipvdXQqKiBhcmUgc2VsZi1leHBsYWluaW5nIChhcyB0aGV5IHdlcmUgc3VjY2Vzc2Z1bGx5IHVzZWQgaW4gQyMgZm9yIHF1aXRlIHNvbWUgdGltZSBhbHJlYWR5KSwgdGh1cyB0aGUgbW5lbW9uaWMgbWVudGlvbmVkIGFib3ZlIGlzIG5vdCByZWFsbHkgbmVlZGVkLCBhbmQgb25lIGNhbiByZXBocmFzZSBpdCBmb3IgYSBoaWdoZXIgcHVycG9zZTpcbiAgXG4mZ3Q7ICoqW1RoZSBFeGlzdGVudGlhbF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeGlzdGVudGlhbGlzbSkgVHJhbnNmb3JtYXRpb246IENvbnN1bWVyIGluLCBQcm9kdWNlciBvdXRcXCEqKiA6LSlcbiJ9---->",
                "https://kotlinlang.org/docs/reference/generics.html#declaration-site-variance"
            ],
            "flags": 0,
            "guid": "FM.Ot#k~NG",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Generics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Use-site variance: <b>Type projections</b> in <b>Generics</b>",
                "<p>It is very convenient to declare a type parameter T as <em>out</em> and avoid trouble with subtyping on the use site, but some classes <strong>can't</strong> actually be restricted to only return <code>T</code>'s! <br />\nA good example of this is Array:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">size</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">get</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">index</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">/* ... */</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">set</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">index</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">/* ... */</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>This class cannot be either co- or contravariant in <code>T</code>. And this imposes certain inflexibilities.<br />\nConsider the following function:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">copy</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">from</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">&gt;,</span> <span style=\"color: #000000\">to</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">assert</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">from</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #000000\">to</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">from</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">indices</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000\">to</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">from</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">]</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>This function is supposed to copy items from one array to another. Let's try to apply it in practice:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">arrayOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">any</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">&gt;(</span><span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #4e9a06\">\"\"</span> <span style=\"color: #000000; font-weight: bold\">}</span> \n<span style=\"color: #000000\">copy</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ints</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">any</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// Error: expects (Array&lt;Any&gt;, Array&lt;Any&gt;)</span>\n</pre></div>\n<p>Here we run into the same familiar problem: <code>Array&lt;T&gt;</code> is <strong>invariant</strong> in <code>T</code>, thus neither of <code>Array&lt;Int&gt;</code> and <code>Array&lt;Any&gt;</code> is a subtype of the other. Why? Again, because copy <strong>might</strong> be doing bad things, i.e. it might attempt to <strong>write</strong>, say, a String to <code>from</code>, and if we actually passed an array of <code>Int</code> there, a <code>ClassCastException</code> would have been thrown sometime later.</p>\n<p>Then, the only thing we want to ensure is that <code>copy()</code> does not do any bad things. We want to prohibit it from <strong>writing</strong> to <code>from</code>, and we can:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">copy</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">from</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #204a87; font-weight: bold\">out</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">&gt;,</span> <span style=\"color: #000000\">to</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>What has happened here is called <strong>type projection</strong>: we said that <code>from</code> is not simply an array, but a restricted (<strong>projected</strong>) one: we can only call those methods that return the type parameter <code>T</code>, in this case it means that we can only call <code>get()</code>. This is our approach to <strong>use-site variance</strong>, and corresponds to Java's <code>Array&lt;? extends Object&gt;</code>, but in a slightly simpler way.</p>\n<p>You can project a type with <strong>in</strong> as well:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">fill</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">dest</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p><code>Array&lt;in String&gt;</code> corresponds to Java's <code>Array&lt;? super String&gt;</code>, i.e. you can pass an array of <code>CharSequence</code> or an array of <code>Object</code> to the <code>fill()</code> function.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzIxOTUsICJpZCI6ICIxNDg4MTA0NTU1MTc2LTAwMSIsICJtZCI6ICJJdCBpcyB2ZXJ5IGNvbnZlbmllbnQgdG8gZGVjbGFyZSBhIHR5cGUgcGFyYW1ldGVyIFQgYXMgKm91dCogYW5kIGF2b2lkIHRyb3VibGUgd2l0aCBzdWJ0eXBpbmcgb24gdGhlIHVzZSBzaXRlLCBidXQgc29tZSBjbGFzc2VzICoqY2FuJmFwb3M7dCoqIGFjdHVhbGx5IGJlIHJlc3RyaWN0ZWQgdG8gb25seSByZXR1cm4gYFRgJmFwb3M7cyEgXG5BIGdvb2QgZXhhbXBsZSBvZiB0aGlzIGlzIEFycmF5OlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIEFycmF5Jmx0O1QmZ3Q7KHZhbCBzaXplOiBJbnQpIHtcbiAgICBmdW4gZ2V0KGluZGV4OiBJbnQpOiBUIHsgLyogLi4uICovIH1cbiAgICBmdW4gc2V0KGluZGV4OiBJbnQsIHZhbHVlOiBUKSB7IC8qIC4uLiAqLyB9XG59XG5gYGBcbiAgXG5UaGlzIGNsYXNzIGNhbm5vdCBiZSBlaXRoZXIgY29cXC0gb3IgY29udHJhdmFyaWFudCBpbiBgVGAuIEFuZCB0aGlzIGltcG9zZXMgY2VydGFpbiBpbmZsZXhpYmlsaXRpZXMuXG5Db25zaWRlciB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uOlxuICBcbmBgYCBrb3RsaW5cbmZ1biBjb3B5KGZyb206IEFycmF5Jmx0O0FueSZndDssIHRvOiBBcnJheSZsdDtBbnkmZ3Q7KSB7XG4gICAgYXNzZXJ0KGZyb20uc2l6ZSA9PSB0by5zaXplKVxuICAgIGZvciAoaSBpbiBmcm9tLmluZGljZXMpXG4gICAgICAgIHRvW2ldID0gZnJvbVtpXVxufVxuYGBgXG4gIFxuVGhpcyBmdW5jdGlvbiBpcyBzdXBwb3NlZCB0byBjb3B5IGl0ZW1zIGZyb20gb25lIGFycmF5IHRvIGFub3RoZXIuIExldCZhcG9zO3MgdHJ5IHRvIGFwcGx5IGl0IGluIHByYWN0aWNlOlxuICBcbmBgYCBrb3RsaW5cbnZhbCBpbnRzOiBBcnJheSZsdDtJbnQmZ3Q7ID0gYXJyYXlPZigxLCAyLCAzKVxudmFsIGFueSA9IEFycmF5Jmx0O0FueSZndDsoMykgeyAmcXVvdDsmcXVvdDsgfSBcbmNvcHkoaW50cywgYW55KSAvLyBFcnJvcjogZXhwZWN0cyAoQXJyYXkmbHQ7QW55Jmd0OywgQXJyYXkmbHQ7QW55Jmd0OylcbmBgYFxuICBcbkhlcmUgd2UgcnVuIGludG8gdGhlIHNhbWUgZmFtaWxpYXIgcHJvYmxlbTogYEFycmF5Jmx0O1QmZ3Q7YCBpcyAqKmludmFyaWFudCoqIGluIGBUYCwgdGh1cyBuZWl0aGVyIG9mIGBBcnJheSZsdDtJbnQmZ3Q7YCBhbmQgYEFycmF5Jmx0O0FueSZndDtgIGlzIGEgc3VidHlwZSBvZiB0aGUgb3RoZXIuIFdoeT8gQWdhaW4sIGJlY2F1c2UgY29weSAqKm1pZ2h0KiogYmUgZG9pbmcgYmFkIHRoaW5ncywgaS5lLiBpdCBtaWdodCBhdHRlbXB0IHRvICoqd3JpdGUqKiwgc2F5LCBhIFN0cmluZyB0byBgZnJvbWAsIGFuZCBpZiB3ZSBhY3R1YWxseSBwYXNzZWQgYW4gYXJyYXkgb2YgYEludGAgdGhlcmUsIGEgYENsYXNzQ2FzdEV4Y2VwdGlvbmAgd291bGQgaGF2ZSBiZWVuIHRocm93biBzb21ldGltZSBsYXRlci5cbiAgXG5UaGVuLCB0aGUgb25seSB0aGluZyB3ZSB3YW50IHRvIGVuc3VyZSBpcyB0aGF0IGBjb3B5KClgIGRvZXMgbm90IGRvIGFueSBiYWQgdGhpbmdzLiBXZSB3YW50IHRvIHByb2hpYml0IGl0IGZyb20gKip3cml0aW5nKiogdG8gYGZyb21gLCBhbmQgd2UgY2FuOlxuICBcbmBgYCBrb3RsaW5cbmZ1biBjb3B5KGZyb206IEFycmF5Jmx0O291dCBBbnkmZ3Q7LCB0bzogQXJyYXkmbHQ7QW55Jmd0Oykge1xuIC8vIC4uLlxufVxuYGBgXG4gIFxuV2hhdCBoYXMgaGFwcGVuZWQgaGVyZSBpcyBjYWxsZWQgKip0eXBlIHByb2plY3Rpb24qKjogd2Ugc2FpZCB0aGF0IGBmcm9tYCBpcyBub3Qgc2ltcGx5IGFuIGFycmF5LCBidXQgYSByZXN0cmljdGVkICgqKnByb2plY3RlZCoqKSBvbmU6IHdlIGNhbiBvbmx5IGNhbGwgdGhvc2UgbWV0aG9kcyB0aGF0IHJldHVybiB0aGUgdHlwZSBwYXJhbWV0ZXIgYFRgLCBpbiB0aGlzIGNhc2UgaXQgbWVhbnMgdGhhdCB3ZSBjYW4gb25seSBjYWxsIGBnZXQoKWAuIFRoaXMgaXMgb3VyIGFwcHJvYWNoIHRvICoqdXNlLXNpdGUgdmFyaWFuY2UqKiwgYW5kIGNvcnJlc3BvbmRzIHRvIEphdmEmYXBvcztzIGBBcnJheSZsdDs/IGV4dGVuZHMgT2JqZWN0Jmd0O2AsIGJ1dCBpbiBhIHNsaWdodGx5IHNpbXBsZXIgd2F5LlxuICBcbllvdSBjYW4gcHJvamVjdCBhIHR5cGUgd2l0aCAqKmluKiogYXMgd2VsbDpcbiAgXG5gYGAga290bGluXG5mdW4gZmlsbChkZXN0OiBBcnJheSZsdDtpbiBTdHJpbmcmZ3Q7LCB2YWx1ZTogU3RyaW5nKSB7XG4gICAgLy8gLi4uXG59XG5gYGBcbiAgXG5gQXJyYXkmbHQ7aW4gU3RyaW5nJmd0O2AgY29ycmVzcG9uZHMgdG8gSmF2YSZhcG9zO3MgYEFycmF5Jmx0Oz8gc3VwZXIgU3RyaW5nJmd0O2AsIGkuZS4geW91IGNhbiBwYXNzIGFuIGFycmF5IG9mIGBDaGFyU2VxdWVuY2VgIG9yIGFuIGFycmF5IG9mIGBPYmplY3RgIHRvIHRoZSBgZmlsbCgpYCBmdW5jdGlvbi5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/generics.html#use-site-variance-type-projections"
            ],
            "flags": 0,
            "guid": "smr-BO}N1G",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Generics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Star-projections</b> in <b>Generics</b>",
                "<p>Sometimes you want to say that you know nothing about the type argument, but still want to use it in a safe way.<br />\nThe safe way here is to define such a projection of the generic type, that every concrete instantiation of that generic type would be a subtype of that projection.</p>\n<p>Kotlin provides so called <strong>star-projection</strong> syntax for this:</p>\n<ul>\n<li align=\"left\">For <code>Foo&lt;out T&gt;</code>, where <code>T</code> is a covariant type parameter with the upper bound <code>TUpper</code>, <code>Foo&lt;*&gt;</code> is equivalent to <code>Foo&lt;out TUpper&gt;</code>. It means that when the <code>T</code> is unknown you can safely <em>read</em> values of <code>TUpper</code> from <code>Foo&lt;*&gt;</code>.</li>\n<li align=\"left\">For <code>Foo&lt;in T&gt;</code>, where <code>T</code> is a contravariant type parameter, <code>Foo&lt;*&gt;</code> is equivalent to <code>Foo&lt;in Nothing&gt;</code>. It means there is nothing you can <em>write</em> to <code>Foo&lt;*&gt;</code> in a safe way when <code>T</code> is unknown.</li>\n<li align=\"left\">For <code>Foo&lt;T&gt;</code>, where <code>T</code> is an invariant type parameter with the upper bound <code>TUpper</code>, <code>Foo&lt;*&gt;</code> is equivalent to <code>Foo&lt;out TUpper&gt;</code> for reading values and to <code>Foo&lt;in Nothing&gt;</code> for writing values.</li>\n</ul>\n<p>If a generic type has several type parameters each of them can be projected independently.<br />\nFor example, if the type is declared as <code>interface Function&lt;in T, out U&gt;</code> we can imagine the following star-projections:</p>\n<ul>\n<li align=\"left\"><code>Function&lt;*, String&gt;</code> means <code>Function&lt;in Nothing, String&gt;</code>;</li>\n<li align=\"left\"><code>Function&lt;Int, *&gt;</code> means <code>Function&lt;Int, out Any?&gt;</code>;</li>\n<li align=\"left\"><code>Function&lt;*, *&gt;</code> means <code>Function&lt;in Nothing, out Any?&gt;</code>.</li>\n</ul>\n<blockquote>\n<p><em>Note</em>: star-projections are very much like Java's raw types, but safe.</p>\n</blockquote><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjEzNDUsICJpZCI6ICIxNDg4MTA0NjQwNTY1LTAwMSIsICJtZCI6ICJTb21ldGltZXMgeW91IHdhbnQgdG8gc2F5IHRoYXQgeW91IGtub3cgbm90aGluZyBhYm91dCB0aGUgdHlwZSBhcmd1bWVudCwgYnV0IHN0aWxsIHdhbnQgdG8gdXNlIGl0IGluIGEgc2FmZSB3YXkuXG5UaGUgc2FmZSB3YXkgaGVyZSBpcyB0byBkZWZpbmUgc3VjaCBhIHByb2plY3Rpb24gb2YgdGhlIGdlbmVyaWMgdHlwZSwgdGhhdCBldmVyeSBjb25jcmV0ZSBpbnN0YW50aWF0aW9uIG9mIHRoYXQgZ2VuZXJpYyB0eXBlIHdvdWxkIGJlIGEgc3VidHlwZSBvZiB0aGF0IHByb2plY3Rpb24uXG4gIFxuS290bGluIHByb3ZpZGVzIHNvIGNhbGxlZCAqKnN0YXItcHJvamVjdGlvbioqIHN5bnRheCBmb3IgdGhpczpcbiAgXG4gLSBGb3IgYEZvbyZsdDtvdXQgVCZndDtgLCB3aGVyZSBgVGAgaXMgYSBjb3ZhcmlhbnQgdHlwZSBwYXJhbWV0ZXIgd2l0aCB0aGUgdXBwZXIgYm91bmQgYFRVcHBlcmAsIGBGb28mbHQ7KiZndDtgIGlzIGVxdWl2YWxlbnQgdG8gYEZvbyZsdDtvdXQgVFVwcGVyJmd0O2AuIEl0IG1lYW5zIHRoYXQgd2hlbiB0aGUgYFRgIGlzIHVua25vd24geW91IGNhbiBzYWZlbHkgKnJlYWQqIHZhbHVlcyBvZiBgVFVwcGVyYCBmcm9tIGBGb28mbHQ7KiZndDtgLlxuIC0gRm9yIGBGb28mbHQ7aW4gVCZndDtgLCB3aGVyZSBgVGAgaXMgYSBjb250cmF2YXJpYW50IHR5cGUgcGFyYW1ldGVyLCBgRm9vJmx0OyomZ3Q7YCBpcyBlcXVpdmFsZW50IHRvIGBGb28mbHQ7aW4gTm90aGluZyZndDtgLiBJdCBtZWFucyB0aGVyZSBpcyBub3RoaW5nIHlvdSBjYW4gKndyaXRlKiB0byBgRm9vJmx0OyomZ3Q7YCBpbiBhIHNhZmUgd2F5IHdoZW4gYFRgIGlzIHVua25vd24uXG4gLSBGb3IgYEZvbyZsdDtUJmd0O2AsIHdoZXJlIGBUYCBpcyBhbiBpbnZhcmlhbnQgdHlwZSBwYXJhbWV0ZXIgd2l0aCB0aGUgdXBwZXIgYm91bmQgYFRVcHBlcmAsIGBGb28mbHQ7KiZndDtgIGlzIGVxdWl2YWxlbnQgdG8gYEZvbyZsdDtvdXQgVFVwcGVyJmd0O2AgZm9yIHJlYWRpbmcgdmFsdWVzIGFuZCB0byBgRm9vJmx0O2luIE5vdGhpbmcmZ3Q7YCBmb3Igd3JpdGluZyB2YWx1ZXMuXG4gIFxuSWYgYSBnZW5lcmljIHR5cGUgaGFzIHNldmVyYWwgdHlwZSBwYXJhbWV0ZXJzIGVhY2ggb2YgdGhlbSBjYW4gYmUgcHJvamVjdGVkIGluZGVwZW5kZW50bHkuXG5Gb3IgZXhhbXBsZSwgaWYgdGhlIHR5cGUgaXMgZGVjbGFyZWQgYXMgYGludGVyZmFjZSBGdW5jdGlvbiZsdDtpbiBULCBvdXQgVSZndDtgIHdlIGNhbiBpbWFnaW5lIHRoZSBmb2xsb3dpbmcgc3Rhci1wcm9qZWN0aW9uczpcbiAgXG4gLSBgRnVuY3Rpb24mbHQ7KiwgU3RyaW5nJmd0O2AgbWVhbnMgYEZ1bmN0aW9uJmx0O2luIE5vdGhpbmcsIFN0cmluZyZndDtgO1xuIC0gYEZ1bmN0aW9uJmx0O0ludCwgKiZndDtgIG1lYW5zIGBGdW5jdGlvbiZsdDtJbnQsIG91dCBBbnk/Jmd0O2A7XG4gLSBgRnVuY3Rpb24mbHQ7KiwgKiZndDtgIG1lYW5zIGBGdW5jdGlvbiZsdDtpbiBOb3RoaW5nLCBvdXQgQW55PyZndDtgLlxuICBcbiZndDsgKk5vdGUqOiBzdGFyLXByb2plY3Rpb25zIGFyZSB2ZXJ5IG11Y2ggbGlrZSBKYXZhJmFwb3M7cyByYXcgdHlwZXMsIGJ1dCBzYWZlLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/generics.html#star-projections"
            ],
            "flags": 0,
            "guid": "z~~voOI8N-",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Generics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Generic</b> functions",
                "<p>Not only classes can have type parameters. Functions can, too.<br />\nType parameters are placed before the name of the function:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">singletonList</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">item</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">basicToString</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">{</span>  <span style=\"color: #8f5902; font-style: italic\">// extension function</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>To call a generic function, specify the type arguments at the call site <strong>after</strong> the name of the function:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">l</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">singletonList</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjE0NDEsICJpZCI6ICIxNDg4MTA0NjY0MDczLTAwMSIsICJtZCI6ICJOb3Qgb25seSBjbGFzc2VzIGNhbiBoYXZlIHR5cGUgcGFyYW1ldGVycy4gRnVuY3Rpb25zIGNhbiwgdG9vLlxuVHlwZSBwYXJhbWV0ZXJzIGFyZSBwbGFjZWQgYmVmb3JlIHRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbjpcbiAgXG5gYGAga290bGluXG5mdW4gJmx0O1QmZ3Q7IHNpbmdsZXRvbkxpc3QoaXRlbTogVCk6IExpc3QmbHQ7VCZndDsge1xuICAgIC8vIC4uLlxufVxuICBcbmZ1biAmbHQ7VCZndDsgVC5iYXNpY1RvU3RyaW5nKCkgOiBTdHJpbmcgeyAgLy8gZXh0ZW5zaW9uIGZ1bmN0aW9uXG4gICAgLy8gLi4uXG59XG5gYGBcbiAgXG5UbyBjYWxsIGEgZ2VuZXJpYyBmdW5jdGlvbiwgc3BlY2lmeSB0aGUgdHlwZSBhcmd1bWVudHMgYXQgdGhlIGNhbGwgc2l0ZSAqKmFmdGVyKiogdGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uOlxuICBcbmBgYCBrb3RsaW5cbnZhbCBsID0gc2luZ2xldG9uTGlzdCZsdDtJbnQmZ3Q7KDEpXG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/generics.html#generic-functions"
            ],
            "flags": 0,
            "guid": "m<_0oR|^FA",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Generics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Generic</b> constraints",
                "<p>The set of all possible types that can be substituted for a given type parameter may be restricted by <strong>generic constraints</strong>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzA5ODEsICJpZCI6ICIxNDg4MTA0NjgzMjY5LTAwMSIsICJtZCI6ICJUaGUgc2V0IG9mIGFsbCBwb3NzaWJsZSB0eXBlcyB0aGF0IGNhbiBiZSBzdWJzdGl0dXRlZCBmb3IgYSBnaXZlbiB0eXBlIHBhcmFtZXRlciBtYXkgYmUgcmVzdHJpY3RlZCBieSAqKmdlbmVyaWMgY29uc3RyYWludHMqKi5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/generics.html#generic-constraints"
            ],
            "flags": 0,
            "guid": "O0w}Q{1A)Z",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Generics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div><b>Nested</b> Classes</div>",
                "<p>Classes can be nested in other classes</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Outer</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n    <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Nested</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">2</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">demo</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Outer</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Nested</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #8f5902; font-style: italic\">// == 2</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzEwNjEsICJpZCI6ICIxNDg4MTA0NzAyNTE5LTAwMSIsICJtZCI6ICJDbGFzc2VzIGNhbiBiZSBuZXN0ZWQgaW4gb3RoZXIgY2xhc3Nlc1xuICBcbmBgYCBrb3RsaW5cbmNsYXNzIE91dGVyIHtcbiAgICBwcml2YXRlIHZhbCBiYXI6IEludCA9IDFcbiAgICBjbGFzcyBOZXN0ZWQge1xuICAgICAgICBmdW4gZm9vKCkgPSAyXG4gICAgfVxufVxuICBcbnZhbCBkZW1vID0gT3V0ZXIuTmVzdGVkKCkuZm9vKCkgLy8gPT0gMlxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/nested-classes.html#nested-classes"
            ],
            "flags": 0,
            "guid": "qPlz|}cf${",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "NestedClasses"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Inner</b> classes",
                "<p>A class may be marked as <em class=\"keyword\">inner</em> to be able to access members of outer class. Inner classes carry a reference to an object of an outer class:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Outer</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n    <span style=\"color: #204a87; font-weight: bold\">inner</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Inner</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">bar</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">demo</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Outer</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">Inner</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #8f5902; font-style: italic\">// == 1</span>\n</pre></div>\n<p>See <a href=\"this-expressions.html\">Qualified <em class=\"keyword\">this</em> expressions</a> to learn about disambiguation of <em class=\"keyword\">this</em> in inner classes.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzEwNzIsICJpZCI6ICIxNDg4MTA0NzM3OTcxLTAwMSIsICJtZCI6ICJBIGNsYXNzIG1heSBiZSBtYXJrZWQgYXMgKmlubmVyKns6IC5rZXl3b3JkIH0gdG8gYmUgYWJsZSB0byBhY2Nlc3MgbWVtYmVycyBvZiBvdXRlciBjbGFzcy4gSW5uZXIgY2xhc3NlcyBjYXJyeSBhIHJlZmVyZW5jZSB0byBhbiBvYmplY3Qgb2YgYW4gb3V0ZXIgY2xhc3M6XG4gIFxuYGBgIGtvdGxpblxuY2xhc3MgT3V0ZXIge1xuICAgIHByaXZhdGUgdmFsIGJhcjogSW50ID0gMVxuICAgIGlubmVyIGNsYXNzIElubmVyIHtcbiAgICAgICAgZnVuIGZvbygpID0gYmFyXG4gICAgfVxufVxuICBcbnZhbCBkZW1vID0gT3V0ZXIoKS5Jbm5lcigpLmZvbygpIC8vID09IDFcbmBgYFxuICBcblNlZSBbUXVhbGlmaWVkICp0aGlzKns6IC5rZXl3b3JkIH0gZXhwcmVzc2lvbnNdKHRoaXMtZXhwcmVzc2lvbnMuaHRtbCkgdG8gbGVhcm4gYWJvdXQgZGlzYW1iaWd1YXRpb24gb2YgKnRoaXMqezogLmtleXdvcmQgfSBpbiBpbm5lciBjbGFzc2VzLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/nested-classes.html#inner-classes"
            ],
            "flags": 0,
            "guid": "u:vo)Ij),+",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "NestedClasses"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Anonymous</b> inner classes",
                "<p>Anonymous inner class instances are created using an <a href=\"object-declarations.html#object-expressions\">object expression</a>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">window</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">addMouseListener</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">object</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MouseAdapter</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">mouseClicked</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MouseEvent</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">mouseEntered</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MouseEvent</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">})</span>\n</pre></div>\n<p>If the object is an instance of a functional Java interface (i.e. a Java interface with a single abstract method), you can create it using a lambda expression prefixed with the type of the interface:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">listener</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ActionListener</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"clicked\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA4OTAsICJpZCI6ICIxNDg4MTA0NzUzODEwLTAwMSIsICJtZCI6ICJBbm9ueW1vdXMgaW5uZXIgY2xhc3MgaW5zdGFuY2VzIGFyZSBjcmVhdGVkIHVzaW5nIGFuIFtvYmplY3QgZXhwcmVzc2lvbl0ob2JqZWN0LWRlY2xhcmF0aW9ucy5odG1sI29iamVjdC1leHByZXNzaW9ucyk6XG4gIFxuYGBgIGtvdGxpblxud2luZG93LmFkZE1vdXNlTGlzdGVuZXIob2JqZWN0OiBNb3VzZUFkYXB0ZXIoKSB7XG4gICAgb3ZlcnJpZGUgZnVuIG1vdXNlQ2xpY2tlZChlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIC8vIC4uLlxuICAgIH1cbiAgXG4gICAgb3ZlcnJpZGUgZnVuIG1vdXNlRW50ZXJlZChlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIC8vIC4uLlxuICAgIH1cbn0pXG5gYGBcbiAgXG5JZiB0aGUgb2JqZWN0IGlzIGFuIGluc3RhbmNlIG9mIGEgZnVuY3Rpb25hbCBKYXZhIGludGVyZmFjZSAoaS5lLiBhIEphdmEgaW50ZXJmYWNlIHdpdGggYSBzaW5nbGUgYWJzdHJhY3QgbWV0aG9kKSwgeW91IGNhbiBjcmVhdGUgaXQgdXNpbmcgYSBsYW1iZGEgZXhwcmVzc2lvbiBwcmVmaXhlZCB3aXRoIHRoZSB0eXBlIG9mIHRoZSBpbnRlcmZhY2U6XG4gIFxuYGBgIGtvdGxpblxudmFsIGxpc3RlbmVyID0gQWN0aW9uTGlzdGVuZXIgeyBwcmludGxuKCZxdW90O2NsaWNrZWQmcXVvdDspIH1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/nested-classes.html#anonymous-inner-classes"
            ],
            "flags": 0,
            "guid": "J35:QE-6iW",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "NestedClasses"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Enum</b> Classes",
                "<p>The most basic usage of enum classes is implementing type-safe enums</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">enum</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Direction</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">NORTH</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">SOUTH</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">WEST</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">EAST</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Each enum constant is an object. Enum constants are separated with commas.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzExMjksICJpZCI6ICIxNDg4MTA0NzcxMTk4LTAwMSIsICJtZCI6ICJUaGUgbW9zdCBiYXNpYyB1c2FnZSBvZiBlbnVtIGNsYXNzZXMgaXMgaW1wbGVtZW50aW5nIHR5cGUtc2FmZSBlbnVtc1xuICBcbmBgYCBrb3RsaW5cbmVudW0gY2xhc3MgRGlyZWN0aW9uIHtcbiAgICBOT1JUSCwgU09VVEgsIFdFU1QsIEVBU1Rcbn1cbmBgYFxuICBcbkVhY2ggZW51bSBjb25zdGFudCBpcyBhbiBvYmplY3QuIEVudW0gY29uc3RhbnRzIGFyZSBzZXBhcmF0ZWQgd2l0aCBjb21tYXMuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/enum-classes.html#enum-classes"
            ],
            "flags": 0,
            "guid": "B^Nb0~#hwf",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "EnumClasses",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Initialization</b>&nbsp;(in <b>Enum</b> classes)",
                "<p>Since each enum is an instance of the enum class, they can be initialized</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">enum</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Color</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">rgb</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">RED</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000\">xFF0000</span><span style=\"color: #000000; font-weight: bold\">),</span>\n        <span style=\"color: #000000\">GREEN</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000\">x00FF00</span><span style=\"color: #000000; font-weight: bold\">),</span>\n        <span style=\"color: #000000\">BLUE</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000\">x0000FF</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzExMzksICJpZCI6ICIxNDg4MTA0Nzk0MDI5LTAwMSIsICJtZCI6ICJTaW5jZSBlYWNoIGVudW0gaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIGVudW0gY2xhc3MsIHRoZXkgY2FuIGJlIGluaXRpYWxpemVkXG4gIFxuYGBgIGtvdGxpblxuZW51bSBjbGFzcyBDb2xvcih2YWwgcmdiOiBJbnQpIHtcbiAgICAgICAgUkVEKDB4RkYwMDAwKSxcbiAgICAgICAgR1JFRU4oMHgwMEZGMDApLFxuICAgICAgICBCTFVFKDB4MDAwMEZGKVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/enum-classes.html#initialization"
            ],
            "flags": 0,
            "guid": "zz;0Ru*z]#",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "EnumClasses",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div><b>Anonymous Classes</b>&nbsp;(inside <b>Enum</b> classes)</div>",
                "<p>Enum constants can also declare their own anonymous classes</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">enum</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">ProtocolState</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">WAITING</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">signal</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">TALKING</span>\n    <span style=\"color: #000000; font-weight: bold\">},</span>\n\n    <span style=\"color: #000000\">TALKING</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">signal</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">WAITING</span>\n    <span style=\"color: #000000; font-weight: bold\">};</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">abstract</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">signal</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">ProtocolState</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>with their corresponding methods, as well as overriding base methods. Note that if the enum class defines any members, you need to separate the enum constant definitions from the member definitions with a semicolon, just like in Java.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA5MDgsICJpZCI6ICIxNDg4MTA0ODY1MTQ2LTAwMSIsICJtZCI6ICJFbnVtIGNvbnN0YW50cyBjYW4gYWxzbyBkZWNsYXJlIHRoZWlyIG93biBhbm9ueW1vdXMgY2xhc3Nlc1xuICBcbmBgYCBrb3RsaW5cbmVudW0gY2xhc3MgUHJvdG9jb2xTdGF0ZSB7XG4gICAgV0FJVElORyB7XG4gICAgICAgIG92ZXJyaWRlIGZ1biBzaWduYWwoKSA9IFRBTEtJTkdcbiAgICB9LFxuICBcbiAgICBUQUxLSU5HIHtcbiAgICAgICAgb3ZlcnJpZGUgZnVuIHNpZ25hbCgpID0gV0FJVElOR1xuICAgIH07XG4gIFxuICAgIGFic3RyYWN0IGZ1biBzaWduYWwoKTogUHJvdG9jb2xTdGF0ZVxufVxuYGBgXG4gIFxud2l0aCB0aGVpciBjb3JyZXNwb25kaW5nIG1ldGhvZHMsIGFzIHdlbGwgYXMgb3ZlcnJpZGluZyBiYXNlIG1ldGhvZHMuIE5vdGUgdGhhdCBpZiB0aGUgZW51bSBjbGFzcyBkZWZpbmVzIGFueSBtZW1iZXJzLCB5b3UgbmVlZCB0byBzZXBhcmF0ZSB0aGUgZW51bSBjb25zdGFudCBkZWZpbml0aW9ucyBmcm9tIHRoZSBtZW1iZXIgZGVmaW5pdGlvbnMgd2l0aCBhIHNlbWljb2xvbiwganVzdCBsaWtlIGluIEphdmEuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/enum-classes.html#anonymous-classes"
            ],
            "flags": 0,
            "guid": "s4!h+dbHm3",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "EnumClasses",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Working with <b>Enum</b> Constants",
                "<p>Just like in Java, enum classes in Kotlin have synthetic methods allowing to list the defined enum constants and to get an enum constant by its name.<br />\nThe signatures of these methods are as follows (assuming the name of the enum class is <code>EnumClass</code>):</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">EnumClass</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">valueOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">EnumClass</span>\n<span style=\"color: #000000\">EnumClass</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">values</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">EnumClass</span><span style=\"color: #000000; font-weight: bold\">&gt;</span>\n</pre></div>\n<p>The <code>valueOf()</code> method throws an <code>IllegalArgumentException</code> if the specified name does not match any of the enum constants defined in the class.</p>\n<p>Since Kotlin 1.1, it's possible to access the constants in an enum class in a generic way, using the <code>enumValues&lt;T&gt;()</code> and <code>enumValueOf&lt;T&gt;()</code> functions:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">enum</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">RGB</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">RED</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">GREEN</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">BLUE</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">reified</span> <span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Enum</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;&gt;</span> <span style=\"color: #000000\">printAllValues</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">enumValues</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;().</span><span style=\"color: #000000\">joinToString</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span> <span style=\"color: #000000; font-weight: bold\">})</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">printAllValues</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">RGB</span><span style=\"color: #000000; font-weight: bold\">&gt;()</span> <span style=\"color: #8f5902; font-style: italic\">// prints RED, GREEN, BLUE</span>\n</pre></div>\n<p>Every enum constant has properties to obtain its name and position in the enum class declaration:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">ordinal</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span>\n</pre></div>\n<p>The enum constants also implement the <a href=\"/api/latest/jvm/stdlib/kotlin/-comparable/index.html\">Comparable</a> interface, with the natural order being the order in which they are defined in the enum class.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA5MzcsICJpZCI6ICIxNDg4MTA0ODg3NTk1LTAwMSIsICJtZCI6ICJKdXN0IGxpa2UgaW4gSmF2YSwgZW51bSBjbGFzc2VzIGluIEtvdGxpbiBoYXZlIHN5bnRoZXRpYyBtZXRob2RzIGFsbG93aW5nIHRvIGxpc3QgdGhlIGRlZmluZWQgZW51bSBjb25zdGFudHMgYW5kIHRvIGdldCBhbiBlbnVtIGNvbnN0YW50IGJ5IGl0cyBuYW1lLlxuVGhlIHNpZ25hdHVyZXMgb2YgdGhlc2UgbWV0aG9kcyBhcmUgYXMgZm9sbG93cyAoYXNzdW1pbmcgdGhlIG5hbWUgb2YgdGhlIGVudW0gY2xhc3MgaXMgYEVudW1DbGFzc2ApOlxuICBcbmBgYCBrb3RsaW5cbkVudW1DbGFzcy52YWx1ZU9mKHZhbHVlOiBTdHJpbmcpOiBFbnVtQ2xhc3NcbkVudW1DbGFzcy52YWx1ZXMoKTogQXJyYXkmbHQ7RW51bUNsYXNzJmd0O1xuYGBgXG4gIFxuVGhlIGB2YWx1ZU9mKClgIG1ldGhvZCB0aHJvd3MgYW4gYElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbmAgaWYgdGhlIHNwZWNpZmllZCBuYW1lIGRvZXMgbm90IG1hdGNoIGFueSBvZiB0aGUgZW51bSBjb25zdGFudHMgZGVmaW5lZCBpbiB0aGUgY2xhc3MuXG4gIFxuU2luY2UgS290bGluIDEuMSwgaXQmYXBvcztzIHBvc3NpYmxlIHRvIGFjY2VzcyB0aGUgY29uc3RhbnRzIGluIGFuIGVudW0gY2xhc3MgaW4gYSBnZW5lcmljIHdheSwgdXNpbmcgdGhlIGBlbnVtVmFsdWVzJmx0O1QmZ3Q7KClgIGFuZCBgZW51bVZhbHVlT2YmbHQ7VCZndDsoKWAgZnVuY3Rpb25zOlxuICBcbmBgYCBrb3RsaW5cbmVudW0gY2xhc3MgUkdCIHsgUkVELCBHUkVFTiwgQkxVRSB9XG4gIFxuaW5saW5lIGZ1biAmbHQ7cmVpZmllZCBUIDogRW51bSZsdDtUJmd0OyZndDsgcHJpbnRBbGxWYWx1ZXMoKSB7XG4gICAgcHJpbnQoZW51bVZhbHVlcyZsdDtUJmd0OygpLmpvaW5Ub1N0cmluZyB7IGl0Lm5hbWUgfSlcbn1cbiAgXG5wcmludEFsbFZhbHVlcyZsdDtSR0ImZ3Q7KCkgLy8gcHJpbnRzIFJFRCwgR1JFRU4sIEJMVUVcbmBgYFxuICBcbkV2ZXJ5IGVudW0gY29uc3RhbnQgaGFzIHByb3BlcnRpZXMgdG8gb2J0YWluIGl0cyBuYW1lIGFuZCBwb3NpdGlvbiBpbiB0aGUgZW51bSBjbGFzcyBkZWNsYXJhdGlvbjpcbiAgXG5gYGAga290bGluXG52YWwgbmFtZTogU3RyaW5nXG52YWwgb3JkaW5hbDogSW50XG5gYGBcbiAgXG5UaGUgZW51bSBjb25zdGFudHMgYWxzbyBpbXBsZW1lbnQgdGhlIFtDb21wYXJhYmxlXSgvYXBpL2xhdGVzdC9qdm0vc3RkbGliL2tvdGxpbi8tY29tcGFyYWJsZS9pbmRleC5odG1sKSBpbnRlcmZhY2UsIHdpdGggdGhlIG5hdHVyYWwgb3JkZXIgYmVpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlIGRlZmluZWQgaW4gdGhlIGVudW0gY2xhc3MuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/enum-classes.html#working-with-enum-constants"
            ],
            "flags": 0,
            "guid": "ko9J3rs?jN",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "EnumClasses",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Object</b> Expressions and Declarations",
                "<p>Sometimes we need to create an object of a slight modification of some class, without explicitly declaring a new subclass for it.<br />\nJava handles this case with <em>anonymous inner classes</em>.<br />\nKotlin slightly generalizes this concept with <em>object expressions</em> and <em>object declarations</em>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzEyNTUsICJpZCI6ICIxNDg4MTA0OTAzNzc0LTAwMSIsICJtZCI6ICJTb21ldGltZXMgd2UgbmVlZCB0byBjcmVhdGUgYW4gb2JqZWN0IG9mIGEgc2xpZ2h0IG1vZGlmaWNhdGlvbiBvZiBzb21lIGNsYXNzLCB3aXRob3V0IGV4cGxpY2l0bHkgZGVjbGFyaW5nIGEgbmV3IHN1YmNsYXNzIGZvciBpdC5cbkphdmEgaGFuZGxlcyB0aGlzIGNhc2Ugd2l0aCAqYW5vbnltb3VzIGlubmVyIGNsYXNzZXMqLlxuS290bGluIHNsaWdodGx5IGdlbmVyYWxpemVzIHRoaXMgY29uY2VwdCB3aXRoICpvYmplY3QgZXhwcmVzc2lvbnMqIGFuZCAqb2JqZWN0IGRlY2xhcmF0aW9ucyouXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions-and-declarations"
            ],
            "flags": 0,
            "guid": "II<@!mTW:P",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "Objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Object</b> expressions",
                "<p>To create an object of an anonymous class that inherits from some type (or types), we write:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">window</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">addMouseListener</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">: </span><span style=\"color: #000000\">MouseAdapter</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">mouseClicked</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MouseEvent</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">mouseEntered</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MouseEvent</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">})</span>\n</pre></div>\n<p>If a supertype has a constructor, appropriate constructor parameters must be passed to it.<br />\nMany supertypes may be specified as a comma-separated list after the colon:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">public</span> <span style=\"color: #204a87; font-weight: bold\">open</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">x</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">B</span> <span style=\"color: #000000; font-weight: bold\">{...}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">ab</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">A</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">: </span><span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">),</span> <span style=\"color: #000000\">B</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">y</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">15</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>If, by any chance, we need \"just an object\", with no nontrivial supertypes, we can simply say:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">adHoc</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n        <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">adHoc</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">adHoc</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Note that anonymous objects can be used as types only in local and private declarations. If you use an anonymous object as a return type of a public function or the type of a public property, the actual type of that function or property will be the declared supertype of the anonymous object, or <code>Any</code> if you didn't declare any supertype. Members added in the anonymous object will not be accessible.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// Private function, so the return type is the anonymous object type</span>\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"x\"</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #8f5902; font-style: italic\">// Public function, so the return type is Any</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">publicFoo</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"x\"</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x1</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">x</span>        <span style=\"color: #8f5902; font-style: italic\">// Works</span>\n        <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x2</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">publicFoo</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">x</span>  <span style=\"color: #8f5902; font-style: italic\">// ERROR: Unresolved reference 'x'</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Just like Java's anonymous inner classes, code in object expressions can access variables from the enclosing scope. (Unlike Java, this is not restricted to final variables.)</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">countClicks</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">window</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">JComponent</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">clickCount</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">enterCount</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n\n    <span style=\"color: #000000\">window</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">addMouseListener</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">: </span><span style=\"color: #000000\">MouseAdapter</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">mouseClicked</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MouseEvent</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">clickCount</span><span style=\"color: #000000; font-weight: bold\">++</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n\n        <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">mouseEntered</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MouseEvent</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">enterCount</span><span style=\"color: #000000; font-weight: bold\">++</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000; font-weight: bold\">})</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzEyOTMsICJpZCI6ICIxNDg4MTA0OTMwMTE0LTAwMSIsICJtZCI6ICJUbyBjcmVhdGUgYW4gb2JqZWN0IG9mIGFuIGFub255bW91cyBjbGFzcyB0aGF0IGluaGVyaXRzIGZyb20gc29tZSB0eXBlIChvciB0eXBlcyksIHdlIHdyaXRlOlxuICBcbmBgYCBrb3RsaW5cbndpbmRvdy5hZGRNb3VzZUxpc3RlbmVyKG9iamVjdCA6IE1vdXNlQWRhcHRlcigpIHtcbiAgICBvdmVycmlkZSBmdW4gbW91c2VDbGlja2VkKGU6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxuICBcbiAgICBvdmVycmlkZSBmdW4gbW91c2VFbnRlcmVkKGU6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxufSlcbmBgYFxuICBcbklmIGEgc3VwZXJ0eXBlIGhhcyBhIGNvbnN0cnVjdG9yLCBhcHByb3ByaWF0ZSBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzIG11c3QgYmUgcGFzc2VkIHRvIGl0LlxuTWFueSBzdXBlcnR5cGVzIG1heSBiZSBzcGVjaWZpZWQgYXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBhZnRlciB0aGUgY29sb246XG4gIFxuICBcbmBgYCBrb3RsaW5cbm9wZW4gY2xhc3MgQSh4OiBJbnQpIHtcbiAgICBwdWJsaWMgb3BlbiB2YWwgeTogSW50ID0geFxufVxuICBcbmludGVyZmFjZSBCIHsuLi59XG4gIFxudmFsIGFiOiBBID0gb2JqZWN0IDogQSgxKSwgQiB7XG4gICAgb3ZlcnJpZGUgdmFsIHkgPSAxNVxufVxuYGBgXG4gIFxuSWYsIGJ5IGFueSBjaGFuY2UsIHdlIG5lZWQgJnF1b3Q7anVzdCBhbiBvYmplY3QmcXVvdDssIHdpdGggbm8gbm9udHJpdmlhbCBzdXBlcnR5cGVzLCB3ZSBjYW4gc2ltcGx5IHNheTpcbiAgXG5gYGAga290bGluXG5mdW4gZm9vKCkge1xuICAgIHZhbCBhZEhvYyA9IG9iamVjdCB7XG4gICAgICAgIHZhciB4OiBJbnQgPSAwXG4gICAgICAgIHZhciB5OiBJbnQgPSAwXG4gICAgfVxuICAgIHByaW50KGFkSG9jLnggKyBhZEhvYy55KVxufVxuYGBgXG4gIFxuTm90ZSB0aGF0IGFub255bW91cyBvYmplY3RzIGNhbiBiZSB1c2VkIGFzIHR5cGVzIG9ubHkgaW4gbG9jYWwgYW5kIHByaXZhdGUgZGVjbGFyYXRpb25zLiBJZiB5b3UgdXNlIGFuIGFub255bW91cyBvYmplY3QgYXMgYSByZXR1cm4gdHlwZSBvZiBhIHB1YmxpYyBmdW5jdGlvbiBvciB0aGUgdHlwZSBvZiBhIHB1YmxpYyBwcm9wZXJ0eSwgdGhlIGFjdHVhbCB0eXBlIG9mIHRoYXQgZnVuY3Rpb24gb3IgcHJvcGVydHkgd2lsbCBiZSB0aGUgZGVjbGFyZWQgc3VwZXJ0eXBlIG9mIHRoZSBhbm9ueW1vdXMgb2JqZWN0LCBvciBgQW55YCBpZiB5b3UgZGlkbiZhcG9zO3QgZGVjbGFyZSBhbnkgc3VwZXJ0eXBlLiBNZW1iZXJzIGFkZGVkIGluIHRoZSBhbm9ueW1vdXMgb2JqZWN0IHdpbGwgbm90IGJlIGFjY2Vzc2libGUuXG4gIFxuYGBgIGtvdGxpblxuY2xhc3MgQyB7XG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbiwgc28gdGhlIHJldHVybiB0eXBlIGlzIHRoZSBhbm9ueW1vdXMgb2JqZWN0IHR5cGVcbiAgICBwcml2YXRlIGZ1biBmb28oKSA9IG9iamVjdCB7XG4gICAgICAgIHZhbCB4OiBTdHJpbmcgPSAmcXVvdDt4JnF1b3Q7XG4gICAgfVxuICBcbiAgICAvLyBQdWJsaWMgZnVuY3Rpb24sIHNvIHRoZSByZXR1cm4gdHlwZSBpcyBBbnlcbiAgICBmdW4gcHVibGljRm9vKCkgPSBvYmplY3Qge1xuICAgICAgICB2YWwgeDogU3RyaW5nID0gJnF1b3Q7eCZxdW90O1xuICAgIH1cbiAgXG4gICAgZnVuIGJhcigpIHtcbiAgICAgICAgdmFsIHgxID0gZm9vKCkueCAgICAgICAgLy8gV29ya3NcbiAgICAgICAgdmFsIHgyID0gcHVibGljRm9vKCkueCAgLy8gRVJST1I6IFVucmVzb2x2ZWQgcmVmZXJlbmNlICZhcG9zO3gmYXBvcztcbiAgICB9XG59XG5gYGBcbiAgXG5KdXN0IGxpa2UgSmF2YSZhcG9zO3MgYW5vbnltb3VzIGlubmVyIGNsYXNzZXMsIGNvZGUgaW4gb2JqZWN0IGV4cHJlc3Npb25zIGNhbiBhY2Nlc3MgdmFyaWFibGVzIGZyb20gdGhlIGVuY2xvc2luZyBzY29wZS4gKFVubGlrZSBKYXZhLCB0aGlzIGlzIG5vdCByZXN0cmljdGVkIHRvIGZpbmFsIHZhcmlhYmxlcy4pXG4gIFxuYGBgIGtvdGxpblxuZnVuIGNvdW50Q2xpY2tzKHdpbmRvdzogSkNvbXBvbmVudCkge1xuICAgIHZhciBjbGlja0NvdW50ID0gMFxuICAgIHZhciBlbnRlckNvdW50ID0gMFxuICBcbiAgICB3aW5kb3cuYWRkTW91c2VMaXN0ZW5lcihvYmplY3QgOiBNb3VzZUFkYXB0ZXIoKSB7XG4gICAgICAgIG92ZXJyaWRlIGZ1biBtb3VzZUNsaWNrZWQoZTogTW91c2VFdmVudCkge1xuICAgICAgICAgICAgY2xpY2tDb3VudCsrXG4gICAgICAgIH1cbiAgXG4gICAgICAgIG92ZXJyaWRlIGZ1biBtb3VzZUVudGVyZWQoZTogTW91c2VFdmVudCkge1xuICAgICAgICAgICAgZW50ZXJDb3VudCsrXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC8vIC4uLlxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions"
            ],
            "flags": 0,
            "guid": "sK$F<mb#;*",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "Objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Object</b> declarations",
                "<p><a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\">Singleton</a> is a very useful pattern, and Kotlin (after Scala) makes it easy to declare singletons:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">object</span> <span style=\"color: #000000\">DataProviderManager</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">registerDataProvider</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">provider</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">DataProvider</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">allDataProviders</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Collection</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">DataProvider</span><span style=\"color: #000000; font-weight: bold\">&gt;</span>\n        <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>This is called an <em>object declaration</em>, and it always has a name following the <em class=\"keyword\">object</em> keyword.<br />\nJust like a variable declaration, an object declaration is not an expression, and cannot be used on the right hand side of an assignment statement.</p>\n<p>To refer to the object, we use its name directly:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">DataProviderManager</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">registerDataProvider</span><span style=\"color: #000000; font-weight: bold\">(...)</span>\n</pre></div>\n<p>Such objects can have supertypes:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #000000\">DefaultListener</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MouseAdapter</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">mouseClicked</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MouseEvent</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">mouseEntered</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MouseEvent</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<blockquote>\n<p><strong>NOTE</strong>: object declarations can't be local (i.e. be nested directly inside a function), but they can be nested into other object declarations or non-inner classes.</p>\n</blockquote><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTQ2NjM3MjMsICJpZCI6ICIxNDg4MTA0OTY1MjA1LTAwMSIsICJtZCI6ICJbU2luZ2xldG9uXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NpbmdsZXRvbl9wYXR0ZXJuKSBpcyBhIHZlcnkgdXNlZnVsIHBhdHRlcm4sIGFuZCBLb3RsaW4gKGFmdGVyIFNjYWxhKSBtYWtlcyBpdCBlYXN5IHRvIGRlY2xhcmUgc2luZ2xldG9uczpcbiAgXG5gYGAga290bGluXG5vYmplY3QgRGF0YVByb3ZpZGVyTWFuYWdlciB7XG4gICAgZnVuIHJlZ2lzdGVyRGF0YVByb3ZpZGVyKHByb3ZpZGVyOiBEYXRhUHJvdmlkZXIpIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxuICBcbiAgICB2YWwgYWxsRGF0YVByb3ZpZGVyczogQ29sbGVjdGlvbiZsdDtEYXRhUHJvdmlkZXImZ3Q7XG4gICAgICAgIGdldCgpID0gLy8gLi4uXG59XG5gYGBcbiAgXG5UaGlzIGlzIGNhbGxlZCBhbiAqb2JqZWN0IGRlY2xhcmF0aW9uKiwgYW5kIGl0IGFsd2F5cyBoYXMgYSBuYW1lIGZvbGxvd2luZyB0aGUgKm9iamVjdCp7OiAua2V5d29yZCB9IGtleXdvcmQuXG5KdXN0IGxpa2UgYSB2YXJpYWJsZSBkZWNsYXJhdGlvbiwgYW4gb2JqZWN0IGRlY2xhcmF0aW9uIGlzIG5vdCBhbiBleHByZXNzaW9uLCBhbmQgY2Fubm90IGJlIHVzZWQgb24gdGhlIHJpZ2h0IGhhbmQgc2lkZSBvZiBhbiBhc3NpZ25tZW50IHN0YXRlbWVudC5cbiAgXG5UbyByZWZlciB0byB0aGUgb2JqZWN0LCB3ZSB1c2UgaXRzIG5hbWUgZGlyZWN0bHk6XG4gIFxuYGBgIGtvdGxpblxuRGF0YVByb3ZpZGVyTWFuYWdlci5yZWdpc3RlckRhdGFQcm92aWRlciguLi4pXG5gYGBcbiAgXG5TdWNoIG9iamVjdHMgY2FuIGhhdmUgc3VwZXJ0eXBlczpcbiAgXG5gYGAga290bGluXG5vYmplY3QgRGVmYXVsdExpc3RlbmVyIDogTW91c2VBZGFwdGVyKCkge1xuICAgIG92ZXJyaWRlIGZ1biBtb3VzZUNsaWNrZWQoZTogTW91c2VFdmVudCkge1xuICAgICAgICAvLyAuLi5cbiAgICB9XG4gIFxuICAgIG92ZXJyaWRlIGZ1biBtb3VzZUVudGVyZWQoZTogTW91c2VFdmVudCkge1xuICAgICAgICAvLyAuLi5cbiAgICB9XG59XG5gYGBcbiAgXG4mZ3Q7ICoqTk9URSoqOiBvYmplY3QgZGVjbGFyYXRpb25zIGNhbiZhcG9zO3QgYmUgbG9jYWwgKGkuZS4gYmUgbmVzdGVkIGRpcmVjdGx5IGluc2lkZSBhIGZ1bmN0aW9uKSwgYnV0IHRoZXkgY2FuIGJlIG5lc3RlZCBpbnRvIG90aGVyIG9iamVjdCBkZWNsYXJhdGlvbnMgb3Igbm9uLWlubmVyIGNsYXNzZXMuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations"
            ],
            "flags": 0,
            "guid": "syO+RzKlt4",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "Objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Companion</b> Objects (declaration)",
                "<p>An object declaration inside a class can be marked with the <em class=\"keyword\">companion</em> keyword:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">MyClass</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">companion</span> <span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #000000\">Factory</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">create</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">MyClass</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">MyClass</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Members of the companion object can be called by using simply the class name as the qualifier:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">instance</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">MyClass</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">create</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div>\n<p>The name of the companion object can be omitted, in which case the name <code>Companion</code> will be used:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">MyClass</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">companion</span> <span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">{</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">MyClass</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Companion</span>\n</pre></div>\n<p>Note that, even though the members of companion objects look like static members in other languages, at runtime those are still instance members of real objects, and can, for example, implement interfaces:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">Factory</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">create</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">T</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">MyClass</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">companion</span> <span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">: </span><span style=\"color: #000000\">Factory</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">MyClass</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">create</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">MyClass</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">MyClass</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>However, on the JVM you can have members of companion objects generated as real static methods and fields, if you use the <code>@JvmStatic</code> annotation.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjA5OTQsICJpZCI6ICIxNDg4MTA1MDI4ODgyLTAwMSIsICJtZCI6ICJBbiBvYmplY3QgZGVjbGFyYXRpb24gaW5zaWRlIGEgY2xhc3MgY2FuIGJlIG1hcmtlZCB3aXRoIHRoZSAqY29tcGFuaW9uKns6IC5rZXl3b3JkIH0ga2V5d29yZDpcbiAgXG5gYGAga290bGluXG5jbGFzcyBNeUNsYXNzIHtcbiAgICBjb21wYW5pb24gb2JqZWN0IEZhY3Rvcnkge1xuICAgICAgICBmdW4gY3JlYXRlKCk6IE15Q2xhc3MgPSBNeUNsYXNzKClcbiAgICB9XG59XG5gYGBcbiAgXG5NZW1iZXJzIG9mIHRoZSBjb21wYW5pb24gb2JqZWN0IGNhbiBiZSBjYWxsZWQgYnkgdXNpbmcgc2ltcGx5IHRoZSBjbGFzcyBuYW1lIGFzIHRoZSBxdWFsaWZpZXI6XG4gIFxuYGBgIGtvdGxpblxudmFsIGluc3RhbmNlID0gTXlDbGFzcy5jcmVhdGUoKVxuYGBgXG4gIFxuVGhlIG5hbWUgb2YgdGhlIGNvbXBhbmlvbiBvYmplY3QgY2FuIGJlIG9taXR0ZWQsIGluIHdoaWNoIGNhc2UgdGhlIG5hbWUgYENvbXBhbmlvbmAgd2lsbCBiZSB1c2VkOlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIE15Q2xhc3Mge1xuICAgIGNvbXBhbmlvbiBvYmplY3Qge1xuICAgIH1cbn1cbiAgXG52YWwgeCA9IE15Q2xhc3MuQ29tcGFuaW9uXG5gYGBcbiAgXG5Ob3RlIHRoYXQsIGV2ZW4gdGhvdWdoIHRoZSBtZW1iZXJzIG9mIGNvbXBhbmlvbiBvYmplY3RzIGxvb2sgbGlrZSBzdGF0aWMgbWVtYmVycyBpbiBvdGhlciBsYW5ndWFnZXMsIGF0IHJ1bnRpbWUgdGhvc2UgYXJlIHN0aWxsIGluc3RhbmNlIG1lbWJlcnMgb2YgcmVhbCBvYmplY3RzLCBhbmQgY2FuLCBmb3IgZXhhbXBsZSwgaW1wbGVtZW50IGludGVyZmFjZXM6XG4gIFxuYGBgIGtvdGxpblxuaW50ZXJmYWNlIEZhY3RvcnkmbHQ7VCZndDsge1xuICAgIGZ1biBjcmVhdGUoKTogVFxufVxuICBcbiAgXG5jbGFzcyBNeUNsYXNzIHtcbiAgICBjb21wYW5pb24gb2JqZWN0IDogRmFjdG9yeSZsdDtNeUNsYXNzJmd0OyB7XG4gICAgICAgIG92ZXJyaWRlIGZ1biBjcmVhdGUoKTogTXlDbGFzcyA9IE15Q2xhc3MoKVxuICAgIH1cbn1cbmBgYFxuICBcbkhvd2V2ZXIsIG9uIHRoZSBKVk0geW91IGNhbiBoYXZlIG1lbWJlcnMgb2YgY29tcGFuaW9uIG9iamVjdHMgZ2VuZXJhdGVkIGFzIHJlYWwgc3RhdGljIG1ldGhvZHMgYW5kIGZpZWxkcywgaWYgeW91IHVzZSB0aGUgYEBKdm1TdGF0aWNgIGFubm90YXRpb24uXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects"
            ],
            "flags": 0,
            "guid": "e0U7p|uw.P",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "Objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Semantic difference between <b>object</b> <i>expressions</i> and <i>declarations</i>",
                "<p>There is one important semantic difference between object expressions and object declarations:</p>\n<ul>\n<li align=\"left\">object expressions are executed (and initialized) <strong>immediately</strong>, where they are used</li>\n<li align=\"left\">object declarations are initialized <strong>lazily</strong>, when accessed for the first time</li>\n<li align=\"left\">a companion object is initialized when the corresponding class is loaded (resolved), matching the semantics of a Java static initializer</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjEwMDIsICJpZCI6ICIxNDg4MTA1MDc1OTA0LTAwMSIsICJtZCI6ICJUaGVyZSBpcyBvbmUgaW1wb3J0YW50IHNlbWFudGljIGRpZmZlcmVuY2UgYmV0d2VlbiBvYmplY3QgZXhwcmVzc2lvbnMgYW5kIG9iamVjdCBkZWNsYXJhdGlvbnM6XG4gIFxuKiBvYmplY3QgZXhwcmVzc2lvbnMgYXJlIGV4ZWN1dGVkIChhbmQgaW5pdGlhbGl6ZWQpICoqaW1tZWRpYXRlbHkqKiwgd2hlcmUgdGhleSBhcmUgdXNlZFxuKiBvYmplY3QgZGVjbGFyYXRpb25zIGFyZSBpbml0aWFsaXplZCAqKmxhemlseSoqLCB3aGVuIGFjY2Vzc2VkIGZvciB0aGUgZmlyc3QgdGltZVxuKiBhIGNvbXBhbmlvbiBvYmplY3QgaXMgaW5pdGlhbGl6ZWQgd2hlbiB0aGUgY29ycmVzcG9uZGluZyBjbGFzcyBpcyBsb2FkZWQgKHJlc29sdmVkKSwgbWF0Y2hpbmcgdGhlIHNlbWFudGljcyBvZiBhIEphdmEgc3RhdGljIGluaXRpYWxpemVyXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/object-declarations.html#semantic-difference-between-object-expressions-and-declarations"
            ],
            "flags": 0,
            "guid": "Ac>VOD!9Bd",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "Objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Class <b>Delegation</b>",
                "<p>The <a href=\"https://en.wikipedia.org/wiki/Delegation_pattern\">Delegation pattern</a> has proven to be a good alternative to implementation inheritance, and Kotlin supports it natively requiring zero boilerplate code.<br />\nA class <code>Derived</code> can inherit from an interface <code>Base</code> and delegate all of its public methods to a specified object:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">Base</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">BaseImpl</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Base</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Derived</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Base</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Base</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">b</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">BaseImpl</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">10</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">Derived</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #8f5902; font-style: italic\">// prints 10</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The <em class=\"keyword\">by</em>-clause in the supertype list for <code>Derived</code> indicates that <code>b</code> will be stored internally in objects of <code>Derived</code> and the compiler will generate all the methods of <code>Base</code> that forward to <code>b</code>.</p>\n<p><em>Note that overrides work as you might expect</em>: The compiler will use your <code>override</code> implementations instead of those in the delegate object. If we were to add <code>override fun print() { print(\"abc\") }</code> to <code>Derived</code>, the program would print \"abc\" instead of \"10\".</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzI0MDEsICJpZCI6ICIxNDg4MTA1MDk2NDgyLTAwMSIsICJtZCI6ICJUaGUgW0RlbGVnYXRpb24gcGF0dGVybl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGVsZWdhdGlvbl9wYXR0ZXJuKSBoYXMgcHJvdmVuIHRvIGJlIGEgZ29vZCBhbHRlcm5hdGl2ZSB0byBpbXBsZW1lbnRhdGlvbiBpbmhlcml0YW5jZSwgYW5kIEtvdGxpbiBzdXBwb3J0cyBpdCBuYXRpdmVseSByZXF1aXJpbmcgemVybyBib2lsZXJwbGF0ZSBjb2RlLlxuQSBjbGFzcyBgRGVyaXZlZGAgY2FuIGluaGVyaXQgZnJvbSBhbiBpbnRlcmZhY2UgYEJhc2VgIGFuZCBkZWxlZ2F0ZSBhbGwgb2YgaXRzIHB1YmxpYyBtZXRob2RzIHRvIGEgc3BlY2lmaWVkIG9iamVjdDpcbiAgXG5gYGAga290bGluXG5pbnRlcmZhY2UgQmFzZSB7XG4gICAgZnVuIHByaW50KClcbn1cbiAgXG5jbGFzcyBCYXNlSW1wbCh2YWwgeDogSW50KSA6IEJhc2Uge1xuICAgIG92ZXJyaWRlIGZ1biBwcmludCgpIHsgcHJpbnQoeCkgfVxufVxuICBcbmNsYXNzIERlcml2ZWQoYjogQmFzZSkgOiBCYXNlIGJ5IGJcbiAgXG5mdW4gbWFpbihhcmdzOiBBcnJheSZsdDtTdHJpbmcmZ3Q7KSB7XG4gICAgdmFsIGIgPSBCYXNlSW1wbCgxMClcbiAgICBEZXJpdmVkKGIpLnByaW50KCkgLy8gcHJpbnRzIDEwXG59XG5gYGBcbiAgXG5UaGUgKmJ5Kns6IC5rZXl3b3JkIH0tY2xhdXNlIGluIHRoZSBzdXBlcnR5cGUgbGlzdCBmb3IgYERlcml2ZWRgIGluZGljYXRlcyB0aGF0IGBiYCB3aWxsIGJlIHN0b3JlZCBpbnRlcm5hbGx5IGluIG9iamVjdHMgb2YgYERlcml2ZWRgIGFuZCB0aGUgY29tcGlsZXIgd2lsbCBnZW5lcmF0ZSBhbGwgdGhlIG1ldGhvZHMgb2YgYEJhc2VgIHRoYXQgZm9yd2FyZCB0byBgYmAuXG4gIFxuX05vdGUgdGhhdCBvdmVycmlkZXMgd29yayBhcyB5b3UgbWlnaHQgZXhwZWN0XzogVGhlIGNvbXBpbGVyIHdpbGwgdXNlIHlvdXIgYG92ZXJyaWRlYCBpbXBsZW1lbnRhdGlvbnMgaW5zdGVhZCBvZiB0aG9zZSBpbiB0aGUgZGVsZWdhdGUgb2JqZWN0LiBJZiB3ZSB3ZXJlIHRvIGFkZCBgb3ZlcnJpZGUgZnVuIHByaW50KCkgeyBwcmludCgmcXVvdDthYmMmcXVvdDspIH1gIHRvIGBEZXJpdmVkYCwgdGhlIHByb2dyYW0gd291bGQgcHJpbnQgJnF1b3Q7YWJjJnF1b3Q7IGluc3RlYWQgb2YgJnF1b3Q7MTAmcXVvdDsuXG4gIFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/delegation.html#class-delegation"
            ],
            "flags": 0,
            "guid": "Hxk:K=Ggw2",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Delegation",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Delegated</b> Properties <i>(description)</i>",
                "<p>There are certain common kinds of properties, that, though we can implement them manually every time we need them, would be very nice to implement once and for all, and put into a library.<br />\nExamples include</p>\n<ul>\n<li align=\"left\">lazy properties: the value gets computed only upon first access,</li>\n<li align=\"left\">observable properties: listeners get notified about changes to this property,</li>\n<li align=\"left\">storing properties in a map, instead of a separate field for each property.</li>\n</ul>\n<p>To cover these (and other) cases, Kotlin supports <em>delegated properties</em>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Example</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">Delegate</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The syntax is: <code>val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;</code>. The expression after <em class=\"keyword\">by</em> is the <em>delegate</em>, because <code>get()</code> (and <code>set()</code>) corresponding to the property will be delegated to its <code>getValue()</code> and <code>setValue()</code> methods.<br />\nProperty delegates don’t have to implement any interface, but they have to provide a <code>getValue()</code> function (and <code>setValue()</code> --- for <em class=\"keyword\">var</em>'s).<br />\nFor example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Delegate</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">getValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">thisRef</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">?,</span> <span style=\"color: #000000\">property</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">KProperty</span><span style=\"color: #000000; font-weight: bold\">&lt;*&gt;):</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #4e9a06\">\"$thisRef, thank you for delegating '${property.name}' to me!\"</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">setValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">thisRef</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">?,</span> <span style=\"color: #000000\">property</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">KProperty</span><span style=\"color: #000000; font-weight: bold\">&lt;*&gt;,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"$value has been assigned to '${property.name} in $thisRef.'\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>When we read from <code>p</code> that delegates to an instance of <code>Delegate</code>, the <code>getValue()</code> function from <code>Delegate</code> is called, so that its first parameter is the object we read <code>p</code> from and the second parameter holds a description of <code>p</code> itself (e.g. you can take its name). For example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">e</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Example</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>This prints </p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">Example</span><span style=\"color: #a40000; border: 1px solid #ef2929\">@</span><span style=\"color: #0000cf; font-weight: bold\">33</span><span style=\"color: #000000\">a17727</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">thank</span> <span style=\"color: #000000\">you</span> <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000\">delegating</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">‘</span><span style=\"color: #000000\">p</span><span style=\"color: #a40000; border: 1px solid #ef2929\">’</span> <span style=\"color: #000000\">to</span> <span style=\"color: #000000\">me</span><span style=\"color: #000000; font-weight: bold\">!</span>\n</pre></div>\n<p>Similarly, when we assign to <code>p</code>, the <code>setValue()</code> function is called. The first two parameters are the same, and the third holds the value being assigned:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">e</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">p</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"NEW\"</span>\n</pre></div>\n<p>This prints</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">NEW</span> <span style=\"color: #000000\">has</span> <span style=\"color: #000000\">been</span> <span style=\"color: #000000\">assigned</span> <span style=\"color: #000000\">to</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">‘</span><span style=\"color: #000000\">p</span><span style=\"color: #a40000; border: 1px solid #ef2929\">’</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">Example</span><span style=\"color: #a40000; border: 1px solid #ef2929\">@</span><span style=\"color: #0000cf; font-weight: bold\">33</span><span style=\"color: #000000\">a17727</span><span style=\"color: #000000; font-weight: bold\">.</span>\n</pre></div>\n<p>The specification of the requirements to the delegated object can be found <a href=\"delegated-properties.html#property-delegate-requirements\">below</a>.</p>\n<p>Note that since Kotlin 1.1 you can declare a delegated property inside a function or code block, it shouldn't necessarily be a member of a class.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTI1OTUzNjQsICJpZCI6ICIxNDg4MTA1MTQ1NzU5LTAwMSIsICJtZCI6ICJUaGVyZSBhcmUgY2VydGFpbiBjb21tb24ga2luZHMgb2YgcHJvcGVydGllcywgdGhhdCwgdGhvdWdoIHdlIGNhbiBpbXBsZW1lbnQgdGhlbSBtYW51YWxseSBldmVyeSB0aW1lIHdlIG5lZWQgdGhlbSwgd291bGQgYmUgdmVyeSBuaWNlIHRvIGltcGxlbWVudCBvbmNlIGFuZCBmb3IgYWxsLCBhbmQgcHV0IGludG8gYSBsaWJyYXJ5LlxuRXhhbXBsZXMgaW5jbHVkZVxuICBcbiogbGF6eSBwcm9wZXJ0aWVzOiB0aGUgdmFsdWUgZ2V0cyBjb21wdXRlZCBvbmx5IHVwb24gZmlyc3QgYWNjZXNzLFxuKiBvYnNlcnZhYmxlIHByb3BlcnRpZXM6IGxpc3RlbmVycyBnZXQgbm90aWZpZWQgYWJvdXQgY2hhbmdlcyB0byB0aGlzIHByb3BlcnR5LFxuKiBzdG9yaW5nIHByb3BlcnRpZXMgaW4gYSBtYXAsIGluc3RlYWQgb2YgYSBzZXBhcmF0ZSBmaWVsZCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgXG5UbyBjb3ZlciB0aGVzZSAoYW5kIG90aGVyKSBjYXNlcywgS290bGluIHN1cHBvcnRzIF9kZWxlZ2F0ZWQgcHJvcGVydGllc186XG4gIFxuYGBgIGtvdGxpblxuY2xhc3MgRXhhbXBsZSB7XG4gICAgdmFyIHA6IFN0cmluZyBieSBEZWxlZ2F0ZSgpXG59XG5gYGBcbiAgXG5UaGUgc3ludGF4IGlzOiBgdmFsL3ZhciAmbHQ7cHJvcGVydHkgbmFtZSZndDs6ICZsdDtUeXBlJmd0OyBieSAmbHQ7ZXhwcmVzc2lvbiZndDtgLiBUaGUgZXhwcmVzc2lvbiBhZnRlciAqYnkqezoua2V5d29yZH0gaXMgdGhlIF9kZWxlZ2F0ZV8sIGJlY2F1c2UgYGdldCgpYCAoYW5kIGBzZXQoKWApIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IHdpbGwgYmUgZGVsZWdhdGVkIHRvIGl0cyBgZ2V0VmFsdWUoKWAgYW5kIGBzZXRWYWx1ZSgpYCBtZXRob2RzLlxuUHJvcGVydHkgZGVsZWdhdGVzIGRvblx1MjAxOXQgaGF2ZSB0byBpbXBsZW1lbnQgYW55IGludGVyZmFjZSwgYnV0IHRoZXkgaGF2ZSB0byBwcm92aWRlIGEgYGdldFZhbHVlKClgIGZ1bmN0aW9uIChhbmQgYHNldFZhbHVlKClgIC0tLSBmb3IgKnZhcip7Oi5rZXl3b3JkfSZhcG9zO3MpLlxuRm9yIGV4YW1wbGU6XG4gIFxuYGBgIGtvdGxpblxuY2xhc3MgRGVsZWdhdGUge1xuICAgIG9wZXJhdG9yIGZ1biBnZXRWYWx1ZSh0aGlzUmVmOiBBbnk/LCBwcm9wZXJ0eTogS1Byb3BlcnR5Jmx0OyomZ3Q7KTogU3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICZxdW90OyR0aGlzUmVmLCB0aGFuayB5b3UgZm9yIGRlbGVnYXRpbmcgJmFwb3M7JHtwcm9wZXJ0eS5uYW1lfSZhcG9zOyB0byBtZSEmcXVvdDtcbiAgICB9XG4gIFxuICAgIG9wZXJhdG9yIGZ1biBzZXRWYWx1ZSh0aGlzUmVmOiBBbnk/LCBwcm9wZXJ0eTogS1Byb3BlcnR5Jmx0OyomZ3Q7LCB2YWx1ZTogU3RyaW5nKSB7XG4gICAgICAgIHByaW50bG4oJnF1b3Q7JHZhbHVlIGhhcyBiZWVuIGFzc2lnbmVkIHRvICZhcG9zOyR7cHJvcGVydHkubmFtZX0gaW4gJHRoaXNSZWYuJmFwb3M7JnF1b3Q7KVxuICAgIH1cbn1cbmBgYFxuICBcbldoZW4gd2UgcmVhZCBmcm9tIGBwYCB0aGF0IGRlbGVnYXRlcyB0byBhbiBpbnN0YW5jZSBvZiBgRGVsZWdhdGVgLCB0aGUgYGdldFZhbHVlKClgIGZ1bmN0aW9uIGZyb20gYERlbGVnYXRlYCBpcyBjYWxsZWQsIHNvIHRoYXQgaXRzIGZpcnN0IHBhcmFtZXRlciBpcyB0aGUgb2JqZWN0IHdlIHJlYWQgYHBgIGZyb20gYW5kIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGhvbGRzIGEgZGVzY3JpcHRpb24gb2YgYHBgIGl0c2VsZiAoZS5nLiB5b3UgY2FuIHRha2UgaXRzIG5hbWUpLiBGb3IgZXhhbXBsZTpcbiAgXG5gYGAga290bGluXG52YWwgZSA9IEV4YW1wbGUoKVxucHJpbnRsbihlLnApXG5gYGBcbiAgXG5UaGlzIHByaW50cyBcbiAgXG5gYGAga290bGluXG5FeGFtcGxlQDMzYTE3NzI3LCB0aGFuayB5b3UgZm9yIGRlbGVnYXRpbmcgXHUyMDE4cFx1MjAxOSB0byBtZSFcbmBgYFxuICBcblNpbWlsYXJseSwgd2hlbiB3ZSBhc3NpZ24gdG8gYHBgLCB0aGUgYHNldFZhbHVlKClgIGZ1bmN0aW9uIGlzIGNhbGxlZC4gVGhlIGZpcnN0IHR3byBwYXJhbWV0ZXJzIGFyZSB0aGUgc2FtZSwgYW5kIHRoZSB0aGlyZCBob2xkcyB0aGUgdmFsdWUgYmVpbmcgYXNzaWduZWQ6XG4gIFxuYGBgIGtvdGxpblxuZS5wID0gJnF1b3Q7TkVXJnF1b3Q7XG5gYGBcbiAgXG5UaGlzIHByaW50c1xuICBcbmBgYCBrb3RsaW5cbk5FVyBoYXMgYmVlbiBhc3NpZ25lZCB0byBcdTIwMThwXHUyMDE5IGluIEV4YW1wbGVAMzNhMTc3MjcuXG5gYGBcbiAgXG5UaGUgc3BlY2lmaWNhdGlvbiBvZiB0aGUgcmVxdWlyZW1lbnRzIHRvIHRoZSBkZWxlZ2F0ZWQgb2JqZWN0IGNhbiBiZSBmb3VuZCBbYmVsb3ddKGRlbGVnYXRlZC1wcm9wZXJ0aWVzLmh0bWwjcHJvcGVydHktZGVsZWdhdGUtcmVxdWlyZW1lbnRzKS5cbiAgXG5Ob3RlIHRoYXQgc2luY2UgS290bGluIDEuMSB5b3UgY2FuIGRlY2xhcmUgYSBkZWxlZ2F0ZWQgcHJvcGVydHkgaW5zaWRlIGEgZnVuY3Rpb24gb3IgY29kZSBibG9jaywgaXQgc2hvdWxkbiZhcG9zO3QgbmVjZXNzYXJpbHkgYmUgYSBtZW1iZXIgb2YgYSBjbGFzcy5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/delegated-properties.html#delegated-properties"
            ],
            "flags": 0,
            "guid": "Ce4g$+<QA?",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "DelegatedProperties",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Standard <b>Delegates</b>&nbsp;- <u>Lazy</u>",
                "<p><a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/lazy.html\"><code>lazy()</code></a> is a function that takes a lambda and returns an instance of <code>Lazy&lt;T&gt;</code> which can serve as a delegate for implementing a lazy property: the first call to <code>get()</code> executes the lambda passed to <code>lazy()</code> and remembers the result, subsequent calls to <code>get()</code> simply return the remembered result.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">lazyValue</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">lazy</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"computed!\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #4e9a06\">\"Hello\"</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">lazyValue</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">lazyValue</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>This example prints:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">computed!\nHello\nHello\n</pre></div>\n<p>By default, the evaluation of lazy properties is <strong>synchronized</strong>: the value is computed only in one thread, and all threads will see the same value. If the synchronization of initialization delegate is not required, so that multiple threads can execute it simultaneously, pass <code>LazyThreadSafetyMode.PUBLICATION</code> as a parameter to the <code>lazy()</code> function. </p>\n<p>And if you're sure that the initialization will always happen on a single thread, you can use <code>LazyThreadSafetyMode.NONE</code> mode, which doesn't incur any thread-safety guarantees and the related overhead.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYyNDczMDksICJpZCI6ICIxNDg4MTA1MjQ0MjUzLTAwMSIsICJtZCI6ICJbYGxhenkoKWBdKGh0dHBzOi8va290bGlubGFuZy5vcmcvYXBpL2xhdGVzdC9qdm0vc3RkbGliL2tvdGxpbi9sYXp5Lmh0bWwpIGlzIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIGxhbWJkYSBhbmQgcmV0dXJucyBhbiBpbnN0YW5jZSBvZiBgTGF6eSZsdDtUJmd0O2Agd2hpY2ggY2FuIHNlcnZlIGFzIGEgZGVsZWdhdGUgZm9yIGltcGxlbWVudGluZyBhIGxhenkgcHJvcGVydHk6IHRoZSBmaXJzdCBjYWxsIHRvIGBnZXQoKWAgZXhlY3V0ZXMgdGhlIGxhbWJkYSBwYXNzZWQgdG8gYGxhenkoKWAgYW5kIHJlbWVtYmVycyB0aGUgcmVzdWx0LCBzdWJzZXF1ZW50IGNhbGxzIHRvIGBnZXQoKWAgc2ltcGx5IHJldHVybiB0aGUgcmVtZW1iZXJlZCByZXN1bHQuXG4gIFxuICBcbmBgYCBrb3RsaW5cbnZhbCBsYXp5VmFsdWU6IFN0cmluZyBieSBsYXp5IHtcbiAgICBwcmludGxuKCZxdW90O2NvbXB1dGVkISZxdW90OylcbiAgICAmcXVvdDtIZWxsbyZxdW90O1xufVxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICBwcmludGxuKGxhenlWYWx1ZSlcbiAgICBwcmludGxuKGxhenlWYWx1ZSlcbn1cbmBgYFxuICBcblRoaXMgZXhhbXBsZSBwcmludHM6XG4gIFxuYGBgXG5jb21wdXRlZCFcbkhlbGxvXG5IZWxsb1xuYGBgXG4gIFxuQnkgZGVmYXVsdCwgdGhlIGV2YWx1YXRpb24gb2YgbGF6eSBwcm9wZXJ0aWVzIGlzICoqc3luY2hyb25pemVkKio6IHRoZSB2YWx1ZSBpcyBjb21wdXRlZCBvbmx5IGluIG9uZSB0aHJlYWQsIGFuZCBhbGwgdGhyZWFkcyB3aWxsIHNlZSB0aGUgc2FtZSB2YWx1ZS4gSWYgdGhlIHN5bmNocm9uaXphdGlvbiBvZiBpbml0aWFsaXphdGlvbiBkZWxlZ2F0ZSBpcyBub3QgcmVxdWlyZWQsIHNvIHRoYXQgbXVsdGlwbGUgdGhyZWFkcyBjYW4gZXhlY3V0ZSBpdCBzaW11bHRhbmVvdXNseSwgcGFzcyBgTGF6eVRocmVhZFNhZmV0eU1vZGUuUFVCTElDQVRJT05gIGFzIGEgcGFyYW1ldGVyIHRvIHRoZSBgbGF6eSgpYCBmdW5jdGlvbi4gXG4gIFxuQW5kIGlmIHlvdSZhcG9zO3JlIHN1cmUgdGhhdCB0aGUgaW5pdGlhbGl6YXRpb24gd2lsbCBhbHdheXMgaGFwcGVuIG9uIGEgc2luZ2xlIHRocmVhZCwgeW91IGNhbiB1c2UgYExhenlUaHJlYWRTYWZldHlNb2RlLk5PTkVgIG1vZGUsIHdoaWNoIGRvZXNuJmFwb3M7dCBpbmN1ciBhbnkgdGhyZWFkLXNhZmV0eSBndWFyYW50ZWVzIGFuZCB0aGUgcmVsYXRlZCBvdmVyaGVhZC5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/delegated-properties.html#lazy"
            ],
            "flags": 0,
            "guid": "lFZ>C4(GnM",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "DelegatedProperties",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Standard&nbsp;<b>Delegates</b>&nbsp;-&nbsp;<u>Observable</u>",
                "<p><a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/observable.html\"><code>Delegates.observable()</code></a> takes two arguments: the initial value and a handler for modifications.<br />\nThe handler gets called every time we assign to the property (<em>after</em> the assignment has been performed). It has three parameters: a property being assigned to, the old value and the new one:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">import</span> <span style=\"color: #000000\">kotlin.properties.Delegates</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">User</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">Delegates</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">observable</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"&lt;no name&gt;\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">old</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">new</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"$old -&gt; $new\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">user</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">User</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000\">user</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"first\"</span>\n    <span style=\"color: #000000\">user</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"second\"</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>This example prints:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">&lt;no name&gt; -&gt; first\nfirst -&gt; second\n</pre></div>\n<p>If you want to be able to intercept an assignment and \"veto\" it, use <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/vetoable.html\"><code>vetoable()</code></a> instead of <code>observable()</code>.<br />\nThe handler passed to the <code>vetoable</code> is called <em>before</em> the assignment of a new property value has been performed.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYyNDc0MDcsICJpZCI6ICIxNDg4MTA1Mjg3NjIzLTAwMSIsICJtZCI6ICJbYERlbGVnYXRlcy5vYnNlcnZhYmxlKClgXShodHRwczovL2tvdGxpbmxhbmcub3JnL2FwaS9sYXRlc3QvanZtL3N0ZGxpYi9rb3RsaW4ucHJvcGVydGllcy8tZGVsZWdhdGVzL29ic2VydmFibGUuaHRtbCkgdGFrZXMgdHdvIGFyZ3VtZW50czogdGhlIGluaXRpYWwgdmFsdWUgYW5kIGEgaGFuZGxlciBmb3IgbW9kaWZpY2F0aW9ucy5cblRoZSBoYW5kbGVyIGdldHMgY2FsbGVkIGV2ZXJ5IHRpbWUgd2UgYXNzaWduIHRvIHRoZSBwcm9wZXJ0eSAoX2FmdGVyXyB0aGUgYXNzaWdubWVudCBoYXMgYmVlbiBwZXJmb3JtZWQpLiBJdCBoYXMgdGhyZWUgcGFyYW1ldGVyczogYSBwcm9wZXJ0eSBiZWluZyBhc3NpZ25lZCB0bywgdGhlIG9sZCB2YWx1ZSBhbmQgdGhlIG5ldyBvbmU6XG4gIFxuYGBgIGtvdGxpblxuaW1wb3J0IGtvdGxpbi5wcm9wZXJ0aWVzLkRlbGVnYXRlc1xuICBcbmNsYXNzIFVzZXIge1xuICAgIHZhciBuYW1lOiBTdHJpbmcgYnkgRGVsZWdhdGVzLm9ic2VydmFibGUoJnF1b3Q7Jmx0O25vIG5hbWUmZ3Q7JnF1b3Q7KSB7XG4gICAgICAgIHByb3AsIG9sZCwgbmV3IC0mZ3Q7XG4gICAgICAgIHByaW50bG4oJnF1b3Q7JG9sZCAtJmd0OyAkbmV3JnF1b3Q7KVxuICAgIH1cbn1cbiAgXG5mdW4gbWFpbihhcmdzOiBBcnJheSZsdDtTdHJpbmcmZ3Q7KSB7XG4gICAgdmFsIHVzZXIgPSBVc2VyKClcbiAgICB1c2VyLm5hbWUgPSAmcXVvdDtmaXJzdCZxdW90O1xuICAgIHVzZXIubmFtZSA9ICZxdW90O3NlY29uZCZxdW90O1xufVxuYGBgXG4gIFxuVGhpcyBleGFtcGxlIHByaW50czpcbiAgXG5gYGBcbiZsdDtubyBuYW1lJmd0OyAtJmd0OyBmaXJzdFxuZmlyc3QgLSZndDsgc2Vjb25kXG5gYGBcbiAgXG5JZiB5b3Ugd2FudCB0byBiZSBhYmxlIHRvIGludGVyY2VwdCBhbiBhc3NpZ25tZW50IGFuZCAmcXVvdDt2ZXRvJnF1b3Q7IGl0LCB1c2UgW2B2ZXRvYWJsZSgpYF0oaHR0cHM6Ly9rb3RsaW5sYW5nLm9yZy9hcGkvbGF0ZXN0L2p2bS9zdGRsaWIva290bGluLnByb3BlcnRpZXMvLWRlbGVnYXRlcy92ZXRvYWJsZS5odG1sKSBpbnN0ZWFkIG9mIGBvYnNlcnZhYmxlKClgLlxuVGhlIGhhbmRsZXIgcGFzc2VkIHRvIHRoZSBgdmV0b2FibGVgIGlzIGNhbGxlZCBfYmVmb3JlXyB0aGUgYXNzaWdubWVudCBvZiBhIG5ldyBwcm9wZXJ0eSB2YWx1ZSBoYXMgYmVlbiBwZXJmb3JtZWQuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/delegated-properties.html#observable"
            ],
            "flags": 0,
            "guid": "G{)q=N&H[G",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "DelegatedProperties",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Storing Properties in a Map <i>(delegation)</i>",
                "<p>One common use case is storing the values of properties in a map.<br />\nThis comes up often in applications like parsing JSON or doing other “dynamic” things.<br />\nIn this case, you can use the map instance itself as the delegate for a delegated property.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">User</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Map</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">?&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">map</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span>     <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">map</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>In this example, the constructor takes a map:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">user</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">User</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">mapOf</span><span style=\"color: #000000; font-weight: bold\">(</span>\n    <span style=\"color: #4e9a06\">\"name\"</span> <span style=\"color: #000000\">to</span> <span style=\"color: #4e9a06\">\"John Doe\"</span><span style=\"color: #000000; font-weight: bold\">,</span>\n    <span style=\"color: #4e9a06\">\"age\"</span>  <span style=\"color: #000000\">to</span> <span style=\"color: #0000cf; font-weight: bold\">25</span>\n<span style=\"color: #000000; font-weight: bold\">))</span>\n</pre></div>\n<p>Delegated properties take values from this map (by the string keys --– names of properties):</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">user</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// Prints \"John Doe\"</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">user</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">)</span>  <span style=\"color: #8f5902; font-style: italic\">// Prints 25</span>\n</pre></div>\n<p>This works also for <em class=\"keyword\">var</em>’s properties if you use a <code>MutableMap</code> instead of read-only <code>Map</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">MutableUser</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MutableMap</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">?&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">map</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span>     <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">map</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzE1NzAsICJpZCI6ICIxNDg4MTA1MzA4MzY0LTAwMSIsICJtZCI6ICJPbmUgY29tbW9uIHVzZSBjYXNlIGlzIHN0b3JpbmcgdGhlIHZhbHVlcyBvZiBwcm9wZXJ0aWVzIGluIGEgbWFwLlxuVGhpcyBjb21lcyB1cCBvZnRlbiBpbiBhcHBsaWNhdGlvbnMgbGlrZSBwYXJzaW5nIEpTT04gb3IgZG9pbmcgb3RoZXIgXHUyMDFjZHluYW1pY1x1MjAxZCB0aGluZ3MuXG5JbiB0aGlzIGNhc2UsIHlvdSBjYW4gdXNlIHRoZSBtYXAgaW5zdGFuY2UgaXRzZWxmIGFzIHRoZSBkZWxlZ2F0ZSBmb3IgYSBkZWxlZ2F0ZWQgcHJvcGVydHkuXG4gIFxuYGBgIGtvdGxpblxuY2xhc3MgVXNlcih2YWwgbWFwOiBNYXAmbHQ7U3RyaW5nLCBBbnk/Jmd0Oykge1xuICAgIHZhbCBuYW1lOiBTdHJpbmcgYnkgbWFwXG4gICAgdmFsIGFnZTogSW50ICAgICBieSBtYXBcbn1cbmBgYFxuICBcbkluIHRoaXMgZXhhbXBsZSwgdGhlIGNvbnN0cnVjdG9yIHRha2VzIGEgbWFwOlxuICBcbmBgYCBrb3RsaW5cbnZhbCB1c2VyID0gVXNlcihtYXBPZihcbiAgICAmcXVvdDtuYW1lJnF1b3Q7IHRvICZxdW90O0pvaG4gRG9lJnF1b3Q7LFxuICAgICZxdW90O2FnZSZxdW90OyAgdG8gMjVcbikpXG5gYGBcbiAgXG5EZWxlZ2F0ZWQgcHJvcGVydGllcyB0YWtlIHZhbHVlcyBmcm9tIHRoaXMgbWFwIChieSB0aGUgc3RyaW5nIGtleXMgLS1cdTIwMTMgbmFtZXMgb2YgcHJvcGVydGllcyk6XG4gIFxuICBcbmBgYCBrb3RsaW5cbnByaW50bG4odXNlci5uYW1lKSAvLyBQcmludHMgJnF1b3Q7Sm9obiBEb2UmcXVvdDtcbnByaW50bG4odXNlci5hZ2UpICAvLyBQcmludHMgMjVcbmBgYFxuICBcblRoaXMgd29ya3MgYWxzbyBmb3IgKnZhcip7Oi5rZXl3b3JkfVx1MjAxOXMgcHJvcGVydGllcyBpZiB5b3UgdXNlIGEgYE11dGFibGVNYXBgIGluc3RlYWQgb2YgcmVhZC1vbmx5IGBNYXBgOlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIE11dGFibGVVc2VyKHZhbCBtYXA6IE11dGFibGVNYXAmbHQ7U3RyaW5nLCBBbnk/Jmd0Oykge1xuICAgIHZhciBuYW1lOiBTdHJpbmcgYnkgbWFwXG4gICAgdmFyIGFnZTogSW50ICAgICBieSBtYXBcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/delegated-properties.html#storing-properties-in-a-map"
            ],
            "flags": 0,
            "guid": "Fo/7vSl?9E",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "DelegatedProperties",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If <b>not null and else</b> shorthand",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">files</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">File</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Test\"</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">listFiles</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">files</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">size</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #4e9a06\">\"empty\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzgzMTIsICJpZCI6ICIxNDg5MDAyMjg3NDAwLTAwMSIsICJtZCI6ICJgYGAga290bGluXG52YWwgZmlsZXMgPSBGaWxlKCZxdW90O1Rlc3QmcXVvdDspLmxpc3RGaWxlcygpXG4gIFxucHJpbnRsbihmaWxlcz8uc2l6ZSA/OiAmcXVvdDtlbXB0eSZxdW90OylcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/idioms.html#if-not-null-and-else-shorthand"
            ],
            "flags": 0,
            "guid": "Bdz7^[D%@1",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Underscores in numeric literals (since 1.1)",
                "<p>You can use underscores to make number constants more readable:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">oneMillion</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000\">_000_000</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">creditCardNumber</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1234</span><span style=\"color: #000000\">_5678_9012_3456L</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">socialSecurityNumber</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">999</span><span style=\"color: #000000\">_99_9999L</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">hexBytes</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000\">xFF_EC_DE_5E</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">bytes</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000\">b11010010_01101001_10010100_10010010</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk3NjksICJpZCI6ICIxNDg5MDAyNzQ1MzYxLTAwMSIsICJtZCI6ICJZb3UgY2FuIHVzZSB1bmRlcnNjb3JlcyB0byBtYWtlIG51bWJlciBjb25zdGFudHMgbW9yZSByZWFkYWJsZTpcbiAgXG5gYGAga290bGluXG52YWwgb25lTWlsbGlvbiA9IDFfMDAwXzAwMFxudmFsIGNyZWRpdENhcmROdW1iZXIgPSAxMjM0XzU2NzhfOTAxMl8zNDU2TFxudmFsIHNvY2lhbFNlY3VyaXR5TnVtYmVyID0gOTk5Xzk5Xzk5OTlMXG52YWwgaGV4Qnl0ZXMgPSAweEZGX0VDX0RFXzVFXG52YWwgYnl0ZXMgPSAwYjExMDEwMDEwXzAxMTAxMDAxXzEwMDEwMTAwXzEwMDEwMDEwXG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/basic-types.html#underscores-in-numeric-literals-since-11"
            ],
            "flags": 0,
            "guid": "K?NEpB8Wtt",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "BasicTypes",
                "Basics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Sealed</b> Classes",
                "<p>Sealed classes are used for representing restricted class hierarchies, when a value can have one of the types from a limited set, but cannot have any other type. They are, in a sense, an extension of enum classes: the set of values for an enum type is also restricted, but each enum constant exists only as a single instance, whereas a subclass of a sealed class can have multiple instances which can contain state.</p>\n<p>To declare a sealed class, you put the <code>sealed</code> modifier before the name of the class. A sealed class can have subclasses, but all of them must be declared in the same file as the sealed class itself. (Before Kotlin 1.1, the rules were even more strict: classes had to be nested inside the declaration of the sealed class).</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">sealed</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Expr</span>\n<span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Const</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">number</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Double</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Expr</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Sum</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">e1</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Expr</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">e2</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Expr</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Expr</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #000000\">NotANumber</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Expr</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div>\n<p>(The example above uses one additional new feature of Kotlin 1.1: the possibility for data classes to extend other classes, including sealed classes.)</p>\n<p>Note that classes which extend subclasses of a sealed class (indirect inheritors) can be placed anywhere, not necessarily in the same file.</p>\n<p>The key benefit of using sealed classes comes into play when you use them in a <a href=\"control-flow.html#when-expression\"><code>when</code> expression</a>. If it's possible to verify that the statement covers all cases, you don't need to add an <code>else</code> clause to the statement.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">eval</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">expr</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Expr</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Double</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">when</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">expr</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">Const</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">expr</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">number</span>\n    <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">Sum</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">eval</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">expr</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">e1</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">eval</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">expr</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">e2</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">NotANumber</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Double</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">NaN</span>\n    <span style=\"color: #8f5902; font-style: italic\">// the `else` clause is not required because we've covered all the cases</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzEwNTMsICJpZCI6ICIxNDg5MDczODYzMjI0LTAwMSIsICJtZCI6ICJTZWFsZWQgY2xhc3NlcyBhcmUgdXNlZCBmb3IgcmVwcmVzZW50aW5nIHJlc3RyaWN0ZWQgY2xhc3MgaGllcmFyY2hpZXMsIHdoZW4gYSB2YWx1ZSBjYW4gaGF2ZSBvbmUgb2YgdGhlIHR5cGVzIGZyb20gYSBsaW1pdGVkIHNldCwgYnV0IGNhbm5vdCBoYXZlIGFueSBvdGhlciB0eXBlLiBUaGV5IGFyZSwgaW4gYSBzZW5zZSwgYW4gZXh0ZW5zaW9uIG9mIGVudW0gY2xhc3NlczogdGhlIHNldCBvZiB2YWx1ZXMgZm9yIGFuIGVudW0gdHlwZSBpcyBhbHNvIHJlc3RyaWN0ZWQsIGJ1dCBlYWNoIGVudW0gY29uc3RhbnQgZXhpc3RzIG9ubHkgYXMgYSBzaW5nbGUgaW5zdGFuY2UsIHdoZXJlYXMgYSBzdWJjbGFzcyBvZiBhIHNlYWxlZCBjbGFzcyBjYW4gaGF2ZSBtdWx0aXBsZSBpbnN0YW5jZXMgd2hpY2ggY2FuIGNvbnRhaW4gc3RhdGUuXG4gIFxuVG8gZGVjbGFyZSBhIHNlYWxlZCBjbGFzcywgeW91IHB1dCB0aGUgYHNlYWxlZGAgbW9kaWZpZXIgYmVmb3JlIHRoZSBuYW1lIG9mIHRoZSBjbGFzcy4gQSBzZWFsZWQgY2xhc3MgY2FuIGhhdmUgc3ViY2xhc3NlcywgYnV0IGFsbCBvZiB0aGVtIG11c3QgYmUgZGVjbGFyZWQgaW4gdGhlIHNhbWUgZmlsZSBhcyB0aGUgc2VhbGVkIGNsYXNzIGl0c2VsZi4gKEJlZm9yZSBLb3RsaW4gMS4xLCB0aGUgcnVsZXMgd2VyZSBldmVuIG1vcmUgc3RyaWN0OiBjbGFzc2VzIGhhZCB0byBiZSBuZXN0ZWQgaW5zaWRlIHRoZSBkZWNsYXJhdGlvbiBvZiB0aGUgc2VhbGVkIGNsYXNzKS5cbiAgXG5gYGBrb3RsaW5cbnNlYWxlZCBjbGFzcyBFeHByXG5kYXRhIGNsYXNzIENvbnN0KHZhbCBudW1iZXI6IERvdWJsZSkgOiBFeHByKClcbmRhdGEgY2xhc3MgU3VtKHZhbCBlMTogRXhwciwgdmFsIGUyOiBFeHByKSA6IEV4cHIoKVxub2JqZWN0IE5vdEFOdW1iZXIgOiBFeHByKClcbmBgYFxuICBcbihUaGUgZXhhbXBsZSBhYm92ZSB1c2VzIG9uZSBhZGRpdGlvbmFsIG5ldyBmZWF0dXJlIG9mIEtvdGxpbiAxLjE6IHRoZSBwb3NzaWJpbGl0eSBmb3IgZGF0YSBjbGFzc2VzIHRvIGV4dGVuZCBvdGhlciBjbGFzc2VzLCBpbmNsdWRpbmcgc2VhbGVkIGNsYXNzZXMuKVxuICBcbk5vdGUgdGhhdCBjbGFzc2VzIHdoaWNoIGV4dGVuZCBzdWJjbGFzc2VzIG9mIGEgc2VhbGVkIGNsYXNzIChpbmRpcmVjdCBpbmhlcml0b3JzKSBjYW4gYmUgcGxhY2VkIGFueXdoZXJlLCBub3QgbmVjZXNzYXJpbHkgaW4gdGhlIHNhbWUgZmlsZS5cbiAgXG5UaGUga2V5IGJlbmVmaXQgb2YgdXNpbmcgc2VhbGVkIGNsYXNzZXMgY29tZXMgaW50byBwbGF5IHdoZW4geW91IHVzZSB0aGVtIGluIGEgW2B3aGVuYCBleHByZXNzaW9uXShjb250cm9sLWZsb3cuaHRtbCN3aGVuLWV4cHJlc3Npb24pLiBJZiBpdCZhcG9zO3MgcG9zc2libGUgdG8gdmVyaWZ5IHRoYXQgdGhlIHN0YXRlbWVudCBjb3ZlcnMgYWxsIGNhc2VzLCB5b3UgZG9uJmFwb3M7dCBuZWVkIHRvIGFkZCBhbiBgZWxzZWAgY2xhdXNlIHRvIHRoZSBzdGF0ZW1lbnQuXG4gIFxuYGBga290bGluXG5mdW4gZXZhbChleHByOiBFeHByKTogRG91YmxlID0gd2hlbihleHByKSB7XG4gICAgaXMgQ29uc3QgLSZndDsgZXhwci5udW1iZXJcbiAgICBpcyBTdW0gLSZndDsgZXZhbChleHByLmUxKSArIGV2YWwoZXhwci5lMilcbiAgICBOb3RBTnVtYmVyIC0mZ3Q7IERvdWJsZS5OYU5cbiAgICAvLyB0aGUgYGVsc2VgIGNsYXVzZSBpcyBub3QgcmVxdWlyZWQgYmVjYXVzZSB3ZSZhcG9zO3ZlIGNvdmVyZWQgYWxsIHRoZSBjYXNlc1xufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/sealed-classes.html#sealed-classes"
            ],
            "flags": 0,
            "guid": "fUs_`kr>g.",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Kotlin_1.1",
                "SealedClasses"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Upper bounds</b> in&nbsp;<i>Generic constraints</i>",
                "<p>The most common type of constraint is an <strong>upper bound</strong> that corresponds to Java's <em>extends</em> keyword:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Comparable</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;&gt;</span> <span style=\"color: #000000\">sort</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The type specified after a colon is the <strong>upper bound</strong>: only a subtype of <code>Comparable&lt;T&gt;</code> may be substituted for <code>T</code>. For example</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">sort</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #8f5902; font-style: italic\">// OK. Int is a subtype of Comparable&lt;Int&gt;</span>\n<span style=\"color: #000000\">sort</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">HashMap</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;()))</span> <span style=\"color: #8f5902; font-style: italic\">// Error: HashMap&lt;Int, String&gt; is not a subtype of Comparable&lt;HashMap&lt;Int, String&gt;&gt;</span>\n</pre></div>\n<p>The default upper bound (if none specified) is <code>Any?</code>. Only one upper bound can be specified inside the angle brackets.<br />\nIf the same type parameter needs more than one upper bound, we need a separate <strong>where</strong>-clause:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">cloneWhenGreater</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;,</span> <span style=\"color: #000000\">threshold</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span>\n    <span style=\"color: #204a87; font-weight: bold\">where</span> <span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Comparable</span><span style=\"color: #000000; font-weight: bold\">,</span>\n          <span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Cloneable</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n  <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">threshold</span> <span style=\"color: #000000; font-weight: bold\">}.</span><span style=\"color: #000000\">map</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">clone</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzEwMDIsICJpZCI6ICIxNDg5MDc1NDQ4NzMxLTAwMSIsICJtZCI6ICJUaGUgbW9zdCBjb21tb24gdHlwZSBvZiBjb25zdHJhaW50IGlzIGFuICoqdXBwZXIgYm91bmQqKiB0aGF0IGNvcnJlc3BvbmRzIHRvIEphdmEmYXBvcztzICpleHRlbmRzKiBrZXl3b3JkOlxuICBcbmBgYCBrb3RsaW5cbmZ1biAmbHQ7VCA6IENvbXBhcmFibGUmbHQ7VCZndDsmZ3Q7IHNvcnQobGlzdDogTGlzdCZsdDtUJmd0Oykge1xuICAgIC8vIC4uLlxufVxuYGBgXG4gIFxuVGhlIHR5cGUgc3BlY2lmaWVkIGFmdGVyIGEgY29sb24gaXMgdGhlICoqdXBwZXIgYm91bmQqKjogb25seSBhIHN1YnR5cGUgb2YgYENvbXBhcmFibGUmbHQ7VCZndDtgIG1heSBiZSBzdWJzdGl0dXRlZCBmb3IgYFRgLiBGb3IgZXhhbXBsZVxuICBcbmBgYCBrb3RsaW5cbnNvcnQobGlzdE9mKDEsIDIsIDMpKSAvLyBPSy4gSW50IGlzIGEgc3VidHlwZSBvZiBDb21wYXJhYmxlJmx0O0ludCZndDtcbnNvcnQobGlzdE9mKEhhc2hNYXAmbHQ7SW50LCBTdHJpbmcmZ3Q7KCkpKSAvLyBFcnJvcjogSGFzaE1hcCZsdDtJbnQsIFN0cmluZyZndDsgaXMgbm90IGEgc3VidHlwZSBvZiBDb21wYXJhYmxlJmx0O0hhc2hNYXAmbHQ7SW50LCBTdHJpbmcmZ3Q7Jmd0O1xuYGBgXG4gIFxuVGhlIGRlZmF1bHQgdXBwZXIgYm91bmQgKGlmIG5vbmUgc3BlY2lmaWVkKSBpcyBgQW55P2AuIE9ubHkgb25lIHVwcGVyIGJvdW5kIGNhbiBiZSBzcGVjaWZpZWQgaW5zaWRlIHRoZSBhbmdsZSBicmFja2V0cy5cbklmIHRoZSBzYW1lIHR5cGUgcGFyYW1ldGVyIG5lZWRzIG1vcmUgdGhhbiBvbmUgdXBwZXIgYm91bmQsIHdlIG5lZWQgYSBzZXBhcmF0ZSAqKndoZXJlKipcXC1jbGF1c2U6XG4gIFxuYGBgIGtvdGxpblxuZnVuICZsdDtUJmd0OyBjbG9uZVdoZW5HcmVhdGVyKGxpc3Q6IExpc3QmbHQ7VCZndDssIHRocmVzaG9sZDogVCk6IExpc3QmbHQ7VCZndDtcbiAgICB3aGVyZSBUIDogQ29tcGFyYWJsZSxcbiAgICAgICAgICBUIDogQ2xvbmVhYmxlIHtcbiAgcmV0dXJuIGxpc3QuZmlsdGVyIHsgaXQgJmd0OyB0aHJlc2hvbGQgfS5tYXAgeyBpdC5jbG9uZSgpIH1cbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/generics.html#upper-bounds"
            ],
            "flags": 0,
            "guid": "G0q%yw4sf$",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "Generics",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<u>Local</u> <b>Delegated</b> Properties <i>(since 1.1)</i>",
                "<p>You can declare local variables as delegated properties.<br />\nFor instance, you can make a local variable lazy:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">example</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">computeFoo</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Foo</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">memoizedFoo</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">lazy</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">computeFoo</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">someCondition</span> <span style=\"color: #000000; font-weight: bold\">&amp;&amp;</span> <span style=\"color: #000000\">memoizedFoo</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">isValid</span><span style=\"color: #000000; font-weight: bold\">())</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">memoizedFoo</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">doSomething</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The <code>memoizedFoo</code> variable will be computed on the first access only.<br />\nIf <code>someCondition</code> fails, the variable won't be computed at all.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzE1NzksICJpZCI6ICIxNDg5MDc2MzE3MDIwLTAwMSIsICJtZCI6ICJZb3UgY2FuIGRlY2xhcmUgbG9jYWwgdmFyaWFibGVzIGFzIGRlbGVnYXRlZCBwcm9wZXJ0aWVzLlxuRm9yIGluc3RhbmNlLCB5b3UgY2FuIG1ha2UgYSBsb2NhbCB2YXJpYWJsZSBsYXp5OlxuICBcbmBgYCBrb3RsaW5cbmZ1biBleGFtcGxlKGNvbXB1dGVGb286ICgpIC0mZ3Q7IEZvbykge1xuICAgIHZhbCBtZW1vaXplZEZvbyBieSBsYXp5KGNvbXB1dGVGb28pXG4gIFxuICAgIGlmIChzb21lQ29uZGl0aW9uICZhbXA7JmFtcDsgbWVtb2l6ZWRGb28uaXNWYWxpZCgpKSB7XG4gICAgICAgIG1lbW9pemVkRm9vLmRvU29tZXRoaW5nKClcbiAgICB9XG59XG5gYGBcbiAgXG5UaGUgYG1lbW9pemVkRm9vYCB2YXJpYWJsZSB3aWxsIGJlIGNvbXB1dGVkIG9uIHRoZSBmaXJzdCBhY2Nlc3Mgb25seS5cbklmIGBzb21lQ29uZGl0aW9uYCBmYWlscywgdGhlIHZhcmlhYmxlIHdvbiZhcG9zO3QgYmUgY29tcHV0ZWQgYXQgYWxsLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/delegated-properties.html#local-delegated-properties-since-11"
            ],
            "flags": 0,
            "guid": "QG$HS+6#8;",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "DelegatedProperties",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Property</b> Delegate:&nbsp;<i>Requirements</i>",
                "<p>Here we summarize requirements to delegate objects. </p>\n<p>For a <strong>read-only</strong> property (i.e. a <em class=\"keyword\">val</em>), a delegate has to provide a function named <code>getValue</code> that takes the following parameters:</p>\n<ul>\n<li align=\"left\"><code>thisRef</code> --- must be the same or a supertype of the <em>property owner</em> (for extension properties --- the type being extended),</li>\n<li align=\"left\"><code>property</code> --- must be of type <code>KProperty&lt;*&gt;</code> or its supertype,</li>\n</ul>\n<p>this function must return the same type as property (or its subtype).</p>\n<p>For a <strong>mutable</strong> property (a <em class=\"keyword\">var</em>), a delegate has to <em>additionally</em> provide a function named <code>setValue</code> that takes the following parameters:</p>\n<ul>\n<li align=\"left\"><code>thisRef</code> --- same as for <code>getValue()</code>,</li>\n<li align=\"left\"><code>property</code> --- same as for <code>getValue()</code>,</li>\n<li align=\"left\">new value --- must be of the same type as a property or its supertype.</li>\n</ul>\n<p><code>getValue()</code> and/or <code>setValue()</code> functions may be provided either as member functions of the delegate class or extension functions.<br />\nThe latter is handy when you need to delegate property to an object which doesn't originally provide these functions.<br />\nBoth of the functions need to be marked with the <code>operator</code> keyword.</p>\n<p>The delegate class may implement one of the interfaces <code>ReadOnlyProperty</code> and <code>ReadWriteProperty</code> containing the required <code>operator</code> methods.<br />\nThese interfaces are declared in the Kotlin standard library:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">ReadOnlyProperty</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">R</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">out</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">getValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">thisRef</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">R</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">property</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">KProperty</span><span style=\"color: #000000; font-weight: bold\">&lt;*&gt;):</span> <span style=\"color: #000000\">T</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">ReadWriteProperty</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">R</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">getValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">thisRef</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">R</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">property</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">KProperty</span><span style=\"color: #000000; font-weight: bold\">&lt;*&gt;):</span> <span style=\"color: #000000\">T</span>\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">setValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">thisRef</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">R</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">property</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">KProperty</span><span style=\"color: #000000; font-weight: bold\">&lt;*&gt;,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjExNTcsICJpZCI6ICIxNDg5MDc2MzY0ODY4LTAwMSIsICJtZCI6ICJIZXJlIHdlIHN1bW1hcml6ZSByZXF1aXJlbWVudHMgdG8gZGVsZWdhdGUgb2JqZWN0cy4gXG4gIFxuRm9yIGEgKipyZWFkLW9ubHkqKiBwcm9wZXJ0eSAoaS5lLiBhICp2YWwqezoua2V5d29yZH0pLCBhIGRlbGVnYXRlIGhhcyB0byBwcm92aWRlIGEgZnVuY3Rpb24gbmFtZWQgYGdldFZhbHVlYCB0aGF0IHRha2VzIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAgXG4qIGB0aGlzUmVmYCAtLS0gbXVzdCBiZSB0aGUgc2FtZSBvciBhIHN1cGVydHlwZSBvZiB0aGUgX3Byb3BlcnR5IG93bmVyXyAoZm9yIGV4dGVuc2lvbiBwcm9wZXJ0aWVzIC0tLSB0aGUgdHlwZSBiZWluZyBleHRlbmRlZCksXG4qIGBwcm9wZXJ0eWAgLS0tIG11c3QgYmUgb2YgdHlwZSBgS1Byb3BlcnR5Jmx0OyomZ3Q7YCBvciBpdHMgc3VwZXJ0eXBlLFxuICBcbnRoaXMgZnVuY3Rpb24gbXVzdCByZXR1cm4gdGhlIHNhbWUgdHlwZSBhcyBwcm9wZXJ0eSAob3IgaXRzIHN1YnR5cGUpLlxuICBcbkZvciBhICoqbXV0YWJsZSoqIHByb3BlcnR5IChhICp2YXIqezoua2V5d29yZH0pLCBhIGRlbGVnYXRlIGhhcyB0byBfYWRkaXRpb25hbGx5XyBwcm92aWRlIGEgZnVuY3Rpb24gbmFtZWQgYHNldFZhbHVlYCB0aGF0IHRha2VzIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAgXG4qIGB0aGlzUmVmYCAtLS0gc2FtZSBhcyBmb3IgYGdldFZhbHVlKClgLFxuKiBgcHJvcGVydHlgIC0tLSBzYW1lIGFzIGZvciBgZ2V0VmFsdWUoKWAsXG4qIG5ldyB2YWx1ZSAtLS0gbXVzdCBiZSBvZiB0aGUgc2FtZSB0eXBlIGFzIGEgcHJvcGVydHkgb3IgaXRzIHN1cGVydHlwZS5cbiAgXG5gZ2V0VmFsdWUoKWAgYW5kL29yIGBzZXRWYWx1ZSgpYCBmdW5jdGlvbnMgbWF5IGJlIHByb3ZpZGVkIGVpdGhlciBhcyBtZW1iZXIgZnVuY3Rpb25zIG9mIHRoZSBkZWxlZ2F0ZSBjbGFzcyBvciBleHRlbnNpb24gZnVuY3Rpb25zLlxuVGhlIGxhdHRlciBpcyBoYW5keSB3aGVuIHlvdSBuZWVkIHRvIGRlbGVnYXRlIHByb3BlcnR5IHRvIGFuIG9iamVjdCB3aGljaCBkb2VzbiZhcG9zO3Qgb3JpZ2luYWxseSBwcm92aWRlIHRoZXNlIGZ1bmN0aW9ucy5cbkJvdGggb2YgdGhlIGZ1bmN0aW9ucyBuZWVkIHRvIGJlIG1hcmtlZCB3aXRoIHRoZSBgb3BlcmF0b3JgIGtleXdvcmQuXG4gIFxuVGhlIGRlbGVnYXRlIGNsYXNzIG1heSBpbXBsZW1lbnQgb25lIG9mIHRoZSBpbnRlcmZhY2VzIGBSZWFkT25seVByb3BlcnR5YCBhbmQgYFJlYWRXcml0ZVByb3BlcnR5YCBjb250YWluaW5nIHRoZSByZXF1aXJlZCBgb3BlcmF0b3JgIG1ldGhvZHMuXG5UaGVzZSBpbnRlcmZhY2VzIGFyZSBkZWNsYXJlZCBpbiB0aGUgS290bGluIHN0YW5kYXJkIGxpYnJhcnk6XG4gIFxuYGBgIGtvdGxpblxuaW50ZXJmYWNlIFJlYWRPbmx5UHJvcGVydHkmbHQ7aW4gUiwgb3V0IFQmZ3Q7IHtcbiAgICBvcGVyYXRvciBmdW4gZ2V0VmFsdWUodGhpc1JlZjogUiwgcHJvcGVydHk6IEtQcm9wZXJ0eSZsdDsqJmd0Oyk6IFRcbn1cbiAgXG5pbnRlcmZhY2UgUmVhZFdyaXRlUHJvcGVydHkmbHQ7aW4gUiwgVCZndDsge1xuICAgIG9wZXJhdG9yIGZ1biBnZXRWYWx1ZSh0aGlzUmVmOiBSLCBwcm9wZXJ0eTogS1Byb3BlcnR5Jmx0OyomZ3Q7KTogVFxuICAgIG9wZXJhdG9yIGZ1biBzZXRWYWx1ZSh0aGlzUmVmOiBSLCBwcm9wZXJ0eTogS1Byb3BlcnR5Jmx0OyomZ3Q7LCB2YWx1ZTogVClcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/delegated-properties.html#property-delegate-requirements"
            ],
            "flags": 0,
            "guid": "klDIviLA#Q",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "DelegatedProperties",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Property</b>&nbsp;Delegate:&nbsp;<i>Translation Rules</i>",
                "<p>Under the hood for every delegated property the Kotlin compiler generates an auxiliary property and delegates to it.<br />\nFor instance, for the property <code>prop</code> the hidden property <code>prop$delegate</code> is generated, and the code of the accessors simply delegates to this additional property:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Type</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">MyDelegate</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// this code is generated by the compiler instead:</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">prop</span><span style=\"color: #a40000; border: 1px solid #ef2929\">$</span><span style=\"color: #000000\">delegate</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">MyDelegate</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Type</span>\n        <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">prop</span><span style=\"color: #a40000; border: 1px solid #ef2929\">$</span><span style=\"color: #000000\">delegate</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">getValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #204a87; font-weight: bold\">set</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Type</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">prop</span><span style=\"color: #a40000; border: 1px solid #ef2929\">$</span><span style=\"color: #000000\">delegate</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">setValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The Kotlin compiler provides all the necessary information about <code>prop</code> in the arguments: the first argument <code>this</code> refers to an instance of the outer class <code>C</code> and <code>this::prop</code> is a reflection object of the <code>KProperty</code> type describing <code>prop</code> itself.</p>\n<p>Note that the syntax <code>this::prop</code> to refer a <a href=\"reflection.html#bound-function-and-property-references-since-11\">bound callable reference</a> in the code directly is available only since Kotlin 1.1.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MzE2MjksICJpZCI6ICIxNDg5MDc2NDQ3ODkwLTAwMSIsICJtZCI6ICJVbmRlciB0aGUgaG9vZCBmb3IgZXZlcnkgZGVsZWdhdGVkIHByb3BlcnR5IHRoZSBLb3RsaW4gY29tcGlsZXIgZ2VuZXJhdGVzIGFuIGF1eGlsaWFyeSBwcm9wZXJ0eSBhbmQgZGVsZWdhdGVzIHRvIGl0LlxuRm9yIGluc3RhbmNlLCBmb3IgdGhlIHByb3BlcnR5IGBwcm9wYCB0aGUgaGlkZGVuIHByb3BlcnR5IGBwcm9wJGRlbGVnYXRlYCBpcyBnZW5lcmF0ZWQsIGFuZCB0aGUgY29kZSBvZiB0aGUgYWNjZXNzb3JzIHNpbXBseSBkZWxlZ2F0ZXMgdG8gdGhpcyBhZGRpdGlvbmFsIHByb3BlcnR5OlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIEMge1xuICAgIHZhciBwcm9wOiBUeXBlIGJ5IE15RGVsZWdhdGUoKVxufVxuICBcbi8vIHRoaXMgY29kZSBpcyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyIGluc3RlYWQ6XG5jbGFzcyBDIHtcbiAgICBwcml2YXRlIHZhbCBwcm9wJGRlbGVnYXRlID0gTXlEZWxlZ2F0ZSgpXG4gICAgdmFyIHByb3A6IFR5cGVcbiAgICAgICAgZ2V0KCkgPSBwcm9wJGRlbGVnYXRlLmdldFZhbHVlKHRoaXMsIHRoaXM6OnByb3ApXG4gICAgICAgIHNldCh2YWx1ZTogVHlwZSkgPSBwcm9wJGRlbGVnYXRlLnNldFZhbHVlKHRoaXMsIHRoaXM6OnByb3AsIHZhbHVlKVxufVxuYGBgXG5UaGUgS290bGluIGNvbXBpbGVyIHByb3ZpZGVzIGFsbCB0aGUgbmVjZXNzYXJ5IGluZm9ybWF0aW9uIGFib3V0IGBwcm9wYCBpbiB0aGUgYXJndW1lbnRzOiB0aGUgZmlyc3QgYXJndW1lbnQgYHRoaXNgIHJlZmVycyB0byBhbiBpbnN0YW5jZSBvZiB0aGUgb3V0ZXIgY2xhc3MgYENgIGFuZCBgdGhpczo6cHJvcGAgaXMgYSByZWZsZWN0aW9uIG9iamVjdCBvZiB0aGUgYEtQcm9wZXJ0eWAgdHlwZSBkZXNjcmliaW5nIGBwcm9wYCBpdHNlbGYuXG4gIFxuTm90ZSB0aGF0IHRoZSBzeW50YXggYHRoaXM6OnByb3BgIHRvIHJlZmVyIGEgW2JvdW5kIGNhbGxhYmxlIHJlZmVyZW5jZV0ocmVmbGVjdGlvbi5odG1sI2JvdW5kLWZ1bmN0aW9uLWFuZC1wcm9wZXJ0eS1yZWZlcmVuY2VzLXNpbmNlLTExKSBpbiB0aGUgY29kZSBkaXJlY3RseSBpcyBhdmFpbGFibGUgb25seSBzaW5jZSBLb3RsaW4gMS4xLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/delegated-properties.html#translation-rules"
            ],
            "flags": 0,
            "guid": "t==rv,^i=i",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "DelegatedProperties",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Property</b>&nbsp;Delegate:&nbsp;<i>Providing a delegate</i> <i>(since 1.1)</i>",
                "<p>By defining the <code>provideDelegate</code> operator you can extend the logic of creating the object to which the property implementation is delegated.<br />\nIf the object used on the right hand side of <code>by</code> defines <code>provideDelegate</code> as a member or extension function, that function will be called to create the property delegate instance.</p>\n<p>One of the possible use cases of <code>provideDelegate</code> is to check property consistency when the property is created, not only in its getter or setter.</p>\n<p>For example, if you want to check the property name before binding, you can write something like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">ResourceLoader</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;(</span><span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ResourceID</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">provideDelegate</span><span style=\"color: #000000; font-weight: bold\">(</span>\n            <span style=\"color: #000000\">thisRef</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MyUI</span><span style=\"color: #000000; font-weight: bold\">,</span>\n            <span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">KProperty</span><span style=\"color: #000000; font-weight: bold\">&lt;*&gt;</span>\n    <span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">ReadOnlyProperty</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">MyUI</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">checkProperty</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">thisRef</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #8f5902; font-style: italic\">// create delegate</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">checkProperty</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">thisRef</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MyUI</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">bindResource</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ResourceID</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;):</span> <span style=\"color: #000000\">ResourceLoader</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">MyUI</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">image</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">bindResource</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ResourceID</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">image_id</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">text</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">bindResource</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ResourceID</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">text_id</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The parameters of <code>provideDelegate</code> are the same as for <code>getValue</code>:</p>\n<ul>\n<li align=\"left\"><code>thisRef</code> --- must be the same or a supertype of the <em>property owner</em> (for extension properties --- the type being extended),</li>\n<li align=\"left\"><code>property</code> --- must be of type <code>KProperty&lt;*&gt;</code> or its supertype.</li>\n</ul>\n<p>The <code>provideDelegate</code> method is called for each property during the creation of the <code>MyUI</code> instance, and it performs the necessary validation right away.</p>\n<p>Without this ability to intercept the binding between the property and its delegate, to achieve the same functionality you'd have to pass the property name explicitly, which isn't very convenient:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">// Checking the property name without \"provideDelegate\" functionality</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">MyUI</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">image</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">bindResource</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ResourceID</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">image_id</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"image\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">text</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">bindResource</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ResourceID</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">text_id</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"text\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">MyUI</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">bindResource</span><span style=\"color: #000000; font-weight: bold\">(</span>\n        <span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ResourceID</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;,</span>\n        <span style=\"color: #000000\">propertyName</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span>\n<span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">ReadOnlyProperty</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">MyUI</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n   <span style=\"color: #000000\">checkProperty</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">propertyName</span><span style=\"color: #000000; font-weight: bold\">)</span>\n   <span style=\"color: #8f5902; font-style: italic\">// create delegate</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>In the generated code, the <code>provideDelegate</code> method is called to initialize the auxiliary <code>prop$delegate</code> property.<br />\nCompare the generated code for the property declaration <code>val prop: Type by MyDelegate()</code> with the generated code <a href=\"delegated-properties.html#translation-rules\">above</a> (when the <code>provideDelegate</code> method is not present):</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Type</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">MyDelegate</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// this code is generated by the compiler </span>\n<span style=\"color: #8f5902; font-style: italic\">// when the 'provideDelegate' function is available:</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// calling \"provideDelegate\" to create the additional \"delegate\" property</span>\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">prop</span><span style=\"color: #a40000; border: 1px solid #ef2929\">$</span><span style=\"color: #000000\">delegate</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">MyDelegate</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">provideDelegate</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Type</span>\n        <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">prop</span><span style=\"color: #a40000; border: 1px solid #ef2929\">$</span><span style=\"color: #000000\">delegate</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">getValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Note that the <code>provideDelegate</code> method affects only the creation of the auxiliary property and doesn't affect the code generated for getter or setter.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjEyMjcsICJpZCI6ICIxNDg5MDc2NDgwODQyLTAwMSIsICJtZCI6ICJCeSBkZWZpbmluZyB0aGUgYHByb3ZpZGVEZWxlZ2F0ZWAgb3BlcmF0b3IgeW91IGNhbiBleHRlbmQgdGhlIGxvZ2ljIG9mIGNyZWF0aW5nIHRoZSBvYmplY3QgdG8gd2hpY2ggdGhlIHByb3BlcnR5IGltcGxlbWVudGF0aW9uIGlzIGRlbGVnYXRlZC5cbklmIHRoZSBvYmplY3QgdXNlZCBvbiB0aGUgcmlnaHQgaGFuZCBzaWRlIG9mIGBieWAgZGVmaW5lcyBgcHJvdmlkZURlbGVnYXRlYCBhcyBhIG1lbWJlciBvciBleHRlbnNpb24gZnVuY3Rpb24sIHRoYXQgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgdG8gY3JlYXRlIHRoZSBwcm9wZXJ0eSBkZWxlZ2F0ZSBpbnN0YW5jZS5cbiAgXG5PbmUgb2YgdGhlIHBvc3NpYmxlIHVzZSBjYXNlcyBvZiBgcHJvdmlkZURlbGVnYXRlYCBpcyB0byBjaGVjayBwcm9wZXJ0eSBjb25zaXN0ZW5jeSB3aGVuIHRoZSBwcm9wZXJ0eSBpcyBjcmVhdGVkLCBub3Qgb25seSBpbiBpdHMgZ2V0dGVyIG9yIHNldHRlci5cbiAgXG5Gb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gY2hlY2sgdGhlIHByb3BlcnR5IG5hbWUgYmVmb3JlIGJpbmRpbmcsIHlvdSBjYW4gd3JpdGUgc29tZXRoaW5nIGxpa2UgdGhpczpcbiAgXG5gYGAga290bGluXG5jbGFzcyBSZXNvdXJjZUxvYWRlciZsdDtUJmd0OyhpZDogUmVzb3VyY2VJRCZsdDtUJmd0Oykge1xuICAgIG9wZXJhdG9yIGZ1biBwcm92aWRlRGVsZWdhdGUoXG4gICAgICAgICAgICB0aGlzUmVmOiBNeVVJLFxuICAgICAgICAgICAgcHJvcDogS1Byb3BlcnR5Jmx0OyomZ3Q7XG4gICAgKTogUmVhZE9ubHlQcm9wZXJ0eSZsdDtNeVVJLCBUJmd0OyB7XG4gICAgICAgIGNoZWNrUHJvcGVydHkodGhpc1JlZiwgcHJvcC5uYW1lKVxuICAgICAgICAvLyBjcmVhdGUgZGVsZWdhdGVcbiAgICB9XG4gIFxuICAgIHByaXZhdGUgZnVuIGNoZWNrUHJvcGVydHkodGhpc1JlZjogTXlVSSwgbmFtZTogU3RyaW5nKSB7IC4uLiB9XG59XG4gIFxuZnVuICZsdDtUJmd0OyBiaW5kUmVzb3VyY2UoaWQ6IFJlc291cmNlSUQmbHQ7VCZndDspOiBSZXNvdXJjZUxvYWRlciZsdDtUJmd0OyB7IC4uLiB9XG4gIFxuY2xhc3MgTXlVSSB7XG4gICAgdmFsIGltYWdlIGJ5IGJpbmRSZXNvdXJjZShSZXNvdXJjZUlELmltYWdlX2lkKVxuICAgIHZhbCB0ZXh0IGJ5IGJpbmRSZXNvdXJjZShSZXNvdXJjZUlELnRleHRfaWQpXG59XG5gYGBcbiAgXG5UaGUgcGFyYW1ldGVycyBvZiBgcHJvdmlkZURlbGVnYXRlYCBhcmUgdGhlIHNhbWUgYXMgZm9yIGBnZXRWYWx1ZWA6XG4gIFxuKiBgdGhpc1JlZmAgLS0tIG11c3QgYmUgdGhlIHNhbWUgb3IgYSBzdXBlcnR5cGUgb2YgdGhlIF9wcm9wZXJ0eSBvd25lcl8gKGZvciBleHRlbnNpb24gcHJvcGVydGllcyAtLS0gdGhlIHR5cGUgYmVpbmcgZXh0ZW5kZWQpLFxuKiBgcHJvcGVydHlgIC0tLSBtdXN0IGJlIG9mIHR5cGUgYEtQcm9wZXJ0eSZsdDsqJmd0O2Agb3IgaXRzIHN1cGVydHlwZS5cbiAgXG5UaGUgYHByb3ZpZGVEZWxlZ2F0ZWAgbWV0aG9kIGlzIGNhbGxlZCBmb3IgZWFjaCBwcm9wZXJ0eSBkdXJpbmcgdGhlIGNyZWF0aW9uIG9mIHRoZSBgTXlVSWAgaW5zdGFuY2UsIGFuZCBpdCBwZXJmb3JtcyB0aGUgbmVjZXNzYXJ5IHZhbGlkYXRpb24gcmlnaHQgYXdheS5cbiAgXG5XaXRob3V0IHRoaXMgYWJpbGl0eSB0byBpbnRlcmNlcHQgdGhlIGJpbmRpbmcgYmV0d2VlbiB0aGUgcHJvcGVydHkgYW5kIGl0cyBkZWxlZ2F0ZSwgdG8gYWNoaWV2ZSB0aGUgc2FtZSBmdW5jdGlvbmFsaXR5IHlvdSZhcG9zO2QgaGF2ZSB0byBwYXNzIHRoZSBwcm9wZXJ0eSBuYW1lIGV4cGxpY2l0bHksIHdoaWNoIGlzbiZhcG9zO3QgdmVyeSBjb252ZW5pZW50OlxuICBcbmBgYCBrb3RsaW5cbi8vIENoZWNraW5nIHRoZSBwcm9wZXJ0eSBuYW1lIHdpdGhvdXQgJnF1b3Q7cHJvdmlkZURlbGVnYXRlJnF1b3Q7IGZ1bmN0aW9uYWxpdHlcbmNsYXNzIE15VUkge1xuICAgIHZhbCBpbWFnZSBieSBiaW5kUmVzb3VyY2UoUmVzb3VyY2VJRC5pbWFnZV9pZCwgJnF1b3Q7aW1hZ2UmcXVvdDspXG4gICAgdmFsIHRleHQgYnkgYmluZFJlc291cmNlKFJlc291cmNlSUQudGV4dF9pZCwgJnF1b3Q7dGV4dCZxdW90Oylcbn1cbiAgXG5mdW4gJmx0O1QmZ3Q7IE15VUkuYmluZFJlc291cmNlKFxuICAgICAgICBpZDogUmVzb3VyY2VJRCZsdDtUJmd0OyxcbiAgICAgICAgcHJvcGVydHlOYW1lOiBTdHJpbmdcbik6IFJlYWRPbmx5UHJvcGVydHkmbHQ7TXlVSSwgVCZndDsge1xuICAgY2hlY2tQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eU5hbWUpXG4gICAvLyBjcmVhdGUgZGVsZWdhdGVcbn1cbmBgYFxuICBcbkluIHRoZSBnZW5lcmF0ZWQgY29kZSwgdGhlIGBwcm92aWRlRGVsZWdhdGVgIG1ldGhvZCBpcyBjYWxsZWQgdG8gaW5pdGlhbGl6ZSB0aGUgYXV4aWxpYXJ5IGBwcm9wJGRlbGVnYXRlYCBwcm9wZXJ0eS4gIFxuQ29tcGFyZSB0aGUgZ2VuZXJhdGVkIGNvZGUgZm9yIHRoZSBwcm9wZXJ0eSBkZWNsYXJhdGlvbiBgdmFsIHByb3A6IFR5cGUgYnkgTXlEZWxlZ2F0ZSgpYCB3aXRoIHRoZSBnZW5lcmF0ZWQgY29kZSBbYWJvdmVdKGRlbGVnYXRlZC1wcm9wZXJ0aWVzLmh0bWwjdHJhbnNsYXRpb24tcnVsZXMpICh3aGVuIHRoZSBgcHJvdmlkZURlbGVnYXRlYCBtZXRob2QgaXMgbm90IHByZXNlbnQpOlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIEMge1xuICAgIHZhciBwcm9wOiBUeXBlIGJ5IE15RGVsZWdhdGUoKVxufVxuICBcbi8vIHRoaXMgY29kZSBpcyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyIFxuLy8gd2hlbiB0aGUgJmFwb3M7cHJvdmlkZURlbGVnYXRlJmFwb3M7IGZ1bmN0aW9uIGlzIGF2YWlsYWJsZTpcbmNsYXNzIEMge1xuICAgIC8vIGNhbGxpbmcgJnF1b3Q7cHJvdmlkZURlbGVnYXRlJnF1b3Q7IHRvIGNyZWF0ZSB0aGUgYWRkaXRpb25hbCAmcXVvdDtkZWxlZ2F0ZSZxdW90OyBwcm9wZXJ0eVxuICAgIHByaXZhdGUgdmFsIHByb3AkZGVsZWdhdGUgPSBNeURlbGVnYXRlKCkucHJvdmlkZURlbGVnYXRlKHRoaXMsIHRoaXM6OnByb3ApXG4gICAgdmFsIHByb3A6IFR5cGVcbiAgICAgICAgZ2V0KCkgPSBwcm9wJGRlbGVnYXRlLmdldFZhbHVlKHRoaXMsIHRoaXM6OnByb3ApXG59XG5gYGBcbiAgXG5Ob3RlIHRoYXQgdGhlIGBwcm92aWRlRGVsZWdhdGVgIG1ldGhvZCBhZmZlY3RzIG9ubHkgdGhlIGNyZWF0aW9uIG9mIHRoZSBhdXhpbGlhcnkgcHJvcGVydHkgYW5kIGRvZXNuJmFwb3M7dCBhZmZlY3QgdGhlIGNvZGUgZ2VuZXJhdGVkIGZvciBnZXR0ZXIgb3Igc2V0dGVyLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/delegated-properties.html#providing-a-delegate-since-11"
            ],
            "flags": 0,
            "guid": "d/g5b/9M`C",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ClassesAndObjects",
                "DelegatedProperties",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Underscore</b> for <i>unused variables</i> in <b>Lambdas</b> <i>(since 1.1)</i>",
                "<p>If the lambda parameter is unused, you can place an underscore instead of its name:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">forEach</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">_</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"$value!\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NDk5MzIsICJpZCI6ICIxNDg5MDc3MDc1NjUzLTAwMSIsICJtZCI6ICJJZiB0aGUgbGFtYmRhIHBhcmFtZXRlciBpcyB1bnVzZWQsIHlvdSBjYW4gcGxhY2UgYW4gdW5kZXJzY29yZSBpbnN0ZWFkIG9mIGl0cyBuYW1lOlxuICBcbmBgYGtvdGxpblxubWFwLmZvckVhY2ggeyBfLCB2YWx1ZSAtJmd0OyBwcmludGxuKCZxdW90OyR2YWx1ZSEmcXVvdDspIH1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/lambdas.html#underscore-for-unused-variables-since-11"
            ],
            "flags": 0,
            "guid": "c@`{CYXBl9",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "Kotlin_1.1",
                "Lambdas"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Inline</b> properties <i>(since 1.1)</i>",
                "<p>The <code>inline</code> modifier can be used on accessors of properties that don't have a backing field.<br />\nYou can annotate individual property accessors:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Foo</span>\n    <span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Foo</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n<span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Bar</span>\n    <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n    <span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">set</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">v</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>You can also annotate an entire property, which marks both of its accessors as inline:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">bar</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Bar</span>\n    <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n    <span style=\"color: #204a87; font-weight: bold\">set</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">v</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>At the call site, inline accessors are inlined as regular inline functions.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTA1MzAsICJpZCI6ICIxNDg5MjQ1MjI0Mzk1LTAwMSIsICJtZCI6ICJUaGUgYGlubGluZWAgbW9kaWZpZXIgY2FuIGJlIHVzZWQgb24gYWNjZXNzb3JzIG9mIHByb3BlcnRpZXMgdGhhdCBkb24mYXBvczt0IGhhdmUgYSBiYWNraW5nIGZpZWxkLlxuWW91IGNhbiBhbm5vdGF0ZSBpbmRpdmlkdWFsIHByb3BlcnR5IGFjY2Vzc29yczpcbiAgXG5gYGBrb3RsaW5cbnZhbCBmb286IEZvb1xuICAgIGlubGluZSBnZXQoKSA9IEZvbygpXG4gIFxudmFyIGJhcjogQmFyXG4gICAgZ2V0KCkgPSAuLi5cbiAgICBpbmxpbmUgc2V0KHYpIHsgLi4uIH1cbmBgYFxuICBcbllvdSBjYW4gYWxzbyBhbm5vdGF0ZSBhbiBlbnRpcmUgcHJvcGVydHksIHdoaWNoIG1hcmtzIGJvdGggb2YgaXRzIGFjY2Vzc29ycyBhcyBpbmxpbmU6XG4gIFxuYGBga290bGluXG5pbmxpbmUgdmFyIGJhcjogQmFyXG4gICAgZ2V0KCkgPSAuLi5cbiAgICBzZXQodikgeyAuLi4gfVxuYGBgXG4gIFxuQXQgdGhlIGNhbGwgc2l0ZSwgaW5saW5lIGFjY2Vzc29ycyBhcmUgaW5saW5lZCBhcyByZWd1bGFyIGlubGluZSBmdW5jdGlvbnMuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/inline-functions.html#inline-properties-since-11"
            ],
            "flags": 0,
            "guid": "x19kzFZkY[",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "FunctionsAndLambdas",
                "InlineFunctions",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<u>Destructuring Declarations</u>:&nbsp;<b>Underscore</b> for unused variables (<i>since 1.1</i>)",
                "<p>If you don't need a variable in the destructuring declaration, you can place an underscore instead of its name:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">(</span><span style=\"color: #000000\">_</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">status</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">getResult</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTA3MTUsICJpZCI6ICIxNDg5MjQ2MDk3OTMzLTAwMSIsICJtZCI6ICJJZiB5b3UgZG9uJmFwb3M7dCBuZWVkIGEgdmFyaWFibGUgaW4gdGhlIGRlc3RydWN0dXJpbmcgZGVjbGFyYXRpb24sIHlvdSBjYW4gcGxhY2UgYW4gdW5kZXJzY29yZSBpbnN0ZWFkIG9mIGl0cyBuYW1lOlxuICBcbmBgYGtvdGxpblxudmFsIChfLCBzdGF0dXMpID0gZ2V0UmVzdWx0KClcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/multi-declarations.html#underscore-for-unused-variables-since-11"
            ],
            "flags": 0,
            "guid": "yR^R/Jso>Z",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DestructuringDeclarations",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<u>Destructuring Declarations:</u>&nbsp;Destructuring in <b>Lambdas</b> (<i>since 1.1</i>)",
                "<p>You can use the destructuring declarations syntax for lambda parameters.<br />\nIf a lambda has a parameter of the <code>Pair</code> type (or <code>Map.Entry</code>, or any other type that has the appropriate <code>componentN</code> functions), you can introduce several new parameters instead of one by putting them in parentheses:  </p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">mapValues</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">entry</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #4e9a06\">\"${entry.value}!\"</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">mapValues</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">key</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #4e9a06\">\"$value!\"</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Note the difference between declaring two parameters and declaring a destructuring pair instead of a parameter:  </p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">a</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #8f5902; font-style: italic\">// one parameter</span>\n<span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #8f5902; font-style: italic\">// two parameters</span>\n<span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #8f5902; font-style: italic\">// a destructured pair</span>\n<span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">b</span><span style=\"color: #000000; font-weight: bold\">),</span> <span style=\"color: #000000\">c</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #8f5902; font-style: italic\">// a destructured pair and another parameter</span>\n</pre></div>\n<p>If a component of the destructured parameter is unused, you can replace it with the underscore to avoid inventing its name:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">mapValues</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">_</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #4e9a06\">\"$value!\"</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>You can specify the type for the whole destructured parameter or for a specific component separately:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">mapValues</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">_</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Entry</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #4e9a06\">\"$value!\"</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">mapValues</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">_</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #4e9a06\">\"$value!\"</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTA3NTQsICJpZCI6ICIxNDg5MjQ2MTQ4NzQyLTAwMSIsICJtZCI6ICJZb3UgY2FuIHVzZSB0aGUgZGVzdHJ1Y3R1cmluZyBkZWNsYXJhdGlvbnMgc3ludGF4IGZvciBsYW1iZGEgcGFyYW1ldGVycy5cbklmIGEgbGFtYmRhIGhhcyBhIHBhcmFtZXRlciBvZiB0aGUgYFBhaXJgIHR5cGUgKG9yIGBNYXAuRW50cnlgLCBvciBhbnkgb3RoZXIgdHlwZSB0aGF0IGhhcyB0aGUgYXBwcm9wcmlhdGUgYGNvbXBvbmVudE5gIGZ1bmN0aW9ucyksIHlvdSBjYW4gaW50cm9kdWNlIHNldmVyYWwgbmV3IHBhcmFtZXRlcnMgaW5zdGVhZCBvZiBvbmUgYnkgcHV0dGluZyB0aGVtIGluIHBhcmVudGhlc2VzOiAgXG4gIFxuYGBga290bGluXG5tYXAubWFwVmFsdWVzIHsgZW50cnkgLSZndDsgJnF1b3Q7JHtlbnRyeS52YWx1ZX0hJnF1b3Q7IH1cbm1hcC5tYXBWYWx1ZXMgeyAoa2V5LCB2YWx1ZSkgLSZndDsgJnF1b3Q7JHZhbHVlISZxdW90OyB9XG5gYGBcbiAgXG5Ob3RlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gZGVjbGFyaW5nIHR3byBwYXJhbWV0ZXJzIGFuZCBkZWNsYXJpbmcgYSBkZXN0cnVjdHVyaW5nIHBhaXIgaW5zdGVhZCBvZiBhIHBhcmFtZXRlcjogIFxuICBcbmBgYGtvdGxpblxueyBhIC0mZ3Q7IC4uLiB9IC8vIG9uZSBwYXJhbWV0ZXJcbnsgYSwgYiAtJmd0OyAuLi4gfSAvLyB0d28gcGFyYW1ldGVyc1xueyAoYSwgYikgLSZndDsgLi4uIH0gLy8gYSBkZXN0cnVjdHVyZWQgcGFpclxueyAoYSwgYiksIGMgLSZndDsgLi4uIH0gLy8gYSBkZXN0cnVjdHVyZWQgcGFpciBhbmQgYW5vdGhlciBwYXJhbWV0ZXJcbmBgYFxuICBcbklmIGEgY29tcG9uZW50IG9mIHRoZSBkZXN0cnVjdHVyZWQgcGFyYW1ldGVyIGlzIHVudXNlZCwgeW91IGNhbiByZXBsYWNlIGl0IHdpdGggdGhlIHVuZGVyc2NvcmUgdG8gYXZvaWQgaW52ZW50aW5nIGl0cyBuYW1lOlxuICBcbmBgYGtvdGxpblxubWFwLm1hcFZhbHVlcyB7IChfLCB2YWx1ZSkgLSZndDsgJnF1b3Q7JHZhbHVlISZxdW90OyB9XG5gYGBcbiAgXG5Zb3UgY2FuIHNwZWNpZnkgdGhlIHR5cGUgZm9yIHRoZSB3aG9sZSBkZXN0cnVjdHVyZWQgcGFyYW1ldGVyIG9yIGZvciBhIHNwZWNpZmljIGNvbXBvbmVudCBzZXBhcmF0ZWx5OlxuICBcbmBgYGtvdGxpblxubWFwLm1hcFZhbHVlcyB7IChfLCB2YWx1ZSk6IE1hcC5FbnRyeSZsdDtJbnQsIFN0cmluZyZndDsgLSZndDsgJnF1b3Q7JHZhbHVlISZxdW90OyB9XG4gIFxubWFwLm1hcFZhbHVlcyB7IChfLCB2YWx1ZTogU3RyaW5nKSAtJmd0OyAmcXVvdDskdmFsdWUhJnF1b3Q7IH1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/multi-declarations.html#destructuring-in-lambdas-since-11"
            ],
            "flags": 0,
            "guid": "eaSq-()%fb",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DestructuringDeclarations",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Utility&nbsp;<b>Ranges&nbsp;</b>functions: <i>downTo()</i>",
                "<p>The <code>downTo()</code> extension function is defined for any pair of integral types, here are two examples:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">Long</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">downTo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">other</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">LongProgression</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">LongProgression</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">fromClosedRange</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">other</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toLong</span><span style=\"color: #000000; font-weight: bold\">(),</span> <span style=\"color: #000000; font-weight: bold\">-</span><span style=\"color: #0000cf; font-weight: bold\">1L</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">Byte</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">downTo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">other</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">IntProgression</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">IntProgression</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">fromClosedRange</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toInt</span><span style=\"color: #000000; font-weight: bold\">(),</span> <span style=\"color: #000000\">other</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000; font-weight: bold\">-</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTA5NzYsICJpZCI6ICIxNDg5MjQ2NjA5NzE3LTAwMSIsICJtZCI6ICJUaGUgYGRvd25UbygpYCBleHRlbnNpb24gZnVuY3Rpb24gaXMgZGVmaW5lZCBmb3IgYW55IHBhaXIgb2YgaW50ZWdyYWwgdHlwZXMsIGhlcmUgYXJlIHR3byBleGFtcGxlczpcbiAgXG5gYGBrb3RsaW5cbmZ1biBMb25nLmRvd25UbyhvdGhlcjogSW50KTogTG9uZ1Byb2dyZXNzaW9uIHtcbiAgICByZXR1cm4gTG9uZ1Byb2dyZXNzaW9uLmZyb21DbG9zZWRSYW5nZSh0aGlzLCBvdGhlci50b0xvbmcoKSwgLTFMKVxufVxuICBcbmZ1biBCeXRlLmRvd25UbyhvdGhlcjogSW50KTogSW50UHJvZ3Jlc3Npb24ge1xuICAgIHJldHVybiBJbnRQcm9ncmVzc2lvbi5mcm9tQ2xvc2VkUmFuZ2UodGhpcy50b0ludCgpLCBvdGhlciwgLTEpXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/ranges.html#downto"
            ],
            "flags": 0,
            "guid": "t3ag6oWw0$",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Ranges"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Utility&nbsp;<b>Ranges&nbsp;</b>functions:&nbsp;<i>reversed()</i>",
                "<p>The <code>reversed()</code> extension functions are defined for each <code>*Progression</code> classes, and all of them return reversed<br />\nprogressions.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">IntProgression</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">reversed</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">IntProgression</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">IntProgression</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">fromClosedRange</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">last</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">first</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000; font-weight: bold\">-</span><span style=\"color: #000000\">step</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTA5OTEsICJpZCI6ICIxNDg5MjQ2NjY5MTAyLTAwMSIsICJtZCI6ICJUaGUgYHJldmVyc2VkKClgIGV4dGVuc2lvbiBmdW5jdGlvbnMgYXJlIGRlZmluZWQgZm9yIGVhY2ggYCpQcm9ncmVzc2lvbmAgY2xhc3NlcywgYW5kIGFsbCBvZiB0aGVtIHJldHVybiByZXZlcnNlZFxucHJvZ3Jlc3Npb25zLlxuICBcbmBgYGtvdGxpblxuZnVuIEludFByb2dyZXNzaW9uLnJldmVyc2VkKCk6IEludFByb2dyZXNzaW9uIHtcbiAgICByZXR1cm4gSW50UHJvZ3Jlc3Npb24uZnJvbUNsb3NlZFJhbmdlKGxhc3QsIGZpcnN0LCAtc3RlcClcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/ranges.html#reversed"
            ],
            "flags": 0,
            "guid": "Ja$)7>-Yb%",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Ranges"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Utility&nbsp;<b>Ranges&nbsp;</b>functions:&nbsp;<i>step()</i>",
                "<p><code>step()</code> extension functions are defined for <code>*Progression</code> classes, all of them return progressions with modified <code>step</code> values (function parameter).<br />\nThe step value is required to be always positive, therefore this function never changes the direction of iteration.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">IntProgression</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">step</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">step</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">IntProgression</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">step</span> <span style=\"color: #000000; font-weight: bold\">&lt;=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IllegalArgumentException</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Step must be positive, was: $step\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">IntProgression</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">fromClosedRange</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">first</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">last</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">step</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">step</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-</span><span style=\"color: #000000\">step</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">CharProgression</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">step</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">step</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">CharProgression</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">step</span> <span style=\"color: #000000; font-weight: bold\">&lt;=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IllegalArgumentException</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Step must be positive, was: $step\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">CharProgression</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">fromClosedRange</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">first</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">last</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">step</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000\">step</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-</span><span style=\"color: #000000\">step</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Note that the <code>last</code> value of the returned progression may become different from the <code>last</code> value of the original progression in order to preserve the invariant <code>(last - first) % step == 0</code>. Here is an example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">12</span> <span style=\"color: #000000\">step</span> <span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">last</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">11</span>  <span style=\"color: #8f5902; font-style: italic\">// progression with values [1, 3, 5, 7, 9, 11]</span>\n<span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">12</span> <span style=\"color: #000000\">step</span> <span style=\"color: #0000cf; font-weight: bold\">3</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">last</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">10</span>  <span style=\"color: #8f5902; font-style: italic\">// progression with values [1, 4, 7, 10]</span>\n<span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">12</span> <span style=\"color: #000000\">step</span> <span style=\"color: #0000cf; font-weight: bold\">4</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">last</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #0000cf; font-weight: bold\">9</span>   <span style=\"color: #8f5902; font-style: italic\">// progression with values [1, 5, 9]</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTEwMTIsICJpZCI6ICIxNDg5MjQ2Njk1ODM5LTAwMSIsICJtZCI6ICJgc3RlcCgpYCBleHRlbnNpb24gZnVuY3Rpb25zIGFyZSBkZWZpbmVkIGZvciBgKlByb2dyZXNzaW9uYCBjbGFzc2VzLCBhbGwgb2YgdGhlbSByZXR1cm4gcHJvZ3Jlc3Npb25zIHdpdGggbW9kaWZpZWQgYHN0ZXBgIHZhbHVlcyAoZnVuY3Rpb24gcGFyYW1ldGVyKS5cblRoZSBzdGVwIHZhbHVlIGlzIHJlcXVpcmVkIHRvIGJlIGFsd2F5cyBwb3NpdGl2ZSwgdGhlcmVmb3JlIHRoaXMgZnVuY3Rpb24gbmV2ZXIgY2hhbmdlcyB0aGUgZGlyZWN0aW9uIG9mIGl0ZXJhdGlvbi5cbiAgXG5gYGBrb3RsaW5cbmZ1biBJbnRQcm9ncmVzc2lvbi5zdGVwKHN0ZXA6IEludCk6IEludFByb2dyZXNzaW9uIHtcbiAgICBpZiAoc3RlcCAmbHQ7PSAwKSB0aHJvdyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oJnF1b3Q7U3RlcCBtdXN0IGJlIHBvc2l0aXZlLCB3YXM6ICRzdGVwJnF1b3Q7KVxuICAgIHJldHVybiBJbnRQcm9ncmVzc2lvbi5mcm9tQ2xvc2VkUmFuZ2UoZmlyc3QsIGxhc3QsIGlmICh0aGlzLnN0ZXAgJmd0OyAwKSBzdGVwIGVsc2UgLXN0ZXApXG59XG4gIFxuZnVuIENoYXJQcm9ncmVzc2lvbi5zdGVwKHN0ZXA6IEludCk6IENoYXJQcm9ncmVzc2lvbiB7XG4gICAgaWYgKHN0ZXAgJmx0Oz0gMCkgdGhyb3cgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCZxdW90O1N0ZXAgbXVzdCBiZSBwb3NpdGl2ZSwgd2FzOiAkc3RlcCZxdW90OylcbiAgICByZXR1cm4gQ2hhclByb2dyZXNzaW9uLmZyb21DbG9zZWRSYW5nZShmaXJzdCwgbGFzdCwgaWYgKHRoaXMuc3RlcCAmZ3Q7IDApIHN0ZXAgZWxzZSAtc3RlcClcbn1cbmBgYFxuICBcbk5vdGUgdGhhdCB0aGUgYGxhc3RgIHZhbHVlIG9mIHRoZSByZXR1cm5lZCBwcm9ncmVzc2lvbiBtYXkgYmVjb21lIGRpZmZlcmVudCBmcm9tIHRoZSBgbGFzdGAgdmFsdWUgb2YgdGhlIG9yaWdpbmFsIHByb2dyZXNzaW9uIGluIG9yZGVyIHRvIHByZXNlcnZlIHRoZSBpbnZhcmlhbnQgYChsYXN0IC0gZmlyc3QpICUgc3RlcCA9PSAwYC4gSGVyZSBpcyBhbiBleGFtcGxlOlxuICBcbmBgYGtvdGxpblxuKDEuLjEyIHN0ZXAgMikubGFzdCA9PSAxMSAgLy8gcHJvZ3Jlc3Npb24gd2l0aCB2YWx1ZXMgWzEsIDMsIDUsIDcsIDksIDExXVxuKDEuLjEyIHN0ZXAgMykubGFzdCA9PSAxMCAgLy8gcHJvZ3Jlc3Npb24gd2l0aCB2YWx1ZXMgWzEsIDQsIDcsIDEwXVxuKDEuLjEyIHN0ZXAgNCkubGFzdCA9PSA5ICAgLy8gcHJvZ3Jlc3Npb24gd2l0aCB2YWx1ZXMgWzEsIDUsIDldXG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/ranges.html#step"
            ],
            "flags": 0,
            "guid": "A9cJu~J0T",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Ranges"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The <b>Nothing</b> type",
                "<p><code>throw</code> is an expression in Kotlin, so you can use it, for example, as part of an Elvis expression:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">s</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">person</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IllegalArgumentException</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Name required\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>The type of the <code>throw</code> expression is the special type <code>Nothing</code>.<br />\nThe type has no values and is used to mark code locations that can never be reached.<br />\nIn your own code, you can use <code>Nothing</code> to mark a function that never returns:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">fail</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">message</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Nothing</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IllegalArgumentException</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">message</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>When you call this function, the compiler will know that the execution doesn't continue beyond the call:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">s</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">person</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #000000\">fail</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Name required\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">s</span><span style=\"color: #000000; font-weight: bold\">)</span>     <span style=\"color: #8f5902; font-style: italic\">// 's' is known to be initialized at this point</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTIxMzQsICJpZCI6ICIxNDg5MjUwMzkyMjEwLTAwMSIsICJtZCI6ICJgdGhyb3dgIGlzIGFuIGV4cHJlc3Npb24gaW4gS290bGluLCBzbyB5b3UgY2FuIHVzZSBpdCwgZm9yIGV4YW1wbGUsIGFzIHBhcnQgb2YgYW4gRWx2aXMgZXhwcmVzc2lvbjpcbiAgXG5gYGBrb3RsaW5cbnZhbCBzID0gcGVyc29uLm5hbWUgPzogdGhyb3cgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCZxdW90O05hbWUgcmVxdWlyZWQmcXVvdDspXG5gYGBcbiAgXG5UaGUgdHlwZSBvZiB0aGUgYHRocm93YCBleHByZXNzaW9uIGlzIHRoZSBzcGVjaWFsIHR5cGUgYE5vdGhpbmdgLlxuVGhlIHR5cGUgaGFzIG5vIHZhbHVlcyBhbmQgaXMgdXNlZCB0byBtYXJrIGNvZGUgbG9jYXRpb25zIHRoYXQgY2FuIG5ldmVyIGJlIHJlYWNoZWQuXG5JbiB5b3VyIG93biBjb2RlLCB5b3UgY2FuIHVzZSBgTm90aGluZ2AgdG8gbWFyayBhIGZ1bmN0aW9uIHRoYXQgbmV2ZXIgcmV0dXJuczpcbiAgXG5gYGBrb3RsaW5cbmZ1biBmYWlsKG1lc3NhZ2U6IFN0cmluZyk6IE5vdGhpbmcge1xuICAgIHRocm93IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbihtZXNzYWdlKVxufVxuYGBgXG4gIFxuV2hlbiB5b3UgY2FsbCB0aGlzIGZ1bmN0aW9uLCB0aGUgY29tcGlsZXIgd2lsbCBrbm93IHRoYXQgdGhlIGV4ZWN1dGlvbiBkb2VzbiZhcG9zO3QgY29udGludWUgYmV5b25kIHRoZSBjYWxsOlxuICBcbmBgYGtvdGxpblxudmFsIHMgPSBwZXJzb24ubmFtZSA/OiBmYWlsKCZxdW90O05hbWUgcmVxdWlyZWQmcXVvdDspXG5wcmludGxuKHMpICAgICAvLyAmYXBvcztzJmFwb3M7IGlzIGtub3duIHRvIGJlIGluaXRpYWxpemVkIGF0IHRoaXMgcG9pbnRcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/exceptions.html#the-nothing-type"
            ],
            "flags": 0,
            "guid": "d^iiNXsK*_",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Exceptions",
                "Kotlin_1.1",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Reflection</b>:&nbsp;Bound Class References (<i>since 1.1</i>)",
                "<p>You can get the reference to a class of a specific object with the same <code>::class</code> syntax by using the object as a receiver:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">widget</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Widget</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n<span style=\"color: #000000\">assert</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">widget</span> <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">GoodWidget</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #4e9a06\">\"Bad widget: ${widget::class.qualifiedName}\"</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>You obtain the reference to an exact class of an object, for instance <code>GoodWidget</code> or <code>BadWidget</code>, despite the type of the receiver expression (<code>Widget</code>). </p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTI1ODEsICJpZCI6ICIxNDg5MjUwNzUyMjAzLTAwMSIsICJtZCI6ICJZb3UgY2FuIGdldCB0aGUgcmVmZXJlbmNlIHRvIGEgY2xhc3Mgb2YgYSBzcGVjaWZpYyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgOjpjbGFzc2Agc3ludGF4IGJ5IHVzaW5nIHRoZSBvYmplY3QgYXMgYSByZWNlaXZlcjpcbiAgXG5gYGBrb3RsaW5cbnZhbCB3aWRnZXQ6IFdpZGdldCA9IC4uLlxuYXNzZXJ0KHdpZGdldCBpcyBHb29kV2lkZ2V0KSB7ICZxdW90O0JhZCB3aWRnZXQ6ICR7d2lkZ2V0OjpjbGFzcy5xdWFsaWZpZWROYW1lfSZxdW90OyB9XG5gYGBcbiAgXG5Zb3Ugb2J0YWluIHRoZSByZWZlcmVuY2UgdG8gYW4gZXhhY3QgY2xhc3Mgb2YgYW4gb2JqZWN0LCBmb3IgaW5zdGFuY2UgYEdvb2RXaWRnZXRgIG9yIGBCYWRXaWRnZXRgLCBkZXNwaXRlIHRoZSB0eXBlIG9mIHRoZSByZWNlaXZlciBleHByZXNzaW9uIChgV2lkZ2V0YCkuIFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/reflection.html#bound-class-references-since-11"
            ],
            "flags": 0,
            "guid": "qsv:hw:*Jz",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Reflection"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Reflection:</b>&nbsp;Example: Function Composition",
                "<p>Consider the following function:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">B</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">C</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">compose</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">B</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">C</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">g</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">B</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">C</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">x</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">g</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>It returns a composition of two functions passed to it: <code>compose(f, g) = f(g(*))</code>.<br />\nNow, you can apply it to callable references:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">length</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">s</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">s</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">oddLength</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">compose</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">isOdd</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">length</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">strings</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"ab\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"abc\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">strings</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">oddLength</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #8f5902; font-style: italic\">// Prints \"[a, abc]\"</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTI2NDMsICJpZCI6ICIxNDg5MjUwOTgwMzAxLTAwMSIsICJtZCI6ICJDb25zaWRlciB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uOlxuICBcbmBgYGtvdGxpblxuZnVuICZsdDtBLCBCLCBDJmd0OyBjb21wb3NlKGY6IChCKSAtJmd0OyBDLCBnOiAoQSkgLSZndDsgQik6IChBKSAtJmd0OyBDIHtcbiAgICByZXR1cm4geyB4IC0mZ3Q7IGYoZyh4KSkgfVxufVxuYGBgXG4gIFxuSXQgcmV0dXJucyBhIGNvbXBvc2l0aW9uIG9mIHR3byBmdW5jdGlvbnMgcGFzc2VkIHRvIGl0OiBgY29tcG9zZShmLCBnKSA9IGYoZygqKSlgLlxuTm93LCB5b3UgY2FuIGFwcGx5IGl0IHRvIGNhbGxhYmxlIHJlZmVyZW5jZXM6XG4gIFxuICBcbmBgYGtvdGxpblxuZnVuIGxlbmd0aChzOiBTdHJpbmcpID0gcy5sZW5ndGhcbiAgXG52YWwgb2RkTGVuZ3RoID0gY29tcG9zZSg6OmlzT2RkLCA6Omxlbmd0aClcbnZhbCBzdHJpbmdzID0gbGlzdE9mKCZxdW90O2EmcXVvdDssICZxdW90O2FiJnF1b3Q7LCAmcXVvdDthYmMmcXVvdDspXG4gIFxucHJpbnRsbihzdHJpbmdzLmZpbHRlcihvZGRMZW5ndGgpKSAvLyBQcmludHMgJnF1b3Q7W2EsIGFiY10mcXVvdDtcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/reflection.html#example-function-composition"
            ],
            "flags": 0,
            "guid": "CiM[l0[[{.",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Reflection"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Reflection:</b>&nbsp;<u>Bound Function</u> and <u>Property References</u> (<i>since 1.1</i>)",
                "<p>You can refer to an instance method of a particular object.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">numberRegex</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"\\\\d+\"</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toRegex</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">numberRegex</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">matches</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"29\"</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"true\"</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">isNumber</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">numberRegex</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">matches</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">isNumber</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"29\"</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"true\"</span>\n</pre></div>\n<p>Instead of calling the method <code>matches</code> directly we are storing a reference to it.<br />\nSuch reference is bound to its receiver.<br />\nIt can be called directly (like in the example above) or used whenever an expression of function type is expected:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">strings</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"abc\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"124\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"a70\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">strings</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">numberRegex</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">matches</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"[124]\"</span>\n</pre></div>\n<p>Compare the types of bound and the corresponding unbound references.<br />\nBound callable reference has its receiver \"attached\" to it, so the type of the receiver is no longer a parameter:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">isNumber</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">CharSequence</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Boolean</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">numberRegex</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">matches</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">matches</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Regex</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">CharSequence</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Boolean</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Regex</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">matches</span>\n</pre></div>\n<p>Property reference can be bound as well:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">prop</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"abc\"</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">length</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">())</span>   <span style=\"color: #8f5902; font-style: italic\">// prints \"3\"</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTI3ODAsICJpZCI6ICIxNDg5MjUxMTQwODQ4LTAwMSIsICJtZCI6ICJZb3UgY2FuIHJlZmVyIHRvIGFuIGluc3RhbmNlIG1ldGhvZCBvZiBhIHBhcnRpY3VsYXIgb2JqZWN0LlxuICBcbmBgYGtvdGxpbiBcbnZhbCBudW1iZXJSZWdleCA9ICZxdW90O1xcXFxkKyZxdW90Oy50b1JlZ2V4KClcbnByaW50bG4obnVtYmVyUmVnZXgubWF0Y2hlcygmcXVvdDsyOSZxdW90OykpIC8vIHByaW50cyAmcXVvdDt0cnVlJnF1b3Q7XG4gXG52YWwgaXNOdW1iZXIgPSBudW1iZXJSZWdleDo6bWF0Y2hlc1xucHJpbnRsbihpc051bWJlcigmcXVvdDsyOSZxdW90OykpIC8vIHByaW50cyAmcXVvdDt0cnVlJnF1b3Q7XG5gYGBcbiAgXG5JbnN0ZWFkIG9mIGNhbGxpbmcgdGhlIG1ldGhvZCBgbWF0Y2hlc2AgZGlyZWN0bHkgd2UgYXJlIHN0b3JpbmcgYSByZWZlcmVuY2UgdG8gaXQuXG5TdWNoIHJlZmVyZW5jZSBpcyBib3VuZCB0byBpdHMgcmVjZWl2ZXIuXG5JdCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IChsaWtlIGluIHRoZSBleGFtcGxlIGFib3ZlKSBvciB1c2VkIHdoZW5ldmVyIGFuIGV4cHJlc3Npb24gb2YgZnVuY3Rpb24gdHlwZSBpcyBleHBlY3RlZDpcbiAgXG5gYGBrb3RsaW5cbnZhbCBzdHJpbmdzID0gbGlzdE9mKCZxdW90O2FiYyZxdW90OywgJnF1b3Q7MTI0JnF1b3Q7LCAmcXVvdDthNzAmcXVvdDspXG5wcmludGxuKHN0cmluZ3MuZmlsdGVyKG51bWJlclJlZ2V4OjptYXRjaGVzKSkgLy8gcHJpbnRzICZxdW90O1sxMjRdJnF1b3Q7XG5gYGBcbiAgXG5Db21wYXJlIHRoZSB0eXBlcyBvZiBib3VuZCBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgdW5ib3VuZCByZWZlcmVuY2VzLlxuQm91bmQgY2FsbGFibGUgcmVmZXJlbmNlIGhhcyBpdHMgcmVjZWl2ZXIgJnF1b3Q7YXR0YWNoZWQmcXVvdDsgdG8gaXQsIHNvIHRoZSB0eXBlIG9mIHRoZSByZWNlaXZlciBpcyBubyBsb25nZXIgYSBwYXJhbWV0ZXI6XG4gIFxuYGBga290bGluXG52YWwgaXNOdW1iZXI6IChDaGFyU2VxdWVuY2UpIC0mZ3Q7IEJvb2xlYW4gPSBudW1iZXJSZWdleDo6bWF0Y2hlc1xuICBcbnZhbCBtYXRjaGVzOiAoUmVnZXgsIENoYXJTZXF1ZW5jZSkgLSZndDsgQm9vbGVhbiA9IFJlZ2V4OjptYXRjaGVzXG5gYGBcbiAgXG5Qcm9wZXJ0eSByZWZlcmVuY2UgY2FuIGJlIGJvdW5kIGFzIHdlbGw6XG4gIFxuYGBga290bGluXG52YWwgcHJvcCA9ICZxdW90O2FiYyZxdW90Ozo6bGVuZ3RoXG5wcmludGxuKHByb3AuZ2V0KCkpICAgLy8gcHJpbnRzICZxdW90OzMmcXVvdDtcbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/reflection.html#bound-function-and-property-references-since-11"
            ],
            "flags": 0,
            "guid": "h6OycEIq,Y",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "Reflection"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Type-Safe&nbsp;<b>Builders:</b>&nbsp;A type-safe builder <u>example</u>",
                "<p>Consider the following code:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">import</span> <span style=\"color: #000000\">com.example.html.*</span> <span style=\"color: #8f5902; font-style: italic\">// see declarations below</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">result</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">=</span>\n    <span style=\"color: #000000\">html</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">head</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">title</span> <span style=\"color: #000000; font-weight: bold\">{+</span><span style=\"color: #4e9a06\">\"XML encoding with Kotlin\"</span><span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #000000\">body</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">h1</span> <span style=\"color: #000000; font-weight: bold\">{+</span><span style=\"color: #4e9a06\">\"XML encoding with Kotlin\"</span><span style=\"color: #000000; font-weight: bold\">}</span>\n            <span style=\"color: #000000\">p</span>  <span style=\"color: #000000; font-weight: bold\">{+</span><span style=\"color: #4e9a06\">\"this format can be used as an alternative markup to XML\"</span><span style=\"color: #000000; font-weight: bold\">}</span>\n\n            <span style=\"color: #8f5902; font-style: italic\">// an element with attributes and text content</span>\n            <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">href</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"http://kotlinlang.org\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{+</span><span style=\"color: #4e9a06\">\"Kotlin\"</span><span style=\"color: #000000; font-weight: bold\">}</span>\n\n            <span style=\"color: #8f5902; font-style: italic\">// mixed content</span>\n            <span style=\"color: #000000\">p</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n                <span style=\"color: #000000; font-weight: bold\">+</span><span style=\"color: #4e9a06\">\"This is some\"</span>\n                <span style=\"color: #000000\">b</span> <span style=\"color: #000000; font-weight: bold\">{+</span><span style=\"color: #4e9a06\">\"mixed\"</span><span style=\"color: #000000; font-weight: bold\">}</span>\n                <span style=\"color: #000000; font-weight: bold\">+</span><span style=\"color: #4e9a06\">\"text. For more see the\"</span>\n                <span style=\"color: #000000\">a</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">href</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"http://kotlinlang.org\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{+</span><span style=\"color: #4e9a06\">\"Kotlin\"</span><span style=\"color: #000000; font-weight: bold\">}</span>\n                <span style=\"color: #000000; font-weight: bold\">+</span><span style=\"color: #4e9a06\">\"project\"</span>\n            <span style=\"color: #000000; font-weight: bold\">}</span>\n            <span style=\"color: #000000\">p</span> <span style=\"color: #000000; font-weight: bold\">{+</span><span style=\"color: #4e9a06\">\"some text\"</span><span style=\"color: #000000; font-weight: bold\">}</span>\n\n            <span style=\"color: #8f5902; font-style: italic\">// content generated by</span>\n            <span style=\"color: #000000\">p</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n                <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">arg</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">)</span>\n                    <span style=\"color: #000000; font-weight: bold\">+</span><span style=\"color: #000000\">arg</span>\n            <span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>This is completely legitimate Kotlin code.</p>\n<h2>How it works</h2>\n<p>Let's walk through the mechanisms of implementing type-safe builders in Kotlin.<br />\nFirst of all we need to define the model we want to build, in this case we need to model HTML tags.<br />\nIt is easily done with a bunch of classes.<br />\nFor example, <code>HTML</code> is a class that describes the <code>&lt;html&gt;</code> tag, i.e. it defines children like <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code>.</p>\n<p>Now, let's recall why we can say something like this in the code:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">html</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p><code>html</code> is actually a function call that takes a <a href=\"lambdas.html\">lambda expression</a> as an argument.<br />\nThis function is defined as follows:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">html</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">HTML</span><span style=\"color: #000000; font-weight: bold\">.()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">HTML</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">html</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">HTML</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000\">html</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">html</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>This function takes one parameter named <code>init</code>, which is itself a function.<br />\nThe type of the function is <code>HTML.() -&gt; Unit</code>, which is a <em>function type with receiver</em>.<br />\nThis means that we need to pass an instance of type <code>HTML</code> (a <em>receiver</em>) to the function, and we can call members of that instance inside the function.<br />\nThe receiver can be accessed through the <em class=\"keyword\">this</em> keyword:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">html</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">head</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">/* ... */</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">body</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">/* ... */</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>(<code>head</code> and <code>body</code> are member functions of <code>HTML</code>.)</p>\n<p>Now, <em class=\"keyword\">this</em> can be omitted, as usual, and we get something that looks very much like a builder already:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">html</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">head</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">/* ... */</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000\">body</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #8f5902; font-style: italic\">/* ... */</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>So, what does this call do? Let's look at the body of <code>html</code> function as defined above.<br />\nIt creates a new instance of <code>HTML</code>, then it initializes it by calling the function that is passed as an argument (in our example this boils down to calling <code>head</code> and <code>body</code> on the <code>HTML</code> instance), and then it returns this instance. <br />\nThis is exactly what a builder should do.</p>\n<p>The <code>head</code> and <code>body</code> functions in the <code>HTML</code> class are defined similarly to <code>html</code>. <br />\nThe only difference is that they add the built instances to the <code>children</code> collection of the enclosing <code>HTML</code> instance:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">head</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Head</span><span style=\"color: #000000; font-weight: bold\">.()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Head</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">head</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Head</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000\">head</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000\">children</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">head</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">head</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">body</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Body</span><span style=\"color: #000000; font-weight: bold\">.()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Body</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">body</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Body</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000\">body</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000\">children</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">body</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">body</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Actually these two functions do just the same thing, so we can have a generic version, <code>initTag</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">protected</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Element</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">initTag</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">tag</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">.()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">tag</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000\">children</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">tag</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">tag</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>So, now our functions are very simple:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">head</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Head</span><span style=\"color: #000000; font-weight: bold\">.()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">initTag</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Head</span><span style=\"color: #000000; font-weight: bold\">(),</span> <span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">body</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Body</span><span style=\"color: #000000; font-weight: bold\">.()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">initTag</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Body</span><span style=\"color: #000000; font-weight: bold\">(),</span> <span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>And we can use them to build <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code> tags. </p>\n<p>One other thing to be discussed here is how we add text to tag bodies. In the example above we say something like</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">html</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">head</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">title</span> <span style=\"color: #000000; font-weight: bold\">{+</span><span style=\"color: #4e9a06\">\"XML encoding with Kotlin\"</span><span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>So basically, we just put a string inside a tag body, but there is this little <code>+</code> in front of it, so it is a function call that invokes a prefix <code>unaryPlus()</code> operation.<br />\nThat operation is actually defined by an extension function <code>unaryPlus()</code> that is a member of the <code>TagWithText</code> abstract class (a parent of <code>Title</code>):</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">unaryPlus</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">children</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">TextElement</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">))</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>So, what the prefix <code>+</code> does here is it wraps a string into an instance of <code>TextElement</code> and adds it to the <code>children</code> collection, so that it becomes a proper part of the tag tree.</p>\n<p>All this is defined in a package <code>com.example.html</code> that is imported at the top of the builder example above.<br />\nIn the last section you can read through the full definition of this package.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYyNDc1NzgsICJpZCI6ICIxNDg5MjUxMjYyNTc4LTAwMSIsICJtZCI6ICJDb25zaWRlciB0aGUgZm9sbG93aW5nIGNvZGU6XG4gIFxuYGBga290bGluXG5pbXBvcnQgY29tLmV4YW1wbGUuaHRtbC4qIC8vIHNlZSBkZWNsYXJhdGlvbnMgYmVsb3dcbiAgXG5mdW4gcmVzdWx0KGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspID1cbiAgICBodG1sIHtcbiAgICAgICAgaGVhZCB7XG4gICAgICAgICAgICB0aXRsZSB7KyZxdW90O1hNTCBlbmNvZGluZyB3aXRoIEtvdGxpbiZxdW90O31cbiAgICAgICAgfVxuICAgICAgICBib2R5IHtcbiAgICAgICAgICAgIGgxIHsrJnF1b3Q7WE1MIGVuY29kaW5nIHdpdGggS290bGluJnF1b3Q7fVxuICAgICAgICAgICAgcCAgeysmcXVvdDt0aGlzIGZvcm1hdCBjYW4gYmUgdXNlZCBhcyBhbiBhbHRlcm5hdGl2ZSBtYXJrdXAgdG8gWE1MJnF1b3Q7fVxuICBcbiAgICAgICAgICAgIC8vIGFuIGVsZW1lbnQgd2l0aCBhdHRyaWJ1dGVzIGFuZCB0ZXh0IGNvbnRlbnRcbiAgICAgICAgICAgIGEoaHJlZiA9ICZxdW90O2h0dHA6Ly9rb3RsaW5sYW5nLm9yZyZxdW90OykgeysmcXVvdDtLb3RsaW4mcXVvdDt9XG4gIFxuICAgICAgICAgICAgLy8gbWl4ZWQgY29udGVudFxuICAgICAgICAgICAgcCB7XG4gICAgICAgICAgICAgICAgKyZxdW90O1RoaXMgaXMgc29tZSZxdW90O1xuICAgICAgICAgICAgICAgIGIgeysmcXVvdDttaXhlZCZxdW90O31cbiAgICAgICAgICAgICAgICArJnF1b3Q7dGV4dC4gRm9yIG1vcmUgc2VlIHRoZSZxdW90O1xuICAgICAgICAgICAgICAgIGEoaHJlZiA9ICZxdW90O2h0dHA6Ly9rb3RsaW5sYW5nLm9yZyZxdW90OykgeysmcXVvdDtLb3RsaW4mcXVvdDt9XG4gICAgICAgICAgICAgICAgKyZxdW90O3Byb2plY3QmcXVvdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAgeysmcXVvdDtzb21lIHRleHQmcXVvdDt9XG4gIFxuICAgICAgICAgICAgLy8gY29udGVudCBnZW5lcmF0ZWQgYnlcbiAgICAgICAgICAgIHAge1xuICAgICAgICAgICAgICAgIGZvciAoYXJnIGluIGFyZ3MpXG4gICAgICAgICAgICAgICAgICAgICthcmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbmBgYFxuICBcblRoaXMgaXMgY29tcGxldGVseSBsZWdpdGltYXRlIEtvdGxpbiBjb2RlLlxuICBcbiMjIEhvdyBpdCB3b3Jrc1xuICBcbkxldCZhcG9zO3Mgd2FsayB0aHJvdWdoIHRoZSBtZWNoYW5pc21zIG9mIGltcGxlbWVudGluZyB0eXBlLXNhZmUgYnVpbGRlcnMgaW4gS290bGluLlxuRmlyc3Qgb2YgYWxsIHdlIG5lZWQgdG8gZGVmaW5lIHRoZSBtb2RlbCB3ZSB3YW50IHRvIGJ1aWxkLCBpbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBtb2RlbCBIVE1MIHRhZ3MuXG5JdCBpcyBlYXNpbHkgZG9uZSB3aXRoIGEgYnVuY2ggb2YgY2xhc3Nlcy5cbkZvciBleGFtcGxlLCBgSFRNTGAgaXMgYSBjbGFzcyB0aGF0IGRlc2NyaWJlcyB0aGUgYCZsdDtodG1sJmd0O2AgdGFnLCBpLmUuIGl0IGRlZmluZXMgY2hpbGRyZW4gbGlrZSBgJmx0O2hlYWQmZ3Q7YCBhbmQgYCZsdDtib2R5Jmd0O2AuXG4gIFxuTm93LCBsZXQmYXBvcztzIHJlY2FsbCB3aHkgd2UgY2FuIHNheSBzb21ldGhpbmcgbGlrZSB0aGlzIGluIHRoZSBjb2RlOlxuICBcbmBgYGtvdGxpblxuaHRtbCB7XG4gLy8gLi4uXG59XG5gYGBcbiAgXG5gaHRtbGAgaXMgYWN0dWFsbHkgYSBmdW5jdGlvbiBjYWxsIHRoYXQgdGFrZXMgYSBbbGFtYmRhIGV4cHJlc3Npb25dKGxhbWJkYXMuaHRtbCkgYXMgYW4gYXJndW1lbnQuXG5UaGlzIGZ1bmN0aW9uIGlzIGRlZmluZWQgYXMgZm9sbG93czpcbiAgXG5gYGBrb3RsaW5cbmZ1biBodG1sKGluaXQ6IEhUTUwuKCkgLSZndDsgVW5pdCk6IEhUTUwge1xuICAgIHZhbCBodG1sID0gSFRNTCgpXG4gICAgaHRtbC5pbml0KClcbiAgICByZXR1cm4gaHRtbFxufVxuYGBgXG4gIFxuVGhpcyBmdW5jdGlvbiB0YWtlcyBvbmUgcGFyYW1ldGVyIG5hbWVkIGBpbml0YCwgd2hpY2ggaXMgaXRzZWxmIGEgZnVuY3Rpb24uXG5UaGUgdHlwZSBvZiB0aGUgZnVuY3Rpb24gaXMgYEhUTUwuKCkgLSZndDsgVW5pdGAsIHdoaWNoIGlzIGEgX2Z1bmN0aW9uIHR5cGUgd2l0aCByZWNlaXZlcl8uXG5UaGlzIG1lYW5zIHRoYXQgd2UgbmVlZCB0byBwYXNzIGFuIGluc3RhbmNlIG9mIHR5cGUgYEhUTUxgIChhIF9yZWNlaXZlcl8pIHRvIHRoZSBmdW5jdGlvbiwgYW5kIHdlIGNhbiBjYWxsIG1lbWJlcnMgb2YgdGhhdCBpbnN0YW5jZSBpbnNpZGUgdGhlIGZ1bmN0aW9uLlxuVGhlIHJlY2VpdmVyIGNhbiBiZSBhY2Nlc3NlZCB0aHJvdWdoIHRoZSAqdGhpcyp7OiAua2V5d29yZCB9IGtleXdvcmQ6XG4gIFxuYGBga290bGluXG5odG1sIHtcbiAgICB0aGlzLmhlYWQgeyAvKiAuLi4gKi8gfVxuICAgIHRoaXMuYm9keSB7IC8qIC4uLiAqLyB9XG59XG5gYGBcbiAgXG4oYGhlYWRgIGFuZCBgYm9keWAgYXJlIG1lbWJlciBmdW5jdGlvbnMgb2YgYEhUTUxgLilcbiAgXG5Ob3csICp0aGlzKns6IC5rZXl3b3JkIH0gY2FuIGJlIG9taXR0ZWQsIGFzIHVzdWFsLCBhbmQgd2UgZ2V0IHNvbWV0aGluZyB0aGF0IGxvb2tzIHZlcnkgbXVjaCBsaWtlIGEgYnVpbGRlciBhbHJlYWR5OlxuICBcbmBgYGtvdGxpblxuaHRtbCB7XG4gICAgaGVhZCB7IC8qIC4uLiAqLyB9XG4gICAgYm9keSB7IC8qIC4uLiAqLyB9XG59XG5gYGBcbiAgXG5Tbywgd2hhdCBkb2VzIHRoaXMgY2FsbCBkbz8gTGV0JmFwb3M7cyBsb29rIGF0IHRoZSBib2R5IG9mIGBodG1sYCBmdW5jdGlvbiBhcyBkZWZpbmVkIGFib3ZlLlxuSXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBgSFRNTGAsIHRoZW4gaXQgaW5pdGlhbGl6ZXMgaXQgYnkgY2FsbGluZyB0aGUgZnVuY3Rpb24gdGhhdCBpcyBwYXNzZWQgYXMgYW4gYXJndW1lbnQgKGluIG91ciBleGFtcGxlIHRoaXMgYm9pbHMgZG93biB0byBjYWxsaW5nIGBoZWFkYCBhbmQgYGJvZHlgIG9uIHRoZSBgSFRNTGAgaW5zdGFuY2UpLCBhbmQgdGhlbiBpdCByZXR1cm5zIHRoaXMgaW5zdGFuY2UuIFxuVGhpcyBpcyBleGFjdGx5IHdoYXQgYSBidWlsZGVyIHNob3VsZCBkby5cbiAgXG5UaGUgYGhlYWRgIGFuZCBgYm9keWAgZnVuY3Rpb25zIGluIHRoZSBgSFRNTGAgY2xhc3MgYXJlIGRlZmluZWQgc2ltaWxhcmx5IHRvIGBodG1sYC4gXG5UaGUgb25seSBkaWZmZXJlbmNlIGlzIHRoYXQgdGhleSBhZGQgdGhlIGJ1aWx0IGluc3RhbmNlcyB0byB0aGUgYGNoaWxkcmVuYCBjb2xsZWN0aW9uIG9mIHRoZSBlbmNsb3NpbmcgYEhUTUxgIGluc3RhbmNlOlxuICBcbmBgYGtvdGxpblxuZnVuIGhlYWQoaW5pdDogSGVhZC4oKSAtJmd0OyBVbml0KSA6IEhlYWQge1xuICAgIHZhbCBoZWFkID0gSGVhZCgpXG4gICAgaGVhZC5pbml0KClcbiAgICBjaGlsZHJlbi5hZGQoaGVhZClcbiAgICByZXR1cm4gaGVhZFxufVxuICBcbmZ1biBib2R5KGluaXQ6IEJvZHkuKCkgLSZndDsgVW5pdCkgOiBCb2R5IHtcbiAgICB2YWwgYm9keSA9IEJvZHkoKVxuICAgIGJvZHkuaW5pdCgpXG4gICAgY2hpbGRyZW4uYWRkKGJvZHkpXG4gICAgcmV0dXJuIGJvZHlcbn1cbmBgYFxuICBcbkFjdHVhbGx5IHRoZXNlIHR3byBmdW5jdGlvbnMgZG8ganVzdCB0aGUgc2FtZSB0aGluZywgc28gd2UgY2FuIGhhdmUgYSBnZW5lcmljIHZlcnNpb24sIGBpbml0VGFnYDpcbiAgXG5gYGBrb3RsaW5cbnByb3RlY3RlZCBmdW4gJmx0O1QgOiBFbGVtZW50Jmd0OyBpbml0VGFnKHRhZzogVCwgaW5pdDogVC4oKSAtJmd0OyBVbml0KTogVCB7XG4gICAgdGFnLmluaXQoKVxuICAgIGNoaWxkcmVuLmFkZCh0YWcpXG4gICAgcmV0dXJuIHRhZ1xufVxuYGBgXG4gIFxuU28sIG5vdyBvdXIgZnVuY3Rpb25zIGFyZSB2ZXJ5IHNpbXBsZTpcbiAgXG5gYGBrb3RsaW5cbmZ1biBoZWFkKGluaXQ6IEhlYWQuKCkgLSZndDsgVW5pdCkgPSBpbml0VGFnKEhlYWQoKSwgaW5pdClcbiAgXG5mdW4gYm9keShpbml0OiBCb2R5LigpIC0mZ3Q7IFVuaXQpID0gaW5pdFRhZyhCb2R5KCksIGluaXQpXG5gYGBcbiAgXG5BbmQgd2UgY2FuIHVzZSB0aGVtIHRvIGJ1aWxkIGAmbHQ7aGVhZCZndDtgIGFuZCBgJmx0O2JvZHkmZ3Q7YCB0YWdzLiBcbiAgXG4gIFxuT25lIG90aGVyIHRoaW5nIHRvIGJlIGRpc2N1c3NlZCBoZXJlIGlzIGhvdyB3ZSBhZGQgdGV4dCB0byB0YWcgYm9kaWVzLiBJbiB0aGUgZXhhbXBsZSBhYm92ZSB3ZSBzYXkgc29tZXRoaW5nIGxpa2VcbiAgXG5gYGBrb3RsaW5cbmh0bWwge1xuICAgIGhlYWQge1xuICAgICAgICB0aXRsZSB7KyZxdW90O1hNTCBlbmNvZGluZyB3aXRoIEtvdGxpbiZxdW90O31cbiAgICB9XG4gICAgLy8gLi4uXG59XG5gYGBcbiAgXG5TbyBiYXNpY2FsbHksIHdlIGp1c3QgcHV0IGEgc3RyaW5nIGluc2lkZSBhIHRhZyBib2R5LCBidXQgdGhlcmUgaXMgdGhpcyBsaXR0bGUgYCtgIGluIGZyb250IG9mIGl0LCBzbyBpdCBpcyBhIGZ1bmN0aW9uIGNhbGwgdGhhdCBpbnZva2VzIGEgcHJlZml4IGB1bmFyeVBsdXMoKWAgb3BlcmF0aW9uLlxuVGhhdCBvcGVyYXRpb24gaXMgYWN0dWFsbHkgZGVmaW5lZCBieSBhbiBleHRlbnNpb24gZnVuY3Rpb24gYHVuYXJ5UGx1cygpYCB0aGF0IGlzIGEgbWVtYmVyIG9mIHRoZSBgVGFnV2l0aFRleHRgIGFic3RyYWN0IGNsYXNzIChhIHBhcmVudCBvZiBgVGl0bGVgKTpcbiAgXG5gYGBrb3RsaW5cbmZ1biBTdHJpbmcudW5hcnlQbHVzKCkge1xuICAgIGNoaWxkcmVuLmFkZChUZXh0RWxlbWVudCh0aGlzKSlcbn1cbmBgYFxuICBcblNvLCB3aGF0IHRoZSBwcmVmaXggYCtgIGRvZXMgaGVyZSBpcyBpdCB3cmFwcyBhIHN0cmluZyBpbnRvIGFuIGluc3RhbmNlIG9mIGBUZXh0RWxlbWVudGAgYW5kIGFkZHMgaXQgdG8gdGhlIGBjaGlsZHJlbmAgY29sbGVjdGlvbiwgc28gdGhhdCBpdCBiZWNvbWVzIGEgcHJvcGVyIHBhcnQgb2YgdGhlIHRhZyB0cmVlLlxuICBcbkFsbCB0aGlzIGlzIGRlZmluZWQgaW4gYSBwYWNrYWdlIGBjb20uZXhhbXBsZS5odG1sYCB0aGF0IGlzIGltcG9ydGVkIGF0IHRoZSB0b3Agb2YgdGhlIGJ1aWxkZXIgZXhhbXBsZSBhYm92ZS5cbkluIHRoZSBsYXN0IHNlY3Rpb24geW91IGNhbiByZWFkIHRocm91Z2ggdGhlIGZ1bGwgZGVmaW5pdGlvbiBvZiB0aGlzIHBhY2thZ2UuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/type-safe-builders.html#a-type-safe-builder-example"
            ],
            "flags": 0,
            "guid": "sw-Kid(54K",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "TypeSafeBuilders"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Type-Safe&nbsp;<b>Builders:</b>&nbsp;Scope control: <b>@DslMarker</b> (<i>since 1.1</i>)",
                "<p>When using DSLs, one might have come across the problem that too many functions can be called in the context. </p>\n<p>We can call methods of every available implicit receiver inside a lambda and therefore get an inconsistent result, like the tag <code>head</code> inside another <code>head</code>: </p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">html</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">head</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">head</span> <span style=\"color: #000000; font-weight: bold\">{}</span> <span style=\"color: #8f5902; font-style: italic\">// should be forbidden</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>In this example only members of the nearest implicit receiver <code>this@head</code> must be available; <code>head()</code> is a member of the outer receiver <code>this@html</code>, so it must be illegal to call it.</p>\n<p>To address this problem, in Kotlin 1.1 a special mechanism to control receiver scope was introduced.</p>\n<p>To make the compiler start controlling scopes we only have to annotate the types of all receivers used in the DSL with the same marker annotation.<br />\nFor instance, for HTML Builders we declare an annotation <code>@HTMLTagMarker</code>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">@DslMarker</span>\n<span style=\"color: #204a87; font-weight: bold\">annotation</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">HtmlTagMarker</span>\n</pre></div>\n<p>An annotation class is called a DSL marker if it is annotated with the <code>@DslMarker</code> annotation.</p>\n<p>In our DSL all the tag classes extend the same superclass <code>Tag</code>.<br />\nIt's enough to annotate only the superclass with <code>@HtmlTagMarker</code> and after that the Kotlin compiler will treat all the inherited classes as annotated:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">@HtmlTagMarker</span>\n<span style=\"color: #204a87; font-weight: bold\">abstract</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Tag</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>We don't have to annotate the <code>HTML</code> or <code>Head</code> classes with <code>@HtmlTagMarker</code> because their superclass is already annotated:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">HTML</span>() : <span style=\"color: #000000\">Tag</span>(<span style=\"color: #4e9a06\">\"html\"</span>) { ... }\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Head</span>() : <span style=\"color: #000000\">Tag</span>(<span style=\"color: #4e9a06\">\"head\"</span>) { ... }\n</pre></div>\n<p>After we've added this annotation, the Kotlin compiler knows which implicit receivers are part of the same DSL and allows to call members of the nearest receivers only: </p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">html</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">head</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">head</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #8f5902; font-style: italic\">// error: a member of outer receiver</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Note that it's still possible to call the members of the outer receiver, but to do that you have to specify this receiver explicitly:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">html</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">head</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000\">@html</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">head</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #8f5902; font-style: italic\">// possible</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTMwNTMsICJpZCI6ICIxNDg5MjUxMzk1Nzg3LTAwMSIsICJtZCI6ICJXaGVuIHVzaW5nIERTTHMsIG9uZSBtaWdodCBoYXZlIGNvbWUgYWNyb3NzIHRoZSBwcm9ibGVtIHRoYXQgdG9vIG1hbnkgZnVuY3Rpb25zIGNhbiBiZSBjYWxsZWQgaW4gdGhlIGNvbnRleHQuIFxuICBcbldlIGNhbiBjYWxsIG1ldGhvZHMgb2YgZXZlcnkgYXZhaWxhYmxlIGltcGxpY2l0IHJlY2VpdmVyIGluc2lkZSBhIGxhbWJkYSBhbmQgdGhlcmVmb3JlIGdldCBhbiBpbmNvbnNpc3RlbnQgcmVzdWx0LCBsaWtlIHRoZSB0YWcgYGhlYWRgIGluc2lkZSBhbm90aGVyIGBoZWFkYDogXG4gIFxuYGBga290bGluXG5odG1sIHtcbiAgICBoZWFkIHtcbiAgICAgICAgaGVhZCB7fSAvLyBzaG91bGQgYmUgZm9yYmlkZGVuXG4gICAgfVxuICAgIC8vIC4uLlxufVxuYGBgXG4gIFxuSW4gdGhpcyBleGFtcGxlIG9ubHkgbWVtYmVycyBvZiB0aGUgbmVhcmVzdCBpbXBsaWNpdCByZWNlaXZlciBgdGhpc0BoZWFkYCBtdXN0IGJlIGF2YWlsYWJsZTsgYGhlYWQoKWAgaXMgYSBtZW1iZXIgb2YgdGhlIG91dGVyIHJlY2VpdmVyIGB0aGlzQGh0bWxgLCBzbyBpdCBtdXN0IGJlIGlsbGVnYWwgdG8gY2FsbCBpdC5cbiAgXG5UbyBhZGRyZXNzIHRoaXMgcHJvYmxlbSwgaW4gS290bGluIDEuMSBhIHNwZWNpYWwgbWVjaGFuaXNtIHRvIGNvbnRyb2wgcmVjZWl2ZXIgc2NvcGUgd2FzIGludHJvZHVjZWQuXG4gIFxuVG8gbWFrZSB0aGUgY29tcGlsZXIgc3RhcnQgY29udHJvbGxpbmcgc2NvcGVzIHdlIG9ubHkgaGF2ZSB0byBhbm5vdGF0ZSB0aGUgdHlwZXMgb2YgYWxsIHJlY2VpdmVycyB1c2VkIGluIHRoZSBEU0wgd2l0aCB0aGUgc2FtZSBtYXJrZXIgYW5ub3RhdGlvbi5cbkZvciBpbnN0YW5jZSwgZm9yIEhUTUwgQnVpbGRlcnMgd2UgZGVjbGFyZSBhbiBhbm5vdGF0aW9uIGBASFRNTFRhZ01hcmtlcmA6XG4gXG5gYGBrb3RsaW5cbkBEc2xNYXJrZXJcbmFubm90YXRpb24gY2xhc3MgSHRtbFRhZ01hcmtlclxuYGBgXG4gIFxuQW4gYW5ub3RhdGlvbiBjbGFzcyBpcyBjYWxsZWQgYSBEU0wgbWFya2VyIGlmIGl0IGlzIGFubm90YXRlZCB3aXRoIHRoZSBgQERzbE1hcmtlcmAgYW5ub3RhdGlvbi5cbiAgXG5JbiBvdXIgRFNMIGFsbCB0aGUgdGFnIGNsYXNzZXMgZXh0ZW5kIHRoZSBzYW1lIHN1cGVyY2xhc3MgYFRhZ2AuXG5JdCZhcG9zO3MgZW5vdWdoIHRvIGFubm90YXRlIG9ubHkgdGhlIHN1cGVyY2xhc3Mgd2l0aCBgQEh0bWxUYWdNYXJrZXJgIGFuZCBhZnRlciB0aGF0IHRoZSBLb3RsaW4gY29tcGlsZXIgd2lsbCB0cmVhdCBhbGwgdGhlIGluaGVyaXRlZCBjbGFzc2VzIGFzIGFubm90YXRlZDpcbiAgXG5gYGBrb3RsaW5cbkBIdG1sVGFnTWFya2VyXG5hYnN0cmFjdCBjbGFzcyBUYWcodmFsIG5hbWU6IFN0cmluZykgeyAuLi4gfVxuYGBgXG4gIFxuV2UgZG9uJmFwb3M7dCBoYXZlIHRvIGFubm90YXRlIHRoZSBgSFRNTGAgb3IgYEhlYWRgIGNsYXNzZXMgd2l0aCBgQEh0bWxUYWdNYXJrZXJgIGJlY2F1c2UgdGhlaXIgc3VwZXJjbGFzcyBpcyBhbHJlYWR5IGFubm90YXRlZDpcbiAgXG5gYGBcbmNsYXNzIEhUTUwoKSA6IFRhZygmcXVvdDtodG1sJnF1b3Q7KSB7IC4uLiB9XG5jbGFzcyBIZWFkKCkgOiBUYWcoJnF1b3Q7aGVhZCZxdW90OykgeyAuLi4gfVxuYGBgXG4gIFxuQWZ0ZXIgd2UmYXBvczt2ZSBhZGRlZCB0aGlzIGFubm90YXRpb24sIHRoZSBLb3RsaW4gY29tcGlsZXIga25vd3Mgd2hpY2ggaW1wbGljaXQgcmVjZWl2ZXJzIGFyZSBwYXJ0IG9mIHRoZSBzYW1lIERTTCBhbmQgYWxsb3dzIHRvIGNhbGwgbWVtYmVycyBvZiB0aGUgbmVhcmVzdCByZWNlaXZlcnMgb25seTogXG4gIFxuYGBga290bGluXG5odG1sIHtcbiAgICBoZWFkIHtcbiAgICAgICAgaGVhZCB7IH0gLy8gZXJyb3I6IGEgbWVtYmVyIG9mIG91dGVyIHJlY2VpdmVyXG4gICAgfVxuICAgIC8vIC4uLlxufVxuYGBgXG4gIFxuTm90ZSB0aGF0IGl0JmFwb3M7cyBzdGlsbCBwb3NzaWJsZSB0byBjYWxsIHRoZSBtZW1iZXJzIG9mIHRoZSBvdXRlciByZWNlaXZlciwgYnV0IHRvIGRvIHRoYXQgeW91IGhhdmUgdG8gc3BlY2lmeSB0aGlzIHJlY2VpdmVyIGV4cGxpY2l0bHk6XG4gIFxuYGBga290bGluXG5odG1sIHtcbiAgICBoZWFkIHtcbiAgICAgICAgdGhpc0BodG1sLmhlYWQgeyB9IC8vIHBvc3NpYmxlXG4gICAgfVxuICAgIC8vIC4uLlxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/type-safe-builders.html#scope-control-dslmarker-since-11"
            ],
            "flags": 0,
            "guid": "Boi[8ObGg!",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "TypeSafeBuilders"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Type <b>aliases</b>",
                "<p>Type aliases provide alternative names for existing types.<br />\nIf the type name is too long you can introduce a different shorter name and use the new one instead.</p>\n<p>It's useful to shorten long generic types.<br />\nFor instance, it's often tempting to shrink collection types:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">typealias</span> <span style=\"color: #000000\">NodeSet</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Set</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Network</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Node</span><span style=\"color: #000000; font-weight: bold\">&gt;</span>\n\n<span style=\"color: #000000\">typealias</span> <span style=\"color: #000000\">FileTable</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">K</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">MutableMap</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">K</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">MutableList</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">File</span><span style=\"color: #000000; font-weight: bold\">&gt;&gt;</span>\n</pre></div>\n<p>You can provide different aliases for function types:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">typealias</span> <span style=\"color: #000000\">MyHandler</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span>\n\n<span style=\"color: #000000\">typealias</span> <span style=\"color: #000000\">Predicate</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Boolean</span>\n</pre></div>\n<p>You can have new names for inner and nested classes:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">A</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">inner</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Inner</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">B</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">inner</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Inner</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">typealias</span> <span style=\"color: #000000\">AInner</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">A</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Inner</span>\n<span style=\"color: #000000\">typealias</span> <span style=\"color: #000000\">BInner</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">B</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Inner</span>\n</pre></div>\n<p>Type aliases do not introduce new types. <br />\nThey are equivalent to the corresponding underlying types.<br />\nWhen you add <code>typealias Predicate&lt;T&gt;</code> and use <code>Predicate&lt;Int&gt;</code> in your code, the Kotlin compiler always expand it to <code>(Int) -&gt; Boolean</code>. <br />\nThus you can pass a variable of your type whenever a general function type is required and vice versa:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">typealias</span> <span style=\"color: #000000\">Predicate</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Boolean</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Predicate</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">42</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Boolean</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">foo</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"true\"</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Predicate</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000; font-weight: bold\">-</span><span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">filter</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">p</span><span style=\"color: #000000; font-weight: bold\">))</span> <span style=\"color: #8f5902; font-style: italic\">// prints \"[1]\"</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTQ0MzUsICJpZCI6ICIxNDg5MjUxNTAwNTkyLTAwMSIsICJtZCI6ICJUeXBlIGFsaWFzZXMgcHJvdmlkZSBhbHRlcm5hdGl2ZSBuYW1lcyBmb3IgZXhpc3RpbmcgdHlwZXMuXG5JZiB0aGUgdHlwZSBuYW1lIGlzIHRvbyBsb25nIHlvdSBjYW4gaW50cm9kdWNlIGEgZGlmZmVyZW50IHNob3J0ZXIgbmFtZSBhbmQgdXNlIHRoZSBuZXcgb25lIGluc3RlYWQuXG4gXG5JdCZhcG9zO3MgdXNlZnVsIHRvIHNob3J0ZW4gbG9uZyBnZW5lcmljIHR5cGVzLlxuRm9yIGluc3RhbmNlLCBpdCZhcG9zO3Mgb2Z0ZW4gdGVtcHRpbmcgdG8gc2hyaW5rIGNvbGxlY3Rpb24gdHlwZXM6XG4gIFxuYGBga290bGluXG50eXBlYWxpYXMgTm9kZVNldCA9IFNldCZsdDtOZXR3b3JrLk5vZGUmZ3Q7XG4gIFxudHlwZWFsaWFzIEZpbGVUYWJsZSZsdDtLJmd0OyA9IE11dGFibGVNYXAmbHQ7SywgTXV0YWJsZUxpc3QmbHQ7RmlsZSZndDsmZ3Q7XG5gYGBcbiAgXG5Zb3UgY2FuIHByb3ZpZGUgZGlmZmVyZW50IGFsaWFzZXMgZm9yIGZ1bmN0aW9uIHR5cGVzOlxuICBcbmBgYGtvdGxpblxudHlwZWFsaWFzIE15SGFuZGxlciA9IChJbnQsIFN0cmluZywgQW55KSAtJmd0OyBVbml0XG4gIFxudHlwZWFsaWFzIFByZWRpY2F0ZSZsdDtUJmd0OyA9IChUKSAtJmd0OyBCb29sZWFuXG5gYGBcbiAgXG5Zb3UgY2FuIGhhdmUgbmV3IG5hbWVzIGZvciBpbm5lciBhbmQgbmVzdGVkIGNsYXNzZXM6XG4gIFxuYGBga290bGluXG5jbGFzcyBBIHtcbiAgICBpbm5lciBjbGFzcyBJbm5lclxufVxuY2xhc3MgQiB7XG4gICAgaW5uZXIgY2xhc3MgSW5uZXJcbn1cbiAgXG50eXBlYWxpYXMgQUlubmVyID0gQS5Jbm5lclxudHlwZWFsaWFzIEJJbm5lciA9IEIuSW5uZXJcbmBgYFxuICBcblR5cGUgYWxpYXNlcyBkbyBub3QgaW50cm9kdWNlIG5ldyB0eXBlcy4gXG5UaGV5IGFyZSBlcXVpdmFsZW50IHRvIHRoZSBjb3JyZXNwb25kaW5nIHVuZGVybHlpbmcgdHlwZXMuXG5XaGVuIHlvdSBhZGQgYHR5cGVhbGlhcyBQcmVkaWNhdGUmbHQ7VCZndDtgIGFuZCB1c2UgYFByZWRpY2F0ZSZsdDtJbnQmZ3Q7YCBpbiB5b3VyIGNvZGUsIHRoZSBLb3RsaW4gY29tcGlsZXIgYWx3YXlzIGV4cGFuZCBpdCB0byBgKEludCkgLSZndDsgQm9vbGVhbmAuIFxuVGh1cyB5b3UgY2FuIHBhc3MgYSB2YXJpYWJsZSBvZiB5b3VyIHR5cGUgd2hlbmV2ZXIgYSBnZW5lcmFsIGZ1bmN0aW9uIHR5cGUgaXMgcmVxdWlyZWQgYW5kIHZpY2UgdmVyc2E6XG4gXG5gYGBrb3RsaW5cbnR5cGVhbGlhcyBQcmVkaWNhdGUmbHQ7VCZndDsgPSAoVCkgLSZndDsgQm9vbGVhblxuICBcbmZ1biBmb28ocDogUHJlZGljYXRlJmx0O0ludCZndDspID0gcCg0MilcbiAgXG5mdW4gbWFpbihhcmdzOiBBcnJheSZsdDtTdHJpbmcmZ3Q7KSB7XG4gICAgdmFsIGY6IChJbnQpIC0mZ3Q7IEJvb2xlYW4gPSB7IGl0ICZndDsgMCB9XG4gICAgcHJpbnRsbihmb28oZikpIC8vIHByaW50cyAmcXVvdDt0cnVlJnF1b3Q7XG4gIFxuICAgIHZhbCBwOiBQcmVkaWNhdGUmbHQ7SW50Jmd0OyA9IHsgaXQgJmd0OyAwIH1cbiAgICBwcmludGxuKGxpc3RPZigxLCAtMikuZmlsdGVyKHApKSAvLyBwcmludHMgJnF1b3Q7WzFdJnF1b3Q7XG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/type-aliases.html#type-aliases"
            ],
            "flags": 0,
            "guid": "o{_G)PCq%|",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Other",
                "TypeAliases"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Kotlin&nbsp;<b>Standard Library:</b>&nbsp;list of packages",
                "<img src=\"paste-21904333211756.jpg\" />",
                "https://kotlinlang.org/api/latest/jvm/stdlib/index.html#packages"
            ],
            "flags": 0,
            "guid": "cc(T-|0/fK",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "ApiReference",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Visibility</b><i>&nbsp;[Calling Kotlin from Java]</i>",
                "<p>The Kotlin visibilities are mapped to Java in the following way:</p>\n<ul>\n<li align=\"left\"><code>private</code> members are compiled to <code>private</code> members;</li>\n<li align=\"left\"><code>private</code> top-level declarations are compiled to package-local declarations;</li>\n<li align=\"left\"><code>protected</code> remains <code>protected</code> (note that Java allows accessing protected members from other classes in the same package and Kotlin doesn't, so Java classes will have broader access to the code);</li>\n<li align=\"left\"><code>internal</code> declarations become <code>public</code> in Java. Members of <code>internal</code> classes go through name mangling, to make it harder to accidentally use them from Java and to allow overloading for members with the same signature that don't see each other according to Kotlin rules;</li>\n<li align=\"left\"><code>public</code> remains <code>public</code>.</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTU1NjAsICJpZCI6ICIxNDg5MjUyOTUwNzc0LTAwMSIsICJtZCI6ICJUaGUgS290bGluIHZpc2liaWxpdGllcyBhcmUgbWFwcGVkIHRvIEphdmEgaW4gdGhlIGZvbGxvd2luZyB3YXk6XG4gIFxuKiBgcHJpdmF0ZWAgbWVtYmVycyBhcmUgY29tcGlsZWQgdG8gYHByaXZhdGVgIG1lbWJlcnM7XG4qIGBwcml2YXRlYCB0b3AtbGV2ZWwgZGVjbGFyYXRpb25zIGFyZSBjb21waWxlZCB0byBwYWNrYWdlLWxvY2FsIGRlY2xhcmF0aW9ucztcbiogYHByb3RlY3RlZGAgcmVtYWlucyBgcHJvdGVjdGVkYCAobm90ZSB0aGF0IEphdmEgYWxsb3dzIGFjY2Vzc2luZyBwcm90ZWN0ZWQgbWVtYmVycyBmcm9tIG90aGVyIGNsYXNzZXMgaW4gdGhlIHNhbWUgcGFja2FnZSBhbmQgS290bGluIGRvZXNuJmFwb3M7dCwgc28gSmF2YSBjbGFzc2VzIHdpbGwgaGF2ZSBicm9hZGVyIGFjY2VzcyB0byB0aGUgY29kZSk7XG4qIGBpbnRlcm5hbGAgZGVjbGFyYXRpb25zIGJlY29tZSBgcHVibGljYCBpbiBKYXZhLiBNZW1iZXJzIG9mIGBpbnRlcm5hbGAgY2xhc3NlcyBnbyB0aHJvdWdoIG5hbWUgbWFuZ2xpbmcsIHRvIG1ha2UgaXQgaGFyZGVyIHRvIGFjY2lkZW50YWxseSB1c2UgdGhlbSBmcm9tIEphdmEgYW5kIHRvIGFsbG93IG92ZXJsb2FkaW5nIGZvciBtZW1iZXJzIHdpdGggdGhlIHNhbWUgc2lnbmF0dXJlIHRoYXQgZG9uJmFwb3M7dCBzZWUgZWFjaCBvdGhlciBhY2NvcmRpbmcgdG8gS290bGluIHJ1bGVzO1xuKiBgcHVibGljYCByZW1haW5zIGBwdWJsaWNgLlxuICBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#visibility"
            ],
            "flags": 0,
            "guid": "L^pbn]T_a>",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CallingKotlinFromJava",
                "JavaInterop",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;JavaScript",
                "<p>Starting with Kotlin 1.1, the JavaScript target is no longer considered experimental.<br />\nAll language features are supported, and there are many new tools for integration with the front-end development environment.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk2NDcsICJpZCI6ICIxNDg5MjU0NzU5OTQwLTAwMSIsICJtZCI6ICJTdGFydGluZyB3aXRoIEtvdGxpbiAxLjEsIHRoZSBKYXZhU2NyaXB0IHRhcmdldCBpcyBubyBsb25nZXIgY29uc2lkZXJlZCBleHBlcmltZW50YWwuXG5BbGwgbGFuZ3VhZ2UgZmVhdHVyZXMgYXJlIHN1cHBvcnRlZCwgYW5kIHRoZXJlIGFyZSBtYW55IG5ldyB0b29scyBmb3IgaW50ZWdyYXRpb24gd2l0aCB0aGUgZnJvbnQtZW5kIGRldmVsb3BtZW50IGVudmlyb25tZW50LlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#javascript"
            ],
            "flags": 0,
            "guid": "DqB{U:)nA/",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;Coroutines (experimental)",
                "<p>The key new feature in Kotlin 1.1 is <em>coroutines</em>, bringing the support of <code>async</code>/<code>await</code>, <code>yield</code> and similar programming patterns.<br />\nThe key feature of Kotlin's design is that the implementation of coroutine execution is part of the libraries, not the language, so you aren't bound to any specific programming paradigm or concurrency library.</p>\n<p>A coroutine is effectively a light-weight thread that can be suspended and resumed later. Coroutines are supported through <a href=\"coroutines.html#suspending-functions\"><em>suspending functions</em></a>: a call to such a function can potentially suspend a coroutine, and to start a new coroutine we usually use an anonymous suspending functions (i.e. suspending lambdas).  </p>\n<p>Let's look at <code>async</code>/<code>await</code> which is implemented in an external library, <a href=\"https://github.com/kotlin/kotlinx.coroutines\">kotlinx.coroutines</a>: </p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">// runs the code in the background thread pool</span>\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">asyncOverlay</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">async</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">CommonPool</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// start two async operations</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">original</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">asyncLoadImage</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"original\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">overlay</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">asyncLoadImage</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"overlay\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #8f5902; font-style: italic\">// and then apply overlay to both results</span>\n    <span style=\"color: #000000\">applyOverlay</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">original</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">await</span><span style=\"color: #000000; font-weight: bold\">(),</span> <span style=\"color: #000000\">overlay</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">await</span><span style=\"color: #000000; font-weight: bold\">())</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// launches new coroutine in UI context</span>\n<span style=\"color: #000000\">launch</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">UI</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// wait for async overlay to complete</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">image</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">asyncOverlay</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">await</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #8f5902; font-style: italic\">// and then show it in UI</span>\n    <span style=\"color: #000000\">showImage</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">image</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Here, <code>async { ... }</code> starts a coroutine and, when we use <code>await()</code>, the execution of the coroutine is suspended while the operation being awaited is executed, and is resumed (possibly on a different thread) when the operation being awaited completes.</p>\n<p>The standard library uses coroutines to support <em>lazily generated sequences</em> with <code>yield</code> and <code>yieldAll</code> functions.<br />\nIn such a sequence, the block of code that returns sequence elements is suspended after each element has been retrieved, and resumed when the next element is requested.<br />\nHere's an example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">import</span> <span style=\"color: #000000\">kotlin.coroutines.experimental.*</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n  <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">seq</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">buildSequence</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n      <span style=\"color: #204a87; font-weight: bold\">for</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #204a87; font-weight: bold\">in</span> <span style=\"color: #0000cf; font-weight: bold\">1.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">5</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n          <span style=\"color: #8f5902; font-style: italic\">// yield a square of i</span>\n          <span style=\"color: #000000\">yield</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">i</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #000000\">i</span><span style=\"color: #000000; font-weight: bold\">)</span>\n      <span style=\"color: #000000; font-weight: bold\">}</span>\n      <span style=\"color: #8f5902; font-style: italic\">// yield a range</span>\n      <span style=\"color: #000000\">yieldAll</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">26.</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #0000cf; font-weight: bold\">28</span><span style=\"color: #000000; font-weight: bold\">)</span>\n  <span style=\"color: #000000; font-weight: bold\">}</span>\n\n  <span style=\"color: #8f5902; font-style: italic\">// print the sequence</span>\n  <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">seq</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toList</span><span style=\"color: #000000; font-weight: bold\">())</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Run the code above to see the result. Feel free to edit it and run again!</p>\n<p>For more information, please refer to the <a href=\"/docs/reference/coroutines.html\">coroutine documentation</a> and <a href=\"/docs/tutorials/coroutines-basic-jvm.html\">tutorial</a>.</p>\n<p>Note that coroutines are currently considered an <strong>experimental feature</strong>, meaning that the Kotlin team is not committing to supporting the backwards compatibility of this feature after the final 1.1 release.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk3MTQsICJpZCI6ICIxNDg5MjU0ODIxMzU1LTAwMSIsICJtZCI6ICJUaGUga2V5IG5ldyBmZWF0dXJlIGluIEtvdGxpbiAxLjEgaXMgKmNvcm91dGluZXMqLCBicmluZ2luZyB0aGUgc3VwcG9ydCBvZiBgYXN5bmNgL2Bhd2FpdGAsIGB5aWVsZGAgYW5kIHNpbWlsYXIgcHJvZ3JhbW1pbmcgcGF0dGVybnMuXG5UaGUga2V5IGZlYXR1cmUgb2YgS290bGluJmFwb3M7cyBkZXNpZ24gaXMgdGhhdCB0aGUgaW1wbGVtZW50YXRpb24gb2YgY29yb3V0aW5lIGV4ZWN1dGlvbiBpcyBwYXJ0IG9mIHRoZSBsaWJyYXJpZXMsIG5vdCB0aGUgbGFuZ3VhZ2UsIHNvIHlvdSBhcmVuJmFwb3M7dCBib3VuZCB0byBhbnkgc3BlY2lmaWMgcHJvZ3JhbW1pbmcgcGFyYWRpZ20gb3IgY29uY3VycmVuY3kgbGlicmFyeS5cbiAgXG5BIGNvcm91dGluZSBpcyBlZmZlY3RpdmVseSBhIGxpZ2h0LXdlaWdodCB0aHJlYWQgdGhhdCBjYW4gYmUgc3VzcGVuZGVkIGFuZCByZXN1bWVkIGxhdGVyLiBDb3JvdXRpbmVzIGFyZSBzdXBwb3J0ZWQgdGhyb3VnaCBbKnN1c3BlbmRpbmcgZnVuY3Rpb25zKl0oY29yb3V0aW5lcy5odG1sI3N1c3BlbmRpbmctZnVuY3Rpb25zKTogYSBjYWxsIHRvIHN1Y2ggYSBmdW5jdGlvbiBjYW4gcG90ZW50aWFsbHkgc3VzcGVuZCBhIGNvcm91dGluZSwgYW5kIHRvIHN0YXJ0IGEgbmV3IGNvcm91dGluZSB3ZSB1c3VhbGx5IHVzZSBhbiBhbm9ueW1vdXMgc3VzcGVuZGluZyBmdW5jdGlvbnMgKGkuZS4gc3VzcGVuZGluZyBsYW1iZGFzKS4gIFxuICBcbkxldCZhcG9zO3MgbG9vayBhdCBgYXN5bmNgL2Bhd2FpdGAgd2hpY2ggaXMgaW1wbGVtZW50ZWQgaW4gYW4gZXh0ZXJuYWwgbGlicmFyeSwgW2tvdGxpbnguY29yb3V0aW5lc10oaHR0cHM6Ly9naXRodWIuY29tL2tvdGxpbi9rb3RsaW54LmNvcm91dGluZXMpOiBcbiAgXG5gYGBrb3RsaW5cbi8vIHJ1bnMgdGhlIGNvZGUgaW4gdGhlIGJhY2tncm91bmQgdGhyZWFkIHBvb2xcbmZ1biBhc3luY092ZXJsYXkoKSA9IGFzeW5jKENvbW1vblBvb2wpIHtcbiAgICAvLyBzdGFydCB0d28gYXN5bmMgb3BlcmF0aW9uc1xuICAgIHZhbCBvcmlnaW5hbCA9IGFzeW5jTG9hZEltYWdlKCZxdW90O29yaWdpbmFsJnF1b3Q7KVxuICAgIHZhbCBvdmVybGF5ID0gYXN5bmNMb2FkSW1hZ2UoJnF1b3Q7b3ZlcmxheSZxdW90OylcbiAgICAvLyBhbmQgdGhlbiBhcHBseSBvdmVybGF5IHRvIGJvdGggcmVzdWx0c1xuICAgIGFwcGx5T3ZlcmxheShvcmlnaW5hbC5hd2FpdCgpLCBvdmVybGF5LmF3YWl0KCkpXG59XG4gIFxuLy8gbGF1bmNoZXMgbmV3IGNvcm91dGluZSBpbiBVSSBjb250ZXh0XG5sYXVuY2goVUkpIHtcbiAgICAvLyB3YWl0IGZvciBhc3luYyBvdmVybGF5IHRvIGNvbXBsZXRlXG4gICAgdmFsIGltYWdlID0gYXN5bmNPdmVybGF5KCkuYXdhaXQoKVxuICAgIC8vIGFuZCB0aGVuIHNob3cgaXQgaW4gVUlcbiAgICBzaG93SW1hZ2UoaW1hZ2UpXG59XG5gYGBcbiAgXG5IZXJlLCBgYXN5bmMgeyAuLi4gfWAgc3RhcnRzIGEgY29yb3V0aW5lIGFuZCwgd2hlbiB3ZSB1c2UgYGF3YWl0KClgLCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBjb3JvdXRpbmUgaXMgc3VzcGVuZGVkIHdoaWxlIHRoZSBvcGVyYXRpb24gYmVpbmcgYXdhaXRlZCBpcyBleGVjdXRlZCwgYW5kIGlzIHJlc3VtZWQgKHBvc3NpYmx5IG9uIGEgZGlmZmVyZW50IHRocmVhZCkgd2hlbiB0aGUgb3BlcmF0aW9uIGJlaW5nIGF3YWl0ZWQgY29tcGxldGVzLlxuICBcblRoZSBzdGFuZGFyZCBsaWJyYXJ5IHVzZXMgY29yb3V0aW5lcyB0byBzdXBwb3J0ICpsYXppbHkgZ2VuZXJhdGVkIHNlcXVlbmNlcyogd2l0aCBgeWllbGRgIGFuZCBgeWllbGRBbGxgIGZ1bmN0aW9ucy5cbkluIHN1Y2ggYSBzZXF1ZW5jZSwgdGhlIGJsb2NrIG9mIGNvZGUgdGhhdCByZXR1cm5zIHNlcXVlbmNlIGVsZW1lbnRzIGlzIHN1c3BlbmRlZCBhZnRlciBlYWNoIGVsZW1lbnQgaGFzIGJlZW4gcmV0cmlldmVkLCBhbmQgcmVzdW1lZCB3aGVuIHRoZSBuZXh0IGVsZW1lbnQgaXMgcmVxdWVzdGVkLlxuSGVyZSZhcG9zO3MgYW4gZXhhbXBsZTpcbiAgXG5gYGBrb3RsaW5cbmltcG9ydCBrb3RsaW4uY29yb3V0aW5lcy5leHBlcmltZW50YWwuKlxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgdmFsIHNlcSA9IGJ1aWxkU2VxdWVuY2Uge1xuICAgICAgZm9yIChpIGluIDEuLjUpIHtcbiAgICAgICAgICAvLyB5aWVsZCBhIHNxdWFyZSBvZiBpXG4gICAgICAgICAgeWllbGQoaSAqIGkpXG4gICAgICB9XG4gICAgICAvLyB5aWVsZCBhIHJhbmdlXG4gICAgICB5aWVsZEFsbCgyNi4uMjgpXG4gIH1cbiAgXG4gIC8vIHByaW50IHRoZSBzZXF1ZW5jZVxuICBwcmludGxuKHNlcS50b0xpc3QoKSlcbn1cbmBgYFxuICBcblJ1biB0aGUgY29kZSBhYm92ZSB0byBzZWUgdGhlIHJlc3VsdC4gRmVlbCBmcmVlIHRvIGVkaXQgaXQgYW5kIHJ1biBhZ2FpbiFcbiAgXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHJlZmVyIHRvIHRoZSBbY29yb3V0aW5lIGRvY3VtZW50YXRpb25dKC9kb2NzL3JlZmVyZW5jZS9jb3JvdXRpbmVzLmh0bWwpIGFuZCBbdHV0b3JpYWxdKC9kb2NzL3R1dG9yaWFscy9jb3JvdXRpbmVzLWJhc2ljLWp2bS5odG1sKS5cbiAgXG5Ob3RlIHRoYXQgY29yb3V0aW5lcyBhcmUgY3VycmVudGx5IGNvbnNpZGVyZWQgYW4gKipleHBlcmltZW50YWwgZmVhdHVyZSoqLCBtZWFuaW5nIHRoYXQgdGhlIEtvdGxpbiB0ZWFtIGlzIG5vdCBjb21taXR0aW5nIHRvIHN1cHBvcnRpbmcgdGhlIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IG9mIHRoaXMgZmVhdHVyZSBhZnRlciB0aGUgZmluYWwgMS4xIHJlbGVhc2UuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#coroutines-experimental"
            ],
            "flags": 0,
            "guid": "zUE[Z{7Dr5",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;Type aliases",
                "<p>A type alias allows you to define an alternative name for an existing type.<br />\nThis is most useful for generic types such as collections, as well as for function types.<br />\nHere is an example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">typealias</span> <span style=\"color: #000000\">OscarWinners</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Map</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">countLaLaLand</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">oscarWinners</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">OscarWinners</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span>\n        <span style=\"color: #000000\">oscarWinners</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">count</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">contains</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"La La Land\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// Note that the type names (initial and the type alias) are interchangeable:</span>\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">checkLaLaLandIsTheBestMovie</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">oscarWinners</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Map</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">=</span>\n        <span style=\"color: #000000\">oscarWinners</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #4e9a06\">\"Best picture\"</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #4e9a06\">\"La La Land\"</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">oscarWinners</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">OscarWinners</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">mapOf</span><span style=\"color: #000000; font-weight: bold\">(</span>\n            <span style=\"color: #4e9a06\">\"Best song\"</span> <span style=\"color: #000000\">to</span> <span style=\"color: #4e9a06\">\"City of Stars (La La Land)\"</span><span style=\"color: #000000; font-weight: bold\">,</span>\n            <span style=\"color: #4e9a06\">\"Best actress\"</span> <span style=\"color: #000000\">to</span> <span style=\"color: #4e9a06\">\"Emma Stone (La La Land)\"</span><span style=\"color: #000000; font-weight: bold\">,</span>\n            <span style=\"color: #4e9a06\">\"Best picture\"</span> <span style=\"color: #000000\">to</span> <span style=\"color: #4e9a06\">\"Moonlight\"</span> <span style=\"color: #8f5902; font-style: italic\">/* ... */</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">oscarWinners</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">oscarWinners</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">laLaLandAwards</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">countLaLaLand</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">oscarWinners</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"LaLaLandAwards = $laLaLandAwards (in our small example), but actually it's 6.\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">laLaLandIsTheBestMovie</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">checkLaLaLandIsTheBestMovie</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">oscarWinners</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"LaLaLandIsTheBestMovie = $laLaLandIsTheBestMovie\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>See the <a href=\"type-aliases.html\">documentation</a> and <a href=\"https://github.com/Kotlin/KEEP/blob/master/proposals/type-aliases.md\">KEEP</a> for more details.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg5MjUsICJpZCI6ICIxNDg5MjU1MDg5OTQxLTAwMSIsICJtZCI6ICJBIHR5cGUgYWxpYXMgYWxsb3dzIHlvdSB0byBkZWZpbmUgYW4gYWx0ZXJuYXRpdmUgbmFtZSBmb3IgYW4gZXhpc3RpbmcgdHlwZS5cblRoaXMgaXMgbW9zdCB1c2VmdWwgZm9yIGdlbmVyaWMgdHlwZXMgc3VjaCBhcyBjb2xsZWN0aW9ucywgYXMgd2VsbCBhcyBmb3IgZnVuY3Rpb24gdHlwZXMuXG5IZXJlIGlzIGFuIGV4YW1wbGU6XG4gIFxuICBcbmBgYCBrb3RsaW5cbnR5cGVhbGlhcyBPc2Nhcldpbm5lcnMgPSBNYXAmbHQ7U3RyaW5nLCBTdHJpbmcmZ3Q7XG4gIFxuZnVuIGNvdW50TGFMYUxhbmQob3NjYXJXaW5uZXJzOiBPc2Nhcldpbm5lcnMpID1cbiAgICAgICAgb3NjYXJXaW5uZXJzLmNvdW50IHsgaXQudmFsdWUuY29udGFpbnMoJnF1b3Q7TGEgTGEgTGFuZCZxdW90OykgfVxuICBcbi8vIE5vdGUgdGhhdCB0aGUgdHlwZSBuYW1lcyAoaW5pdGlhbCBhbmQgdGhlIHR5cGUgYWxpYXMpIGFyZSBpbnRlcmNoYW5nZWFibGU6XG5mdW4gY2hlY2tMYUxhTGFuZElzVGhlQmVzdE1vdmllKG9zY2FyV2lubmVyczogTWFwJmx0O1N0cmluZywgU3RyaW5nJmd0OykgPVxuICAgICAgICBvc2Nhcldpbm5lcnNbJnF1b3Q7QmVzdCBwaWN0dXJlJnF1b3Q7XSA9PSAmcXVvdDtMYSBMYSBMYW5kJnF1b3Q7XG4gIFxuZnVuIG9zY2FyV2lubmVycygpOiBPc2Nhcldpbm5lcnMge1xuICAgIHJldHVybiBtYXBPZihcbiAgICAgICAgICAgICZxdW90O0Jlc3Qgc29uZyZxdW90OyB0byAmcXVvdDtDaXR5IG9mIFN0YXJzIChMYSBMYSBMYW5kKSZxdW90OyxcbiAgICAgICAgICAgICZxdW90O0Jlc3QgYWN0cmVzcyZxdW90OyB0byAmcXVvdDtFbW1hIFN0b25lIChMYSBMYSBMYW5kKSZxdW90OyxcbiAgICAgICAgICAgICZxdW90O0Jlc3QgcGljdHVyZSZxdW90OyB0byAmcXVvdDtNb29ubGlnaHQmcXVvdDsgLyogLi4uICovKVxufVxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICB2YWwgb3NjYXJXaW5uZXJzID0gb3NjYXJXaW5uZXJzKClcbiAgXG4gICAgdmFsIGxhTGFMYW5kQXdhcmRzID0gY291bnRMYUxhTGFuZChvc2Nhcldpbm5lcnMpXG4gICAgcHJpbnRsbigmcXVvdDtMYUxhTGFuZEF3YXJkcyA9ICRsYUxhTGFuZEF3YXJkcyAoaW4gb3VyIHNtYWxsIGV4YW1wbGUpLCBidXQgYWN0dWFsbHkgaXQmYXBvcztzIDYuJnF1b3Q7KVxuICBcbiAgICB2YWwgbGFMYUxhbmRJc1RoZUJlc3RNb3ZpZSA9IGNoZWNrTGFMYUxhbmRJc1RoZUJlc3RNb3ZpZShvc2Nhcldpbm5lcnMpXG4gICAgcHJpbnRsbigmcXVvdDtMYUxhTGFuZElzVGhlQmVzdE1vdmllID0gJGxhTGFMYW5kSXNUaGVCZXN0TW92aWUmcXVvdDspXG59XG5gYGBcbiAgXG5TZWUgdGhlIFtkb2N1bWVudGF0aW9uXSh0eXBlLWFsaWFzZXMuaHRtbCkgYW5kIFtLRUVQXShodHRwczovL2dpdGh1Yi5jb20vS290bGluL0tFRVAvYmxvYi9tYXN0ZXIvcHJvcG9zYWxzL3R5cGUtYWxpYXNlcy5tZCkgZm9yIG1vcmUgZGV0YWlscy5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#type-aliases"
            ],
            "flags": 0,
            "guid": "gIV+n,8:s4",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;Bound callable references",
                "<p>You can now use the <code>::</code> operator to get a <a href=\"reflection.html#function-references\">member reference</a> pointing to a method or property of a specific object instance.<br />\nPreviously this could only be expressed with a lambda.<br />\nHere's an example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">numberRegex</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"\\\\d+\"</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toRegex</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">numbers</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"abc\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"123\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"456\"</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">filter</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">numberRegex</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">matches</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Result is $numbers\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Read the <a href=\"reflection.html#bound-function-and-property-references-since-11\">documentation</a> and <a href=\"https://github.com/Kotlin/KEEP/blob/master/proposals/bound-callable-references.md\">KEEP</a> for more details.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg5NDksICJpZCI6ICIxNDg5MjU1MTMxOTMzLTAwMSIsICJtZCI6ICJZb3UgY2FuIG5vdyB1c2UgdGhlIGA6OmAgb3BlcmF0b3IgdG8gZ2V0IGEgW21lbWJlciByZWZlcmVuY2VdKHJlZmxlY3Rpb24uaHRtbCNmdW5jdGlvbi1yZWZlcmVuY2VzKSBwb2ludGluZyB0byBhIG1ldGhvZCBvciBwcm9wZXJ0eSBvZiBhIHNwZWNpZmljIG9iamVjdCBpbnN0YW5jZS5cblByZXZpb3VzbHkgdGhpcyBjb3VsZCBvbmx5IGJlIGV4cHJlc3NlZCB3aXRoIGEgbGFtYmRhLlxuSGVyZSZhcG9zO3MgYW4gZXhhbXBsZTpcbiAgXG4gIFxuYGBgIGtvdGxpblxudmFsIG51bWJlclJlZ2V4ID0gJnF1b3Q7XFxcXGQrJnF1b3Q7LnRvUmVnZXgoKVxudmFsIG51bWJlcnMgPSBsaXN0T2YoJnF1b3Q7YWJjJnF1b3Q7LCAmcXVvdDsxMjMmcXVvdDssICZxdW90OzQ1NiZxdW90OykuZmlsdGVyKG51bWJlclJlZ2V4OjptYXRjaGVzKVxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICBwcmludGxuKCZxdW90O1Jlc3VsdCBpcyAkbnVtYmVycyZxdW90Oylcbn1cbmBgYFxuICBcbiAgXG5SZWFkIHRoZSBbZG9jdW1lbnRhdGlvbl0ocmVmbGVjdGlvbi5odG1sI2JvdW5kLWZ1bmN0aW9uLWFuZC1wcm9wZXJ0eS1yZWZlcmVuY2VzLXNpbmNlLTExKSBhbmQgW0tFRVBdKGh0dHBzOi8vZ2l0aHViLmNvbS9Lb3RsaW4vS0VFUC9ibG9iL21hc3Rlci9wcm9wb3NhbHMvYm91bmQtY2FsbGFibGUtcmVmZXJlbmNlcy5tZCkgZm9yIG1vcmUgZGV0YWlscy5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#bound-callable-references"
            ],
            "flags": 0,
            "guid": "g[t!M94~^2",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>Sealed</b> and <b>data</b> classes",
                "<p>Kotlin 1.1 removes some of the restrictions on sealed and data classes that were present in Kotlin 1.0.<br />\nNow you can define subclasses of a top-level sealed class on the top level in the same file, and not just as nested classes of the sealed class.<br />\nData classes can now extend other classes.<br />\nThis can be used to define a hierarchy of expression classes nicely and cleanly:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">sealed</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Expr</span>\n\n<span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Const</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">number</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Double</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Expr</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Sum</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">e1</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Expr</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">e2</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Expr</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Expr</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #000000\">NotANumber</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Expr</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">eval</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">expr</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Expr</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Double</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">expr</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">Const</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">expr</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">number</span>\n    <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">Sum</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">eval</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">expr</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">e1</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">eval</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">expr</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">e2</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">NotANumber</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Double</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">NaN</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">e</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">eval</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Sum</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Const</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1.0</span><span style=\"color: #000000; font-weight: bold\">),</span> <span style=\"color: #000000\">Const</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">2.0</span><span style=\"color: #000000; font-weight: bold\">)))</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"e is $e\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #8f5902; font-style: italic\">// 3.0</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Read the <a href=\"sealed-classes.html\">documentation</a> or <a href=\"https://github.com/Kotlin/KEEP/blob/master/proposals/sealed-class-inheritance.md\">sealed class</a> and <a href=\"https://github.com/Kotlin/KEEP/blob/master/proposals/data-class-inheritance.md\">data class</a> KEEPs for more detail.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTQ2NjM5OTksICJpZCI6ICIxNDg5MjU1MTcwMTIwLTAwMSIsICJtZCI6ICJLb3RsaW4gMS4xIHJlbW92ZXMgc29tZSBvZiB0aGUgcmVzdHJpY3Rpb25zIG9uIHNlYWxlZCBhbmQgZGF0YSBjbGFzc2VzIHRoYXQgd2VyZSBwcmVzZW50IGluIEtvdGxpbiAxLjAuXG5Ob3cgeW91IGNhbiBkZWZpbmUgc3ViY2xhc3NlcyBvZiBhIHRvcC1sZXZlbCBzZWFsZWQgY2xhc3Mgb24gdGhlIHRvcCBsZXZlbCBpbiB0aGUgc2FtZSBmaWxlLCBhbmQgbm90IGp1c3QgYXMgbmVzdGVkIGNsYXNzZXMgb2YgdGhlIHNlYWxlZCBjbGFzcy5cbkRhdGEgY2xhc3NlcyBjYW4gbm93IGV4dGVuZCBvdGhlciBjbGFzc2VzLlxuVGhpcyBjYW4gYmUgdXNlZCB0byBkZWZpbmUgYSBoaWVyYXJjaHkgb2YgZXhwcmVzc2lvbiBjbGFzc2VzIG5pY2VseSBhbmQgY2xlYW5seTpcbiAgXG4gIFxuYGBgIGtvdGxpblxuc2VhbGVkIGNsYXNzIEV4cHJcbiAgXG5kYXRhIGNsYXNzIENvbnN0KHZhbCBudW1iZXI6IERvdWJsZSkgOiBFeHByKClcbmRhdGEgY2xhc3MgU3VtKHZhbCBlMTogRXhwciwgdmFsIGUyOiBFeHByKSA6IEV4cHIoKVxub2JqZWN0IE5vdEFOdW1iZXIgOiBFeHByKClcbiAgXG5mdW4gZXZhbChleHByOiBFeHByKTogRG91YmxlID0gd2hlbiAoZXhwcikge1xuICAgIGlzIENvbnN0IC0mZ3Q7IGV4cHIubnVtYmVyXG4gICAgaXMgU3VtIC0mZ3Q7IGV2YWwoZXhwci5lMSkgKyBldmFsKGV4cHIuZTIpXG4gICAgTm90QU51bWJlciAtJmd0OyBEb3VibGUuTmFOXG59XG52YWwgZSA9IGV2YWwoU3VtKENvbnN0KDEuMCksIENvbnN0KDIuMCkpKVxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICBwcmludGxuKCZxdW90O2UgaXMgJGUmcXVvdDspIC8vIDMuMFxufVxuYGBgXG4gIFxuUmVhZCB0aGUgW2RvY3VtZW50YXRpb25dKHNlYWxlZC1jbGFzc2VzLmh0bWwpIG9yIFtzZWFsZWQgY2xhc3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9Lb3RsaW4vS0VFUC9ibG9iL21hc3Rlci9wcm9wb3NhbHMvc2VhbGVkLWNsYXNzLWluaGVyaXRhbmNlLm1kKSBhbmQgW2RhdGEgY2xhc3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9Lb3RsaW4vS0VFUC9ibG9iL21hc3Rlci9wcm9wb3NhbHMvZGF0YS1jbGFzcy1pbmhlcml0YW5jZS5tZCkgS0VFUHMgZm9yIG1vcmUgZGV0YWlsLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#sealed-and-data-classes"
            ],
            "flags": 0,
            "guid": "hp_rxAFkzI",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>Destructuring</b> in lambdas",
                "<p>You can now use the <a href=\"multi-declarations.html\">destructuring declaration</a> syntax to unpack the arguments passed to a lambda.<br />\nHere's an example:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">map</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">mapOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #000000\">to</span> <span style=\"color: #4e9a06\">\"one\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span> <span style=\"color: #000000\">to</span> <span style=\"color: #4e9a06\">\"two\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #8f5902; font-style: italic\">// before</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">mapValues</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">entry</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span>\n        <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">(</span><span style=\"color: #000000\">key</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">entry</span>\n        <span style=\"color: #4e9a06\">\"$key -&gt; $value!\"</span>\n    <span style=\"color: #000000; font-weight: bold\">})</span>\n    <span style=\"color: #8f5902; font-style: italic\">// now</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">mapValues</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">key</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #4e9a06\">\"$key -&gt; $value!\"</span> <span style=\"color: #000000; font-weight: bold\">})</span>\n\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Read the <a href=\"multi-declarations.html#destructuring-in-lambdas-since-11\">documentation</a> and <a href=\"https://github.com/Kotlin/KEEP/blob/master/proposals/destructuring-in-parameters.md\">KEEP</a> for more details.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg5ODIsICJpZCI6ICIxNDg5MjU1MjA5MDg2LTAwMSIsICJtZCI6ICJZb3UgY2FuIG5vdyB1c2UgdGhlIFtkZXN0cnVjdHVyaW5nIGRlY2xhcmF0aW9uXShtdWx0aS1kZWNsYXJhdGlvbnMuaHRtbCkgc3ludGF4IHRvIHVucGFjayB0aGUgYXJndW1lbnRzIHBhc3NlZCB0byBhIGxhbWJkYS5cbkhlcmUmYXBvcztzIGFuIGV4YW1wbGU6XG4gIFxuICBcbmBgYCBrb3RsaW5cbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICB2YWwgbWFwID0gbWFwT2YoMSB0byAmcXVvdDtvbmUmcXVvdDssIDIgdG8gJnF1b3Q7dHdvJnF1b3Q7KVxuICAgIC8vIGJlZm9yZVxuICAgIHByaW50bG4obWFwLm1hcFZhbHVlcyB7IGVudHJ5IC0mZ3Q7XG4gICAgICAgIHZhbCAoa2V5LCB2YWx1ZSkgPSBlbnRyeVxuICAgICAgICAmcXVvdDska2V5IC0mZ3Q7ICR2YWx1ZSEmcXVvdDtcbiAgICB9KVxuICAgIC8vIG5vd1xuICAgIHByaW50bG4obWFwLm1hcFZhbHVlcyB7IChrZXksIHZhbHVlKSAtJmd0OyAmcXVvdDska2V5IC0mZ3Q7ICR2YWx1ZSEmcXVvdDsgfSlcbiAgIFxufVxuYGBgXG4gIFxuUmVhZCB0aGUgW2RvY3VtZW50YXRpb25dKG11bHRpLWRlY2xhcmF0aW9ucy5odG1sI2Rlc3RydWN0dXJpbmctaW4tbGFtYmRhcy1zaW5jZS0xMSkgYW5kIFtLRUVQXShodHRwczovL2dpdGh1Yi5jb20vS290bGluL0tFRVAvYmxvYi9tYXN0ZXIvcHJvcG9zYWxzL2Rlc3RydWN0dXJpbmctaW4tcGFyYW1ldGVycy5tZCkgZm9yIG1vcmUgZGV0YWlscy5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#destructuring-in-lambdas"
            ],
            "flags": 0,
            "guid": "A`6^?~y1!4",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>Underscores</b> for unused parameters",
                "<p>For a lambda with multiple parameters, you can use the <code>_</code> character to replace the names of the parameters you don't use:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">map</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">mapOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1</span> <span style=\"color: #000000\">to</span> <span style=\"color: #4e9a06\">\"one\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">2</span> <span style=\"color: #000000\">to</span> <span style=\"color: #4e9a06\">\"two\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">forEach</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">_</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">value</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"$value!\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>This also works in <a href=\"multi-declarations.html\">destructuring declarations</a>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Result</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">status</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">getResult</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Result</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">42</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"ok\"</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">also</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"getResult() returns $it\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">(</span><span style=\"color: #000000\">_</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">status</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">getResult</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"status is '$status'\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Read the <a href=\"https://github.com/Kotlin/KEEP/blob/master/proposals/underscore-for-unused-parameters.md\">KEEP</a> for more details.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzg5OTcsICJpZCI6ICIxNDg5MjU1MjQ4ODA0LTAwMSIsICJtZCI6ICJGb3IgYSBsYW1iZGEgd2l0aCBtdWx0aXBsZSBwYXJhbWV0ZXJzLCB5b3UgY2FuIHVzZSB0aGUgYF9gIGNoYXJhY3RlciB0byByZXBsYWNlIHRoZSBuYW1lcyBvZiB0aGUgcGFyYW1ldGVycyB5b3UgZG9uJmFwb3M7dCB1c2U6XG4gIFxuICBcbmBgYCBrb3RsaW5cbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICB2YWwgbWFwID0gbWFwT2YoMSB0byAmcXVvdDtvbmUmcXVvdDssIDIgdG8gJnF1b3Q7dHdvJnF1b3Q7KVxuICBcbiAgICBtYXAuZm9yRWFjaCB7IF8sIHZhbHVlIC0mZ3Q7IHByaW50bG4oJnF1b3Q7JHZhbHVlISZxdW90OykgfVxuICBcbn1cbmBgYFxuICBcblRoaXMgYWxzbyB3b3JrcyBpbiBbZGVzdHJ1Y3R1cmluZyBkZWNsYXJhdGlvbnNdKG11bHRpLWRlY2xhcmF0aW9ucy5odG1sKTpcbiAgXG4gIFxuYGBgIGtvdGxpblxuZGF0YSBjbGFzcyBSZXN1bHQodmFsIHZhbHVlOiBBbnksIHZhbCBzdGF0dXM6IFN0cmluZylcbiAgXG5mdW4gZ2V0UmVzdWx0KCkgPSBSZXN1bHQoNDIsICZxdW90O29rJnF1b3Q7KS5hbHNvIHsgcHJpbnRsbigmcXVvdDtnZXRSZXN1bHQoKSByZXR1cm5zICRpdCZxdW90OykgfVxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICB2YWwgKF8sIHN0YXR1cykgPSBnZXRSZXN1bHQoKVxuICAgIHByaW50bG4oJnF1b3Q7c3RhdHVzIGlzICZhcG9zOyRzdGF0dXMmYXBvczsmcXVvdDspXG59XG5gYGBcbiAgXG5SZWFkIHRoZSBbS0VFUF0oaHR0cHM6Ly9naXRodWIuY29tL0tvdGxpbi9LRUVQL2Jsb2IvbWFzdGVyL3Byb3Bvc2Fscy91bmRlcnNjb3JlLWZvci11bnVzZWQtcGFyYW1ldGVycy5tZCkgZm9yIG1vcmUgZGV0YWlscy5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#underscores-for-unused-parameters"
            ],
            "flags": 0,
            "guid": "B@s{ZmKq?w",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>Underscores</b> in numeric literals",
                "<p>Just as in Java 8, Kotlin now allows to use underscores in numeric literals to separate groups of digits:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">oneMillion</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">1</span><span style=\"color: #000000\">_000_000</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">hexBytes</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000\">xFF_EC_DE_5E</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">bytes</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000\">b11010010_01101001_10010100_10010010</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">oneMillion</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">hexBytes</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toString</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">16</span><span style=\"color: #000000; font-weight: bold\">))</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">bytes</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toString</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">2</span><span style=\"color: #000000; font-weight: bold\">))</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Read the <a href=\"https://github.com/Kotlin/KEEP/blob/master/proposals/underscores-in-numeric-literals.md\">KEEP</a> for more details.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzkwMTEsICJpZCI6ICIxNDg5MjU1Mjg0MzcxLTAwMSIsICJtZCI6ICJKdXN0IGFzIGluIEphdmEgOCwgS290bGluIG5vdyBhbGxvd3MgdG8gdXNlIHVuZGVyc2NvcmVzIGluIG51bWVyaWMgbGl0ZXJhbHMgdG8gc2VwYXJhdGUgZ3JvdXBzIG9mIGRpZ2l0czpcbiAgXG4gIFxuYGBgIGtvdGxpblxudmFsIG9uZU1pbGxpb24gPSAxXzAwMF8wMDBcbnZhbCBoZXhCeXRlcyA9IDB4RkZfRUNfREVfNUVcbnZhbCBieXRlcyA9IDBiMTEwMTAwMTBfMDExMDEwMDFfMTAwMTAxMDBfMTAwMTAwMTBcbiAgXG5mdW4gbWFpbihhcmdzOiBBcnJheSZsdDtTdHJpbmcmZ3Q7KSB7XG4gICAgcHJpbnRsbihvbmVNaWxsaW9uKVxuICAgIHByaW50bG4oaGV4Qnl0ZXMudG9TdHJpbmcoMTYpKVxuICAgIHByaW50bG4oYnl0ZXMudG9TdHJpbmcoMikpXG59XG5gYGBcbiAgXG5SZWFkIHRoZSBbS0VFUF0oaHR0cHM6Ly9naXRodWIuY29tL0tvdGxpbi9LRUVQL2Jsb2IvbWFzdGVyL3Byb3Bvc2Fscy91bmRlcnNjb3Jlcy1pbi1udW1lcmljLWxpdGVyYWxzLm1kKSBmb3IgbW9yZSBkZXRhaWxzLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#underscores-in-numeric-literals"
            ],
            "flags": 0,
            "guid": "g_RBQ&:Qcb",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;Shorter syntax for properties",
                "<p>For properties with the getter defined as an expression body, the property type can now be omitted:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Person</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">age</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">isAdult</span> <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">age</span> <span style=\"color: #000000; font-weight: bold\">&gt;=</span> <span style=\"color: #0000cf; font-weight: bold\">20</span> <span style=\"color: #8f5902; font-style: italic\">// Property type inferred to be 'Boolean'</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">akari</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Person</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Akari\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">26</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"$akari.isAdult = ${akari.isAdult}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzkwMjQsICJpZCI6ICIxNDg5MjU1MzE3NDIxLTAwMSIsICJtZCI6ICJGb3IgcHJvcGVydGllcyB3aXRoIHRoZSBnZXR0ZXIgZGVmaW5lZCBhcyBhbiBleHByZXNzaW9uIGJvZHksIHRoZSBwcm9wZXJ0eSB0eXBlIGNhbiBub3cgYmUgb21pdHRlZDpcbiAgXG4gIFxuYGBgIGtvdGxpblxuZGF0YSBjbGFzcyBQZXJzb24odmFsIG5hbWU6IFN0cmluZywgdmFsIGFnZTogSW50KSB7XG4gICAgdmFsIGlzQWR1bHQgZ2V0KCkgPSBhZ2UgJmd0Oz0gMjAgLy8gUHJvcGVydHkgdHlwZSBpbmZlcnJlZCB0byBiZSAmYXBvcztCb29sZWFuJmFwb3M7XG59XG4gIFxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhbCBha2FyaSA9IFBlcnNvbigmcXVvdDtBa2FyaSZxdW90OywgMjYpXG4gICAgcHJpbnRsbigmcXVvdDskYWthcmkuaXNBZHVsdCA9ICR7YWthcmkuaXNBZHVsdH0mcXVvdDspXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#shorter-syntax-for-properties"
            ],
            "flags": 0,
            "guid": "k-`GNQ](R$",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;Inline property accessors",
                "<p>You can now mark property accessors with the <code>inline</code> modifier if the properties don't have a backing field.<br />\nSuch accessors are compiled in the same way as <a href=\"inline-functions.html\">inline functions</a>.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">public</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;.</span><span style=\"color: #000000\">lastIndex</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span>\n    <span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span> <span style=\"color: #000000; font-weight: bold\">-</span> <span style=\"color: #0000cf; font-weight: bold\">1</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">list</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">'a'</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">'b'</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #8f5902; font-style: italic\">// the getter will be inlined</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Last index of $list is ${list.lastIndex}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>You can also mark the entire property as <code>inline</code> - then the modifier is applied to both accessors.</p>\n<p>Read the <a href=\"inline-functions.html#inline-properties-since-11\">documentation</a> and <a href=\"https://github.com/Kotlin/KEEP/blob/master/proposals/inline-properties.md\">KEEP</a> for more details.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzkwMzksICJpZCI6ICIxNDg5MjU1MzQ2NzE5LTAwMSIsICJtZCI6ICJZb3UgY2FuIG5vdyBtYXJrIHByb3BlcnR5IGFjY2Vzc29ycyB3aXRoIHRoZSBgaW5saW5lYCBtb2RpZmllciBpZiB0aGUgcHJvcGVydGllcyBkb24mYXBvczt0IGhhdmUgYSBiYWNraW5nIGZpZWxkLlxuU3VjaCBhY2Nlc3NvcnMgYXJlIGNvbXBpbGVkIGluIHRoZSBzYW1lIHdheSBhcyBbaW5saW5lIGZ1bmN0aW9uc10oaW5saW5lLWZ1bmN0aW9ucy5odG1sKS5cbiAgXG4gIFxuYGBgIGtvdGxpblxucHVibGljIHZhbCAmbHQ7VCZndDsgTGlzdCZsdDtUJmd0Oy5sYXN0SW5kZXg6IEludFxuICAgIGlubGluZSBnZXQoKSA9IHRoaXMuc2l6ZSAtIDFcbiAgXG5mdW4gbWFpbihhcmdzOiBBcnJheSZsdDtTdHJpbmcmZ3Q7KSB7XG4gICAgdmFsIGxpc3QgPSBsaXN0T2YoJmFwb3M7YSZhcG9zOywgJmFwb3M7YiZhcG9zOylcbiAgICAvLyB0aGUgZ2V0dGVyIHdpbGwgYmUgaW5saW5lZFxuICAgIHByaW50bG4oJnF1b3Q7TGFzdCBpbmRleCBvZiAkbGlzdCBpcyAke2xpc3QubGFzdEluZGV4fSZxdW90Oylcbn1cbmBgYFxuICBcbllvdSBjYW4gYWxzbyBtYXJrIHRoZSBlbnRpcmUgcHJvcGVydHkgYXMgYGlubGluZWAgLSB0aGVuIHRoZSBtb2RpZmllciBpcyBhcHBsaWVkIHRvIGJvdGggYWNjZXNzb3JzLlxuICBcblJlYWQgdGhlIFtkb2N1bWVudGF0aW9uXShpbmxpbmUtZnVuY3Rpb25zLmh0bWwjaW5saW5lLXByb3BlcnRpZXMtc2luY2UtMTEpIGFuZCBbS0VFUF0oaHR0cHM6Ly9naXRodWIuY29tL0tvdGxpbi9LRUVQL2Jsb2IvbWFzdGVyL3Byb3Bvc2Fscy9pbmxpbmUtcHJvcGVydGllcy5tZCkgZm9yIG1vcmUgZGV0YWlscy5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#inline-property-accessors"
            ],
            "flags": 0,
            "guid": "K*bnj9}bvu",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>Local delegated</b> properties",
                "<p>You can now use the <a href=\"delegated-properties.html\">delegated property</a> syntax with local variables.<br />\nOne possible use is defining a lazily evaluated local variable:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">import</span> <span style=\"color: #000000\">java.util.Random</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">needAnswer</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Random</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">nextBoolean</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">answer</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">lazy</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Calculating the answer...\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #0000cf; font-weight: bold\">42</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">needAnswer</span><span style=\"color: #000000; font-weight: bold\">())</span> <span style=\"color: #000000; font-weight: bold\">{</span>                     <span style=\"color: #8f5902; font-style: italic\">// returns the random value</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"The answer is $answer.\"</span><span style=\"color: #000000; font-weight: bold\">)</span>   <span style=\"color: #8f5902; font-style: italic\">// answer is calculated at this point</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Sometimes no answer is the answer...\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Read the <a href=\"https://github.com/Kotlin/KEEP/blob/master/proposals/local-delegated-properties.md\">KEEP</a> for more details.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzkwNTgsICJpZCI6ICIxNDg5MjU1NDE1NjM3LTAwMSIsICJtZCI6ICJZb3UgY2FuIG5vdyB1c2UgdGhlIFtkZWxlZ2F0ZWQgcHJvcGVydHldKGRlbGVnYXRlZC1wcm9wZXJ0aWVzLmh0bWwpIHN5bnRheCB3aXRoIGxvY2FsIHZhcmlhYmxlcy5cbk9uZSBwb3NzaWJsZSB1c2UgaXMgZGVmaW5pbmcgYSBsYXppbHkgZXZhbHVhdGVkIGxvY2FsIHZhcmlhYmxlOlxuICBcbiAgXG5gYGAga290bGluXG5pbXBvcnQgamF2YS51dGlsLlJhbmRvbVxuICBcbmZ1biBuZWVkQW5zd2VyKCkgPSBSYW5kb20oKS5uZXh0Qm9vbGVhbigpXG4gIFxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhbCBhbnN3ZXIgYnkgbGF6eSB7XG4gICAgICAgIHByaW50bG4oJnF1b3Q7Q2FsY3VsYXRpbmcgdGhlIGFuc3dlci4uLiZxdW90OylcbiAgICAgICAgNDJcbiAgICB9XG4gICAgaWYgKG5lZWRBbnN3ZXIoKSkgeyAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybnMgdGhlIHJhbmRvbSB2YWx1ZVxuICAgICAgICBwcmludGxuKCZxdW90O1RoZSBhbnN3ZXIgaXMgJGFuc3dlci4mcXVvdDspICAgLy8gYW5zd2VyIGlzIGNhbGN1bGF0ZWQgYXQgdGhpcyBwb2ludFxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcHJpbnRsbigmcXVvdDtTb21ldGltZXMgbm8gYW5zd2VyIGlzIHRoZSBhbnN3ZXIuLi4mcXVvdDspXG4gICAgfVxufVxuYGBgXG4gIFxuUmVhZCB0aGUgW0tFRVBdKGh0dHBzOi8vZ2l0aHViLmNvbS9Lb3RsaW4vS0VFUC9ibG9iL21hc3Rlci9wcm9wb3NhbHMvbG9jYWwtZGVsZWdhdGVkLXByb3BlcnRpZXMubWQpIGZvciBtb3JlIGRldGFpbHMuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#local-delegated-properties"
            ],
            "flags": 0,
            "guid": "K3fG)]-+M+",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;Interception of delegated property binding",
                "<p>For <a href=\"delegated-properties.html\">delegated properties</a>, it is now possible to intercept delegate to property binding using the <code>provideDelegate</code> operator.<br />\nFor example, if we want to check the property name before binding, we can write something like this:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">ResourceLoader</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;(</span><span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ResourceID</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">provideDelegate</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">thisRef</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MyUI</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">KProperty</span><span style=\"color: #000000; font-weight: bold\">&lt;*&gt;):</span> <span style=\"color: #000000\">ReadOnlyProperty</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">MyUI</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">checkProperty</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">thisRef</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #8f5902; font-style: italic\">// property creation</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">checkProperty</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">thisRef</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MyUI</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">bindResource</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ResourceID</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;):</span> <span style=\"color: #000000\">ResourceLoader</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">...</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">MyUI</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">image</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">bindResource</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ResourceID</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">image_id</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">text</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">bindResource</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">ResourceID</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">text_id</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>The <code>provideDelegate</code> method will be called for each property during the creation of a <code>MyUI</code> instance, and it can perform the necessary validation right away.</p>\n<p>Read the <a href=\"delegated-properties.html#providing-a-delegate-since-11\">documentation</a> for more details.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk3ODAsICJpZCI6ICIxNDg5MjU1NDQ3MDg1LTAwMSIsICJtZCI6ICJGb3IgW2RlbGVnYXRlZCBwcm9wZXJ0aWVzXShkZWxlZ2F0ZWQtcHJvcGVydGllcy5odG1sKSwgaXQgaXMgbm93IHBvc3NpYmxlIHRvIGludGVyY2VwdCBkZWxlZ2F0ZSB0byBwcm9wZXJ0eSBiaW5kaW5nIHVzaW5nIHRoZSBgcHJvdmlkZURlbGVnYXRlYCBvcGVyYXRvci5cbkZvciBleGFtcGxlLCBpZiB3ZSB3YW50IHRvIGNoZWNrIHRoZSBwcm9wZXJ0eSBuYW1lIGJlZm9yZSBiaW5kaW5nLCB3ZSBjYW4gd3JpdGUgc29tZXRoaW5nIGxpa2UgdGhpczpcbiAgXG5gYGAga290bGluXG5jbGFzcyBSZXNvdXJjZUxvYWRlciZsdDtUJmd0OyhpZDogUmVzb3VyY2VJRCZsdDtUJmd0Oykge1xuICAgIG9wZXJhdG9yIGZ1biBwcm92aWRlRGVsZWdhdGUodGhpc1JlZjogTXlVSSwgcHJvcDogS1Byb3BlcnR5Jmx0OyomZ3Q7KTogUmVhZE9ubHlQcm9wZXJ0eSZsdDtNeVVJLCBUJmd0OyB7XG4gICAgICAgIGNoZWNrUHJvcGVydHkodGhpc1JlZiwgcHJvcC5uYW1lKVxuICAgICAgICAuLi4gLy8gcHJvcGVydHkgY3JlYXRpb25cbiAgICB9XG4gIFxuICAgIHByaXZhdGUgZnVuIGNoZWNrUHJvcGVydHkodGhpc1JlZjogTXlVSSwgbmFtZTogU3RyaW5nKSB7IC4uLiB9XG59XG4gIFxuZnVuICZsdDtUJmd0OyBiaW5kUmVzb3VyY2UoaWQ6IFJlc291cmNlSUQmbHQ7VCZndDspOiBSZXNvdXJjZUxvYWRlciZsdDtUJmd0OyB7IC4uLiB9XG4gIFxuY2xhc3MgTXlVSSB7XG4gICAgdmFsIGltYWdlIGJ5IGJpbmRSZXNvdXJjZShSZXNvdXJjZUlELmltYWdlX2lkKVxuICAgIHZhbCB0ZXh0IGJ5IGJpbmRSZXNvdXJjZShSZXNvdXJjZUlELnRleHRfaWQpXG59XG5gYGBcbiAgXG5UaGUgYHByb3ZpZGVEZWxlZ2F0ZWAgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoIHByb3BlcnR5IGR1cmluZyB0aGUgY3JlYXRpb24gb2YgYSBgTXlVSWAgaW5zdGFuY2UsIGFuZCBpdCBjYW4gcGVyZm9ybSB0aGUgbmVjZXNzYXJ5IHZhbGlkYXRpb24gcmlnaHQgYXdheS5cbiAgXG5SZWFkIHRoZSBbZG9jdW1lbnRhdGlvbl0oZGVsZWdhdGVkLXByb3BlcnRpZXMuaHRtbCNwcm92aWRpbmctYS1kZWxlZ2F0ZS1zaW5jZS0xMSkgZm9yIG1vcmUgZGV0YWlscy5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#interception-of-delegated-property-binding"
            ],
            "flags": 0,
            "guid": "Avg}#[D8~6",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;Generic <b>enum</b> value access",
                "<p>It is now possible to enumerate the values of an enum class in a generic way.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">enum</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">RGB</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">RED</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">GREEN</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">BLUE</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">reified</span> <span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Enum</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;&gt;</span> <span style=\"color: #000000\">printAllValues</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">enumValues</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">T</span><span style=\"color: #000000; font-weight: bold\">&gt;().</span><span style=\"color: #000000\">joinToString</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span> <span style=\"color: #000000; font-weight: bold\">})</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">printAllValues</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">RGB</span><span style=\"color: #000000; font-weight: bold\">&gt;()</span> <span style=\"color: #8f5902; font-style: italic\">// prints RED, GREEN, BLUE</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzkwOTMsICJpZCI6ICIxNDg5MjU1NDc4NDUzLTAwMSIsICJtZCI6ICJJdCBpcyBub3cgcG9zc2libGUgdG8gZW51bWVyYXRlIHRoZSB2YWx1ZXMgb2YgYW4gZW51bSBjbGFzcyBpbiBhIGdlbmVyaWMgd2F5LlxuICBcbiAgXG5gYGAga290bGluXG5lbnVtIGNsYXNzIFJHQiB7IFJFRCwgR1JFRU4sIEJMVUUgfVxuICBcbmlubGluZSBmdW4gJmx0O3JlaWZpZWQgVCA6IEVudW0mbHQ7VCZndDsmZ3Q7IHByaW50QWxsVmFsdWVzKCkge1xuICAgIHByaW50KGVudW1WYWx1ZXMmbHQ7VCZndDsoKS5qb2luVG9TdHJpbmcgeyBpdC5uYW1lIH0pXG59XG4gIFxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHByaW50QWxsVmFsdWVzJmx0O1JHQiZndDsoKSAvLyBwcmludHMgUkVELCBHUkVFTiwgQkxVRVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#generic-enum-value-access"
            ],
            "flags": 0,
            "guid": "g&rNJi^.aM",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;Scope control for implicit receivers in <b>DSLs</b>",
                "<p>The <a href=\"/api/latest/jvm/stdlib/kotlin/-dsl-marker/index.html\"><code>@DslMarker</code></a> annotation allows to restrict the use of receivers from outer scopes in a DSL context.</p>\n<p>Consider the canonical <a href=\"type-safe-builders.html\">HTML builder example</a>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">table</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">tr</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">td</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">+</span><span style=\"color: #4e9a06\">\"Text\"</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>In Kotlin 1.0, code in the lambda passed to <code>td</code> has access to three implicit receivers: the one passed to <code>table</code>, to <code>tr</code> and to <code>td</code>. This allows you to call methods that make no sense in the context - for example to call <code>tr</code> inside <code>td</code> and thus to put a <code>&lt;tr&gt;</code> tag in a <code>&lt;td&gt;</code>.</p>\n<p>In Kotlin 1.1, you can restrict that, so that only methods defined on the implicit receiver of <code>td</code> will be available inside the lambda passed to <code>td</code>. You do that by defining your annotation marked with the <code>@DslMarker</code> meta-annotation and applying it to the base class of the tag classes.</p>\n<p>Read the <a href=\"type-safe-builders.html#scope-control-dslmarker-since-11\">documentation</a> and <a href=\"https://github.com/Kotlin/KEEP/blob/master/proposals/scope-control-for-implicit-receivers.md\">KEEP</a> for more details.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk4MTgsICJpZCI6ICIxNDg5MjU1NTAxNDQ3LTAwMSIsICJtZCI6ICJUaGUgW2BARHNsTWFya2VyYF0oL2FwaS9sYXRlc3QvanZtL3N0ZGxpYi9rb3RsaW4vLWRzbC1tYXJrZXIvaW5kZXguaHRtbCkgYW5ub3RhdGlvbiBhbGxvd3MgdG8gcmVzdHJpY3QgdGhlIHVzZSBvZiByZWNlaXZlcnMgZnJvbSBvdXRlciBzY29wZXMgaW4gYSBEU0wgY29udGV4dC5cbiAgXG5Db25zaWRlciB0aGUgY2Fub25pY2FsIFtIVE1MIGJ1aWxkZXIgZXhhbXBsZV0odHlwZS1zYWZlLWJ1aWxkZXJzLmh0bWwpOlxuICBcbmBgYGtvdGxpblxudGFibGUge1xuICAgIHRyIHtcbiAgICAgICAgdGQgeyArJnF1b3Q7VGV4dCZxdW90OyB9XG4gICAgfVxufVxuYGBgXG4gIFxuSW4gS290bGluIDEuMCwgY29kZSBpbiB0aGUgbGFtYmRhIHBhc3NlZCB0byBgdGRgIGhhcyBhY2Nlc3MgdG8gdGhyZWUgaW1wbGljaXQgcmVjZWl2ZXJzOiB0aGUgb25lIHBhc3NlZCB0byBgdGFibGVgLCB0byBgdHJgIGFuZCB0byBgdGRgLiBUaGlzIGFsbG93cyB5b3UgdG8gY2FsbCBtZXRob2RzIHRoYXQgbWFrZSBubyBzZW5zZSBpbiB0aGUgY29udGV4dCAtIGZvciBleGFtcGxlIHRvIGNhbGwgYHRyYCBpbnNpZGUgYHRkYCBhbmQgdGh1cyB0byBwdXQgYSBgJmx0O3RyJmd0O2AgdGFnIGluIGEgYCZsdDt0ZCZndDtgLlxuICBcbkluIEtvdGxpbiAxLjEsIHlvdSBjYW4gcmVzdHJpY3QgdGhhdCwgc28gdGhhdCBvbmx5IG1ldGhvZHMgZGVmaW5lZCBvbiB0aGUgaW1wbGljaXQgcmVjZWl2ZXIgb2YgYHRkYCB3aWxsIGJlIGF2YWlsYWJsZSBpbnNpZGUgdGhlIGxhbWJkYSBwYXNzZWQgdG8gYHRkYC4gWW91IGRvIHRoYXQgYnkgZGVmaW5pbmcgeW91ciBhbm5vdGF0aW9uIG1hcmtlZCB3aXRoIHRoZSBgQERzbE1hcmtlcmAgbWV0YS1hbm5vdGF0aW9uIGFuZCBhcHBseWluZyBpdCB0byB0aGUgYmFzZSBjbGFzcyBvZiB0aGUgdGFnIGNsYXNzZXMuXG4gIFxuUmVhZCB0aGUgW2RvY3VtZW50YXRpb25dKHR5cGUtc2FmZS1idWlsZGVycy5odG1sI3Njb3BlLWNvbnRyb2wtZHNsbWFya2VyLXNpbmNlLTExKSBhbmQgW0tFRVBdKGh0dHBzOi8vZ2l0aHViLmNvbS9Lb3RsaW4vS0VFUC9ibG9iL21hc3Rlci9wcm9wb3NhbHMvc2NvcGUtY29udHJvbC1mb3ItaW1wbGljaXQtcmVjZWl2ZXJzLm1kKSBmb3IgbW9yZSBkZXRhaWxzLlxuIn0=---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#scope-control-for-implicit-receivers-in-dsls"
            ],
            "flags": 0,
            "guid": "d9Xr&Cpv+G",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>rem</b> operator",
                "<p>The <code>mod</code> operator is now deprecated, and <code>rem</code> is used instead. See <a href=\"https://youtrack.jetbrains.com/issue/KT-14650\">this issue</a> for motivation.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzkxMjQsICJpZCI6ICIxNDg5MjU1NTIyNTA4LTAwMSIsICJtZCI6ICJUaGUgYG1vZGAgb3BlcmF0b3IgaXMgbm93IGRlcHJlY2F0ZWQsIGFuZCBgcmVtYCBpcyB1c2VkIGluc3RlYWQuIFNlZSBbdGhpcyBpc3N1ZV0oaHR0cHM6Ly95b3V0cmFjay5qZXRicmFpbnMuY29tL2lzc3VlL0tULTE0NjUwKSBmb3IgbW90aXZhdGlvbi5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#rem-operator"
            ],
            "flags": 0,
            "guid": "nJ{u2@}yQu",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>String</b> to <b>number</b> conversions",
                "<p>There is a bunch of new extensions on the String class to convert it to a number without throwing an exception on invalid number: <code>String.toIntOrNull(): Int?</code>, <code>String.toDoubleOrNull(): Double?</code> etc.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">port</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">System</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">getenv</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"PORT\"</span><span style=\"color: #000000; font-weight: bold\">)</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">toIntOrNull</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #0000cf; font-weight: bold\">80</span>\n</pre></div>\n<p>Also integer conversion functions, like <code>Int.toString()</code>, <code>String.toInt()</code>, <code>String.toIntOrNull()</code>, each got an overload with <code>radix</code> parameter, which allows to specify the base of conversion (2 to 36).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk4MzcsICJpZCI6ICIxNDg5MjU1NTQyNjYxLTAwMSIsICJtZCI6ICJUaGVyZSBpcyBhIGJ1bmNoIG9mIG5ldyBleHRlbnNpb25zIG9uIHRoZSBTdHJpbmcgY2xhc3MgdG8gY29udmVydCBpdCB0byBhIG51bWJlciB3aXRob3V0IHRocm93aW5nIGFuIGV4Y2VwdGlvbiBvbiBpbnZhbGlkIG51bWJlcjogYFN0cmluZy50b0ludE9yTnVsbCgpOiBJbnQ/YCwgYFN0cmluZy50b0RvdWJsZU9yTnVsbCgpOiBEb3VibGU/YCBldGMuXG4gIFxuYGBga290bGluXG52YWwgcG9ydCA9IFN5c3RlbS5nZXRlbnYoJnF1b3Q7UE9SVCZxdW90Oyk/LnRvSW50T3JOdWxsKCkgPzogODBcbmBgYFxuICBcbkFsc28gaW50ZWdlciBjb252ZXJzaW9uIGZ1bmN0aW9ucywgbGlrZSBgSW50LnRvU3RyaW5nKClgLCBgU3RyaW5nLnRvSW50KClgLCBgU3RyaW5nLnRvSW50T3JOdWxsKClgLCBlYWNoIGdvdCBhbiBvdmVybG9hZCB3aXRoIGByYWRpeGAgcGFyYW1ldGVyLCB3aGljaCBhbGxvd3MgdG8gc3BlY2lmeSB0aGUgYmFzZSBvZiBjb252ZXJzaW9uICgyIHRvIDM2KS5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#string-to-number-conversions"
            ],
            "flags": 0,
            "guid": "h:IocctC:U",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;onEach()",
                "<p><code>onEach</code> is a small, but useful extension function for collections and sequences, which allows to perform some action,<br />\npossibly with side-effects, on each element of the collection/sequence in a chain of operations.<br />\nOn iterables it behaves like <code>forEach</code> but also returns the iterable instance further. And on sequences it returns a<br />\nwrapping sequence, which applies the given action lazily as the elements are being iterated.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">inputDir</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">walk</span><span style=\"color: #000000; font-weight: bold\">()</span>\n        <span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">filter</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">isFile</span> <span style=\"color: #000000; font-weight: bold\">&amp;&amp;</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">endsWith</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\".txt\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">onEach</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Moving $it to $outputDir\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">forEach</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">moveFile</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">File</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">outputDir</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toRelativeString</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">inputDir</span><span style=\"color: #000000; font-weight: bold\">)))</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk4NTIsICJpZCI6ICIxNDg5MjU1NTczMjY1LTAwMSIsICJtZCI6ICJgb25FYWNoYCBpcyBhIHNtYWxsLCBidXQgdXNlZnVsIGV4dGVuc2lvbiBmdW5jdGlvbiBmb3IgY29sbGVjdGlvbnMgYW5kIHNlcXVlbmNlcywgd2hpY2ggYWxsb3dzIHRvIHBlcmZvcm0gc29tZSBhY3Rpb24sXG5wb3NzaWJseSB3aXRoIHNpZGUtZWZmZWN0cywgb24gZWFjaCBlbGVtZW50IG9mIHRoZSBjb2xsZWN0aW9uL3NlcXVlbmNlIGluIGEgY2hhaW4gb2Ygb3BlcmF0aW9ucy5cbk9uIGl0ZXJhYmxlcyBpdCBiZWhhdmVzIGxpa2UgYGZvckVhY2hgIGJ1dCBhbHNvIHJldHVybnMgdGhlIGl0ZXJhYmxlIGluc3RhbmNlIGZ1cnRoZXIuIEFuZCBvbiBzZXF1ZW5jZXMgaXQgcmV0dXJucyBhXG53cmFwcGluZyBzZXF1ZW5jZSwgd2hpY2ggYXBwbGllcyB0aGUgZ2l2ZW4gYWN0aW9uIGxhemlseSBhcyB0aGUgZWxlbWVudHMgYXJlIGJlaW5nIGl0ZXJhdGVkLlxuICBcbmBgYGtvdGxpblxuaW5wdXREaXIud2FsaygpXG4gICAgICAgIC5maWx0ZXIgeyBpdC5pc0ZpbGUgJmFtcDsmYW1wOyBpdC5uYW1lLmVuZHNXaXRoKCZxdW90Oy50eHQmcXVvdDspIH1cbiAgICAgICAgLm9uRWFjaCB7IHByaW50bG4oJnF1b3Q7TW92aW5nICRpdCB0byAkb3V0cHV0RGlyJnF1b3Q7KSB9XG4gICAgICAgIC5mb3JFYWNoIHsgbW92ZUZpbGUoaXQsIEZpbGUob3V0cHV0RGlyLCBpdC50b1JlbGF0aXZlU3RyaW5nKGlucHV0RGlyKSkpIH1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#oneach"
            ],
            "flags": 0,
            "guid": "A4IVrh.zV<",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;also(), takeIf() and takeUnless()",
                "<p>These are three general-purpose extension functions applicable to any receiver.</p>\n<p><code>also</code> is like <code>apply</code>: it takes the receiver, does some action on it, and returns that receiver. <br />\nThe difference is that in the block inside <code>apply</code> the receiver is available as <code>this</code>, while in the block inside <code>also</code> it's available as <code>it</code> (and you can give it another name if you want).<br />\nThis comes handy when you do not want to shadow <code>this</code> from the outer scope:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Block</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">lateinit</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">content</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">Block</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">copy</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Block</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">also</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">content</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">content</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">// using 'apply' instead</span>\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">Block</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">copy1</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Block</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">apply</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">content</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000\">@copy1</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">content</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">block</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Block</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">apply</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">content</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"content\"</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">copy</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">block</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">copy</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Testing the content was copied:\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">block</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">content</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #000000\">copy</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">content</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p><code>takeIf</code> is like <code>filter</code> for a single value. It checks whether the receiver meets the predicate, and returns the receiver, if it does or <code>null</code> if it doesn't.<br />\nCombined with an elvis-operator and early returns it allows to write constructs like:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">outDirFile</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">File</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">outputDir</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">path</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">takeIf</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">exists</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #204a87; font-weight: bold\">false</span>\n<span style=\"color: #8f5902; font-style: italic\">// do something with existing outDirFile</span>\n</pre></div>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">input</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"Kotlin\"</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">keyword</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"in\"</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">index</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">input</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">indexOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">keyword</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">takeIf</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">&gt;=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #000000\">error</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"keyword not found\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #8f5902; font-style: italic\">// do something with index of keyword in input string, given that it's found</span>\n\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"'$keyword' was found in '$input'\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">input</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\" \"</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">repeat</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">index</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #4e9a06\">\"^\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p><code>takeUnless</code> is the same as <code>takeIf</code>, but it takes the inverted predicate. It returns the receiver when it <em>doesn't</em> meet the predicate and <code>null</code> otherwise. So one of the examples above could be rewritten with <code>takeUnless</code> as following:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">index</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">input</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">indexOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">keyword</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">takeUnless</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">&lt;</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #000000\">error</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"keyword not found\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>It is also convenient to use when you have a callable reference instead of the lambda:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">testTakeUnless</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">string</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">result</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">string</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">takeUnless</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">String</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #000000\">isEmpty</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"string = \\\"$string\\\"; result = \\\"$result\\\"\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">testTakeUnless</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">testTakeUnless</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"abc\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk4ODcsICJpZCI6ICIxNDg5MjU1NTk4MDUxLTAwMSIsICJtZCI6ICJUaGVzZSBhcmUgdGhyZWUgZ2VuZXJhbC1wdXJwb3NlIGV4dGVuc2lvbiBmdW5jdGlvbnMgYXBwbGljYWJsZSB0byBhbnkgcmVjZWl2ZXIuXG4gIFxuYGFsc29gIGlzIGxpa2UgYGFwcGx5YDogaXQgdGFrZXMgdGhlIHJlY2VpdmVyLCBkb2VzIHNvbWUgYWN0aW9uIG9uIGl0LCBhbmQgcmV0dXJucyB0aGF0IHJlY2VpdmVyLiBcblRoZSBkaWZmZXJlbmNlIGlzIHRoYXQgaW4gdGhlIGJsb2NrIGluc2lkZSBgYXBwbHlgIHRoZSByZWNlaXZlciBpcyBhdmFpbGFibGUgYXMgYHRoaXNgLCB3aGlsZSBpbiB0aGUgYmxvY2sgaW5zaWRlIGBhbHNvYCBpdCZhcG9zO3MgYXZhaWxhYmxlIGFzIGBpdGAgKGFuZCB5b3UgY2FuIGdpdmUgaXQgYW5vdGhlciBuYW1lIGlmIHlvdSB3YW50KS5cblRoaXMgY29tZXMgaGFuZHkgd2hlbiB5b3UgZG8gbm90IHdhbnQgdG8gc2hhZG93IGB0aGlzYCBmcm9tIHRoZSBvdXRlciBzY29wZTpcbiAgXG5gYGAga290bGluXG5jbGFzcyBCbG9jayB7XG4gICAgbGF0ZWluaXQgdmFyIGNvbnRlbnQ6IFN0cmluZ1xufVxuICBcbmZ1biBCbG9jay5jb3B5KCkgPSBCbG9jaygpLmFsc28ge1xuICAgIGl0LmNvbnRlbnQgPSB0aGlzLmNvbnRlbnRcbn1cbiAgXG4vLyB1c2luZyAmYXBvczthcHBseSZhcG9zOyBpbnN0ZWFkXG5mdW4gQmxvY2suY29weTEoKSA9IEJsb2NrKCkuYXBwbHkge1xuICAgIHRoaXMuY29udGVudCA9IHRoaXNAY29weTEuY29udGVudFxufVxuICBcbmZ1biBtYWluKGFyZ3M6IEFycmF5Jmx0O1N0cmluZyZndDspIHtcbiAgICB2YWwgYmxvY2sgPSBCbG9jaygpLmFwcGx5IHsgY29udGVudCA9ICZxdW90O2NvbnRlbnQmcXVvdDsgfVxuICAgIHZhbCBjb3B5ID0gYmxvY2suY29weSgpXG4gICAgcHJpbnRsbigmcXVvdDtUZXN0aW5nIHRoZSBjb250ZW50IHdhcyBjb3BpZWQ6JnF1b3Q7KVxuICAgIHByaW50bG4oYmxvY2suY29udGVudCA9PSBjb3B5LmNvbnRlbnQpXG59XG5gYGBcbiAgXG5gdGFrZUlmYCBpcyBsaWtlIGBmaWx0ZXJgIGZvciBhIHNpbmdsZSB2YWx1ZS4gSXQgY2hlY2tzIHdoZXRoZXIgdGhlIHJlY2VpdmVyIG1lZXRzIHRoZSBwcmVkaWNhdGUsIGFuZCByZXR1cm5zIHRoZSByZWNlaXZlciwgaWYgaXQgZG9lcyBvciBgbnVsbGAgaWYgaXQgZG9lc24mYXBvczt0LlxuQ29tYmluZWQgd2l0aCBhbiBlbHZpcy1vcGVyYXRvciBhbmQgZWFybHkgcmV0dXJucyBpdCBhbGxvd3MgdG8gd3JpdGUgY29uc3RydWN0cyBsaWtlOlxuICBcbmBgYCBrb3RsaW5cbnZhbCBvdXREaXJGaWxlID0gRmlsZShvdXRwdXREaXIucGF0aCkudGFrZUlmIHsgaXQuZXhpc3RzKCkgfSA/OiByZXR1cm4gZmFsc2Vcbi8vIGRvIHNvbWV0aGluZyB3aXRoIGV4aXN0aW5nIG91dERpckZpbGVcbmBgYFxuICBcbiAgXG5gYGAga290bGluXG5mdW4gbWFpbihhcmdzOiBBcnJheSZsdDtTdHJpbmcmZ3Q7KSB7XG4gICAgdmFsIGlucHV0ID0gJnF1b3Q7S290bGluJnF1b3Q7XG4gICAgdmFsIGtleXdvcmQgPSAmcXVvdDtpbiZxdW90O1xuICBcbiAgICB2YWwgaW5kZXggPSBpbnB1dC5pbmRleE9mKGtleXdvcmQpLnRha2VJZiB7IGl0ICZndDs9IDAgfSA/OiBlcnJvcigmcXVvdDtrZXl3b3JkIG5vdCBmb3VuZCZxdW90OylcbiAgICAvLyBkbyBzb21ldGhpbmcgd2l0aCBpbmRleCBvZiBrZXl3b3JkIGluIGlucHV0IHN0cmluZywgZ2l2ZW4gdGhhdCBpdCZhcG9zO3MgZm91bmRcbiAgXG4gICAgcHJpbnRsbigmcXVvdDsmYXBvczska2V5d29yZCZhcG9zOyB3YXMgZm91bmQgaW4gJmFwb3M7JGlucHV0JmFwb3M7JnF1b3Q7KVxuICAgIHByaW50bG4oaW5wdXQpXG4gICAgcHJpbnRsbigmcXVvdDsgJnF1b3Q7LnJlcGVhdChpbmRleCkgKyAmcXVvdDteJnF1b3Q7KVxufVxuYGBgXG4gIFxuYHRha2VVbmxlc3NgIGlzIHRoZSBzYW1lIGFzIGB0YWtlSWZgLCBidXQgaXQgdGFrZXMgdGhlIGludmVydGVkIHByZWRpY2F0ZS4gSXQgcmV0dXJucyB0aGUgcmVjZWl2ZXIgd2hlbiBpdCBfZG9lc24mYXBvczt0XyBtZWV0IHRoZSBwcmVkaWNhdGUgYW5kIGBudWxsYCBvdGhlcndpc2UuIFNvIG9uZSBvZiB0aGUgZXhhbXBsZXMgYWJvdmUgY291bGQgYmUgcmV3cml0dGVuIHdpdGggYHRha2VVbmxlc3NgIGFzIGZvbGxvd2luZzpcbiAgXG5gYGAga290bGluXG52YWwgaW5kZXggPSBpbnB1dC5pbmRleE9mKGtleXdvcmQpLnRha2VVbmxlc3MgeyBpdCAmbHQ7IDAgfSA/OiBlcnJvcigmcXVvdDtrZXl3b3JkIG5vdCBmb3VuZCZxdW90OylcbmBgYFxuICBcbkl0IGlzIGFsc28gY29udmVuaWVudCB0byB1c2Ugd2hlbiB5b3UgaGF2ZSBhIGNhbGxhYmxlIHJlZmVyZW5jZSBpbnN0ZWFkIG9mIHRoZSBsYW1iZGE6XG4gIFxuICBcbmBgYCBrb3RsaW5cbnByaXZhdGUgZnVuIHRlc3RUYWtlVW5sZXNzKHN0cmluZzogU3RyaW5nKSB7XG4gICAgdmFsIHJlc3VsdCA9IHN0cmluZy50YWtlVW5sZXNzKFN0cmluZzo6aXNFbXB0eSlcbiAgXG4gICAgcHJpbnRsbigmcXVvdDtzdHJpbmcgPSBcXCZxdW90OyRzdHJpbmdcXCZxdW90OzsgcmVzdWx0ID0gXFwmcXVvdDskcmVzdWx0XFwmcXVvdDsmcXVvdDspXG59XG4gIFxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHRlc3RUYWtlVW5sZXNzKCZxdW90OyZxdW90OylcbiAgICB0ZXN0VGFrZVVubGVzcygmcXVvdDthYmMmcXVvdDspXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#also-takeif-and-takeunless"
            ],
            "flags": 0,
            "guid": "sb$H=m0S;?",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;groupingBy()",
                "<p>This API can be used to group a collection by key and fold each group simultaneously. For example, it can be used<br />\nto count the number of words starting with each letter:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">words</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"one two three four five six seven eight nine ten\"</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">split</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">' '</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">frequencies</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">words</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">groupingBy</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">first</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">}.</span><span style=\"color: #000000\">eachCount</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Counting first letters: $frequencies.\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #8f5902; font-style: italic\">// The alternative way that uses 'groupBy' and 'mapValues' creates an intermediate map, </span>\n    <span style=\"color: #8f5902; font-style: italic\">// while 'groupingBy' way counts on the fly.</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">groupBy</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">words</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">groupBy</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">first</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">}.</span><span style=\"color: #000000\">mapValues</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">_</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">list</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Comparing the result with using 'groupBy': ${groupBy == frequencies}.\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzkyNDIsICJpZCI6ICIxNDg5MjU1NjYzNTkzLTAwMSIsICJtZCI6ICJUaGlzIEFQSSBjYW4gYmUgdXNlZCB0byBncm91cCBhIGNvbGxlY3Rpb24gYnkga2V5IGFuZCBmb2xkIGVhY2ggZ3JvdXAgc2ltdWx0YW5lb3VzbHkuIEZvciBleGFtcGxlLCBpdCBjYW4gYmUgdXNlZFxudG8gY291bnQgdGhlIG51bWJlciBvZiB3b3JkcyBzdGFydGluZyB3aXRoIGVhY2ggbGV0dGVyOlxuICBcbiAgXG5gYGAga290bGluXG5mdW4gbWFpbihhcmdzOiBBcnJheSZsdDtTdHJpbmcmZ3Q7KSB7XG4gICAgdmFsIHdvcmRzID0gJnF1b3Q7b25lIHR3byB0aHJlZSBmb3VyIGZpdmUgc2l4IHNldmVuIGVpZ2h0IG5pbmUgdGVuJnF1b3Q7LnNwbGl0KCZhcG9zOyAmYXBvczspXG4gICAgdmFsIGZyZXF1ZW5jaWVzID0gd29yZHMuZ3JvdXBpbmdCeSB7IGl0LmZpcnN0KCkgfS5lYWNoQ291bnQoKVxuICAgIHByaW50bG4oJnF1b3Q7Q291bnRpbmcgZmlyc3QgbGV0dGVyczogJGZyZXF1ZW5jaWVzLiZxdW90OylcbiAgXG4gICAgLy8gVGhlIGFsdGVybmF0aXZlIHdheSB0aGF0IHVzZXMgJmFwb3M7Z3JvdXBCeSZhcG9zOyBhbmQgJmFwb3M7bWFwVmFsdWVzJmFwb3M7IGNyZWF0ZXMgYW4gaW50ZXJtZWRpYXRlIG1hcCwgXG4gICAgLy8gd2hpbGUgJmFwb3M7Z3JvdXBpbmdCeSZhcG9zOyB3YXkgY291bnRzIG9uIHRoZSBmbHkuXG4gICAgdmFsIGdyb3VwQnkgPSB3b3Jkcy5ncm91cEJ5IHsgaXQuZmlyc3QoKSB9Lm1hcFZhbHVlcyB7IChfLCBsaXN0KSAtJmd0OyBsaXN0LnNpemUgfVxuICAgIHByaW50bG4oJnF1b3Q7Q29tcGFyaW5nIHRoZSByZXN1bHQgd2l0aCB1c2luZyAmYXBvcztncm91cEJ5JmFwb3M7OiAke2dyb3VwQnkgPT0gZnJlcXVlbmNpZXN9LiZxdW90Oylcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#groupingby"
            ],
            "flags": 0,
            "guid": "cQd~55*PF!",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;Map.toMap() and Map.toMutableMap()",
                "<p>These functions can be used for easy copying of maps:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">ImmutablePropertyBag</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Map</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">Any</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">mapCopy</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toMap</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzkyNTAsICJpZCI6ICIxNDg5MjU1Njg4ODI5LTAwMSIsICJtZCI6ICJUaGVzZSBmdW5jdGlvbnMgY2FuIGJlIHVzZWQgZm9yIGVhc3kgY29weWluZyBvZiBtYXBzOlxuICBcbmBgYCBrb3RsaW5cbmNsYXNzIEltbXV0YWJsZVByb3BlcnR5QmFnKG1hcDogTWFwJmx0O1N0cmluZywgQW55Jmd0Oykge1xuICAgIHByaXZhdGUgdmFsIG1hcENvcHkgPSBtYXAudG9NYXAoKVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#maptomap-and-maptomutablemap"
            ],
            "flags": 0,
            "guid": "b(3Y<ks=No",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;Map.minus(key)",
                "<p>The operator <code>plus</code> provides a way to add key-value pair(s) to a read-only map producing a new map, however there was not a simple way to do the opposite: to remove a key from the map you have to resort to less straightforward ways to like <code>Map.filter()</code> or <code>Map.filterKeys()</code>.</p>\n<p>Now the operator <code>minus</code> fills this gap. There are 4 overloads available: for removing a single key, a collection of keys, a sequence of keys and an array of keys.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">map</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">mapOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"key\"</span> <span style=\"color: #000000\">to</span> <span style=\"color: #0000cf; font-weight: bold\">42</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">emptyMap</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">map</span> <span style=\"color: #000000; font-weight: bold\">-</span> <span style=\"color: #4e9a06\">\"key\"</span>\n\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"map: $map\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"emptyMap: $emptyMap\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYyNDc2OTgsICJpZCI6ICIxNDg5MjU1NzE1NDgyLTAwMSIsICJtZCI6ICJUaGUgb3BlcmF0b3IgYHBsdXNgIHByb3ZpZGVzIGEgd2F5IHRvIGFkZCBrZXktdmFsdWUgcGFpcihzKSB0byBhIHJlYWQtb25seSBtYXAgcHJvZHVjaW5nIGEgbmV3IG1hcCwgaG93ZXZlciB0aGVyZSB3YXMgbm90IGEgc2ltcGxlIHdheSB0byBkbyB0aGUgb3Bwb3NpdGU6IHRvIHJlbW92ZSBhIGtleSBmcm9tIHRoZSBtYXAgeW91IGhhdmUgdG8gcmVzb3J0IHRvIGxlc3Mgc3RyYWlnaHRmb3J3YXJkIHdheXMgdG8gbGlrZSBgTWFwLmZpbHRlcigpYCBvciBgTWFwLmZpbHRlcktleXMoKWAuXG4gIFxuICBcbk5vdyB0aGUgb3BlcmF0b3IgYG1pbnVzYCBmaWxscyB0aGlzIGdhcC4gVGhlcmUgYXJlIDQgb3ZlcmxvYWRzIGF2YWlsYWJsZTogZm9yIHJlbW92aW5nIGEgc2luZ2xlIGtleSwgYSBjb2xsZWN0aW9uIG9mIGtleXMsIGEgc2VxdWVuY2Ugb2Yga2V5cyBhbmQgYW4gYXJyYXkgb2Yga2V5cy5cbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhbCBtYXAgPSBtYXBPZigmcXVvdDtrZXkmcXVvdDsgdG8gNDIpXG4gICAgdmFsIGVtcHR5TWFwID0gbWFwIC0gJnF1b3Q7a2V5JnF1b3Q7XG4gIFxuICAgIHByaW50bG4oJnF1b3Q7bWFwOiAkbWFwJnF1b3Q7KVxuICAgIHByaW50bG4oJnF1b3Q7ZW1wdHlNYXA6ICRlbXB0eU1hcCZxdW90Oylcbn1cbmBgYFxuIn0=---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#mapminuskey"
            ],
            "flags": 0,
            "guid": "daH$Ow>itL",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;minOf() and maxOf()",
                "<p>These functions can be used to find the lowest and greatest of two or three given values, where values are primitive numbers or <code>Comparable</code> objects. There is also an overload of each function that take an additional <code>Comparator</code> instance, if you want to compare objects that are not comparable themselves.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">list1</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"b\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">list2</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">listOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"y\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"z\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">minSize</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">minOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">list1</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">list2</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">longestList</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">maxOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">list1</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">list2</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">compareBy</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">size</span> <span style=\"color: #000000; font-weight: bold\">})</span>\n\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"minSize = $minSize\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"longestList = $longestList\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzkyOTksICJpZCI6ICIxNDg5MjU1NzMzMTUwLTAwMSIsICJtZCI6ICJUaGVzZSBmdW5jdGlvbnMgY2FuIGJlIHVzZWQgdG8gZmluZCB0aGUgbG93ZXN0IGFuZCBncmVhdGVzdCBvZiB0d28gb3IgdGhyZWUgZ2l2ZW4gdmFsdWVzLCB3aGVyZSB2YWx1ZXMgYXJlIHByaW1pdGl2ZSBudW1iZXJzIG9yIGBDb21wYXJhYmxlYCBvYmplY3RzLiBUaGVyZSBpcyBhbHNvIGFuIG92ZXJsb2FkIG9mIGVhY2ggZnVuY3Rpb24gdGhhdCB0YWtlIGFuIGFkZGl0aW9uYWwgYENvbXBhcmF0b3JgIGluc3RhbmNlLCBpZiB5b3Ugd2FudCB0byBjb21wYXJlIG9iamVjdHMgdGhhdCBhcmUgbm90IGNvbXBhcmFibGUgdGhlbXNlbHZlcy5cbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhbCBsaXN0MSA9IGxpc3RPZigmcXVvdDthJnF1b3Q7LCAmcXVvdDtiJnF1b3Q7KVxuICAgIHZhbCBsaXN0MiA9IGxpc3RPZigmcXVvdDt4JnF1b3Q7LCAmcXVvdDt5JnF1b3Q7LCAmcXVvdDt6JnF1b3Q7KVxuICAgIHZhbCBtaW5TaXplID0gbWluT2YobGlzdDEuc2l6ZSwgbGlzdDIuc2l6ZSlcbiAgICB2YWwgbG9uZ2VzdExpc3QgPSBtYXhPZihsaXN0MSwgbGlzdDIsIGNvbXBhcmVCeSB7IGl0LnNpemUgfSlcbiAgICBcbiAgICBwcmludGxuKCZxdW90O21pblNpemUgPSAkbWluU2l6ZSZxdW90OylcbiAgICBwcmludGxuKCZxdW90O2xvbmdlc3RMaXN0ID0gJGxvbmdlc3RMaXN0JnF1b3Q7KVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#minof-and-maxof"
            ],
            "flags": 0,
            "guid": "F&L781s]i(",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>Array-like</b> List instantiation functions",
                "<p>Similar to the <code>Array</code> constructor, there are now functions that create <code>List</code> and <code>MutableList</code> instances and initialize<br />\neach element by calling a lambda:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">squares</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">List</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">10</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">index</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">index</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #000000\">index</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">mutable</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">MutableList</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">10</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #0000cf; font-weight: bold\">0</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"squares: $squares\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"mutable: $mutable\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzkzMDgsICJpZCI6ICIxNDg5MjU1NzUzMzczLTAwMSIsICJtZCI6ICJTaW1pbGFyIHRvIHRoZSBgQXJyYXlgIGNvbnN0cnVjdG9yLCB0aGVyZSBhcmUgbm93IGZ1bmN0aW9ucyB0aGF0IGNyZWF0ZSBgTGlzdGAgYW5kIGBNdXRhYmxlTGlzdGAgaW5zdGFuY2VzIGFuZCBpbml0aWFsaXplXG5lYWNoIGVsZW1lbnQgYnkgY2FsbGluZyBhIGxhbWJkYTpcbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhbCBzcXVhcmVzID0gTGlzdCgxMCkgeyBpbmRleCAtJmd0OyBpbmRleCAqIGluZGV4IH1cbiAgICB2YWwgbXV0YWJsZSA9IE11dGFibGVMaXN0KDEwKSB7IDAgfVxuICBcbiAgICBwcmludGxuKCZxdW90O3NxdWFyZXM6ICRzcXVhcmVzJnF1b3Q7KVxuICAgIHByaW50bG4oJnF1b3Q7bXV0YWJsZTogJG11dGFibGUmcXVvdDspXG59XG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#array-like-list-instantiation-functions"
            ],
            "flags": 0,
            "guid": "fNvQjXR#`a",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;Map.getValue()",
                "<p>This extension on <code>Map</code> returns an existing value corresponding to the given key or throws an exception, mentioning which key was not found.</p>\n<p>If the map was produced with <code>withDefault</code>, this function will return the default value instead of throwing an exception.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">map</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">mapOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"key\"</span> <span style=\"color: #000000\">to</span> <span style=\"color: #0000cf; font-weight: bold\">42</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #8f5902; font-style: italic\">// returns non-nullable Int value 42</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">value</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">getValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"key\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">mapWithDefault</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">map</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">withDefault</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">k</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">k</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">length</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #8f5902; font-style: italic\">// returns 4</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">value2</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">mapWithDefault</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">getValue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"key2\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #8f5902; font-style: italic\">// map.getValue(\"anotherKey\") // &lt;- this will throw NoSuchElementException</span>\n\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"value is $value\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"value2 is $value2\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzkzMjgsICJpZCI6ICIxNDg5MjU1Nzc2MDI5LTAwMSIsICJtZCI6ICJUaGlzIGV4dGVuc2lvbiBvbiBgTWFwYCByZXR1cm5zIGFuIGV4aXN0aW5nIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIGtleSBvciB0aHJvd3MgYW4gZXhjZXB0aW9uLCBtZW50aW9uaW5nIHdoaWNoIGtleSB3YXMgbm90IGZvdW5kLlxuICBcbklmIHRoZSBtYXAgd2FzIHByb2R1Y2VkIHdpdGggYHdpdGhEZWZhdWx0YCwgdGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkIG9mIHRocm93aW5nIGFuIGV4Y2VwdGlvbi5cbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICBcbiAgICB2YWwgbWFwID0gbWFwT2YoJnF1b3Q7a2V5JnF1b3Q7IHRvIDQyKVxuICAgIC8vIHJldHVybnMgbm9uLW51bGxhYmxlIEludCB2YWx1ZSA0MlxuICAgIHZhbCB2YWx1ZTogSW50ID0gbWFwLmdldFZhbHVlKCZxdW90O2tleSZxdW90OylcbiAgXG4gICAgdmFsIG1hcFdpdGhEZWZhdWx0ID0gbWFwLndpdGhEZWZhdWx0IHsgayAtJmd0OyBrLmxlbmd0aCB9XG4gICAgLy8gcmV0dXJucyA0XG4gICAgdmFsIHZhbHVlMiA9IG1hcFdpdGhEZWZhdWx0LmdldFZhbHVlKCZxdW90O2tleTImcXVvdDspXG4gIFxuICAgIC8vIG1hcC5nZXRWYWx1ZSgmcXVvdDthbm90aGVyS2V5JnF1b3Q7KSAvLyAmbHQ7LSB0aGlzIHdpbGwgdGhyb3cgTm9TdWNoRWxlbWVudEV4Y2VwdGlvblxuICBcbiAgICBwcmludGxuKCZxdW90O3ZhbHVlIGlzICR2YWx1ZSZxdW90OylcbiAgICBwcmludGxuKCZxdW90O3ZhbHVlMiBpcyAkdmFsdWUyJnF1b3Q7KVxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#mapgetvalue"
            ],
            "flags": 0,
            "guid": "iyof&GH:X%",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>Abstract</b> collections",
                "<p>These abstract classes can be used as base classes when implementing Kotlin collection classes.</p>\n<p>For implementing read-only collections there are <code>AbstractCollection</code>, <code>AbstractList</code>, <code>AbstractSet</code> and <code>AbstractMap</code>, and for mutable collections there are <code>AbstractMutableCollection</code>, <code>AbstractMutableList</code>, <code>AbstractMutableSet</code> and <code>AbstractMutableMap</code>.</p>\n<p>On JVM these abstract mutable collections inherit most of their functionality from JDK's abstract collections.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk5MzUsICJpZCI6ICIxNDg5MjU1Nzk1NDI1LTAwMSIsICJtZCI6ICJUaGVzZSBhYnN0cmFjdCBjbGFzc2VzIGNhbiBiZSB1c2VkIGFzIGJhc2UgY2xhc3NlcyB3aGVuIGltcGxlbWVudGluZyBLb3RsaW4gY29sbGVjdGlvbiBjbGFzc2VzLlxuICBcbkZvciBpbXBsZW1lbnRpbmcgcmVhZC1vbmx5IGNvbGxlY3Rpb25zIHRoZXJlIGFyZSBgQWJzdHJhY3RDb2xsZWN0aW9uYCwgYEFic3RyYWN0TGlzdGAsIGBBYnN0cmFjdFNldGAgYW5kIGBBYnN0cmFjdE1hcGAsIGFuZCBmb3IgbXV0YWJsZSBjb2xsZWN0aW9ucyB0aGVyZSBhcmUgYEFic3RyYWN0TXV0YWJsZUNvbGxlY3Rpb25gLCBgQWJzdHJhY3RNdXRhYmxlTGlzdGAsIGBBYnN0cmFjdE11dGFibGVTZXRgIGFuZCBgQWJzdHJhY3RNdXRhYmxlTWFwYC5cbiAgXG5PbiBKVk0gdGhlc2UgYWJzdHJhY3QgbXV0YWJsZSBjb2xsZWN0aW9ucyBpbmhlcml0IG1vc3Qgb2YgdGhlaXIgZnVuY3Rpb25hbGl0eSBmcm9tIEpESyZhcG9zO3MgYWJzdHJhY3QgY29sbGVjdGlvbnMuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#abstract-collections"
            ],
            "flags": 0,
            "guid": "Oj-ctHX($J",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>Array</b> manipulation functions",
                "<p>The standard library now provides a set of functions for element-by-element operations on arrays: comparison (<code>contentEquals</code> and <code>contentDeepEquals</code>), hash code calculation (<code>contentHashCode</code> and <code>contentDeepHashCode</code>), and conversion to a string (<code>contentToString</code> and <code>contentDeepToString</code>). They're supported both for the JVM (where they act as aliases for the corresponding functions in <code>java.util.Arrays</code>) and for JS (where the implementation is provided in the Kotlin standard library).</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">fun</span> <span style=\"color: #000000\">main</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">args</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Array</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">array</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">arrayOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"a\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"b\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"c\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toString</span><span style=\"color: #000000; font-weight: bold\">())</span>  <span style=\"color: #8f5902; font-style: italic\">// JVM implementation: type-and-hash gibberish</span>\n    <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">array</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">contentToString</span><span style=\"color: #000000; font-weight: bold\">())</span>  <span style=\"color: #8f5902; font-style: italic\">// nicely formatted as list</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk5NTQsICJpZCI6ICIxNDg5MjU1ODEzODQ0LTAwMSIsICJtZCI6ICJUaGUgc3RhbmRhcmQgbGlicmFyeSBub3cgcHJvdmlkZXMgYSBzZXQgb2YgZnVuY3Rpb25zIGZvciBlbGVtZW50LWJ5LWVsZW1lbnQgb3BlcmF0aW9ucyBvbiBhcnJheXM6IGNvbXBhcmlzb24gKGBjb250ZW50RXF1YWxzYCBhbmQgYGNvbnRlbnREZWVwRXF1YWxzYCksIGhhc2ggY29kZSBjYWxjdWxhdGlvbiAoYGNvbnRlbnRIYXNoQ29kZWAgYW5kIGBjb250ZW50RGVlcEhhc2hDb2RlYCksIGFuZCBjb252ZXJzaW9uIHRvIGEgc3RyaW5nIChgY29udGVudFRvU3RyaW5nYCBhbmQgYGNvbnRlbnREZWVwVG9TdHJpbmdgKS4gVGhleSZhcG9zO3JlIHN1cHBvcnRlZCBib3RoIGZvciB0aGUgSlZNICh3aGVyZSB0aGV5IGFjdCBhcyBhbGlhc2VzIGZvciB0aGUgY29ycmVzcG9uZGluZyBmdW5jdGlvbnMgaW4gYGphdmEudXRpbC5BcnJheXNgKSBhbmQgZm9yIEpTICh3aGVyZSB0aGUgaW1wbGVtZW50YXRpb24gaXMgcHJvdmlkZWQgaW4gdGhlIEtvdGxpbiBzdGFuZGFyZCBsaWJyYXJ5KS5cbiAgXG4gIFxuYGBgIGtvdGxpblxuZnVuIG1haW4oYXJnczogQXJyYXkmbHQ7U3RyaW5nJmd0Oykge1xuICAgIHZhbCBhcnJheSA9IGFycmF5T2YoJnF1b3Q7YSZxdW90OywgJnF1b3Q7YiZxdW90OywgJnF1b3Q7YyZxdW90OylcbiAgICBwcmludGxuKGFycmF5LnRvU3RyaW5nKCkpICAvLyBKVk0gaW1wbGVtZW50YXRpb246IHR5cGUtYW5kLWhhc2ggZ2liYmVyaXNoXG4gICAgcHJpbnRsbihhcnJheS5jb250ZW50VG9TdHJpbmcoKSkgIC8vIG5pY2VseSBmb3JtYXR0ZWQgYXMgbGlzdFxufVxuYGBgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#array-manipulation-functions"
            ],
            "flags": 0,
            "guid": "vlu$okBEO9",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div><i>What's New in Kotlin 1.1:</i>&nbsp;<b>Java 8</b> bytecode support</div>",
                "<p>Kotlin has now the option of generating Java 8 bytecode (<code>-jvm-target 1.8</code> command line option or the corresponding options in Ant/Maven/Gradle). For now this doesn't change the semantics of the bytecode (in particular, default methods in interfaces and lambdas are generated exactly as in Kotlin 1.0), but we plan to make further use of this later.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NTk5NjYsICJpZCI6ICIxNDg5MjU1ODM3MTQ3LTAwMSIsICJtZCI6ICJLb3RsaW4gaGFzIG5vdyB0aGUgb3B0aW9uIG9mIGdlbmVyYXRpbmcgSmF2YSA4IGJ5dGVjb2RlIChgLWp2bS10YXJnZXQgMS44YCBjb21tYW5kIGxpbmUgb3B0aW9uIG9yIHRoZSBjb3JyZXNwb25kaW5nIG9wdGlvbnMgaW4gQW50L01hdmVuL0dyYWRsZSkuIEZvciBub3cgdGhpcyBkb2VzbiZhcG9zO3QgY2hhbmdlIHRoZSBzZW1hbnRpY3Mgb2YgdGhlIGJ5dGVjb2RlIChpbiBwYXJ0aWN1bGFyLCBkZWZhdWx0IG1ldGhvZHMgaW4gaW50ZXJmYWNlcyBhbmQgbGFtYmRhcyBhcmUgZ2VuZXJhdGVkIGV4YWN0bHkgYXMgaW4gS290bGluIDEuMCksIGJ1dCB3ZSBwbGFuIHRvIG1ha2UgZnVydGhlciB1c2Ugb2YgdGhpcyBsYXRlci5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#java-8-bytecode-support"
            ],
            "flags": 0,
            "guid": "lcu@A>Cja0",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>Java 8</b> standard library support",
                "<p>There are now separate versions of the standard library supporting the new JDK APIs added in Java 7 and 8.<br />\nIf you need access to the new APIs, use <code>kotlin-stdlib-jre7</code> and <code>kotlin-stdlib-jre8</code> maven artifacts instead of the standard <code>kotlin-stdlib</code>.</p>\n<p>These artifacts are tiny extensions on top of <code>kotlin-stdlib</code> and they bring it to your project as a transitive dependency.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0MzkzOTgsICJpZCI6ICIxNDg5MjU1ODYyNDY3LTAwMSIsICJtZCI6ICJUaGVyZSBhcmUgbm93IHNlcGFyYXRlIHZlcnNpb25zIG9mIHRoZSBzdGFuZGFyZCBsaWJyYXJ5IHN1cHBvcnRpbmcgdGhlIG5ldyBKREsgQVBJcyBhZGRlZCBpbiBKYXZhIDcgYW5kIDguXG5JZiB5b3UgbmVlZCBhY2Nlc3MgdG8gdGhlIG5ldyBBUElzLCB1c2UgYGtvdGxpbi1zdGRsaWItanJlN2AgYW5kIGBrb3RsaW4tc3RkbGliLWpyZThgIG1hdmVuIGFydGlmYWN0cyBpbnN0ZWFkIG9mIHRoZSBzdGFuZGFyZCBga290bGluLXN0ZGxpYmAuXG4gIFxuVGhlc2UgYXJ0aWZhY3RzIGFyZSB0aW55IGV4dGVuc2lvbnMgb24gdG9wIG9mIGBrb3RsaW4tc3RkbGliYCBhbmQgdGhleSBicmluZyBpdCB0byB5b3VyIHByb2plY3QgYXMgYSB0cmFuc2l0aXZlIGRlcGVuZGVuY3kuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#java-8-standard-library-support"
            ],
            "flags": 0,
            "guid": "u|0z_u!2vo",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>Parameter names</b> in the bytecode",
                "<p>Kotlin now supports storing parameter names in the bytecode. This can be enabled using the <code>-java-parameters</code> command line option.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk0MDUsICJpZCI6ICIxNDg5MjU1ODgyNjU3LTAwMSIsICJtZCI6ICJLb3RsaW4gbm93IHN1cHBvcnRzIHN0b3JpbmcgcGFyYW1ldGVyIG5hbWVzIGluIHRoZSBieXRlY29kZS4gVGhpcyBjYW4gYmUgZW5hYmxlZCB1c2luZyB0aGUgYC1qYXZhLXBhcmFtZXRlcnNgIGNvbW1hbmQgbGluZSBvcHRpb24uXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#parameter-names-in-the-bytecode"
            ],
            "flags": 0,
            "guid": "l*hMEh`N^Q",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;<b>Constant inlining</b>",
                "<p>The compiler now inlines values of <code>const val</code> properties into the locations where they are used.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk0MTYsICJpZCI6ICIxNDg5MjU1ODk2NDk0LTAwMSIsICJtZCI6ICJUaGUgY29tcGlsZXIgbm93IGlubGluZXMgdmFsdWVzIG9mIGBjb25zdCB2YWxgIHByb3BlcnRpZXMgaW50byB0aGUgbG9jYXRpb25zIHdoZXJlIHRoZXkgYXJlIHVzZWQuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#constant-inlining"
            ],
            "flags": 0,
            "guid": "ICf>0-)h|I",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;Mutable <b>closure</b> variables",
                "<p>The box classes used for capturing mutable closure variables in lambdas no longer have volatile fields. This change improves performance, but can lead to new race conditions in some rare usage scenarios. If you're affected by this, you need to provide your own synchronization for accessing the variables.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk0MzUsICJpZCI6ICIxNDg5MjU1OTE1MjYxLTAwMSIsICJtZCI6ICJUaGUgYm94IGNsYXNzZXMgdXNlZCBmb3IgY2FwdHVyaW5nIG11dGFibGUgY2xvc3VyZSB2YXJpYWJsZXMgaW4gbGFtYmRhcyBubyBsb25nZXIgaGF2ZSB2b2xhdGlsZSBmaWVsZHMuIFRoaXMgY2hhbmdlIGltcHJvdmVzIHBlcmZvcm1hbmNlLCBidXQgY2FuIGxlYWQgdG8gbmV3IHJhY2UgY29uZGl0aW9ucyBpbiBzb21lIHJhcmUgdXNhZ2Ugc2NlbmFyaW9zLiBJZiB5b3UmYXBvcztyZSBhZmZlY3RlZCBieSB0aGlzLCB5b3UgbmVlZCB0byBwcm92aWRlIHlvdXIgb3duIHN5bmNocm9uaXphdGlvbiBmb3IgYWNjZXNzaW5nIHRoZSB2YXJpYWJsZXMuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#mutable-closure-variables"
            ],
            "flags": 0,
            "guid": "u(n/KetH$V",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;javax.script support",
                "<p>Kotlin now integrates with the <a href=\"https://docs.oracle.com/javase/8/docs/api/javax/script/package-summary.html\">javax.script API</a> (JSR-223).</p>\n<p>The API allows to evaluate snippets of code at runtime:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">engine</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ScriptEngineManager</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">getEngineByExtension</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"kts\"</span><span style=\"color: #000000; font-weight: bold\">)</span><span style=\"color: #ce5c00; font-weight: bold\">!!</span>\n<span style=\"color: #000000\">engine</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">eval</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"val x = 3\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">engine</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">eval</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"x + 2\"</span><span style=\"color: #000000; font-weight: bold\">))</span>  <span style=\"color: #8f5902; font-style: italic\">// Prints out 5</span>\n</pre></div>\n<p>See <a href=\"https://github.com/JetBrains/kotlin/tree/master/libraries/examples/kotlin-jsr223-local-example\">here</a><br />\nfor a larger example project using the API.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk0NTUsICJpZCI6ICIxNDg5MjU1OTMyNjA5LTAwMSIsICJtZCI6ICJLb3RsaW4gbm93IGludGVncmF0ZXMgd2l0aCB0aGUgW2phdmF4LnNjcmlwdCBBUEldKGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2phdmFzZS84L2RvY3MvYXBpL2phdmF4L3NjcmlwdC9wYWNrYWdlLXN1bW1hcnkuaHRtbCkgKEpTUi0yMjMpLlxuICBcblRoZSBBUEkgYWxsb3dzIHRvIGV2YWx1YXRlIHNuaXBwZXRzIG9mIGNvZGUgYXQgcnVudGltZTpcbiAgXG5gYGAga290bGluXG52YWwgZW5naW5lID0gU2NyaXB0RW5naW5lTWFuYWdlcigpLmdldEVuZ2luZUJ5RXh0ZW5zaW9uKCZxdW90O2t0cyZxdW90OykhIVxuZW5naW5lLmV2YWwoJnF1b3Q7dmFsIHggPSAzJnF1b3Q7KVxucHJpbnRsbihlbmdpbmUuZXZhbCgmcXVvdDt4ICsgMiZxdW90OykpICAvLyBQcmludHMgb3V0IDVcbmBgYFxuICBcblNlZSBbaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL0pldEJyYWlucy9rb3RsaW4vdHJlZS9tYXN0ZXIvbGlicmFyaWVzL2V4YW1wbGVzL2tvdGxpbi1qc3IyMjMtbG9jYWwtZXhhbXBsZSlcbmZvciBhIGxhcmdlciBleGFtcGxlIHByb2plY3QgdXNpbmcgdGhlIEFQSS5cbiJ9---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#javaxscript-support"
            ],
            "flags": 0,
            "guid": "IwHjB3UYGr",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<i>What's New in Kotlin 1.1:</i>&nbsp;kotlin.reflect.full",
                "<p>To <a href=\"https://blog.jetbrains.com/kotlin/2017/01/kotlin-1-1-whats-coming-in-the-standard-library/\">prepare for Java 9 support</a>, the extension functions and properties in the <code>kotlin-reflect.jar</code> library have been moved to the package <code>kotlin.reflect.full</code>. The names in the old package (<code>kotlin.reflect</code>) are deprecated and will be removed in Kotlin 1.2. Note that the core reflection interfaces (such as <code>KClass</code>) are part of the Kotlin standard library, not <code>kotlin-reflect</code>, and are not affected by the move.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk0Mzk0NzcsICJpZCI6ICIxNDg5MjU1OTcxMjU5LTAwMSIsICJtZCI6ICJUbyBbcHJlcGFyZSBmb3IgSmF2YSA5IHN1cHBvcnRdKGh0dHBzOi8vYmxvZy5qZXRicmFpbnMuY29tL2tvdGxpbi8yMDE3LzAxL2tvdGxpbi0xLTEtd2hhdHMtY29taW5nLWluLXRoZS1zdGFuZGFyZC1saWJyYXJ5LyksIHRoZSBleHRlbnNpb24gZnVuY3Rpb25zIGFuZCBwcm9wZXJ0aWVzIGluIHRoZSBga290bGluLXJlZmxlY3QuamFyYCBsaWJyYXJ5IGhhdmUgYmVlbiBtb3ZlZCB0byB0aGUgcGFja2FnZSBga290bGluLnJlZmxlY3QuZnVsbGAuIFRoZSBuYW1lcyBpbiB0aGUgb2xkIHBhY2thZ2UgKGBrb3RsaW4ucmVmbGVjdGApIGFyZSBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gS290bGluIDEuMi4gTm90ZSB0aGF0IHRoZSBjb3JlIHJlZmxlY3Rpb24gaW50ZXJmYWNlcyAoc3VjaCBhcyBgS0NsYXNzYCkgYXJlIHBhcnQgb2YgdGhlIEtvdGxpbiBzdGFuZGFyZCBsaWJyYXJ5LCBub3QgYGtvdGxpbi1yZWZsZWN0YCwgYW5kIGFyZSBub3QgYWZmZWN0ZWQgYnkgdGhlIG1vdmUuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/whatsnew11.html#kotlinreflectfull"
            ],
            "flags": 0,
            "guid": "LCQa(>C)+&",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Kotlin_1.1",
                "WhatsNewIn1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Class <b>header formatting</b>",
                "<p>Classes with a few arguments can be written in a single line:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Person</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<p>Classes with longer headers should be formatted so, that each primary constructor argument is in a separate line with indentation.<br />\nAlso, the closing parenthesis should be on a new line. If we use inheritance, then the superclass constructor call or list of implemented interfaces should be located on the same line as the parenthesis:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Person</span><span style=\"color: #000000; font-weight: bold\">(</span>\n    <span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> \n    <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span>\n    <span style=\"color: #000000\">surname</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span>\n<span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Human</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>For multiple interfaces, the superclass constructor call should be located first and then each interface should be located in a different line:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Person</span><span style=\"color: #000000; font-weight: bold\">(</span>\n    <span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> \n    <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span>\n    <span style=\"color: #000000\">surname</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span>\n<span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Human</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">),</span>\n    <span style=\"color: #000000\">KotlinMaker</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #8f5902; font-style: italic\">// ...</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<p>Constructor parameters can use either the regular indent or the continuation indent (double the regular indent).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTI3MTYyMjUsICJpZCI6ICIxNDg5NDM4NzM2NTg2LTAwMSIsICJtZCI6ICJDbGFzc2VzIHdpdGggYSBmZXcgYXJndW1lbnRzIGNhbiBiZSB3cml0dGVuIGluIGEgc2luZ2xlIGxpbmU6XG4gIFxuYGBga290bGluIFxuY2xhc3MgUGVyc29uKGlkOiBJbnQsIG5hbWU6IFN0cmluZylcbmBgYFxuICBcbkNsYXNzZXMgd2l0aCBsb25nZXIgaGVhZGVycyBzaG91bGQgYmUgZm9ybWF0dGVkIHNvLCB0aGF0IGVhY2ggcHJpbWFyeSBjb25zdHJ1Y3RvciBhcmd1bWVudCBpcyBpbiBhIHNlcGFyYXRlIGxpbmUgd2l0aCBpbmRlbnRhdGlvbi5cbkFsc28sIHRoZSBjbG9zaW5nIHBhcmVudGhlc2lzIHNob3VsZCBiZSBvbiBhIG5ldyBsaW5lLiBJZiB3ZSB1c2UgaW5oZXJpdGFuY2UsIHRoZW4gdGhlIHN1cGVyY2xhc3MgY29uc3RydWN0b3IgY2FsbCBvciBsaXN0IG9mIGltcGxlbWVudGVkIGludGVyZmFjZXMgc2hvdWxkIGJlIGxvY2F0ZWQgb24gdGhlIHNhbWUgbGluZSBhcyB0aGUgcGFyZW50aGVzaXM6XG4gIFxuYGBga290bGluIFxuY2xhc3MgUGVyc29uKFxuICAgIGlkOiBJbnQsIFxuICAgIG5hbWU6IFN0cmluZyxcbiAgICBzdXJuYW1lOiBTdHJpbmdcbikgOiBIdW1hbihpZCwgbmFtZSkge1xuICAgIC8vIC4uLlxufVxuYGBgXG4gIFxuRm9yIG11bHRpcGxlIGludGVyZmFjZXMsIHRoZSBzdXBlcmNsYXNzIGNvbnN0cnVjdG9yIGNhbGwgc2hvdWxkIGJlIGxvY2F0ZWQgZmlyc3QgYW5kIHRoZW4gZWFjaCBpbnRlcmZhY2Ugc2hvdWxkIGJlIGxvY2F0ZWQgaW4gYSBkaWZmZXJlbnQgbGluZTpcbiAgXG5gYGBrb3RsaW4gXG5jbGFzcyBQZXJzb24oXG4gICAgaWQ6IEludCwgXG4gICAgbmFtZTogU3RyaW5nLFxuICAgIHN1cm5hbWU6IFN0cmluZ1xuKSA6IEh1bWFuKGlkLCBuYW1lKSxcbiAgICBLb3RsaW5NYWtlciB7XG4gICAgLy8gLi4uXG59XG5gYGBcbiAgXG5Db25zdHJ1Y3RvciBwYXJhbWV0ZXJzIGNhbiB1c2UgZWl0aGVyIHRoZSByZWd1bGFyIGluZGVudCBvciB0aGUgY29udGludWF0aW9uIGluZGVudCAoZG91YmxlIHRoZSByZWd1bGFyIGluZGVudCkuXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/coding-conventions.html#class-header-formatting"
            ],
            "flags": 0,
            "guid": "mW,0q$_!R#",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "CodingConventions",
                "GettingStarted",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Default</b> Imports",
                "<p>A number of packages are imported into every Kotlin file by default:</p>\n<ul>\n<li align=\"left\"><code>kotlin.*</code></li>\n<li align=\"left\"><code>kotlin.annotation.*</code></li>\n<li align=\"left\"><code>kotlin.collections.*</code></li>\n<li align=\"left\"><code>kotlin.comparisons.*</code>  (since 1.1)</li>\n<li align=\"left\"><code>kotlin.io.*</code></li>\n<li align=\"left\"><code>kotlin.ranges.*</code></li>\n<li align=\"left\"><code>kotlin.sequences.*</code></li>\n<li align=\"left\"><code>kotlin.text.*</code></li>\n</ul>\n<p>Additional packages are imported depending on the target platform:</p>\n<ul>\n<li align=\"left\">\n<p>JVM:  </p>\n<ul>\n<li align=\"left\"><code>java.lang.*</code></li>\n<li align=\"left\"><code>kotlin.jvm.*</code></li>\n</ul>\n</li>\n<li align=\"left\">\n<p>JS:</p>\n<ul>\n<li align=\"left\"><code>kotlin.js.*</code></li>\n</ul>\n</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4MjcxOTcsICJpZCI6ICIxNDg5ODI2OTU5NDQ2LTAwMSIsICJtZCI6ICJBIG51bWJlciBvZiBwYWNrYWdlcyBhcmUgaW1wb3J0ZWQgaW50byBldmVyeSBLb3RsaW4gZmlsZSBieSBkZWZhdWx0OlxuICBcbi0gYGtvdGxpbi4qYFxuLSBga290bGluLmFubm90YXRpb24uKmBcbi0gYGtvdGxpbi5jb2xsZWN0aW9ucy4qYFxuLSBga290bGluLmNvbXBhcmlzb25zLipgICAoc2luY2UgMS4xKVxuLSBga290bGluLmlvLipgXG4tIGBrb3RsaW4ucmFuZ2VzLipgXG4tIGBrb3RsaW4uc2VxdWVuY2VzLipgXG4tIGBrb3RsaW4udGV4dC4qYFxuICBcbkFkZGl0aW9uYWwgcGFja2FnZXMgYXJlIGltcG9ydGVkIGRlcGVuZGluZyBvbiB0aGUgdGFyZ2V0IHBsYXRmb3JtOlxuICBcbi0gSlZNOiAgXG4gICAgLSBgamF2YS5sYW5nLipgXG4gICAgLSBga290bGluLmp2bS4qYFxuICBcbi0gSlM6XG4gICAgLSBga290bGluLmpzLipgXG4ifQ==---->",
                "https://kotlinlang.org/docs/reference/packages.html#default-imports"
            ],
            "flags": 0,
            "guid": "OwP}ER%l^d",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Basics",
                "Kotlin_1.1",
                "Packages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Behavioral</b> patterns",
                "<blockquote>\n<p>In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication.</p>\n<p><strong>Source:</strong> <a href=\"http://en.wikipedia.org/wiki/Behavioral_pattern\">wikipedia.org</a></p>\n</blockquote>\n<ul>\n<li align=\"left\"><a href=\"#behavioral\">Behavioral Patterns</a><ul>\n<li align=\"left\"><a href=\"#observer--listener\">Observer / Listener</a></li>\n<li align=\"left\"><a href=\"#strategy\">Strategy</a></li>\n<li align=\"left\"><a href=\"#command\">Command</a></li>\n<li align=\"left\"><a href=\"#state\">State</a></li>\n<li align=\"left\"><a href=\"#chain-of-responsibility\">Chain of Responsibility</a></li>\n<li align=\"left\"><a href=\"#visitor\">Visitor</a></li>\n</ul>\n</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjYzNDUsICJpZCI6ICIxNDg5ODY0MzkzNzUxLTAwMSIsICJtZCI6ICImZ3Q7SW4gc29mdHdhcmUgZW5naW5lZXJpbmcsIGJlaGF2aW9yYWwgZGVzaWduIHBhdHRlcm5zIGFyZSBkZXNpZ24gcGF0dGVybnMgdGhhdCBpZGVudGlmeSBjb21tb24gY29tbXVuaWNhdGlvbiBwYXR0ZXJucyBiZXR3ZWVuIG9iamVjdHMgYW5kIHJlYWxpemUgdGhlc2UgcGF0dGVybnMuIEJ5IGRvaW5nIHNvLCB0aGVzZSBwYXR0ZXJucyBpbmNyZWFzZSBmbGV4aWJpbGl0eSBpbiBjYXJyeWluZyBvdXQgdGhpcyBjb21tdW5pY2F0aW9uLlxuJmd0O1xuJmd0OyoqU291cmNlOioqIFt3aWtpcGVkaWEub3JnXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JlaGF2aW9yYWxfcGF0dGVybilcbiAgXG4qIFtCZWhhdmlvcmFsIFBhdHRlcm5zXSgjYmVoYXZpb3JhbClcbiAgICAqIFtPYnNlcnZlciAvIExpc3RlbmVyXSgjb2JzZXJ2ZXItLWxpc3RlbmVyKVxuICAgICogW1N0cmF0ZWd5XSgjc3RyYXRlZ3kpXG4gICAgKiBbQ29tbWFuZF0oI2NvbW1hbmQpXG4gICAgICogW1N0YXRlXSgjc3RhdGUpXG4gICAgICogW0NoYWluIG9mIFJlc3BvbnNpYmlsaXR5XSgjY2hhaW4tb2YtcmVzcG9uc2liaWxpdHkpXG4gICAgICogW1Zpc2l0b3JdKCN2aXNpdG9yKVxuIn0=---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#behavioral"
            ],
            "flags": 0,
            "guid": "f@#/Vi0$YN",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Observer / Listener</b>&nbsp;[<i>behavioral&nbsp;pattern</i>]",
                "<p>The observer pattern is used to allow an object to publish changes to its state. <br />\nOther objects subscribe to be immediately notified of any changes.</p>\n<h4>Example</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">TextChangedListener</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">onTextChanged</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">newText</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">PrintingTextChangedListener</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">TextChangedListener</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">onTextChanged</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">newText</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Text is changed to: $newText\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">TextView</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">listener</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">TextChangedListener</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">text</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">Delegates</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">observable</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">prop</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">old</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">new</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span>\n        <span style=\"color: #000000\">listener</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">onTextChanged</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">new</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">textView</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">TextView</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">textView</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">listener</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">PrintingTextChangedListener</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">textView</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">text</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"Lorem ipsum\"</span>\n<span style=\"color: #000000\">textView</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">text</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"dolor sit amet\"</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">Text is changed to: Lorem ipsum\nText is changed to: dolor sit amet\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjcyMDAsICJpZCI6ICIxNDg5ODY2MzU0MTEzLTAwMSIsICJtZCI6ICJUaGUgb2JzZXJ2ZXIgcGF0dGVybiBpcyB1c2VkIHRvIGFsbG93IGFuIG9iamVjdCB0byBwdWJsaXNoIGNoYW5nZXMgdG8gaXRzIHN0YXRlLiBcbk90aGVyIG9iamVjdHMgc3Vic2NyaWJlIHRvIGJlIGltbWVkaWF0ZWx5IG5vdGlmaWVkIG9mIGFueSBjaGFuZ2VzLlxuICBcbiMjIyMgRXhhbXBsZVxuICBcbmBgYGtvdGxpblxuaW50ZXJmYWNlIFRleHRDaGFuZ2VkTGlzdGVuZXIge1xuICAgIGZ1biBvblRleHRDaGFuZ2VkKG5ld1RleHQ6IFN0cmluZylcbn1cbiAgXG5jbGFzcyBQcmludGluZ1RleHRDaGFuZ2VkTGlzdGVuZXIgOiBUZXh0Q2hhbmdlZExpc3RlbmVyIHtcbiAgICBvdmVycmlkZSBmdW4gb25UZXh0Q2hhbmdlZChuZXdUZXh0OiBTdHJpbmcpID0gcHJpbnRsbigmcXVvdDtUZXh0IGlzIGNoYW5nZWQgdG86ICRuZXdUZXh0JnF1b3Q7KVxufVxuICBcbmNsYXNzIFRleHRWaWV3IHtcbiAgXG4gICAgdmFyIGxpc3RlbmVyOiBUZXh0Q2hhbmdlZExpc3RlbmVyPyA9IG51bGxcbiAgXG4gICAgdmFyIHRleHQ6IFN0cmluZyBieSBEZWxlZ2F0ZXMub2JzZXJ2YWJsZSgmcXVvdDsmcXVvdDspIHsgcHJvcCwgb2xkLCBuZXcgLSZndDtcbiAgICAgICAgbGlzdGVuZXI/Lm9uVGV4dENoYW5nZWQobmV3KVxuICAgIH1cbn1cbmBgYFxuICBcbiMjIyMgVXNhZ2VcbiAgXG5gYGBrb3RsaW5cbnZhbCB0ZXh0VmlldyA9IFRleHRWaWV3KClcbnRleHRWaWV3Lmxpc3RlbmVyID0gUHJpbnRpbmdUZXh0Q2hhbmdlZExpc3RlbmVyKClcbnRleHRWaWV3LnRleHQgPSAmcXVvdDtMb3JlbSBpcHN1bSZxdW90O1xudGV4dFZpZXcudGV4dCA9ICZxdW90O2RvbG9yIHNpdCBhbWV0JnF1b3Q7XG5gYGBcbiAgXG4jIyMjIE91dHB1dFxuICBcbmBgYFxuVGV4dCBpcyBjaGFuZ2VkIHRvOiBMb3JlbSBpcHN1bVxuVGV4dCBpcyBjaGFuZ2VkIHRvOiBkb2xvciBzaXQgYW1ldFxuYGBgXG4ifQ==---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#observer--listener"
            ],
            "flags": 0,
            "guid": "DHOtbEqnSa",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Strategy</b> [<i>behavioral pattern</i>]",
                "<p>The strategy pattern is used to create an interchangeable family of algorithms from which the required process is chosen at run-time.</p>\n<h4>Example</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">Printer</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">stringFormatterStrategy</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">printString</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">string</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">stringFormatterStrategy</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">invoke</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">string</span><span style=\"color: #000000; font-weight: bold\">))</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">lowerCaseFormatter</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toLowerCase</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">upperCaseFormatter</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">toUpperCase</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">lowerCasePrinter</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Printer</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">lowerCaseFormatter</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">lowerCasePrinter</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">printString</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"LOREM ipsum DOLOR sit amet\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">upperCasePrinter</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Printer</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">upperCaseFormatter</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">upperCasePrinter</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">printString</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"LOREM ipsum DOLOR sit amet\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">prefixPrinter</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Printer</span><span style=\"color: #000000; font-weight: bold\">({</span> <span style=\"color: #4e9a06\">\"Prefix: \"</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">})</span>\n<span style=\"color: #000000\">prefixPrinter</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">printString</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"LOREM ipsum DOLOR sit amet\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">lorem ipsum dolor sit amet\nLOREM IPSUM DOLOR SIT AMET\nPrefix: LOREM ipsum DOLOR sit amet\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjcyMjMsICJpZCI6ICIxNDg5ODY2NDc3OTY3LTAwMSIsICJtZCI6ICJUaGUgc3RyYXRlZ3kgcGF0dGVybiBpcyB1c2VkIHRvIGNyZWF0ZSBhbiBpbnRlcmNoYW5nZWFibGUgZmFtaWx5IG9mIGFsZ29yaXRobXMgZnJvbSB3aGljaCB0aGUgcmVxdWlyZWQgcHJvY2VzcyBpcyBjaG9zZW4gYXQgcnVuLXRpbWUuXG4gIFxuIyMjIyBFeGFtcGxlXG4gIFxuYGBga290bGluXG5jbGFzcyBQcmludGVyKHZhbCBzdHJpbmdGb3JtYXR0ZXJTdHJhdGVneTogKFN0cmluZykgLSZndDsgU3RyaW5nKSB7XG4gICAgZnVuIHByaW50U3RyaW5nKHN0cmluZzogU3RyaW5nKSA9IHByaW50bG4oc3RyaW5nRm9ybWF0dGVyU3RyYXRlZ3kuaW52b2tlKHN0cmluZykpXG59XG4gIFxudmFsIGxvd2VyQ2FzZUZvcm1hdHRlcjogKFN0cmluZykgLSZndDsgU3RyaW5nID0geyBpdC50b0xvd2VyQ2FzZSgpIH1cbiAgXG52YWwgdXBwZXJDYXNlRm9ybWF0dGVyID0geyBpdDogU3RyaW5nIC0mZ3Q7IGl0LnRvVXBwZXJDYXNlKCkgfVxuYGBgXG4gIFxuIyMjIyBVc2FnZVxuICBcbmBgYGtvdGxpblxudmFsIGxvd2VyQ2FzZVByaW50ZXIgPSBQcmludGVyKGxvd2VyQ2FzZUZvcm1hdHRlcilcbmxvd2VyQ2FzZVByaW50ZXIucHJpbnRTdHJpbmcoJnF1b3Q7TE9SRU0gaXBzdW0gRE9MT1Igc2l0IGFtZXQmcXVvdDspXG4gIFxudmFsIHVwcGVyQ2FzZVByaW50ZXIgPSBQcmludGVyKHVwcGVyQ2FzZUZvcm1hdHRlcilcbnVwcGVyQ2FzZVByaW50ZXIucHJpbnRTdHJpbmcoJnF1b3Q7TE9SRU0gaXBzdW0gRE9MT1Igc2l0IGFtZXQmcXVvdDspXG4gIFxudmFsIHByZWZpeFByaW50ZXIgPSBQcmludGVyKHsgJnF1b3Q7UHJlZml4OiAmcXVvdDsgKyBpdCB9KVxucHJlZml4UHJpbnRlci5wcmludFN0cmluZygmcXVvdDtMT1JFTSBpcHN1bSBET0xPUiBzaXQgYW1ldCZxdW90OylcbmBgYFxuICBcbiMjIyMgT3V0cHV0XG4gIFxuYGBgXG5sb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldFxuTE9SRU0gSVBTVU0gRE9MT1IgU0lUIEFNRVRcblByZWZpeDogTE9SRU0gaXBzdW0gRE9MT1Igc2l0IGFtZXRcbmBgYFxuIn0=---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#strategy"
            ],
            "flags": 0,
            "guid": "N,1SHgqoFP",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Command</b> [<i>behavioral&nbsp;pattern</i>]",
                "<p>The command pattern is used to express a request, including the call to be made and all of its required parameters, in a command object. The command may then be executed immediately or held for later use.</p>\n<h4>Example:</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">OrderCommand</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">execute</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">OrderAddCommand</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Long</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">OrderCommand</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">execute</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"adding order with id: $id\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">OrderPayCommand</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">id</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Long</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">OrderCommand</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">execute</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"paying for order with id: $id\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">CommandProcessor</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">queue</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ArrayList</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">OrderCommand</span><span style=\"color: #000000; font-weight: bold\">&gt;()</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">addToQueue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">orderCommand</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">OrderCommand</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">CommandProcessor</span>\n            <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">apply</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">queue</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">add</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">orderCommand</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">processCommands</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">CommandProcessor</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">apply</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">queue</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">forEach</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">execute</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #000000\">queue</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">clear</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">CommandProcessor</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">addToQueue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">OrderAddCommand</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1L</span><span style=\"color: #000000; font-weight: bold\">))</span>\n    <span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">addToQueue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">OrderAddCommand</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">2L</span><span style=\"color: #000000; font-weight: bold\">))</span>\n    <span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">addToQueue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">OrderPayCommand</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">2L</span><span style=\"color: #000000; font-weight: bold\">))</span>\n    <span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">addToQueue</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">OrderPayCommand</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">1L</span><span style=\"color: #000000; font-weight: bold\">))</span>\n    <span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">processCommands</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">adding order with id: 1\nadding order with id: 2\npaying for order with id: 2\npaying for order with id: 1\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjcyMzcsICJpZCI6ICIxNDg5ODY2NTEyMzAwLTAwMSIsICJtZCI6ICJUaGUgY29tbWFuZCBwYXR0ZXJuIGlzIHVzZWQgdG8gZXhwcmVzcyBhIHJlcXVlc3QsIGluY2x1ZGluZyB0aGUgY2FsbCB0byBiZSBtYWRlIGFuZCBhbGwgb2YgaXRzIHJlcXVpcmVkIHBhcmFtZXRlcnMsIGluIGEgY29tbWFuZCBvYmplY3QuIFRoZSBjb21tYW5kIG1heSB0aGVuIGJlIGV4ZWN1dGVkIGltbWVkaWF0ZWx5IG9yIGhlbGQgZm9yIGxhdGVyIHVzZS5cbiAgXG4jIyMjIEV4YW1wbGU6XG4gIFxuYGBga290bGluXG5pbnRlcmZhY2UgT3JkZXJDb21tYW5kIHtcbiAgICBmdW4gZXhlY3V0ZSgpXG59XG4gIFxuY2xhc3MgT3JkZXJBZGRDb21tYW5kKHZhbCBpZDogTG9uZykgOiBPcmRlckNvbW1hbmQge1xuICAgIG92ZXJyaWRlIGZ1biBleGVjdXRlKCkgPSBwcmludGxuKCZxdW90O2FkZGluZyBvcmRlciB3aXRoIGlkOiAkaWQmcXVvdDspXG59XG4gIFxuY2xhc3MgT3JkZXJQYXlDb21tYW5kKHZhbCBpZDogTG9uZykgOiBPcmRlckNvbW1hbmQge1xuICAgIG92ZXJyaWRlIGZ1biBleGVjdXRlKCkgPSBwcmludGxuKCZxdW90O3BheWluZyBmb3Igb3JkZXIgd2l0aCBpZDogJGlkJnF1b3Q7KVxufVxuICBcbmNsYXNzIENvbW1hbmRQcm9jZXNzb3Ige1xuICBcbiAgICBwcml2YXRlIHZhbCBxdWV1ZSA9IEFycmF5TGlzdCZsdDtPcmRlckNvbW1hbmQmZ3Q7KClcbiAgXG4gICAgZnVuIGFkZFRvUXVldWUob3JkZXJDb21tYW5kOiBPcmRlckNvbW1hbmQpOiBDb21tYW5kUHJvY2Vzc29yXG4gICAgICAgICAgICA9IGFwcGx5IHsgcXVldWUuYWRkKG9yZGVyQ29tbWFuZCkgfVxuICBcbiAgICBmdW4gcHJvY2Vzc0NvbW1hbmRzKCk6IENvbW1hbmRQcm9jZXNzb3IgPSBhcHBseSB7XG4gICAgICAgIHF1ZXVlLmZvckVhY2ggeyBpdC5leGVjdXRlKCkgfVxuICAgICAgICBxdWV1ZS5jbGVhcigpXG4gICAgfVxufVxuYGBgXG4gIFxuIyMjIyBVc2FnZVxuICBcbmBgYGtvdGxpblxuQ29tbWFuZFByb2Nlc3NvcigpXG4gICAgLmFkZFRvUXVldWUoT3JkZXJBZGRDb21tYW5kKDFMKSlcbiAgICAuYWRkVG9RdWV1ZShPcmRlckFkZENvbW1hbmQoMkwpKVxuICAgIC5hZGRUb1F1ZXVlKE9yZGVyUGF5Q29tbWFuZCgyTCkpXG4gICAgLmFkZFRvUXVldWUoT3JkZXJQYXlDb21tYW5kKDFMKSlcbiAgICAucHJvY2Vzc0NvbW1hbmRzKClcbmBgYFxuICBcbiMjIyMgT3V0cHV0XG4gIFxuYGBgXG5hZGRpbmcgb3JkZXIgd2l0aCBpZDogMVxuYWRkaW5nIG9yZGVyIHdpdGggaWQ6IDJcbnBheWluZyBmb3Igb3JkZXIgd2l0aCBpZDogMlxucGF5aW5nIGZvciBvcmRlciB3aXRoIGlkOiAxXG5gYGBcbiJ9---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#command"
            ],
            "flags": 0,
            "guid": "fzG|gKNQMa",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>State</b> [<i>behavioral&nbsp;pattern</i>]",
                "<p>The state pattern is used to alter the behaviour of an object as its internal state changes. <br />\nThe pattern allows the class for an object to apparently change at run-time.</p>\n<h4>Example</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">sealed</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">AuthorizationState</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Unauthorized</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">AuthorizationState</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Authorized</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">userName</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">AuthorizationState</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">AuthorizationPresenter</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">state</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">AuthorizationState</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Unauthorized</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">loginUser</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">userLogin</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">state</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Authorized</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">userLogin</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">logoutUser</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">state</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Unauthorized</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">isAuthorized</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Boolean</span>\n        <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">state</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n                <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">Authorized</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #204a87; font-weight: bold\">true</span>\n                <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #204a87; font-weight: bold\">false</span>\n            <span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">userLogin</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span>\n        <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">state</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n                <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">Authorized</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">state</span> <span style=\"color: #204a87; font-weight: bold\">as</span> <span style=\"color: #000000\">Authorized</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">userName</span>\n                <span style=\"color: #204a87; font-weight: bold\">is</span> <span style=\"color: #000000\">Unauthorized</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #4e9a06\">\"Unknown\"</span>\n            <span style=\"color: #000000; font-weight: bold\">}</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">toString</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #4e9a06\">\"User '$userLogin' is logged in: $isAuthorized\"</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">authorization</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">AuthorizationPresenter</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">authorization</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">loginUser</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"admin\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">authorization</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">authorization</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">logoutUser</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">authorization</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">User 'admin' is logged in: true\nUser 'Unknown' is logged in: false\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjcyNTAsICJpZCI6ICIxNDg5ODY2NTM2MDQzLTAwMSIsICJtZCI6ICJUaGUgc3RhdGUgcGF0dGVybiBpcyB1c2VkIHRvIGFsdGVyIHRoZSBiZWhhdmlvdXIgb2YgYW4gb2JqZWN0IGFzIGl0cyBpbnRlcm5hbCBzdGF0ZSBjaGFuZ2VzLiBcblRoZSBwYXR0ZXJuIGFsbG93cyB0aGUgY2xhc3MgZm9yIGFuIG9iamVjdCB0byBhcHBhcmVudGx5IGNoYW5nZSBhdCBydW4tdGltZS5cbiAgXG4jIyMjIEV4YW1wbGVcbiAgXG5gYGBrb3RsaW5cbnNlYWxlZCBjbGFzcyBBdXRob3JpemF0aW9uU3RhdGUge1xuICBcbiAgICBjbGFzcyBVbmF1dGhvcml6ZWQgOiBBdXRob3JpemF0aW9uU3RhdGUoKVxuICBcbiAgICBjbGFzcyBBdXRob3JpemVkKHZhbCB1c2VyTmFtZTogU3RyaW5nKSA6IEF1dGhvcml6YXRpb25TdGF0ZSgpXG59XG4gIFxuY2xhc3MgQXV0aG9yaXphdGlvblByZXNlbnRlciB7XG4gIFxuICAgIHByaXZhdGUgdmFyIHN0YXRlOiBBdXRob3JpemF0aW9uU3RhdGUgPSBVbmF1dGhvcml6ZWQoKVxuICBcbiAgICBmdW4gbG9naW5Vc2VyKHVzZXJMb2dpbjogU3RyaW5nKSB7XG4gICAgICAgIHN0YXRlID0gQXV0aG9yaXplZCh1c2VyTG9naW4pXG4gICAgfVxuICBcbiAgICBmdW4gbG9nb3V0VXNlcigpIHtcbiAgICAgICAgc3RhdGUgPSBVbmF1dGhvcml6ZWQoKVxuICAgIH1cbiAgXG4gICAgdmFsIGlzQXV0aG9yaXplZDogQm9vbGVhblxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICB3aGVuIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIGlzIEF1dGhvcml6ZWQgLSZndDsgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICBlbHNlIC0mZ3Q7IHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gIFxuICAgIHZhbCB1c2VyTG9naW46IFN0cmluZ1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICB3aGVuIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIGlzIEF1dGhvcml6ZWQgLSZndDsgcmV0dXJuIChzdGF0ZSBhcyBBdXRob3JpemVkKS51c2VyTmFtZVxuICAgICAgICAgICAgICAgIGlzIFVuYXV0aG9yaXplZCAtJmd0OyByZXR1cm4gJnF1b3Q7VW5rbm93biZxdW90O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gIFxuICAgIG92ZXJyaWRlIGZ1biB0b1N0cmluZygpOiBTdHJpbmcge1xuICAgICAgICByZXR1cm4gJnF1b3Q7VXNlciAmYXBvczskdXNlckxvZ2luJmFwb3M7IGlzIGxvZ2dlZCBpbjogJGlzQXV0aG9yaXplZCZxdW90O1xuICAgIH1cbn1cbmBgYFxuICBcbiMjIyMgVXNhZ2VcbiAgXG5gYGBrb3RsaW5cbnZhbCBhdXRob3JpemF0aW9uID0gQXV0aG9yaXphdGlvblByZXNlbnRlcigpXG5hdXRob3JpemF0aW9uLmxvZ2luVXNlcigmcXVvdDthZG1pbiZxdW90OylcbnByaW50bG4oYXV0aG9yaXphdGlvbilcbmF1dGhvcml6YXRpb24ubG9nb3V0VXNlcigpXG5wcmludGxuKGF1dGhvcml6YXRpb24pXG5gYGBcbiAgXG4jIyMjIE91dHB1dFxuICBcbmBgYFxuVXNlciAmYXBvczthZG1pbiZhcG9zOyBpcyBsb2dnZWQgaW46IHRydWVcblVzZXIgJmFwb3M7VW5rbm93biZhcG9zOyBpcyBsb2dnZWQgaW46IGZhbHNlXG5gYGBcbiJ9---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#state"
            ],
            "flags": 0,
            "guid": "QDk53$`mWZ",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Chain of Responsibility</b>&nbsp;[<i>behavioral&nbsp;pattern</i>]",
                "<p>The chain of responsibility pattern is used to process varied requests, each of which may be dealt with by a different handler.</p>\n<h4>Example</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">MessageChain</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">addLines</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">inputHeader</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">String</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">AuthenticationHeader</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">token</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">?,</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">next</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MessageChain</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MessageChain</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">addLines</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">inputHeader</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">token</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IllegalStateException</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Token should be not null\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #4e9a06\">\"$inputHeader Authorization: Bearer $token\\n\"</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">let</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">next</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">addLines</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">ContentTypeHeader</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">contentType</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">next</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MessageChain</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MessageChain</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">addLines</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">inputHeader</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">String</span> \n            <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"$inputHeader ContentType: $contentType\\n\"</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">let</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">next</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">addLines</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">BodyPayload</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">body</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">next</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MessageChain</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">MessageChain</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">addLines</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">inputHeader</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">String</span>\n            <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"$inputHeader $body\\n\"</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">let</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">next</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">addLines</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #000000\">it</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">authenticationHeader</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">AuthenticationHeader</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"123456\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">contentTypeHeader</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ContentTypeHeader</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"json\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">messageBody</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">BodyPayload</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"{\\\"username\\\"=\\\"dbacinski\\\"}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">messageChainWithAuthorization</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">messageChainWithAuthorization</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">authenticationHeader</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">contentTypeHeader</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">messageBody</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">messageWithAuthentication</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">messageChainWithAuthorization</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">addLines</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Message with Authentication:\\n\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">messageWithAuthentication</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">messageChainWithAuthorization</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">authenticationHeader</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">AuthenticationHeader</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">contentTypeHeader</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ContentTypeHeader</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">messageBody</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">BodyPayload</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">MessageChain</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">authenticationHeader</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">next</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">contentTypeHeader</span>\n    <span style=\"color: #000000\">contentTypeHeader</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">next</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">messageBody</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">authenticationHeader</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">Message with Authentication:\nAuthorization: Bearer 123456\nContentType: json\n{\"username\"=\"dbacinski\"}\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjcyNjQsICJpZCI6ICIxNDg5ODY2NTU0MDYzLTAwMSIsICJtZCI6ICJUaGUgY2hhaW4gb2YgcmVzcG9uc2liaWxpdHkgcGF0dGVybiBpcyB1c2VkIHRvIHByb2Nlc3MgdmFyaWVkIHJlcXVlc3RzLCBlYWNoIG9mIHdoaWNoIG1heSBiZSBkZWFsdCB3aXRoIGJ5IGEgZGlmZmVyZW50IGhhbmRsZXIuXG4gIFxuIyMjIyBFeGFtcGxlXG4gIFxuYGBga290bGluXG5pbnRlcmZhY2UgTWVzc2FnZUNoYWluIHtcbiAgICBmdW4gYWRkTGluZXMoaW5wdXRIZWFkZXI6IFN0cmluZyk6IFN0cmluZ1xufVxuICBcbmNsYXNzIEF1dGhlbnRpY2F0aW9uSGVhZGVyKHZhbCB0b2tlbjogU3RyaW5nPywgdmFyIG5leHQ6IE1lc3NhZ2VDaGFpbj8gPSBudWxsKSA6IE1lc3NhZ2VDaGFpbiB7XG4gIFxuICAgIG92ZXJyaWRlIGZ1biBhZGRMaW5lcyhpbnB1dEhlYWRlcjogU3RyaW5nKTogU3RyaW5nIHtcbiAgICAgICAgdG9rZW4gPzogdGhyb3cgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKCZxdW90O1Rva2VuIHNob3VsZCBiZSBub3QgbnVsbCZxdW90OylcbiAgICAgICAgcmV0dXJuICZxdW90OyRpbnB1dEhlYWRlciBBdXRob3JpemF0aW9uOiBCZWFyZXIgJHRva2VuXFxuJnF1b3Q7LmxldCB7IG5leHQ/LmFkZExpbmVzKGl0KSA/OiBpdCB9XG4gICAgfVxufVxuICBcbmNsYXNzIENvbnRlbnRUeXBlSGVhZGVyKHZhbCBjb250ZW50VHlwZTogU3RyaW5nLCB2YXIgbmV4dDogTWVzc2FnZUNoYWluPyA9IG51bGwpIDogTWVzc2FnZUNoYWluIHtcbiAgXG4gICAgb3ZlcnJpZGUgZnVuIGFkZExpbmVzKGlucHV0SGVhZGVyOiBTdHJpbmcpOiBTdHJpbmcgXG4gICAgICAgICAgICA9ICZxdW90OyRpbnB1dEhlYWRlciBDb250ZW50VHlwZTogJGNvbnRlbnRUeXBlXFxuJnF1b3Q7LmxldCB7IG5leHQ/LmFkZExpbmVzKGl0KSA/OiBpdCB9XG59XG4gIFxuY2xhc3MgQm9keVBheWxvYWQodmFsIGJvZHk6IFN0cmluZywgdmFyIG5leHQ6IE1lc3NhZ2VDaGFpbj8gPSBudWxsKSA6IE1lc3NhZ2VDaGFpbiB7XG4gIFxuICAgIG92ZXJyaWRlIGZ1biBhZGRMaW5lcyhpbnB1dEhlYWRlcjogU3RyaW5nKTogU3RyaW5nXG4gICAgICAgICAgICA9ICZxdW90OyRpbnB1dEhlYWRlciAkYm9keVxcbiZxdW90Oy5sZXQgeyBuZXh0Py5hZGRMaW5lcyhpdCkgPzogaXQgfVxufVxuYGBgXG4gIFxuIyMjIyBVc2FnZVxuICBcbmBgYGtvdGxpblxudmFsIGF1dGhlbnRpY2F0aW9uSGVhZGVyID0gQXV0aGVudGljYXRpb25IZWFkZXIoJnF1b3Q7MTIzNDU2JnF1b3Q7KVxudmFsIGNvbnRlbnRUeXBlSGVhZGVyID0gQ29udGVudFR5cGVIZWFkZXIoJnF1b3Q7anNvbiZxdW90OylcbnZhbCBtZXNzYWdlQm9keSA9IEJvZHlQYXlsb2FkKCZxdW90O3tcXCZxdW90O3VzZXJuYW1lXFwmcXVvdDs9XFwmcXVvdDtkYmFjaW5za2lcXCZxdW90O30mcXVvdDspXG4gIFxudmFsIG1lc3NhZ2VDaGFpbldpdGhBdXRob3JpemF0aW9uID0gbWVzc2FnZUNoYWluV2l0aEF1dGhvcml6YXRpb24oYXV0aGVudGljYXRpb25IZWFkZXIsIGNvbnRlbnRUeXBlSGVhZGVyLCBtZXNzYWdlQm9keSlcbnZhbCBtZXNzYWdlV2l0aEF1dGhlbnRpY2F0aW9uID0gbWVzc2FnZUNoYWluV2l0aEF1dGhvcml6YXRpb24uYWRkTGluZXMoJnF1b3Q7TWVzc2FnZSB3aXRoIEF1dGhlbnRpY2F0aW9uOlxcbiZxdW90OylcbnByaW50bG4obWVzc2FnZVdpdGhBdXRoZW50aWNhdGlvbilcbiAgICBcbmZ1biBtZXNzYWdlQ2hhaW5XaXRoQXV0aG9yaXphdGlvbihhdXRoZW50aWNhdGlvbkhlYWRlcjogQXV0aGVudGljYXRpb25IZWFkZXIsIGNvbnRlbnRUeXBlSGVhZGVyOiBDb250ZW50VHlwZUhlYWRlciwgbWVzc2FnZUJvZHk6IEJvZHlQYXlsb2FkKTogTWVzc2FnZUNoYWluIHtcbiAgICBhdXRoZW50aWNhdGlvbkhlYWRlci5uZXh0ID0gY29udGVudFR5cGVIZWFkZXJcbiAgICBjb250ZW50VHlwZUhlYWRlci5uZXh0ID0gbWVzc2FnZUJvZHlcbiAgICByZXR1cm4gYXV0aGVudGljYXRpb25IZWFkZXJcbn1cbmBgYFxuICBcbiMjIyMgT3V0cHV0XG4gIFxuYGBgXG5NZXNzYWdlIHdpdGggQXV0aGVudGljYXRpb246XG5BdXRob3JpemF0aW9uOiBCZWFyZXIgMTIzNDU2XG5Db250ZW50VHlwZToganNvblxueyZxdW90O3VzZXJuYW1lJnF1b3Q7PSZxdW90O2RiYWNpbnNraSZxdW90O31cbmBgYFxuIn0=---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#chain-of-responsibility"
            ],
            "flags": 0,
            "guid": "H|n#]/QebV",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Visitor</b> [<i>behavioral&nbsp;pattern</i>]",
                "<p>The visitor pattern is used to separate a relatively complex set of structured data classes from the functionality that may be performed upon the data that they hold.</p>\n<h4>Example</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">ReportVisitable</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">accept</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">visitor</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ReportVisitor</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">FixedPriceContract</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">costPerYear</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Long</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ReportVisitable</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">accept</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">visitor</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ReportVisitor</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">visitor</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">visit</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">TimeAndMaterialsContract</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">costPerHour</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Long</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">hours</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Long</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ReportVisitable</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">accept</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">visitor</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ReportVisitor</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">visitor</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">visit</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">SupportContract</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">costPerMonth</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Long</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ReportVisitable</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">accept</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">visitor</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ReportVisitor</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">visitor</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">visit</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">ReportVisitor</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">visit</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">contract</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">FixedPriceContract</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">visit</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">contract</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">TimeAndMaterialsContract</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">visit</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">contract</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">SupportContract</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">MonthlyCostReportVisitor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">monthlyCost</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Long</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">0</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ReportVisitor</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">visit</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">contract</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">FixedPriceContract</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">monthlyCost</span> <span style=\"color: #000000; font-weight: bold\">+=</span> <span style=\"color: #000000\">contract</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">costPerYear</span> <span style=\"color: #000000; font-weight: bold\">/</span> <span style=\"color: #0000cf; font-weight: bold\">12</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">visit</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">contract</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">TimeAndMaterialsContract</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">monthlyCost</span> <span style=\"color: #000000; font-weight: bold\">+=</span> <span style=\"color: #000000\">contract</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">costPerHour</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #000000\">contract</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">hours</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">visit</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">contract</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">SupportContract</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">monthlyCost</span> <span style=\"color: #000000; font-weight: bold\">+=</span> <span style=\"color: #000000\">contract</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">costPerMonth</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">projectAlpha</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">FixedPriceContract</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">costPerYear</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">10000</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">projectBeta</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">SupportContract</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">costPerMonth</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">500</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">projectGamma</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">TimeAndMaterialsContract</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">hours</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">150</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">costPerHour</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">10</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">projectKappa</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">TimeAndMaterialsContract</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">hours</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">50</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">costPerHour</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">50</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">projects</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">arrayOf</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">projectAlpha</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">projectBeta</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">projectGamma</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">projectKappa</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">monthlyCostReportVisitor</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">MonthlyCostReportVisitor</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">projects</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">forEach</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">accept</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">monthlyCostReportVisitor</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Monthly cost: ${monthlyCostReportVisitor.monthlyCost}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">Monthly cost: 5333\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjcyNzcsICJpZCI6ICIxNDg5ODY2NTgwNzI1LTAwMSIsICJtZCI6ICJUaGUgdmlzaXRvciBwYXR0ZXJuIGlzIHVzZWQgdG8gc2VwYXJhdGUgYSByZWxhdGl2ZWx5IGNvbXBsZXggc2V0IG9mIHN0cnVjdHVyZWQgZGF0YSBjbGFzc2VzIGZyb20gdGhlIGZ1bmN0aW9uYWxpdHkgdGhhdCBtYXkgYmUgcGVyZm9ybWVkIHVwb24gdGhlIGRhdGEgdGhhdCB0aGV5IGhvbGQuXG4gIFxuIyMjIyBFeGFtcGxlXG4gIFxuYGBga290bGluXG5pbnRlcmZhY2UgUmVwb3J0VmlzaXRhYmxlIHtcbiAgICBmdW4gYWNjZXB0KHZpc2l0b3I6IFJlcG9ydFZpc2l0b3IpXG59XG4gIFxuY2xhc3MgRml4ZWRQcmljZUNvbnRyYWN0KHZhbCBjb3N0UGVyWWVhcjogTG9uZykgOiBSZXBvcnRWaXNpdGFibGUge1xuICAgIG92ZXJyaWRlIGZ1biBhY2NlcHQodmlzaXRvcjogUmVwb3J0VmlzaXRvcikgPSB2aXNpdG9yLnZpc2l0KHRoaXMpXG59XG4gIFxuY2xhc3MgVGltZUFuZE1hdGVyaWFsc0NvbnRyYWN0KHZhbCBjb3N0UGVySG91cjogTG9uZywgdmFsIGhvdXJzOiBMb25nKSA6IFJlcG9ydFZpc2l0YWJsZSB7XG4gICAgb3ZlcnJpZGUgZnVuIGFjY2VwdCh2aXNpdG9yOiBSZXBvcnRWaXNpdG9yKSA9IHZpc2l0b3IudmlzaXQodGhpcylcbn1cbiAgXG5jbGFzcyBTdXBwb3J0Q29udHJhY3QodmFsIGNvc3RQZXJNb250aDogTG9uZykgOiBSZXBvcnRWaXNpdGFibGUge1xuICAgIG92ZXJyaWRlIGZ1biBhY2NlcHQodmlzaXRvcjogUmVwb3J0VmlzaXRvcikgPSB2aXNpdG9yLnZpc2l0KHRoaXMpXG59XG4gIFxuaW50ZXJmYWNlIFJlcG9ydFZpc2l0b3Ige1xuICAgIGZ1biB2aXNpdChjb250cmFjdDogRml4ZWRQcmljZUNvbnRyYWN0KVxuICAgIGZ1biB2aXNpdChjb250cmFjdDogVGltZUFuZE1hdGVyaWFsc0NvbnRyYWN0KVxuICAgIGZ1biB2aXNpdChjb250cmFjdDogU3VwcG9ydENvbnRyYWN0KVxufVxuICBcbmNsYXNzIE1vbnRobHlDb3N0UmVwb3J0VmlzaXRvcih2YXIgbW9udGhseUNvc3Q6IExvbmcgPSAwKSA6IFJlcG9ydFZpc2l0b3Ige1xuICAgIG92ZXJyaWRlIGZ1biB2aXNpdChjb250cmFjdDogRml4ZWRQcmljZUNvbnRyYWN0KSB7XG4gICAgICAgIG1vbnRobHlDb3N0ICs9IGNvbnRyYWN0LmNvc3RQZXJZZWFyIC8gMTJcbiAgICB9XG4gIFxuICAgIG92ZXJyaWRlIGZ1biB2aXNpdChjb250cmFjdDogVGltZUFuZE1hdGVyaWFsc0NvbnRyYWN0KSB7XG4gICAgICAgIG1vbnRobHlDb3N0ICs9IGNvbnRyYWN0LmNvc3RQZXJIb3VyICogY29udHJhY3QuaG91cnNcbiAgICB9XG4gIFxuICAgIG92ZXJyaWRlIGZ1biB2aXNpdChjb250cmFjdDogU3VwcG9ydENvbnRyYWN0KSB7XG4gICAgICAgIG1vbnRobHlDb3N0ICs9IGNvbnRyYWN0LmNvc3RQZXJNb250aFxuICAgIH1cbn1cbmBgYFxuICBcbiMjIyMgVXNhZ2VcbiAgXG5gYGBrb3RsaW5cbnZhbCBwcm9qZWN0QWxwaGEgPSBGaXhlZFByaWNlQ29udHJhY3QoY29zdFBlclllYXIgPSAxMDAwMClcbnZhbCBwcm9qZWN0QmV0YSA9IFN1cHBvcnRDb250cmFjdChjb3N0UGVyTW9udGggPSA1MDApXG52YWwgcHJvamVjdEdhbW1hID0gVGltZUFuZE1hdGVyaWFsc0NvbnRyYWN0KGhvdXJzID0gMTUwLCBjb3N0UGVySG91ciA9IDEwKVxudmFsIHByb2plY3RLYXBwYSA9IFRpbWVBbmRNYXRlcmlhbHNDb250cmFjdChob3VycyA9IDUwLCBjb3N0UGVySG91ciA9IDUwKVxuICBcbnZhbCBwcm9qZWN0cyA9IGFycmF5T2YocHJvamVjdEFscGhhLCBwcm9qZWN0QmV0YSwgcHJvamVjdEdhbW1hLCBwcm9qZWN0S2FwcGEpXG4gIFxudmFsIG1vbnRobHlDb3N0UmVwb3J0VmlzaXRvciA9IE1vbnRobHlDb3N0UmVwb3J0VmlzaXRvcigpXG5wcm9qZWN0cy5mb3JFYWNoIHsgaXQuYWNjZXB0KG1vbnRobHlDb3N0UmVwb3J0VmlzaXRvcikgfVxucHJpbnRsbigmcXVvdDtNb250aGx5IGNvc3Q6ICR7bW9udGhseUNvc3RSZXBvcnRWaXNpdG9yLm1vbnRobHlDb3N0fSZxdW90OylcbmBgYFxuICBcbiMjIyMgT3V0cHV0XG4gIFxuYGBgXG5Nb250aGx5IGNvc3Q6IDUzMzNcbmBgYFxuIn0=---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#visitor"
            ],
            "flags": 0,
            "guid": "pF1o?AyldF",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Creational</b>&nbsp;patterns",
                "<blockquote>\n<p>In software engineering, creational design patterns are design patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. The basic form of object creation could result in design problems or added complexity to the design. Creational design patterns solve this problem by somehow controlling this object creation.</p>\n<p><strong>Source:</strong> <a href=\"http://en.wikipedia.org/wiki/Creational_pattern\">wikipedia.org</a></p>\n</blockquote>\n<ul>\n<li align=\"left\"><a href=\"#creational\">Creational Patterns</a><ul>\n<li align=\"left\"><a href=\"#builder--assembler\">Builder / Assembler</a></li>\n<li align=\"left\"><a href=\"#factory-method\">Factory Method</a></li>\n<li align=\"left\"><a href=\"#singleton\">Singleton</a></li>\n<li align=\"left\"><a href=\"#abstract-factory\">Abstract Factory</a></li>\n</ul>\n</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjY4NjIsICJpZCI6ICIxNDg5ODY2Njg0OTczLTAwMSIsICJtZCI6ICImZ3Q7IEluIHNvZnR3YXJlIGVuZ2luZWVyaW5nLCBjcmVhdGlvbmFsIGRlc2lnbiBwYXR0ZXJucyBhcmUgZGVzaWduIHBhdHRlcm5zIHRoYXQgZGVhbCB3aXRoIG9iamVjdCBjcmVhdGlvbiBtZWNoYW5pc21zLCB0cnlpbmcgdG8gY3JlYXRlIG9iamVjdHMgaW4gYSBtYW5uZXIgc3VpdGFibGUgdG8gdGhlIHNpdHVhdGlvbi4gVGhlIGJhc2ljIGZvcm0gb2Ygb2JqZWN0IGNyZWF0aW9uIGNvdWxkIHJlc3VsdCBpbiBkZXNpZ24gcHJvYmxlbXMgb3IgYWRkZWQgY29tcGxleGl0eSB0byB0aGUgZGVzaWduLiBDcmVhdGlvbmFsIGRlc2lnbiBwYXR0ZXJucyBzb2x2ZSB0aGlzIHByb2JsZW0gYnkgc29tZWhvdyBjb250cm9sbGluZyB0aGlzIG9iamVjdCBjcmVhdGlvbi5cbiZndDtcbiZndDsqKlNvdXJjZToqKiBbd2lraXBlZGlhLm9yZ10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DcmVhdGlvbmFsX3BhdHRlcm4pXG4gIFxuKiBbQ3JlYXRpb25hbCBQYXR0ZXJuc10oI2NyZWF0aW9uYWwpXG4gICAgICAqIFtCdWlsZGVyIC8gQXNzZW1ibGVyXSgjYnVpbGRlci0tYXNzZW1ibGVyKVxuICAgICAgKiBbRmFjdG9yeSBNZXRob2RdKCNmYWN0b3J5LW1ldGhvZClcbiAgICAgICogW1NpbmdsZXRvbl0oI3NpbmdsZXRvbilcbiAgICAgICogW0Fic3RyYWN0IEZhY3RvcnldKCNhYnN0cmFjdC1mYWN0b3J5KVxuIn0=---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#creational"
            ],
            "flags": 0,
            "guid": "B*hu1MO/#8",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Builder / Assembler</b> [<i>creational pattern</i>]",
                "<p>The builder pattern is used to create complex objects with constituent parts that must be created in the same order or using a specific algorithm. <br />\nAn external class controls the construction algorithm.</p>\n<h4>Example</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902;font-style: italic\">// Let's assume that Dialog class is provided by external library.</span>\n<span style=\"color: #8f5902; font-style: italic\">// We have only access to Dialog public interface which cannot be changed.</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Dialog</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">showTitle</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"showing title\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">setTitle</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">text</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"setting title text $text\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">setTitleColor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">color</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"setting title color $color\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">showMessage</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"showing message\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">setMessage</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">text</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"setting message $text\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">setMessageColor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">color</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"setting message color $color\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">showImage</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">bitmapBytes</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">ByteArray</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"showing image with size ${bitmapBytes.size}\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">show</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"showing dialog $this\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">//Builder:</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">DialogBuilder</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">constructor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">DialogBuilder</span><span style=\"color: #000000; font-weight: bold\">.()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #204a87; font-weight: bold\">this</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">titleHolder</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">TextView</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">messageHolder</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">TextView</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">imageHolder</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">File</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">title</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">TextView</span><span style=\"color: #000000; font-weight: bold\">.()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">titleHolder</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">TextView</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">apply</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">message</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">TextView</span><span style=\"color: #000000; font-weight: bold\">.()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">messageHolder</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">TextView</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">apply</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">image</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">File</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">imageHolder</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">build</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">Dialog</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">dialog</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Dialog</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n        <span style=\"color: #000000\">titleHolder</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">apply</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">dialog</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">setTitle</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">text</span><span style=\"color: #000000; font-weight: bold\">)</span>\n            <span style=\"color: #000000\">dialog</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">setTitleColor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">color</span><span style=\"color: #000000; font-weight: bold\">)</span>\n            <span style=\"color: #000000\">dialog</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">showTitle</span><span style=\"color: #000000; font-weight: bold\">()</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n\n        <span style=\"color: #000000\">messageHolder</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">apply</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">dialog</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">setMessage</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">text</span><span style=\"color: #000000; font-weight: bold\">)</span>\n            <span style=\"color: #000000\">dialog</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">setMessageColor</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">color</span><span style=\"color: #000000; font-weight: bold\">)</span>\n            <span style=\"color: #000000\">dialog</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">showMessage</span><span style=\"color: #000000; font-weight: bold\">()</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n\n        <span style=\"color: #000000\">imageHolder</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">apply</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">dialog</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">showImage</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">readBytes</span><span style=\"color: #000000; font-weight: bold\">())</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">dialog</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">TextView</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">text</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"\"</span>\n        <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">color</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"#00000\"</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #8f5902; font-style: italic\">//Function that creates dialog builder and builds Dialog</span>\n<span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">dialog</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">DialogBuilder</span><span style=\"color: #000000; font-weight: bold\">.()</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #000000\">Unit</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Dialog</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">DialogBuilder</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">init</span><span style=\"color: #000000; font-weight: bold\">).</span><span style=\"color: #000000\">build</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">dialog</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Dialog</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">dialog</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n<span style=\"color: #000000\">title</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">text</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"Dialog Title\"</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000\">message</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">text</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"Dialog Message\"</span>\n        <span style=\"color: #000000\">color</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"#333333\"</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000\">image</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">File</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">createTempFile</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"image\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #4e9a06\">\"jpg\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">dialog</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">show</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">setting</span> <span style=\"color: #000000\">title</span> <span style=\"color: #000000\">text</span> <span style=\"color: #000000\">Dialog</span> <span style=\"color: #000000\">Title</span>\n<span style=\"color: #000000\">setting</span> <span style=\"color: #000000\">title</span> <span style=\"color: #000000\">color</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">#</span><span style=\"color: #0000cf; font-weight: bold\">00000</span>\n<span style=\"color: #000000\">showing</span> <span style=\"color: #000000\">title</span>\n<span style=\"color: #000000\">setting</span> <span style=\"color: #000000\">message</span> <span style=\"color: #000000\">Dialog</span> <span style=\"color: #000000\">Message</span>\n<span style=\"color: #000000\">setting</span> <span style=\"color: #000000\">message</span> <span style=\"color: #000000\">color</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">#</span><span style=\"color: #0000cf; font-weight: bold\">333333</span>\n<span style=\"color: #000000\">showing</span> <span style=\"color: #000000\">message</span>\n<span style=\"color: #000000\">showing</span> <span style=\"color: #000000\">image</span> <span style=\"color: #000000\">with</span> <span style=\"color: #000000\">size</span> <span style=\"color: #0000cf; font-weight: bold\">0</span>\n<span style=\"color: #000000\">showing</span> <span style=\"color: #000000\">dialog</span> <span style=\"color: #000000\">Dialog</span><span style=\"color: #0000cf; font-weight: bold\">@5f184f</span><span style=\"color: #000000\">c6</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjczMDUsICJpZCI6ICIxNDg5ODY2ODY4MTk4LTAwMSIsICJtZCI6ICJUaGUgYnVpbGRlciBwYXR0ZXJuIGlzIHVzZWQgdG8gY3JlYXRlIGNvbXBsZXggb2JqZWN0cyB3aXRoIGNvbnN0aXR1ZW50IHBhcnRzIHRoYXQgbXVzdCBiZSBjcmVhdGVkIGluIHRoZSBzYW1lIG9yZGVyIG9yIHVzaW5nIGEgc3BlY2lmaWMgYWxnb3JpdGhtLiBcbkFuIGV4dGVybmFsIGNsYXNzIGNvbnRyb2xzIHRoZSBjb25zdHJ1Y3Rpb24gYWxnb3JpdGhtLlxuICBcbiMjIyMgRXhhbXBsZVxuICBcbmBgYGtvdGxpblxuLy8gTGV0JmFwb3M7cyBhc3N1bWUgdGhhdCBEaWFsb2cgY2xhc3MgaXMgcHJvdmlkZWQgYnkgZXh0ZXJuYWwgbGlicmFyeS5cbi8vIFdlIGhhdmUgb25seSBhY2Nlc3MgdG8gRGlhbG9nIHB1YmxpYyBpbnRlcmZhY2Ugd2hpY2ggY2Fubm90IGJlIGNoYW5nZWQuXG4gIFxuY2xhc3MgRGlhbG9nKCkge1xuICBcbiAgICBmdW4gc2hvd1RpdGxlKCkgPSBwcmludGxuKCZxdW90O3Nob3dpbmcgdGl0bGUmcXVvdDspXG4gIFxuICAgIGZ1biBzZXRUaXRsZSh0ZXh0OiBTdHJpbmcpID0gcHJpbnRsbigmcXVvdDtzZXR0aW5nIHRpdGxlIHRleHQgJHRleHQmcXVvdDspXG4gIFxuICAgIGZ1biBzZXRUaXRsZUNvbG9yKGNvbG9yOiBTdHJpbmcpID0gcHJpbnRsbigmcXVvdDtzZXR0aW5nIHRpdGxlIGNvbG9yICRjb2xvciZxdW90OylcbiAgXG4gICAgZnVuIHNob3dNZXNzYWdlKCkgPSBwcmludGxuKCZxdW90O3Nob3dpbmcgbWVzc2FnZSZxdW90OylcbiAgXG4gICAgZnVuIHNldE1lc3NhZ2UodGV4dDogU3RyaW5nKSA9IHByaW50bG4oJnF1b3Q7c2V0dGluZyBtZXNzYWdlICR0ZXh0JnF1b3Q7KVxuICBcbiAgICBmdW4gc2V0TWVzc2FnZUNvbG9yKGNvbG9yOiBTdHJpbmcpID0gcHJpbnRsbigmcXVvdDtzZXR0aW5nIG1lc3NhZ2UgY29sb3IgJGNvbG9yJnF1b3Q7KVxuICBcbiAgICBmdW4gc2hvd0ltYWdlKGJpdG1hcEJ5dGVzOiBCeXRlQXJyYXkpID0gcHJpbnRsbigmcXVvdDtzaG93aW5nIGltYWdlIHdpdGggc2l6ZSAke2JpdG1hcEJ5dGVzLnNpemV9JnF1b3Q7KVxuICBcbiAgICBmdW4gc2hvdygpID0gcHJpbnRsbigmcXVvdDtzaG93aW5nIGRpYWxvZyAkdGhpcyZxdW90Oylcbn1cbiAgXG4vL0J1aWxkZXI6XG5jbGFzcyBEaWFsb2dCdWlsZGVyKCkge1xuICAgIGNvbnN0cnVjdG9yKGluaXQ6IERpYWxvZ0J1aWxkZXIuKCkgLSZndDsgVW5pdCkgOiB0aGlzKCkge1xuICAgICAgICBpbml0KClcbiAgICB9XG4gIFxuICAgIHByaXZhdGUgdmFyIHRpdGxlSG9sZGVyOiBUZXh0Vmlldz8gPSBudWxsXG4gICAgcHJpdmF0ZSB2YXIgbWVzc2FnZUhvbGRlcjogVGV4dFZpZXc/ID0gbnVsbFxuICAgIHByaXZhdGUgdmFyIGltYWdlSG9sZGVyOiBGaWxlPyA9IG51bGxcbiAgXG4gICAgZnVuIHRpdGxlKGluaXQ6IFRleHRWaWV3LigpIC0mZ3Q7IFVuaXQpIHtcbiAgICAgICAgdGl0bGVIb2xkZXIgPSBUZXh0VmlldygpLmFwcGx5IHsgaW5pdCgpIH1cbiAgICB9XG4gIFxuICAgIGZ1biBtZXNzYWdlKGluaXQ6IFRleHRWaWV3LigpIC0mZ3Q7IFVuaXQpIHtcbiAgICAgICAgbWVzc2FnZUhvbGRlciA9IFRleHRWaWV3KCkuYXBwbHkgeyBpbml0KCkgfVxuICAgIH1cbiAgXG4gICAgZnVuIGltYWdlKGluaXQ6ICgpIC0mZ3Q7IEZpbGUpIHtcbiAgICAgICAgaW1hZ2VIb2xkZXIgPSBpbml0KClcbiAgICB9XG4gIFxuICAgIGZ1biBidWlsZCgpOiBEaWFsb2cge1xuICAgICAgICB2YWwgZGlhbG9nID0gRGlhbG9nKClcbiAgXG4gICAgICAgIHRpdGxlSG9sZGVyPy5hcHBseSB7XG4gICAgICAgICAgICBkaWFsb2cuc2V0VGl0bGUodGV4dClcbiAgICAgICAgICAgIGRpYWxvZy5zZXRUaXRsZUNvbG9yKGNvbG9yKVxuICAgICAgICAgICAgZGlhbG9nLnNob3dUaXRsZSgpXG4gICAgICAgIH1cbiAgXG4gICAgICAgIG1lc3NhZ2VIb2xkZXI/LmFwcGx5IHtcbiAgICAgICAgICAgIGRpYWxvZy5zZXRNZXNzYWdlKHRleHQpXG4gICAgICAgICAgICBkaWFsb2cuc2V0TWVzc2FnZUNvbG9yKGNvbG9yKVxuICAgICAgICAgICAgZGlhbG9nLnNob3dNZXNzYWdlKClcbiAgICAgICAgfVxuICBcbiAgICAgICAgaW1hZ2VIb2xkZXI/LmFwcGx5IHtcbiAgICAgICAgICAgIGRpYWxvZy5zaG93SW1hZ2UocmVhZEJ5dGVzKCkpXG4gICAgICAgIH1cbiAgXG4gICAgICAgIHJldHVybiBkaWFsb2dcbiAgICB9XG4gIFxuICAgIGNsYXNzIFRleHRWaWV3IHtcbiAgICAgICAgdmFyIHRleHQ6IFN0cmluZyA9ICZxdW90OyZxdW90O1xuICAgICAgICB2YXIgY29sb3I6IFN0cmluZyA9ICZxdW90OyMwMDAwMCZxdW90O1xuICAgIH1cbn1cbmBgYFxuICBcbiMjIyMgVXNhZ2VcbiAgXG5gYGBrb3RsaW5cbi8vRnVuY3Rpb24gdGhhdCBjcmVhdGVzIGRpYWxvZyBidWlsZGVyIGFuZCBidWlsZHMgRGlhbG9nXG5mdW4gZGlhbG9nKGluaXQ6IERpYWxvZ0J1aWxkZXIuKCkgLSZndDsgVW5pdCk6IERpYWxvZyB7XG4gICAgcmV0dXJuIERpYWxvZ0J1aWxkZXIoaW5pdCkuYnVpbGQoKVxufVxuICBcbnZhbCBkaWFsb2c6IERpYWxvZyA9IGRpYWxvZyB7XG50aXRsZSB7XG4gICAgdGV4dCA9ICZxdW90O0RpYWxvZyBUaXRsZSZxdW90O1xuICAgIH1cbiAgICBtZXNzYWdlIHtcbiAgICAgICAgdGV4dCA9ICZxdW90O0RpYWxvZyBNZXNzYWdlJnF1b3Q7XG4gICAgICAgIGNvbG9yID0gJnF1b3Q7IzMzMzMzMyZxdW90O1xuICAgIH1cbiAgICBpbWFnZSB7XG4gICAgICAgIEZpbGUuY3JlYXRlVGVtcEZpbGUoJnF1b3Q7aW1hZ2UmcXVvdDssICZxdW90O2pwZyZxdW90OylcbiAgICB9XG59XG4gIFxuZGlhbG9nLnNob3coKVxuYGBgXG4gIFxuIyMjIyBPdXRwdXRcbiAgXG5gYGBcbnNldHRpbmcgdGl0bGUgdGV4dCBEaWFsb2cgVGl0bGVcbnNldHRpbmcgdGl0bGUgY29sb3IgIzAwMDAwXG5zaG93aW5nIHRpdGxlXG5zZXR0aW5nIG1lc3NhZ2UgRGlhbG9nIE1lc3NhZ2VcbnNldHRpbmcgbWVzc2FnZSBjb2xvciAjMzMzMzMzXG5zaG93aW5nIG1lc3NhZ2VcbnNob3dpbmcgaW1hZ2Ugd2l0aCBzaXplIDBcbnNob3dpbmcgZGlhbG9nIERpYWxvZ0A1ZjE4NGZjNlxuYGBgXG4ifQ==---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#builder--assembler"
            ],
            "flags": 0,
            "guid": "l3^*?%.U$!",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Factory Method</b>&nbsp;[<i>creational pattern</i>]",
                "<p>The factory pattern is used to replace class constructors, abstracting the process of object generation so that the type of the object instantiated can be determined at run-time.</p>\n<h4>Example</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">Currency</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">code</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Euro</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">code</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"EUR\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Currency</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">UnitedStatesDollar</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">code</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"USD\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Currency</span>\n\n<span style=\"color: #204a87; font-weight: bold\">enum</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Country</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">UnitedStates</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">Spain</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">UK</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">Greece</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">CurrencyFactory</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">currencyForCountry</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">country</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Country</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Currency</span><span style=\"color: #000000; font-weight: bold\">?</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">country</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">Country</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Spain</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">Country</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Greece</span> <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">Euro</span><span style=\"color: #000000; font-weight: bold\">()</span>\n            <span style=\"color: #000000\">Country</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">UnitedStates</span>          <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">UnitedStatesDollar</span><span style=\"color: #000000; font-weight: bold\">()</span>\n            <span style=\"color: #204a87; font-weight: bold\">else</span>                          <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #204a87; font-weight: bold\">null</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">noCurrencyCode</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"No Currency Code Available\"</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">greeceCode</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">CurrencyFactory</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">currencyForCountry</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Country</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">Greece</span><span style=\"color: #000000; font-weight: bold\">)</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">code</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #000000\">noCurrencyCode</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Greece currency: $greeceCode\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">usCode</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">CurrencyFactory</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">currencyForCountry</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Country</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">UnitedStates</span><span style=\"color: #000000; font-weight: bold\">)</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">code</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #000000\">noCurrencyCode</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"US currency: $usCode\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">ukCode</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">CurrencyFactory</span><span style=\"color: #000000; font-weight: bold\">().</span><span style=\"color: #000000\">currencyForCountry</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">Country</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">UK</span><span style=\"color: #000000; font-weight: bold\">)</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">code</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #000000\">noCurrencyCode</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"UK currency: $ukCode\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">Greece currency: EUR\nUS currency: USD\nUK currency: No Currency Code Available\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjczMTYsICJpZCI6ICIxNDg5ODY2OTA4MjM2LTAwMSIsICJtZCI6ICJUaGUgZmFjdG9yeSBwYXR0ZXJuIGlzIHVzZWQgdG8gcmVwbGFjZSBjbGFzcyBjb25zdHJ1Y3RvcnMsIGFic3RyYWN0aW5nIHRoZSBwcm9jZXNzIG9mIG9iamVjdCBnZW5lcmF0aW9uIHNvIHRoYXQgdGhlIHR5cGUgb2YgdGhlIG9iamVjdCBpbnN0YW50aWF0ZWQgY2FuIGJlIGRldGVybWluZWQgYXQgcnVuLXRpbWUuXG4gIFxuIyMjIyBFeGFtcGxlXG4gIFxuYGBga290bGluXG5pbnRlcmZhY2UgQ3VycmVuY3kge1xuICAgIHZhbCBjb2RlOiBTdHJpbmdcbn1cbiAgXG5jbGFzcyBFdXJvKG92ZXJyaWRlIHZhbCBjb2RlOiBTdHJpbmcgPSAmcXVvdDtFVVImcXVvdDspIDogQ3VycmVuY3lcbmNsYXNzIFVuaXRlZFN0YXRlc0RvbGxhcihvdmVycmlkZSB2YWwgY29kZTogU3RyaW5nID0gJnF1b3Q7VVNEJnF1b3Q7KSA6IEN1cnJlbmN5XG4gIFxuZW51bSBjbGFzcyBDb3VudHJ5IHtcbiAgICBVbml0ZWRTdGF0ZXMsIFNwYWluLCBVSywgR3JlZWNlXG59XG4gIFxuY2xhc3MgQ3VycmVuY3lGYWN0b3J5IHtcbiAgICBmdW4gY3VycmVuY3lGb3JDb3VudHJ5KGNvdW50cnk6IENvdW50cnkpOiBDdXJyZW5jeT8ge1xuICAgICAgICB3aGVuIChjb3VudHJ5KSB7XG4gICAgICAgICAgICBDb3VudHJ5LlNwYWluLCBDb3VudHJ5LkdyZWVjZSAtJmd0OyByZXR1cm4gRXVybygpXG4gICAgICAgICAgICBDb3VudHJ5LlVuaXRlZFN0YXRlcyAgICAgICAgICAtJmd0OyByZXR1cm4gVW5pdGVkU3RhdGVzRG9sbGFyKClcbiAgICAgICAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgIC0mZ3Q7IHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICB9XG59XG5gYGBcbiAgXG4jIyMjIFVzYWdlXG4gIFxuYGBga290bGluXG52YWwgbm9DdXJyZW5jeUNvZGUgPSAmcXVvdDtObyBDdXJyZW5jeSBDb2RlIEF2YWlsYWJsZSZxdW90O1xuICBcbnZhbCBncmVlY2VDb2RlID0gQ3VycmVuY3lGYWN0b3J5KCkuY3VycmVuY3lGb3JDb3VudHJ5KENvdW50cnkuR3JlZWNlKT8uY29kZSgpID86IG5vQ3VycmVuY3lDb2RlXG5wcmludGxuKCZxdW90O0dyZWVjZSBjdXJyZW5jeTogJGdyZWVjZUNvZGUmcXVvdDspXG4gIFxudmFsIHVzQ29kZSA9IEN1cnJlbmN5RmFjdG9yeSgpLmN1cnJlbmN5Rm9yQ291bnRyeShDb3VudHJ5LlVuaXRlZFN0YXRlcyk/LmNvZGUoKSA/OiBub0N1cnJlbmN5Q29kZVxucHJpbnRsbigmcXVvdDtVUyBjdXJyZW5jeTogJHVzQ29kZSZxdW90OylcbiAgXG52YWwgdWtDb2RlID0gQ3VycmVuY3lGYWN0b3J5KCkuY3VycmVuY3lGb3JDb3VudHJ5KENvdW50cnkuVUspPy5jb2RlKCkgPzogbm9DdXJyZW5jeUNvZGVcbnByaW50bG4oJnF1b3Q7VUsgY3VycmVuY3k6ICR1a0NvZGUmcXVvdDspXG5gYGBcbiAgXG4jIyMjIE91dHB1dFxuICBcbmBgYFxuR3JlZWNlIGN1cnJlbmN5OiBFVVJcblVTIGN1cnJlbmN5OiBVU0RcblVLIGN1cnJlbmN5OiBObyBDdXJyZW5jeSBDb2RlIEF2YWlsYWJsZVxuYGBgXG4ifQ==---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#factory-method"
            ],
            "flags": 0,
            "guid": "n]p`zOm|Ei",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Singleton</b>&nbsp;[<i>creational pattern</i>]",
                "<p>The singleton pattern ensures that only one object of a particular class is ever created.<br />\nAll further references to objects of the singleton class refer to the same underlying instance.<br />\nThere are very few applications, do not overuse this pattern!</p>\n<h4>Example:</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">object</span> <span style=\"color: #000000\">PrinterDriver</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">init</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Initializing with object: $this\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Printing with object: $this\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Start\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">PrinterDriver</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">PrinterDriver</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">print</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">Start</span>\n<span style=\"color: #000000\">Initializing</span> <span style=\"color: #000000\">with</span> <span style=\"color: #f57900\">object</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">PrinterDriver</span><span style=\"color: #0000cf; font-weight: bold\">@6ff3</span><span style=\"color: #000000\">c5b5</span>\n<span style=\"color: #000000\">Printing</span> <span style=\"color: #000000\">with</span> <span style=\"color: #f57900\">object</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">PrinterDriver</span><span style=\"color: #0000cf; font-weight: bold\">@6ff3</span><span style=\"color: #000000\">c5b5</span>\n<span style=\"color: #000000\">Printing</span> <span style=\"color: #000000\">with</span> <span style=\"color: #f57900\">object</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">PrinterDriver</span><span style=\"color: #0000cf; font-weight: bold\">@6ff3</span><span style=\"color: #000000\">c5b5</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjczMjYsICJpZCI6ICIxNDg5ODY2OTI5MDIxLTAwMSIsICJtZCI6ICJUaGUgc2luZ2xldG9uIHBhdHRlcm4gZW5zdXJlcyB0aGF0IG9ubHkgb25lIG9iamVjdCBvZiBhIHBhcnRpY3VsYXIgY2xhc3MgaXMgZXZlciBjcmVhdGVkLlxuQWxsIGZ1cnRoZXIgcmVmZXJlbmNlcyB0byBvYmplY3RzIG9mIHRoZSBzaW5nbGV0b24gY2xhc3MgcmVmZXIgdG8gdGhlIHNhbWUgdW5kZXJseWluZyBpbnN0YW5jZS5cblRoZXJlIGFyZSB2ZXJ5IGZldyBhcHBsaWNhdGlvbnMsIGRvIG5vdCBvdmVydXNlIHRoaXMgcGF0dGVybiFcbiAgXG4jIyMjIEV4YW1wbGU6XG4gIFxuYGBga290bGluXG5vYmplY3QgUHJpbnRlckRyaXZlciB7XG4gICAgaW5pdCB7XG4gICAgICAgIHByaW50bG4oJnF1b3Q7SW5pdGlhbGl6aW5nIHdpdGggb2JqZWN0OiAkdGhpcyZxdW90OylcbiAgICB9XG4gIFxuICAgIGZ1biBwcmludCgpID0gcHJpbnRsbigmcXVvdDtQcmludGluZyB3aXRoIG9iamVjdDogJHRoaXMmcXVvdDspXG59XG5gYGBcbiAgXG4jIyMjIFVzYWdlXG4gIFxuYGBga290bGluXG5wcmludGxuKCZxdW90O1N0YXJ0JnF1b3Q7KVxuUHJpbnRlckRyaXZlci5wcmludCgpXG5QcmludGVyRHJpdmVyLnByaW50KClcbmBgYFxuICBcbiMjIyMgT3V0cHV0XG4gIFxuYGBgXG5TdGFydFxuSW5pdGlhbGl6aW5nIHdpdGggb2JqZWN0OiBQcmludGVyRHJpdmVyQDZmZjNjNWI1XG5QcmludGluZyB3aXRoIG9iamVjdDogUHJpbnRlckRyaXZlckA2ZmYzYzViNVxuUHJpbnRpbmcgd2l0aCBvYmplY3Q6IFByaW50ZXJEcml2ZXJANmZmM2M1YjVcbmBgYFxuIn0=---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#singleton"
            ],
            "flags": 0,
            "guid": "gbcY:xRI[-",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Abstract Factory</b>&nbsp;[<i>creational pattern</i>]",
                "<p>The abstract factory pattern is used to provide a client with a set of related or dependant objects. <br />\nThe \"family\" of objects created by the factory are determined at run-time.</p>\n<h4>Example</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">Plant</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">OrangePlant</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Plant</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">ApplePlant</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Plant</span>\n\n<span style=\"color: #204a87; font-weight: bold\">abstract</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">PlantFactory</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">abstract</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">makePlant</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">Plant</span>\n\n    <span style=\"color: #000000\">companion</span> <span style=\"color: #204a87; font-weight: bold\">object</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">{</span>\n        <span style=\"color: #000000\">inline</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">&lt;</span><span style=\"color: #000000\">reified</span> <span style=\"color: #000000\">T</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Plant</span><span style=\"color: #000000; font-weight: bold\">&gt;</span> <span style=\"color: #000000\">createFactory</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">PlantFactory</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #204a87; font-weight: bold\">when</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">T</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #204a87; font-weight: bold\">class</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">OrangePlant</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #a40000; border: 1px solid #ef2929\">-&gt; </span><span style=\"color: #000000\">OrangeFactory</span><span style=\"color: #000000; font-weight: bold\">()</span>\n            <span style=\"color: #000000\">ApplePlant</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #204a87; font-weight: bold\">class</span>  <span style=\"color: #a40000; border: 1px solid #ef2929\">-&gt; </span><span style=\"color: #000000\">AppleFactory</span><span style=\"color: #000000; font-weight: bold\">()</span>\n            <span style=\"color: #204a87; font-weight: bold\">else</span>               <span style=\"color: #000000; font-weight: bold\">-&gt;</span> <span style=\"color: #204a87; font-weight: bold\">throw</span> <span style=\"color: #000000\">IllegalArgumentException</span><span style=\"color: #000000; font-weight: bold\">()</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">AppleFactory</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">PlantFactory</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">makePlant</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">Plant</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ApplePlant</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">OrangeFactory</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">PlantFactory</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">makePlant</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">Plant</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">OrangePlant</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">plantFactory</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">PlantFactory</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">createFactory</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">OrangePlant</span><span style=\"color: #ce5c00; font-weight: bold\">::</span><span style=\"color: #204a87; font-weight: bold\">class</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">plant</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">plantFactory</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">makePlant</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Created plant: $plant\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">Created</span> <span style=\"color: #000000\">plant</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">OrangePlant</span><span style=\"color: #a40000; border: 1px solid #ef2929\">@</span><span style=\"color: #0000cf; font-weight: bold\">4f023</span><span style=\"color: #000000\">edb</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjczMzgsICJpZCI6ICIxNDg5ODY2OTQ3NzAyLTAwMSIsICJtZCI6ICJUaGUgYWJzdHJhY3QgZmFjdG9yeSBwYXR0ZXJuIGlzIHVzZWQgdG8gcHJvdmlkZSBhIGNsaWVudCB3aXRoIGEgc2V0IG9mIHJlbGF0ZWQgb3IgZGVwZW5kYW50IG9iamVjdHMuIFxuVGhlICZxdW90O2ZhbWlseSZxdW90OyBvZiBvYmplY3RzIGNyZWF0ZWQgYnkgdGhlIGZhY3RvcnkgYXJlIGRldGVybWluZWQgYXQgcnVuLXRpbWUuXG4gIFxuIyMjIyBFeGFtcGxlXG4gIFxuYGBga290bGluXG5pbnRlcmZhY2UgUGxhbnRcbiAgXG5jbGFzcyBPcmFuZ2VQbGFudCA6IFBsYW50XG4gIFxuY2xhc3MgQXBwbGVQbGFudCA6IFBsYW50XG4gIFxuYWJzdHJhY3QgY2xhc3MgUGxhbnRGYWN0b3J5IHtcbiAgICBhYnN0cmFjdCBmdW4gbWFrZVBsYW50KCk6IFBsYW50XG4gIFxuICAgIGNvbXBhbmlvbiBvYmplY3Qge1xuICAgICAgICBpbmxpbmUgZnVuICZsdDtyZWlmaWVkIFQgOiBQbGFudCZndDsgY3JlYXRlRmFjdG9yeSgpOiBQbGFudEZhY3RvcnkgPSB3aGVuIChUOjpjbGFzcykge1xuICAgICAgICAgICAgT3JhbmdlUGxhbnQ6OmNsYXNzIC0mZ3Q7IE9yYW5nZUZhY3RvcnkoKVxuICAgICAgICAgICAgQXBwbGVQbGFudDo6Y2xhc3MgIC0mZ3Q7IEFwcGxlRmFjdG9yeSgpXG4gICAgICAgICAgICBlbHNlICAgICAgICAgICAgICAgLSZndDsgdGhyb3cgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKClcbiAgICAgICAgfVxuICAgIH1cbn1cbiAgXG5jbGFzcyBBcHBsZUZhY3RvcnkgOiBQbGFudEZhY3RvcnkoKSB7XG4gICAgb3ZlcnJpZGUgZnVuIG1ha2VQbGFudCgpOiBQbGFudCA9IEFwcGxlUGxhbnQoKVxufVxuICBcbmNsYXNzIE9yYW5nZUZhY3RvcnkgOiBQbGFudEZhY3RvcnkoKSB7XG4gICAgb3ZlcnJpZGUgZnVuIG1ha2VQbGFudCgpOiBQbGFudCA9IE9yYW5nZVBsYW50KClcbn1cbmBgYFxuICBcbiMjIyMgVXNhZ2VcbiAgXG5gYGBrb3RsaW5cbnZhbCBwbGFudEZhY3RvcnkgPSBQbGFudEZhY3RvcnkuY3JlYXRlRmFjdG9yeShPcmFuZ2VQbGFudDo6Y2xhc3MpXG52YWwgcGxhbnQgPSBwbGFudEZhY3RvcnkubWFrZVBsYW50KClcbnByaW50bG4oJnF1b3Q7Q3JlYXRlZCBwbGFudDogJHBsYW50JnF1b3Q7KVxuYGBgXG4gIFxuIyMjIyBPdXRwdXRcbiAgXG5gYGBrb3RsaW5cbkNyZWF0ZWQgcGxhbnQ6IE9yYW5nZVBsYW50QDRmMDIzZWRiXG5gYGBcbiJ9---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#abstract-factory"
            ],
            "flags": 0,
            "guid": "MCDl/HWg;z",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Structural</b> Patterns",
                "<blockquote>\n<p>In software engineering, structural design patterns are design patterns that ease the design by identifying a simple way to realize relationships between entities.</p>\n<p><strong>Source:</strong> <a href=\"http://en.wikipedia.org/wiki/Structural_pattern\">wikipedia.org</a></p>\n</blockquote>\n<ul>\n<li align=\"left\"><a href=\"#structural\">Structural Patterns</a><ul>\n<li align=\"left\"><a href=\"#adapter\">Adapter</a></li>\n<li align=\"left\"><a href=\"#decorator\">Decorator</a></li>\n<li align=\"left\"><a href=\"#facade\">Facade</a></li>\n<li align=\"left\"><a href=\"#protection-proxy\">Protection Proxy</a></li>\n</ul>\n</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjcwMTMsICJpZCI6ICIxNDg5ODY2OTcwNDYxLTAwMSIsICJtZCI6ICImZ3Q7SW4gc29mdHdhcmUgZW5naW5lZXJpbmcsIHN0cnVjdHVyYWwgZGVzaWduIHBhdHRlcm5zIGFyZSBkZXNpZ24gcGF0dGVybnMgdGhhdCBlYXNlIHRoZSBkZXNpZ24gYnkgaWRlbnRpZnlpbmcgYSBzaW1wbGUgd2F5IHRvIHJlYWxpemUgcmVsYXRpb25zaGlwcyBiZXR3ZWVuIGVudGl0aWVzLlxuJmd0O1xuJmd0OyoqU291cmNlOioqIFt3aWtpcGVkaWEub3JnXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N0cnVjdHVyYWxfcGF0dGVybilcbiAgXG4qIFtTdHJ1Y3R1cmFsIFBhdHRlcm5zXSgjc3RydWN0dXJhbClcbiAgICAqIFtBZGFwdGVyXSgjYWRhcHRlcilcbiAgICAqIFtEZWNvcmF0b3JdKCNkZWNvcmF0b3IpXG4gICAgKiBbRmFjYWRlXSgjZmFjYWRlKVxuICAgICogW1Byb3RlY3Rpb24gUHJveHldKCNwcm90ZWN0aW9uLXByb3h5KVxuIn0=---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#structural"
            ],
            "flags": 0,
            "guid": "NZd[;g<qjv",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Adapter</b> [<i>structural pattern</i>]",
                "<p>The adapter pattern is used to provide a link between two otherwise incompatible types by wrapping the \"adaptee\" with a class that supports the interface required by the client.</p>\n<h4>Example</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">Temperature</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">temperature</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Double</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">CelsiusTemperature</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">temperature</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Double</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Temperature</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">FahrenheitTemperature</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">celsiusTemperature</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">CelsiusTemperature</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Temperature</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">temperature</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Double</span>\n        <span style=\"color: #204a87; font-weight: bold\">get</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">convertCelsiusToFahrenheit</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">celsiusTemperature</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">temperature</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #204a87; font-weight: bold\">set</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">temperatureInF</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">celsiusTemperature</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">temperature</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">convertFahrenheitToCelsius</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">temperatureInF</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">convertFahrenheitToCelsius</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">f</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Double</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Double</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">f</span> <span style=\"color: #000000; font-weight: bold\">-</span> <span style=\"color: #0000cf; font-weight: bold\">32</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #0000cf; font-weight: bold\">5</span> <span style=\"color: #000000; font-weight: bold\">/</span> <span style=\"color: #0000cf; font-weight: bold\">9</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">private</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">convertCelsiusToFahrenheit</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">c</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Double</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Double</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">c</span> <span style=\"color: #000000; font-weight: bold\">*</span> <span style=\"color: #0000cf; font-weight: bold\">9</span> <span style=\"color: #000000; font-weight: bold\">/</span> <span style=\"color: #0000cf; font-weight: bold\">5</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #0000cf; font-weight: bold\">32</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">celsiusTemperature</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">CelsiusTemperature</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">0.0</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">fahrenheitTemperature</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">FahrenheitTemperature</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">celsiusTemperature</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #000000\">celsiusTemperature</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">temperature</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">36.6</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"${celsiusTemperature.temperature} C -&gt; ${fahrenheitTemperature.temperature} F\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #000000\">fahrenheitTemperature</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">temperature</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #0000cf; font-weight: bold\">100.0</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"${fahrenheitTemperature.temperature} F -&gt; ${celsiusTemperature.temperature} C\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">36.6 C -&gt; 97.88000000000001 F\n100.0 F -&gt; 37.77777777777778 C\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjczNTQsICJpZCI6ICIxNDg5ODY3MDE4MzE3LTAwMSIsICJtZCI6ICJUaGUgYWRhcHRlciBwYXR0ZXJuIGlzIHVzZWQgdG8gcHJvdmlkZSBhIGxpbmsgYmV0d2VlbiB0d28gb3RoZXJ3aXNlIGluY29tcGF0aWJsZSB0eXBlcyBieSB3cmFwcGluZyB0aGUgJnF1b3Q7YWRhcHRlZSZxdW90OyB3aXRoIGEgY2xhc3MgdGhhdCBzdXBwb3J0cyB0aGUgaW50ZXJmYWNlIHJlcXVpcmVkIGJ5IHRoZSBjbGllbnQuXG4gIFxuIyMjIyBFeGFtcGxlXG4gIFxuYGBga290bGluXG5pbnRlcmZhY2UgVGVtcGVyYXR1cmUge1xuICAgIHZhciB0ZW1wZXJhdHVyZTogRG91YmxlXG59XG4gIFxuY2xhc3MgQ2Vsc2l1c1RlbXBlcmF0dXJlKG92ZXJyaWRlIHZhciB0ZW1wZXJhdHVyZTogRG91YmxlKSA6IFRlbXBlcmF0dXJlXG4gIFxuY2xhc3MgRmFocmVuaGVpdFRlbXBlcmF0dXJlKHZhciBjZWxzaXVzVGVtcGVyYXR1cmU6IENlbHNpdXNUZW1wZXJhdHVyZSkgOiBUZW1wZXJhdHVyZSB7XG4gIFxuICAgIG92ZXJyaWRlIHZhciB0ZW1wZXJhdHVyZTogRG91YmxlXG4gICAgICAgIGdldCgpID0gY29udmVydENlbHNpdXNUb0ZhaHJlbmhlaXQoY2Vsc2l1c1RlbXBlcmF0dXJlLnRlbXBlcmF0dXJlKVxuICAgICAgICBzZXQodGVtcGVyYXR1cmVJbkYpIHtcbiAgICAgICAgICAgIGNlbHNpdXNUZW1wZXJhdHVyZS50ZW1wZXJhdHVyZSA9IGNvbnZlcnRGYWhyZW5oZWl0VG9DZWxzaXVzKHRlbXBlcmF0dXJlSW5GKVxuICAgICAgICB9XG4gIFxuICAgIHByaXZhdGUgZnVuIGNvbnZlcnRGYWhyZW5oZWl0VG9DZWxzaXVzKGY6IERvdWJsZSk6IERvdWJsZSA9IChmIC0gMzIpICogNSAvIDlcbiAgXG4gICAgcHJpdmF0ZSBmdW4gY29udmVydENlbHNpdXNUb0ZhaHJlbmhlaXQoYzogRG91YmxlKTogRG91YmxlID0gKGMgKiA5IC8gNSkgKyAzMlxufVxuICBcbmBgYFxuICBcbiMjIyMgVXNhZ2VcbiAgXG5gYGBrb3RsaW5cbnZhbCBjZWxzaXVzVGVtcGVyYXR1cmUgPSBDZWxzaXVzVGVtcGVyYXR1cmUoMC4wKVxudmFsIGZhaHJlbmhlaXRUZW1wZXJhdHVyZSA9IEZhaHJlbmhlaXRUZW1wZXJhdHVyZShjZWxzaXVzVGVtcGVyYXR1cmUpXG4gIFxuY2Vsc2l1c1RlbXBlcmF0dXJlLnRlbXBlcmF0dXJlID0gMzYuNlxucHJpbnRsbigmcXVvdDske2NlbHNpdXNUZW1wZXJhdHVyZS50ZW1wZXJhdHVyZX0gQyAtJmd0OyAke2ZhaHJlbmhlaXRUZW1wZXJhdHVyZS50ZW1wZXJhdHVyZX0gRiZxdW90OylcbiAgXG5mYWhyZW5oZWl0VGVtcGVyYXR1cmUudGVtcGVyYXR1cmUgPSAxMDAuMFxucHJpbnRsbigmcXVvdDske2ZhaHJlbmhlaXRUZW1wZXJhdHVyZS50ZW1wZXJhdHVyZX0gRiAtJmd0OyAke2NlbHNpdXNUZW1wZXJhdHVyZS50ZW1wZXJhdHVyZX0gQyZxdW90OylcbmBgYFxuICBcbiMjIyMgT3V0cHV0XG4gIFxuYGBgXG4zNi42IEMgLSZndDsgOTcuODgwMDAwMDAwMDAwMDEgRlxuMTAwLjAgRiAtJmd0OyAzNy43Nzc3Nzc3Nzc3Nzc3OCBDXG5gYGBcbiJ9---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#adapter"
            ],
            "flags": 0,
            "guid": "ADfZu?Zy)L",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Decorator</b>&nbsp;[<i>structural pattern</i>]",
                "<p>The decorator pattern is used to extend or alter the functionality of objects at run-time by wrapping them in an object of a decorator class. <br />\nThis provides a flexible alternative to using inheritance to modify behaviour.</p>\n<h4>Example</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">CoffeeMachine</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">makeSmallCoffee</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">makeLargeCoffee</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">NormalCoffeeMachine</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">CoffeeMachine</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">makeSmallCoffee</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Normal: Making small coffee\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">makeLargeCoffee</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Normal: Making large coffee\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">//Decorator:</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">EnhancedCoffeeMachine</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">coffeeMachine</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">CoffeeMachine</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">CoffeeMachine</span> <span style=\"color: #204a87; font-weight: bold\">by</span> <span style=\"color: #000000\">coffeeMachine</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">makeCoffeeWithMilk</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Enhanced: Making coffee with milk\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000\">coffeeMachine</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">makeSmallCoffee</span><span style=\"color: #000000; font-weight: bold\">()</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Enhanced: Adding milk\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">makeDoubleLargeCoffee</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Enhanced: Making double large coffee\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000\">coffeeMachine</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">makeLargeCoffee</span><span style=\"color: #000000; font-weight: bold\">()</span>\n        <span style=\"color: #000000\">coffeeMachine</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">makeLargeCoffee</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">normalMachine</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">NormalCoffeeMachine</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">enhancedMachine</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">EnhancedCoffeeMachine</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">normalMachine</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #000000\">enhancedMachine</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">makeCoffeeWithMilk</span><span style=\"color: #000000; font-weight: bold\">()</span>\n\n<span style=\"color: #000000\">enhancedMachine</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">makeDoubleLargeCoffee</span><span style=\"color: #000000; font-weight: bold\">()</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">Enhanced</span><span style=\"color: #ce5c00; font-weight: bold\">:</span> <span style=\"color: #000000\">Making</span> <span style=\"color: #000000\">coffee</span> <span style=\"color: #204a87; font-weight: bold\">with</span> <span style=\"color: #000000\">milk</span>\n<span style=\"color: #000000\">Normal</span><span style=\"color: #ce5c00; font-weight: bold\">:</span> <span style=\"color: #000000\">Making</span> <span style=\"color: #000000\">small</span> <span style=\"color: #000000\">coffee</span>\n<span style=\"color: #000000\">Enhanced</span><span style=\"color: #ce5c00; font-weight: bold\">:</span> <span style=\"color: #000000\">Adding</span> <span style=\"color: #000000\">milk</span>\n\n<span style=\"color: #000000\">Enhanced</span><span style=\"color: #ce5c00; font-weight: bold\">:</span> <span style=\"color: #000000\">Making</span> <span style=\"color: #000000\">double</span> <span style=\"color: #000000\">large</span> <span style=\"color: #000000\">coffee</span>\n<span style=\"color: #000000\">Normal</span><span style=\"color: #ce5c00; font-weight: bold\">:</span> <span style=\"color: #000000\">Making</span> <span style=\"color: #000000\">large</span> <span style=\"color: #000000\">coffee</span>\n<span style=\"color: #000000\">Normal</span><span style=\"color: #ce5c00; font-weight: bold\">:</span> <span style=\"color: #000000\">Making</span> <span style=\"color: #000000\">large</span> <span style=\"color: #000000\">coffee</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjczNzAsICJpZCI6ICIxNDg5ODY3MDU2NzQ4LTAwMSIsICJtZCI6ICJUaGUgZGVjb3JhdG9yIHBhdHRlcm4gaXMgdXNlZCB0byBleHRlbmQgb3IgYWx0ZXIgdGhlIGZ1bmN0aW9uYWxpdHkgb2Ygb2JqZWN0cyBhdCBydW4tdGltZSBieSB3cmFwcGluZyB0aGVtIGluIGFuIG9iamVjdCBvZiBhIGRlY29yYXRvciBjbGFzcy4gXG5UaGlzIHByb3ZpZGVzIGEgZmxleGlibGUgYWx0ZXJuYXRpdmUgdG8gdXNpbmcgaW5oZXJpdGFuY2UgdG8gbW9kaWZ5IGJlaGF2aW91ci5cbiAgXG4jIyMjIEV4YW1wbGVcbiAgXG5gYGBrb3RsaW5cbmludGVyZmFjZSBDb2ZmZWVNYWNoaW5lIHtcbiAgICBmdW4gbWFrZVNtYWxsQ29mZmVlKClcbiAgICBmdW4gbWFrZUxhcmdlQ29mZmVlKClcbn1cbiAgXG5jbGFzcyBOb3JtYWxDb2ZmZWVNYWNoaW5lIDogQ29mZmVlTWFjaGluZSB7XG4gICAgb3ZlcnJpZGUgZnVuIG1ha2VTbWFsbENvZmZlZSgpID0gcHJpbnRsbigmcXVvdDtOb3JtYWw6IE1ha2luZyBzbWFsbCBjb2ZmZWUmcXVvdDspXG4gIFxuICAgIG92ZXJyaWRlIGZ1biBtYWtlTGFyZ2VDb2ZmZWUoKSA9IHByaW50bG4oJnF1b3Q7Tm9ybWFsOiBNYWtpbmcgbGFyZ2UgY29mZmVlJnF1b3Q7KVxufVxuICBcbi8vRGVjb3JhdG9yOlxuY2xhc3MgRW5oYW5jZWRDb2ZmZWVNYWNoaW5lKHZhbCBjb2ZmZWVNYWNoaW5lOiBDb2ZmZWVNYWNoaW5lKSA6IENvZmZlZU1hY2hpbmUgYnkgY29mZmVlTWFjaGluZSB7XG4gIFxuICAgIGZ1biBtYWtlQ29mZmVlV2l0aE1pbGsoKSB7XG4gICAgICAgIHByaW50bG4oJnF1b3Q7RW5oYW5jZWQ6IE1ha2luZyBjb2ZmZWUgd2l0aCBtaWxrJnF1b3Q7KVxuICAgICAgICBjb2ZmZWVNYWNoaW5lLm1ha2VTbWFsbENvZmZlZSgpXG4gICAgICAgIHByaW50bG4oJnF1b3Q7RW5oYW5jZWQ6IEFkZGluZyBtaWxrJnF1b3Q7KVxuICAgIH1cbiAgXG4gICAgZnVuIG1ha2VEb3VibGVMYXJnZUNvZmZlZSgpIHtcbiAgICAgICAgcHJpbnRsbigmcXVvdDtFbmhhbmNlZDogTWFraW5nIGRvdWJsZSBsYXJnZSBjb2ZmZWUmcXVvdDspXG4gICAgICAgIGNvZmZlZU1hY2hpbmUubWFrZUxhcmdlQ29mZmVlKClcbiAgICAgICAgY29mZmVlTWFjaGluZS5tYWtlTGFyZ2VDb2ZmZWUoKVxuICAgIH1cbn1cbmBgYFxuICBcbiMjIyMgVXNhZ2VcbiAgXG5gYGBrb3RsaW5cbnZhbCBub3JtYWxNYWNoaW5lID0gTm9ybWFsQ29mZmVlTWFjaGluZSgpXG52YWwgZW5oYW5jZWRNYWNoaW5lID0gRW5oYW5jZWRDb2ZmZWVNYWNoaW5lKG5vcm1hbE1hY2hpbmUpXG4gIFxuZW5oYW5jZWRNYWNoaW5lLm1ha2VDb2ZmZWVXaXRoTWlsaygpXG4gIFxuZW5oYW5jZWRNYWNoaW5lLm1ha2VEb3VibGVMYXJnZUNvZmZlZSgpXG5gYGBcbiAgXG4jIyMjIE91dHB1dFxuICBcbmBgYFxuRW5oYW5jZWQ6IE1ha2luZyBjb2ZmZWUgd2l0aCBtaWxrXG5Ob3JtYWw6IE1ha2luZyBzbWFsbCBjb2ZmZWVcbkVuaGFuY2VkOiBBZGRpbmcgbWlsa1xuICBcbkVuaGFuY2VkOiBNYWtpbmcgZG91YmxlIGxhcmdlIGNvZmZlZVxuTm9ybWFsOiBNYWtpbmcgbGFyZ2UgY29mZmVlXG5Ob3JtYWw6IE1ha2luZyBsYXJnZSBjb2ZmZWVcbmBgYFxuIn0=---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#decorator"
            ],
            "flags": 0,
            "guid": "d)::~|c:X$",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Facade</b> [<i>structural pattern</i>]",
                "<p>The facade pattern is used to define a simplified interface to a more complex subsystem.</p>\n<h4>Example</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">class</span> <span style=\"color: #000000\">ComplexSystemStore</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">filePath</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n\n    <span style=\"color: #000000\">init</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Reading data from file: $filePath\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">store</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">HashMap</span><span style=\"color: #000000; font-weight: bold\">&lt;</span><span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">&gt;()</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">store</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">key</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">payload</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">store</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">put</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">key</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">payload</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">read</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">key</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">store</span><span style=\"color: #000000; font-weight: bold\">[</span><span style=\"color: #000000\">key</span><span style=\"color: #000000; font-weight: bold\">]</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #4e9a06\">\"\"</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">commit</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Storing cached data: $store to file: $filePath\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">User</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">login</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #8f5902; font-style: italic\">//Facade:</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">UserRepository</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">systemPreferences</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">ComplexSystemStore</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"/data/default.prefs\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">save</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">user</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">User</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #000000\">systemPreferences</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">store</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"USER_KEY\"</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000\">user</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">login</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000\">systemPreferences</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">commit</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">findFirst</span><span style=\"color: #000000; font-weight: bold\">():</span> <span style=\"color: #000000\">User</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">User</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">systemPreferences</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">read</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"USER_KEY\"</span><span style=\"color: #000000; font-weight: bold\">))</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">userRepository</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">UserRepository</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">user</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">User</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"dbacinski\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">userRepository</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">save</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">user</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">resultUser</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">userRepository</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">findFirst</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Found stored user: $resultUser\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<h4>Output</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">Reading data from file: /data/default.prefs\nStoring cached data: {USER_KEY=dbacinski} to file: /data/default.prefs\nFound stored user: User(login=dbacinski)\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4NjczOTcsICJpZCI6ICIxNDg5ODY3MDc1NDA1LTAwMSIsICJtZCI6ICJUaGUgZmFjYWRlIHBhdHRlcm4gaXMgdXNlZCB0byBkZWZpbmUgYSBzaW1wbGlmaWVkIGludGVyZmFjZSB0byBhIG1vcmUgY29tcGxleCBzdWJzeXN0ZW0uXG4gIFxuIyMjIyBFeGFtcGxlXG4gIFxuYGBga290bGluXG5jbGFzcyBDb21wbGV4U3lzdGVtU3RvcmUodmFsIGZpbGVQYXRoOiBTdHJpbmcpIHtcbiAgXG4gICAgaW5pdCB7XG4gICAgICAgIHByaW50bG4oJnF1b3Q7UmVhZGluZyBkYXRhIGZyb20gZmlsZTogJGZpbGVQYXRoJnF1b3Q7KVxuICAgIH1cbiAgXG4gICAgdmFsIHN0b3JlID0gSGFzaE1hcCZsdDtTdHJpbmcsIFN0cmluZyZndDsoKVxuICBcbiAgICBmdW4gc3RvcmUoa2V5OiBTdHJpbmcsIHBheWxvYWQ6IFN0cmluZykge1xuICAgICAgICBzdG9yZS5wdXQoa2V5LCBwYXlsb2FkKVxuICAgIH1cbiAgXG4gICAgZnVuIHJlYWQoa2V5OiBTdHJpbmcpOiBTdHJpbmcgPSBzdG9yZVtrZXldID86ICZxdW90OyZxdW90O1xuICBcbiAgICBmdW4gY29tbWl0KCkgPSBwcmludGxuKCZxdW90O1N0b3JpbmcgY2FjaGVkIGRhdGE6ICRzdG9yZSB0byBmaWxlOiAkZmlsZVBhdGgmcXVvdDspXG59XG4gIFxuZGF0YSBjbGFzcyBVc2VyKHZhbCBsb2dpbjogU3RyaW5nKVxuICBcbi8vRmFjYWRlOlxuY2xhc3MgVXNlclJlcG9zaXRvcnkge1xuICAgIHZhbCBzeXN0ZW1QcmVmZXJlbmNlcyA9IENvbXBsZXhTeXN0ZW1TdG9yZSgmcXVvdDsvZGF0YS9kZWZhdWx0LnByZWZzJnF1b3Q7KVxuICBcbiAgICBmdW4gc2F2ZSh1c2VyOiBVc2VyKSB7XG4gICAgICAgIHN5c3RlbVByZWZlcmVuY2VzLnN0b3JlKCZxdW90O1VTRVJfS0VZJnF1b3Q7LCB1c2VyLmxvZ2luKVxuICAgICAgICBzeXN0ZW1QcmVmZXJlbmNlcy5jb21taXQoKVxuICAgIH1cbiAgXG4gICAgZnVuIGZpbmRGaXJzdCgpOiBVc2VyID0gVXNlcihzeXN0ZW1QcmVmZXJlbmNlcy5yZWFkKCZxdW90O1VTRVJfS0VZJnF1b3Q7KSlcbn1cbmBgYFxuICBcbiMjIyMgVXNhZ2VcbiAgXG5gYGBrb3RsaW5cbnZhbCB1c2VyUmVwb3NpdG9yeSA9IFVzZXJSZXBvc2l0b3J5KClcbnZhbCB1c2VyID0gVXNlcigmcXVvdDtkYmFjaW5za2kmcXVvdDspXG51c2VyUmVwb3NpdG9yeS5zYXZlKHVzZXIpXG52YWwgcmVzdWx0VXNlciA9IHVzZXJSZXBvc2l0b3J5LmZpbmRGaXJzdCgpXG5wcmludGxuKCZxdW90O0ZvdW5kIHN0b3JlZCB1c2VyOiAkcmVzdWx0VXNlciZxdW90OylcbmBgYFxuICBcbiMjIyMgT3V0cHV0XG4gIFxuYGBgXG5SZWFkaW5nIGRhdGEgZnJvbSBmaWxlOiAvZGF0YS9kZWZhdWx0LnByZWZzXG5TdG9yaW5nIGNhY2hlZCBkYXRhOiB7VVNFUl9LRVk9ZGJhY2luc2tpfSB0byBmaWxlOiAvZGF0YS9kZWZhdWx0LnByZWZzXG5Gb3VuZCBzdG9yZWQgdXNlcjogVXNlcihsb2dpbj1kYmFjaW5za2kpXG5gYGBcbiJ9---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#facade"
            ],
            "flags": 0,
            "guid": "q@[6h)o=0o",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Protection Proxy</b> [<i>structural pattern</i>]",
                "<p>The proxy pattern is used to provide a surrogate or placeholder object, which references an underlying object. <br />\nProtection proxy is restricting access.</p>\n<h4>Example</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">interface</span> <span style=\"color: #000000\">File</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">read</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">NormalFile</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">File</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">read</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Reading file: $name\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n\n<span style=\"color: #8f5902; font-style: italic\">//Proxy:</span>\n<span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">SecuredFile</span> <span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">File</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">normalFile</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">NormalFile</span><span style=\"color: #000000; font-weight: bold\">()</span>\n    <span style=\"color: #204a87; font-weight: bold\">var</span> <span style=\"color: #000000\">password</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"\"</span>\n\n    <span style=\"color: #204a87; font-weight: bold\">override</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">read</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">String</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">if</span> <span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">password</span> <span style=\"color: #000000; font-weight: bold\">==</span> <span style=\"color: #4e9a06\">\"secret\"</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Password is correct: $password\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n            <span style=\"color: #000000\">normalFile</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">read</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">name</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #204a87; font-weight: bold\">else</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n            <span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"Incorrect password. Access denied!\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n        <span style=\"color: #000000; font-weight: bold\">}</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div>\n<h4>Usage</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">securedFile</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">SecuredFile</span><span style=\"color: #000000; font-weight: bold\">()</span>\n<span style=\"color: #000000\">securedFile</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">read</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"readme.md\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #000000\">securedFile</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">password</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #4e9a06\">\"secret\"</span>\n<span style=\"color: #000000\">securedFile</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">read</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #4e9a06\">\"readme.md\"</span><span style=\"color: #000000; font-weight: bold\">)</span>\n</pre></div>\n<h4>Ouput</h4>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\">Incorrect password. Access denied!\nPassword is correct: secret\nReading file: readme.md\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0ODk4Njc0MDgsICJpZCI6ICIxNDg5ODY3MDk5MTM0LTAwMSIsICJtZCI6ICJUaGUgcHJveHkgcGF0dGVybiBpcyB1c2VkIHRvIHByb3ZpZGUgYSBzdXJyb2dhdGUgb3IgcGxhY2Vob2xkZXIgb2JqZWN0LCB3aGljaCByZWZlcmVuY2VzIGFuIHVuZGVybHlpbmcgb2JqZWN0LiBcblByb3RlY3Rpb24gcHJveHkgaXMgcmVzdHJpY3RpbmcgYWNjZXNzLlxuICBcbiMjIyMgRXhhbXBsZVxuICBcbmBgYGtvdGxpblxuaW50ZXJmYWNlIEZpbGUge1xuICAgIGZ1biByZWFkKG5hbWU6IFN0cmluZylcbn1cbiAgXG5jbGFzcyBOb3JtYWxGaWxlIDogRmlsZSB7XG4gICAgb3ZlcnJpZGUgZnVuIHJlYWQobmFtZTogU3RyaW5nKSA9IHByaW50bG4oJnF1b3Q7UmVhZGluZyBmaWxlOiAkbmFtZSZxdW90Oylcbn1cbiAgXG4vL1Byb3h5OlxuY2xhc3MgU2VjdXJlZEZpbGUgOiBGaWxlIHtcbiAgICB2YWwgbm9ybWFsRmlsZSA9IE5vcm1hbEZpbGUoKVxuICAgIHZhciBwYXNzd29yZDogU3RyaW5nID0gJnF1b3Q7JnF1b3Q7XG4gIFxuICAgIG92ZXJyaWRlIGZ1biByZWFkKG5hbWU6IFN0cmluZykge1xuICAgICAgICBpZiAocGFzc3dvcmQgPT0gJnF1b3Q7c2VjcmV0JnF1b3Q7KSB7XG4gICAgICAgICAgICBwcmludGxuKCZxdW90O1Bhc3N3b3JkIGlzIGNvcnJlY3Q6ICRwYXNzd29yZCZxdW90OylcbiAgICAgICAgICAgIG5vcm1hbEZpbGUucmVhZChuYW1lKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJpbnRsbigmcXVvdDtJbmNvcnJlY3QgcGFzc3dvcmQuIEFjY2VzcyBkZW5pZWQhJnF1b3Q7KVxuICAgICAgICB9XG4gICAgfVxufVxuYGBgXG4gIFxuIyMjIyBVc2FnZVxuICBcbmBgYGtvdGxpblxudmFsIHNlY3VyZWRGaWxlID0gU2VjdXJlZEZpbGUoKVxuc2VjdXJlZEZpbGUucmVhZCgmcXVvdDtyZWFkbWUubWQmcXVvdDspXG4gIFxuc2VjdXJlZEZpbGUucGFzc3dvcmQgPSAmcXVvdDtzZWNyZXQmcXVvdDtcbnNlY3VyZWRGaWxlLnJlYWQoJnF1b3Q7cmVhZG1lLm1kJnF1b3Q7KVxuYGBgXG4gIFxuIyMjIyBPdXB1dFxuICBcbmBgYFxuSW5jb3JyZWN0IHBhc3N3b3JkLiBBY2Nlc3MgZGVuaWVkIVxuUGFzc3dvcmQgaXMgY29ycmVjdDogc2VjcmV0XG5SZWFkaW5nIGZpbGU6IHJlYWRtZS5tZFxuYGBgXG4ifQ==---->",
                "https://github.com/dbacinski/Design-Patterns-In-Kotlin#protection-proxy"
            ],
            "flags": 0,
            "guid": "y/0%L)LS/e",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "DesignPatternsInKotlin",
                "NonKotlinReference"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Expressions precedence",
                "<img src=\"paste-2108828943530.jpg\" />",
                "https://kotlinlang.org/docs/reference/grammar.html#precedence"
            ],
            "flags": 0,
            "guid": "qE/(18x_n6",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Grammar",
                "Kotlin_1.1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using Kotlin for <b>Server-side Development</b>",
                "<p>Kotlin is a great fit for developing server-side applications, allowing to write concise and expressive code while maintaining full compatibility with existing Java-based technology stacks and a smooth learning curve:</p>\n<ul>\n<li align=\"left\"><strong>Expressiveness</strong>: Kotlin's innovative language features, such as its support for <a href=\"/docs/reference/type-safe-builders.html\">type-safe builders</a> and <a href=\"/docs/reference/delegated-properties.html\">delegated properties</a>, help build powerful and easy-to-use abstractions.</li>\n<li align=\"left\"><strong>Scalability</strong>: Kotlin's support for <a href=\"/docs/reference/coroutines.html\">coroutines</a> helps build server-side applications that scale to massive numbers of clients with modest hardware requirements.</li>\n<li align=\"left\"><strong>Interoperability</strong>: Kotlin is fully compatible with all Java-based frameworks, which lets you stay on your familiar technology stack while reaping the benefits of a more modern language.</li>\n<li align=\"left\"><strong>Migration</strong>: Kotlin supports gradual, step by step migration of large codebases from Java to Kotlin. You can start writing new code in Kotlin while keeping older parts of your system in Java.</li>\n<li align=\"left\"><strong>Tooling</strong>: In addition to great IDE support in general, Kotlin offers framework-specific tooling (for example, for Spring) in the plugin for IntelliJ IDEA Ultimate.</li>\n<li align=\"left\"><strong>Learning Curve</strong>: For a Java developer, getting started with Kotlin is very easy. The automated Java to Kotlin converter included in the Kotlin plugin helps with the first steps. <a href=\"/docs/tutorials/koans.html\">Kotlin Koans</a> offer a guide through the key features of the language with a series of interactive exercises.</li>\n</ul>\n<h2>Frameworks for Server-side Development with Kotlin</h2>\n<ul>\n<li align=\"left\">\n<p><a href=\"https://spring.io\">Spring</a> makes use of Kotlin's language features to offer <a href=\"https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0\">more concise APIs</a>, starting with version 5.0. The <a href=\"https://start.spring.io/#!language=kotlin\">online project generator</a> allows to quickly generate a new project in Kotlin.</p>\n</li>\n<li align=\"left\">\n<p><a href=\"http://vertx.io\">Vert.x</a>, a framework for building reactive Web applications on the JVM, offers <a href=\"https://github.com/vert-x3/vertx-lang-kotlin\">dedicated support</a> for Kotlin, including <a href=\"http://vertx.io/docs/vertx-core/kotlin/\">full documentation</a>.</p>\n</li>\n<li align=\"left\">\n<p><a href=\"https://github.com/kotlin/ktor\">Ktor</a> is a Kotlin-native Web framework built by JetBrains, making use of coroutines for high scalability and offering an easy-to-use and idiomatic API.</p>\n</li>\n<li align=\"left\">\n<p><a href=\"https://github.com/kotlin/kotlinx.html\">kotlinx.html</a> is a DSL that can be used to build HTML in a Web application. It serves as an alternative to traditional templating systems such as JSP and FreeMarker.</p>\n</li>\n<li align=\"left\">\n<p>The available options for persistence include direct JDBC access, JPA, as well as using NoSQL databases through their Java drivers.<br />\nFor JPA, the <a href=\"/docs/reference/compiler-plugins.html#kotlin-jpa-compiler-plugin\">kotlin-jpa compiler plugin</a> adapts Kotlin-compiled classes to the requirements of the framework.</p>\n</li>\n</ul>\n<h2>Deploying Kotlin Server-side Applications</h2>\n<p>Kotlin applications can be deployed into any host that supports Java Web applications, including Amazon Web Services, Google Cloud Platform and more.</p>\n<p>To deploy Kotlin applications on <a href=\"https://www.heroku.com\">Heroku</a>, you can follow the <a href=\"https://devcenter.heroku.com/articles/getting-started-with-kotlin\">official Heroku tutorial</a>.</p>\n<p>AWS Labs provides a <a href=\"https://github.com/awslabs/serverless-photo-recognition\">sample project</a> showing the use of Kotlin for writing <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> functions.</p>\n<h2>Users of Kotlin on the Server Side</h2>\n<p><a href=\"https://www.corda.net/2017/01/10/kotlin/\">Corda</a> is an open-source distributed ledger platform, supported by major banks, and built entirely in Kotlin.</p>\n<p><a href=\"https://account.jetbrains.com/\">JetBrains Account</a>, the system responsible for the entire license sales and validation process at JetBrains, is written in 100% Kotlin and has been running in production since 2015 with no major issues.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzA5NzQsICJpZCI6ICIxNDk0NjYxOTUxOTQzLTAwMSIsICJtZCI6ICJLb3RsaW4gaXMgYSBncmVhdCBmaXQgZm9yIGRldmVsb3Bpbmcgc2VydmVyLXNpZGUgYXBwbGljYXRpb25zLCBhbGxvd2luZyB0byB3cml0ZSBjb25jaXNlIGFuZCBleHByZXNzaXZlIGNvZGUgd2hpbGUgbWFpbnRhaW5pbmcgZnVsbCBjb21wYXRpYmlsaXR5IHdpdGggZXhpc3RpbmcgSmF2YS1iYXNlZCB0ZWNobm9sb2d5IHN0YWNrcyBhbmQgYSBzbW9vdGggbGVhcm5pbmcgY3VydmU6XG4gIFxuICogKipFeHByZXNzaXZlbmVzcyoqOiBLb3RsaW4mYXBvcztzIGlubm92YXRpdmUgbGFuZ3VhZ2UgZmVhdHVyZXMsIHN1Y2ggYXMgaXRzIHN1cHBvcnQgZm9yIFt0eXBlLXNhZmUgYnVpbGRlcnNdKC9kb2NzL3JlZmVyZW5jZS90eXBlLXNhZmUtYnVpbGRlcnMuaHRtbCkgYW5kIFtkZWxlZ2F0ZWQgcHJvcGVydGllc10oL2RvY3MvcmVmZXJlbmNlL2RlbGVnYXRlZC1wcm9wZXJ0aWVzLmh0bWwpLCBoZWxwIGJ1aWxkIHBvd2VyZnVsIGFuZCBlYXN5LXRvLXVzZSBhYnN0cmFjdGlvbnMuXG4gKiAqKlNjYWxhYmlsaXR5Kio6IEtvdGxpbiZhcG9zO3Mgc3VwcG9ydCBmb3IgW2Nvcm91dGluZXNdKC9kb2NzL3JlZmVyZW5jZS9jb3JvdXRpbmVzLmh0bWwpIGhlbHBzIGJ1aWxkIHNlcnZlci1zaWRlIGFwcGxpY2F0aW9ucyB0aGF0IHNjYWxlIHRvIG1hc3NpdmUgbnVtYmVycyBvZiBjbGllbnRzIHdpdGggbW9kZXN0IGhhcmR3YXJlIHJlcXVpcmVtZW50cy5cbiAqICoqSW50ZXJvcGVyYWJpbGl0eSoqOiBLb3RsaW4gaXMgZnVsbHkgY29tcGF0aWJsZSB3aXRoIGFsbCBKYXZhLWJhc2VkIGZyYW1ld29ya3MsIHdoaWNoIGxldHMgeW91IHN0YXkgb24geW91ciBmYW1pbGlhciB0ZWNobm9sb2d5IHN0YWNrIHdoaWxlIHJlYXBpbmcgdGhlIGJlbmVmaXRzIG9mIGEgbW9yZSBtb2Rlcm4gbGFuZ3VhZ2UuXG4gKiAqKk1pZ3JhdGlvbioqOiBLb3RsaW4gc3VwcG9ydHMgZ3JhZHVhbCwgc3RlcCBieSBzdGVwIG1pZ3JhdGlvbiBvZiBsYXJnZSBjb2RlYmFzZXMgZnJvbSBKYXZhIHRvIEtvdGxpbi4gWW91IGNhbiBzdGFydCB3cml0aW5nIG5ldyBjb2RlIGluIEtvdGxpbiB3aGlsZSBrZWVwaW5nIG9sZGVyIHBhcnRzIG9mIHlvdXIgc3lzdGVtIGluIEphdmEuXG4gKiAqKlRvb2xpbmcqKjogSW4gYWRkaXRpb24gdG8gZ3JlYXQgSURFIHN1cHBvcnQgaW4gZ2VuZXJhbCwgS290bGluIG9mZmVycyBmcmFtZXdvcmstc3BlY2lmaWMgdG9vbGluZyAoZm9yIGV4YW1wbGUsIGZvciBTcHJpbmcpIGluIHRoZSBwbHVnaW4gZm9yIEludGVsbGlKIElERUEgVWx0aW1hdGUuXG4gKiAqKkxlYXJuaW5nIEN1cnZlKio6IEZvciBhIEphdmEgZGV2ZWxvcGVyLCBnZXR0aW5nIHN0YXJ0ZWQgd2l0aCBLb3RsaW4gaXMgdmVyeSBlYXN5LiBUaGUgYXV0b21hdGVkIEphdmEgdG8gS290bGluIGNvbnZlcnRlciBpbmNsdWRlZCBpbiB0aGUgS290bGluIHBsdWdpbiBoZWxwcyB3aXRoIHRoZSBmaXJzdCBzdGVwcy4gW0tvdGxpbiBLb2Fuc10oL2RvY3MvdHV0b3JpYWxzL2tvYW5zLmh0bWwpIG9mZmVyIGEgZ3VpZGUgdGhyb3VnaCB0aGUga2V5IGZlYXR1cmVzIG9mIHRoZSBsYW5ndWFnZSB3aXRoIGEgc2VyaWVzIG9mIGludGVyYWN0aXZlIGV4ZXJjaXNlcy5cbiAgXG4jIyBGcmFtZXdvcmtzIGZvciBTZXJ2ZXItc2lkZSBEZXZlbG9wbWVudCB3aXRoIEtvdGxpblxuICBcbiAqIFtTcHJpbmddKGh0dHBzOi8vc3ByaW5nLmlvKSBtYWtlcyB1c2Ugb2YgS290bGluJmFwb3M7cyBsYW5ndWFnZSBmZWF0dXJlcyB0byBvZmZlciBbbW9yZSBjb25jaXNlIEFQSXNdKGh0dHBzOi8vc3ByaW5nLmlvL2Jsb2cvMjAxNy8wMS8wNC9pbnRyb2R1Y2luZy1rb3RsaW4tc3VwcG9ydC1pbi1zcHJpbmctZnJhbWV3b3JrLTUtMCksIHN0YXJ0aW5nIHdpdGggdmVyc2lvbiA1LjAuIFRoZSBbb25saW5lIHByb2plY3QgZ2VuZXJhdG9yXShodHRwczovL3N0YXJ0LnNwcmluZy5pby8jIWxhbmd1YWdlPWtvdGxpbikgYWxsb3dzIHRvIHF1aWNrbHkgZ2VuZXJhdGUgYSBuZXcgcHJvamVjdCBpbiBLb3RsaW4uXG4gIFxuICogW1ZlcnQueF0oaHR0cDovL3ZlcnR4LmlvKSwgYSBmcmFtZXdvcmsgZm9yIGJ1aWxkaW5nIHJlYWN0aXZlIFdlYiBhcHBsaWNhdGlvbnMgb24gdGhlIEpWTSwgb2ZmZXJzIFtkZWRpY2F0ZWQgc3VwcG9ydF0oaHR0cHM6Ly9naXRodWIuY29tL3ZlcnQteDMvdmVydHgtbGFuZy1rb3RsaW4pIGZvciBLb3RsaW4sIGluY2x1ZGluZyBbZnVsbCBkb2N1bWVudGF0aW9uXShodHRwOi8vdmVydHguaW8vZG9jcy92ZXJ0eC1jb3JlL2tvdGxpbi8pLlxuICBcbiAqIFtLdG9yXShodHRwczovL2dpdGh1Yi5jb20va290bGluL2t0b3IpIGlzIGEgS290bGluLW5hdGl2ZSBXZWIgZnJhbWV3b3JrIGJ1aWx0IGJ5IEpldEJyYWlucywgbWFraW5nIHVzZSBvZiBjb3JvdXRpbmVzIGZvciBoaWdoIHNjYWxhYmlsaXR5IGFuZCBvZmZlcmluZyBhbiBlYXN5LXRvLXVzZSBhbmQgaWRpb21hdGljIEFQSS5cbiAgXG4gKiBba290bGlueC5odG1sXShodHRwczovL2dpdGh1Yi5jb20va290bGluL2tvdGxpbnguaHRtbCkgaXMgYSBEU0wgdGhhdCBjYW4gYmUgdXNlZCB0byBidWlsZCBIVE1MIGluIGEgV2ViIGFwcGxpY2F0aW9uLiBJdCBzZXJ2ZXMgYXMgYW4gYWx0ZXJuYXRpdmUgdG8gdHJhZGl0aW9uYWwgdGVtcGxhdGluZyBzeXN0ZW1zIHN1Y2ggYXMgSlNQIGFuZCBGcmVlTWFya2VyLlxuICBcbiAqIFRoZSBhdmFpbGFibGUgb3B0aW9ucyBmb3IgcGVyc2lzdGVuY2UgaW5jbHVkZSBkaXJlY3QgSkRCQyBhY2Nlc3MsIEpQQSwgYXMgd2VsbCBhcyB1c2luZyBOb1NRTCBkYXRhYmFzZXMgdGhyb3VnaCB0aGVpciBKYXZhIGRyaXZlcnMuXG5Gb3IgSlBBLCB0aGUgW2tvdGxpbi1qcGEgY29tcGlsZXIgcGx1Z2luXSgvZG9jcy9yZWZlcmVuY2UvY29tcGlsZXItcGx1Z2lucy5odG1sI2tvdGxpbi1qcGEtY29tcGlsZXItcGx1Z2luKSBhZGFwdHMgS290bGluLWNvbXBpbGVkIGNsYXNzZXMgdG8gdGhlIHJlcXVpcmVtZW50cyBvZiB0aGUgZnJhbWV3b3JrLlxuICBcbiMjIERlcGxveWluZyBLb3RsaW4gU2VydmVyLXNpZGUgQXBwbGljYXRpb25zXG4gIFxuS290bGluIGFwcGxpY2F0aW9ucyBjYW4gYmUgZGVwbG95ZWQgaW50byBhbnkgaG9zdCB0aGF0IHN1cHBvcnRzIEphdmEgV2ViIGFwcGxpY2F0aW9ucywgaW5jbHVkaW5nIEFtYXpvbiBXZWIgU2VydmljZXMsIEdvb2dsZSBDbG91ZCBQbGF0Zm9ybSBhbmQgbW9yZS5cbiAgXG5UbyBkZXBsb3kgS290bGluIGFwcGxpY2F0aW9ucyBvbiBbSGVyb2t1XShodHRwczovL3d3dy5oZXJva3UuY29tKSwgeW91IGNhbiBmb2xsb3cgdGhlIFtvZmZpY2lhbCBIZXJva3UgdHV0b3JpYWxdKGh0dHBzOi8vZGV2Y2VudGVyLmhlcm9rdS5jb20vYXJ0aWNsZXMvZ2V0dGluZy1zdGFydGVkLXdpdGgta290bGluKS5cbiAgXG5BV1MgTGFicyBwcm92aWRlcyBhIFtzYW1wbGUgcHJvamVjdF0oaHR0cHM6Ly9naXRodWIuY29tL2F3c2xhYnMvc2VydmVybGVzcy1waG90by1yZWNvZ25pdGlvbikgc2hvd2luZyB0aGUgdXNlIG9mIEtvdGxpbiBmb3Igd3JpdGluZyBbQVdTIExhbWJkYV0oaHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9sYW1iZGEvKSBmdW5jdGlvbnMuXG4gIFxuIyMgVXNlcnMgb2YgS290bGluIG9uIHRoZSBTZXJ2ZXIgU2lkZVxuICBcbltDb3JkYV0oaHR0cHM6Ly93d3cuY29yZGEubmV0LzIwMTcvMDEvMTAva290bGluLykgaXMgYW4gb3Blbi1zb3VyY2UgZGlzdHJpYnV0ZWQgbGVkZ2VyIHBsYXRmb3JtLCBzdXBwb3J0ZWQgYnkgbWFqb3IgYmFua3MsIGFuZCBidWlsdCBlbnRpcmVseSBpbiBLb3RsaW4uXG4gIFxuW0pldEJyYWlucyBBY2NvdW50XShodHRwczovL2FjY291bnQuamV0YnJhaW5zLmNvbS8pLCB0aGUgc3lzdGVtIHJlc3BvbnNpYmxlIGZvciB0aGUgZW50aXJlIGxpY2Vuc2Ugc2FsZXMgYW5kIHZhbGlkYXRpb24gcHJvY2VzcyBhdCBKZXRCcmFpbnMsIGlzIHdyaXR0ZW4gaW4gMTAwJSBLb3RsaW4gYW5kIGhhcyBiZWVuIHJ1bm5pbmcgaW4gcHJvZHVjdGlvbiBzaW5jZSAyMDE1IHdpdGggbm8gbWFqb3IgaXNzdWVzLlxuIn0=---->",
                "http://kotlinlang.org/docs/reference/server-overview.html#using-kotlin-for-server-side-development"
            ],
            "flags": 0,
            "guid": "n&IKMCa7a,",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Overview"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<div>Using Kotlin for <b>Android Development</b></div>",
                "<p>Kotlin is a great fit for developing Android applications, bringing all of the advantages of a modern language to the Android platform without introducing any new restrictions:</p>\n<ul>\n<li align=\"left\"><strong>Compatibility</strong>: Kotlin is fully compatible with JDK 6, ensuring that Kotlin applications can run on older Android devices with no issues. The Kotlin tooling is fully supported in Android Studio and compatible with the Android build system.</li>\n<li align=\"left\"><strong>Performance</strong>: A Kotlin application runs as fast as an equivalent Java one, thanks to very similar bytecode structure. With Kotlin's support for inline functions, code using lambdas often runs even faster than the same code written in Java.</li>\n<li align=\"left\"><strong>Interoperability</strong>: Kotlin is 100% interoperable with Java, allowing to use all existing Android libraries in a Kotlin application. This includes annotation processing, so databinding and Dagger work too.</li>\n<li align=\"left\"><strong>Footprint</strong>: Kotlin has a very compact runtime library, which can be further reduced through the use of ProGuard.<br />\n    In a <a href=\"https://blog.gouline.net/kotlin-production-tales-62b56057dc8a\">real application</a>, the Kotlin runtime adds only a few hundred methods and less than 100K to the size of the .apk file.</li>\n<li align=\"left\"><strong>Compilation Time</strong>: Kotlin supports efficient incremental compilation, so while there's some additional overhead for clean builds, <a href=\"https://medium.com/keepsafe-engineering/kotlin-vs-java-compilation-speed-e6c174b39b5d\">incremental builds are usually as fast or faster than with Java</a>.</li>\n<li align=\"left\"><strong>Learning Curve</strong>: For a Java developer, getting started with Kotlin is very easy. The automated Java to Kotlin converter included in the Kotlin plugin helps with the first steps. <a href=\"/docs/tutorials/koans.html\">Kotlin Koans</a> offer a guide though the key features of the language with a series of interactive exercises.</li>\n</ul>\n<h2>Kotlin for Android Case Studies</h2>\n<p>Kotlin has been successfully adopted by major companies, and a few of them have shared their experiences:</p>\n<ul>\n<li align=\"left\">Pinterest has successfully <a href=\"https://www.youtube.com/watch?v=mDpnc45WwlI\">introduced Kotlin into their application</a>, used by 150M people every month.</li>\n<li align=\"left\">Basecamp's Android app is <a href=\"https://m.signalvnoise.com/how-we-made-basecamp-3s-android-app-100-kotlin-35e4e1c0ef12\">100% Kotlin code</a>, and they report a huge     difference in programmer happiness and great improvements in work quality and speed.</li>\n<li align=\"left\">Keepsafe's App Lock app has also been <a href=\"https://medium.com/keepsafe-engineering/lessons-from-converting-an-app-to-100-kotlin-68984a05dcb6\">converted to 100% Kotlin</a>, leading to a 30% decrease in source line count and 10% decrease in method count.</li>\n</ul>\n<h2>Tools for Android Development</h2>\n<p>The Kotlin team offers a set of tools for Android development that goes beyond the standard language features:</p>\n<ul>\n<li align=\"left\"><a href=\"/docs/tutorials/android-plugin.html\">Kotlin Android Extensions</a> is a compiler extension that allows you to get rid of <code>findViewById()</code> calls in your code and to replace them with synthetic compiler-generated properties.</li>\n<li align=\"left\"><a href=\"http://github.com/kotlin/anko\">Anko</a> is a library providing a set of Kotlin-friendly wrappers around the Android    APIs, as well as a DSL that lets your replace your layout .xml files with Kotlin code.</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTQ3Nzc4MjYsICJpZCI6ICIxNDk0NjYyMTQxNTIwLTAwMSIsICJtZCI6ICJLb3RsaW4gaXMgYSBncmVhdCBmaXQgZm9yIGRldmVsb3BpbmcgQW5kcm9pZCBhcHBsaWNhdGlvbnMsIGJyaW5naW5nIGFsbCBvZiB0aGUgYWR2YW50YWdlcyBvZiBhIG1vZGVybiBsYW5ndWFnZSB0byB0aGUgQW5kcm9pZCBwbGF0Zm9ybSB3aXRob3V0IGludHJvZHVjaW5nIGFueSBuZXcgcmVzdHJpY3Rpb25zOlxuICBcbiAgKiAqKkNvbXBhdGliaWxpdHkqKjogS290bGluIGlzIGZ1bGx5IGNvbXBhdGlibGUgd2l0aCBKREsgNiwgZW5zdXJpbmcgdGhhdCBLb3RsaW4gYXBwbGljYXRpb25zIGNhbiBydW4gb24gb2xkZXIgQW5kcm9pZCBkZXZpY2VzIHdpdGggbm8gaXNzdWVzLiBUaGUgS290bGluIHRvb2xpbmcgaXMgZnVsbHkgc3VwcG9ydGVkIGluIEFuZHJvaWQgU3R1ZGlvIGFuZCBjb21wYXRpYmxlIHdpdGggdGhlIEFuZHJvaWQgYnVpbGQgc3lzdGVtLlxuICAqICoqUGVyZm9ybWFuY2UqKjogQSBLb3RsaW4gYXBwbGljYXRpb24gcnVucyBhcyBmYXN0IGFzIGFuIGVxdWl2YWxlbnQgSmF2YSBvbmUsIHRoYW5rcyB0byB2ZXJ5IHNpbWlsYXIgYnl0ZWNvZGUgc3RydWN0dXJlLiBXaXRoIEtvdGxpbiZhcG9zO3Mgc3VwcG9ydCBmb3IgaW5saW5lIGZ1bmN0aW9ucywgY29kZSB1c2luZyBsYW1iZGFzIG9mdGVuIHJ1bnMgZXZlbiBmYXN0ZXIgdGhhbiB0aGUgc2FtZSBjb2RlIHdyaXR0ZW4gaW4gSmF2YS5cbiAgKiAqKkludGVyb3BlcmFiaWxpdHkqKjogS290bGluIGlzIDEwMCUgaW50ZXJvcGVyYWJsZSB3aXRoIEphdmEsIGFsbG93aW5nIHRvIHVzZSBhbGwgZXhpc3RpbmcgQW5kcm9pZCBsaWJyYXJpZXMgaW4gYSBLb3RsaW4gYXBwbGljYXRpb24uIFRoaXMgaW5jbHVkZXMgYW5ub3RhdGlvbiBwcm9jZXNzaW5nLCBzbyBkYXRhYmluZGluZyBhbmQgRGFnZ2VyIHdvcmsgdG9vLlxuICAqICoqRm9vdHByaW50Kio6IEtvdGxpbiBoYXMgYSB2ZXJ5IGNvbXBhY3QgcnVudGltZSBsaWJyYXJ5LCB3aGljaCBjYW4gYmUgZnVydGhlciByZWR1Y2VkIHRocm91Z2ggdGhlIHVzZSBvZiBQcm9HdWFyZC5cbiAgICBJbiBhIFtyZWFsIGFwcGxpY2F0aW9uXShodHRwczovL2Jsb2cuZ291bGluZS5uZXQva290bGluLXByb2R1Y3Rpb24tdGFsZXMtNjJiNTYwNTdkYzhhKSwgdGhlIEtvdGxpbiBydW50aW1lIGFkZHMgb25seSBhIGZldyBodW5kcmVkIG1ldGhvZHMgYW5kIGxlc3MgdGhhbiAxMDBLIHRvIHRoZSBzaXplIG9mIHRoZSAuYXBrIGZpbGUuXG4gICogKipDb21waWxhdGlvbiBUaW1lKio6IEtvdGxpbiBzdXBwb3J0cyBlZmZpY2llbnQgaW5jcmVtZW50YWwgY29tcGlsYXRpb24sIHNvIHdoaWxlIHRoZXJlJmFwb3M7cyBzb21lIGFkZGl0aW9uYWwgb3ZlcmhlYWQgZm9yIGNsZWFuIGJ1aWxkcywgW2luY3JlbWVudGFsIGJ1aWxkcyBhcmUgdXN1YWxseSBhcyBmYXN0IG9yIGZhc3RlciB0aGFuIHdpdGggSmF2YV0oaHR0cHM6Ly9tZWRpdW0uY29tL2tlZXBzYWZlLWVuZ2luZWVyaW5nL2tvdGxpbi12cy1qYXZhLWNvbXBpbGF0aW9uLXNwZWVkLWU2YzE3NGIzOWI1ZCkuXG4gICogKipMZWFybmluZyBDdXJ2ZSoqOiBGb3IgYSBKYXZhIGRldmVsb3BlciwgZ2V0dGluZyBzdGFydGVkIHdpdGggS290bGluIGlzIHZlcnkgZWFzeS4gVGhlIGF1dG9tYXRlZCBKYXZhIHRvIEtvdGxpbiBjb252ZXJ0ZXIgaW5jbHVkZWQgaW4gdGhlIEtvdGxpbiBwbHVnaW4gaGVscHMgd2l0aCB0aGUgZmlyc3Qgc3RlcHMuIFtLb3RsaW4gS29hbnNdKC9kb2NzL3R1dG9yaWFscy9rb2Fucy5odG1sKSBvZmZlciBhIGd1aWRlIHRob3VnaCB0aGUga2V5IGZlYXR1cmVzIG9mIHRoZSBsYW5ndWFnZSB3aXRoIGEgc2VyaWVzIG9mIGludGVyYWN0aXZlIGV4ZXJjaXNlcy5cbiAgXG4jIyBLb3RsaW4gZm9yIEFuZHJvaWQgQ2FzZSBTdHVkaWVzXG4gIFxuS290bGluIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBhZG9wdGVkIGJ5IG1ham9yIGNvbXBhbmllcywgYW5kIGEgZmV3IG9mIHRoZW0gaGF2ZSBzaGFyZWQgdGhlaXIgZXhwZXJpZW5jZXM6XG4gIFxuICAqIFBpbnRlcmVzdCBoYXMgc3VjY2Vzc2Z1bGx5IFtpbnRyb2R1Y2VkIEtvdGxpbiBpbnRvIHRoZWlyIGFwcGxpY2F0aW9uXShodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PW1EcG5jNDVXd2xJKSwgdXNlZCBieSAxNTBNIHBlb3BsZSBldmVyeSBtb250aC5cbiAgKiBCYXNlY2FtcCZhcG9zO3MgQW5kcm9pZCBhcHAgaXMgWzEwMCUgS290bGluIGNvZGVdKGh0dHBzOi8vbS5zaWduYWx2bm9pc2UuY29tL2hvdy13ZS1tYWRlLWJhc2VjYW1wLTNzLWFuZHJvaWQtYXBwLTEwMC1rb3RsaW4tMzVlNGUxYzBlZjEyKSwgYW5kIHRoZXkgcmVwb3J0IGEgaHVnZSAgICAgZGlmZmVyZW5jZSBpbiBwcm9ncmFtbWVyIGhhcHBpbmVzcyBhbmQgZ3JlYXQgaW1wcm92ZW1lbnRzIGluIHdvcmsgcXVhbGl0eSBhbmQgc3BlZWQuXG4gICogS2VlcHNhZmUmYXBvcztzIEFwcCBMb2NrIGFwcCBoYXMgYWxzbyBiZWVuIFtjb252ZXJ0ZWQgdG8gMTAwJSBLb3RsaW5dKGh0dHBzOi8vbWVkaXVtLmNvbS9rZWVwc2FmZS1lbmdpbmVlcmluZy9sZXNzb25zLWZyb20tY29udmVydGluZy1hbi1hcHAtdG8tMTAwLWtvdGxpbi02ODk4NGEwNWRjYjYpLCBsZWFkaW5nIHRvIGEgMzAlIGRlY3JlYXNlIGluIHNvdXJjZSBsaW5lIGNvdW50IGFuZCAxMCUgZGVjcmVhc2UgaW4gbWV0aG9kIGNvdW50LlxuICBcbiMjIFRvb2xzIGZvciBBbmRyb2lkIERldmVsb3BtZW50XG4gIFxuVGhlIEtvdGxpbiB0ZWFtIG9mZmVycyBhIHNldCBvZiB0b29scyBmb3IgQW5kcm9pZCBkZXZlbG9wbWVudCB0aGF0IGdvZXMgYmV5b25kIHRoZSBzdGFuZGFyZCBsYW5ndWFnZSBmZWF0dXJlczpcbiAgXG4gKiBbS290bGluIEFuZHJvaWQgRXh0ZW5zaW9uc10oL2RvY3MvdHV0b3JpYWxzL2FuZHJvaWQtcGx1Z2luLmh0bWwpIGlzIGEgY29tcGlsZXIgZXh0ZW5zaW9uIHRoYXQgYWxsb3dzIHlvdSB0byBnZXQgcmlkIG9mIGBmaW5kVmlld0J5SWQoKWAgY2FsbHMgaW4geW91ciBjb2RlIGFuZCB0byByZXBsYWNlIHRoZW0gd2l0aCBzeW50aGV0aWMgY29tcGlsZXItZ2VuZXJhdGVkIHByb3BlcnRpZXMuXG4gKiBbQW5rb10oaHR0cDovL2dpdGh1Yi5jb20va290bGluL2Fua28pIGlzIGEgbGlicmFyeSBwcm92aWRpbmcgYSBzZXQgb2YgS290bGluLWZyaWVuZGx5IHdyYXBwZXJzIGFyb3VuZCB0aGUgQW5kcm9pZCAgICBBUElzLCBhcyB3ZWxsIGFzIGEgRFNMIHRoYXQgbGV0cyB5b3VyIHJlcGxhY2UgeW91ciBsYXlvdXQgLnhtbCBmaWxlcyB3aXRoIEtvdGxpbiBjb2RlLlxuIn0=---->",
                "http://kotlinlang.org/docs/reference/android-overview.html#using-kotlin-for-android-development"
            ],
            "flags": 0,
            "guid": "x.MW`j+B:7",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "Overview"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Unary operations: </b><u>Unary</u>&nbsp;operation conventions&nbsp;<i>[Operator overloading]</i>",
                "<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>+a</code></td>\n<td><code>a.unaryPlus()</code></td>\n</tr>\n<tr>\n<td><code>-a</code></td>\n<td><code>a.unaryMinus()</code></td>\n</tr>\n<tr>\n<td><code>!a</code></td>\n<td><code>a.not()</code></td>\n</tr>\n</tbody>\n</table>\n<p>This table says that when the compiler processes, for example, an expression <code>+a</code>, it performs the following steps:</p>\n<ul>\n<li align=\"left\">Determines the type of <code>a</code>, let it be <code>T</code>.</li>\n<li align=\"left\">Looks up a function <code>unaryPlus()</code> with the <code>operator</code> modifier and no parameters for the receiver <code>T</code>, i.e. a member function or an extension function.</li>\n<li align=\"left\">If the function is absent or ambiguous, it is a compilation error.</li>\n<li align=\"left\">If the function is present and its return type is <code>R</code>, the expression <code>+a</code> has type <code>R</code>.</li>\n</ul>\n<p><em>Note</em> that these operations, as well as all the others, are optimized for <a href=\"basic-types.html\">Basic types</a> and do not introduce overhead of function calls for them.</p>\n<p>As an example, here's how you can overload the unary minus operator:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Point</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">Point</span><span style=\"color: #000000; font-weight: bold\">.</span><span style=\"color: #000000\">unaryMinus</span><span style=\"color: #000000; font-weight: bold\">()</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Point</span><span style=\"color: #000000; font-weight: bold\">(-</span><span style=\"color: #000000\">x</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #000000; font-weight: bold\">-</span><span style=\"color: #000000\">y</span><span style=\"color: #000000; font-weight: bold\">)</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">point</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">Point</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #0000cf; font-weight: bold\">10</span><span style=\"color: #000000; font-weight: bold\">,</span> <span style=\"color: #0000cf; font-weight: bold\">20</span><span style=\"color: #000000; font-weight: bold\">)</span>\n<span style=\"color: #000000\">println</span><span style=\"color: #000000; font-weight: bold\">(-</span><span style=\"color: #000000\">point</span><span style=\"color: #000000; font-weight: bold\">)</span>  <span style=\"color: #8f5902; font-style: italic\">// prints \"(-10, -20)\"</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzE0MDYsICJpZCI6ICIxNDk1NDM4MDcyMjUyLTAwMSIsICJtZCI6ICJ8IEV4cHJlc3Npb24gfCBUcmFuc2xhdGVkIHRvIHxcbnwtLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfFxufCBgK2FgIHwgYGEudW5hcnlQbHVzKClgIHxcbnwgYC1hYCB8IGBhLnVuYXJ5TWludXMoKWAgfFxufCBgIWFgIHwgYGEubm90KClgIHxcbiAgXG5UaGlzIHRhYmxlIHNheXMgdGhhdCB3aGVuIHRoZSBjb21waWxlciBwcm9jZXNzZXMsIGZvciBleGFtcGxlLCBhbiBleHByZXNzaW9uIGArYWAsIGl0IHBlcmZvcm1zIHRoZSBmb2xsb3dpbmcgc3RlcHM6XG4gIFxuKiBEZXRlcm1pbmVzIHRoZSB0eXBlIG9mIGBhYCwgbGV0IGl0IGJlIGBUYC5cbiogTG9va3MgdXAgYSBmdW5jdGlvbiBgdW5hcnlQbHVzKClgIHdpdGggdGhlIGBvcGVyYXRvcmAgbW9kaWZpZXIgYW5kIG5vIHBhcmFtZXRlcnMgZm9yIHRoZSByZWNlaXZlciBgVGAsIGkuZS4gYSBtZW1iZXIgZnVuY3Rpb24gb3IgYW4gZXh0ZW5zaW9uIGZ1bmN0aW9uLlxuKiBJZiB0aGUgZnVuY3Rpb24gaXMgYWJzZW50IG9yIGFtYmlndW91cywgaXQgaXMgYSBjb21waWxhdGlvbiBlcnJvci5cbiogSWYgdGhlIGZ1bmN0aW9uIGlzIHByZXNlbnQgYW5kIGl0cyByZXR1cm4gdHlwZSBpcyBgUmAsIHRoZSBleHByZXNzaW9uIGArYWAgaGFzIHR5cGUgYFJgLlxuICBcbipOb3RlKiB0aGF0IHRoZXNlIG9wZXJhdGlvbnMsIGFzIHdlbGwgYXMgYWxsIHRoZSBvdGhlcnMsIGFyZSBvcHRpbWl6ZWQgZm9yIFtCYXNpYyB0eXBlc10oYmFzaWMtdHlwZXMuaHRtbCkgYW5kIGRvIG5vdCBpbnRyb2R1Y2Ugb3ZlcmhlYWQgb2YgZnVuY3Rpb24gY2FsbHMgZm9yIHRoZW0uXG4gIFxuQXMgYW4gZXhhbXBsZSwgaGVyZSZhcG9zO3MgaG93IHlvdSBjYW4gb3ZlcmxvYWQgdGhlIHVuYXJ5IG1pbnVzIG9wZXJhdG9yOlxuICBcbmBgYGtvdGxpblxuZGF0YSBjbGFzcyBQb2ludCh2YWwgeDogSW50LCB2YWwgeTogSW50KVxuICBcbm9wZXJhdG9yIGZ1biBQb2ludC51bmFyeU1pbnVzKCkgPSBQb2ludCgteCwgLXkpXG4gIFxudmFsIHBvaW50ID0gUG9pbnQoMTAsIDIwKVxucHJpbnRsbigtcG9pbnQpICAvLyBwcmludHMgJnF1b3Q7KC0xMCwgLTIwKSZxdW90O1xuYGBgXG4ifQ==---->",
                "http://kotlinlang.org/docs/reference/operator-overloading.html#unary-prefix-operators"
            ],
            "flags": 0,
            "guid": "QAvhE`7f;$",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "OperatorOverloading",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Unary operations:&nbsp;</b><u>Increments and decrements</u>&nbsp;<i>[Operator overloading]</i>",
                "<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a++</code></td>\n<td><code>a.inc()</code> + see below</td>\n</tr>\n<tr>\n<td><code>a--</code></td>\n<td><code>a.dec()</code> + see below</td>\n</tr>\n</tbody>\n</table>\n<p>The <code>inc()</code> and <code>dec()</code> functions must return a value, which will be assigned to the variable on which the<br />\n<code>++</code> or <code>--</code> operation was used. They shouldn't mutate the object on which the <code>inc</code> or <code>dec</code> was invoked.</p>\n<p>The compiler performs the following steps for resolution of an operator in the <em>postfix</em> form, e.g. <code>a++</code>:</p>\n<ul>\n<li align=\"left\">Determines the type of <code>a</code>, let it be <code>T</code>.</li>\n<li align=\"left\">Looks up a function <code>inc()</code> with the <code>operator</code> modifier and no parameters, applicable to the receiver of type <code>T</code>.</li>\n<li align=\"left\">Checks that the return type of the function is a subtype of <code>T</code>.</li>\n</ul>\n<p>The effect of computing the expression is:</p>\n<ul>\n<li align=\"left\">Store the initial value of <code>a</code> to a temporary storage <code>a0</code>,</li>\n<li align=\"left\">Assign the result of <code>a.inc()</code> to <code>a</code>,</li>\n<li align=\"left\">Return <code>a0</code> as a result of the expression.</li>\n</ul>\n<p>For <code>a--</code> the steps are completely analogous.</p>\n<p>For the <em>prefix</em> forms <code>++a</code> and <code>--a</code> resolution works the same way, and the effect is:</p>\n<ul>\n<li align=\"left\">Assign the result of <code>a.inc()</code> to <code>a</code>,</li>\n<li align=\"left\">Return the new value of <code>a</code> as a result of the expression.</li>\n</ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0MzgyMDYsICJpZCI6ICIxNDk1NDM4MTY3OTI4LTAwMSIsICJtZCI6ICJ8IEV4cHJlc3Npb24gfCBUcmFuc2xhdGVkIHRvIHxcbnwtLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfFxufCBgYSsrYCB8IGBhLmluYygpYCArIHNlZSBiZWxvdyB8XG58IGBhLS1gIHwgYGEuZGVjKClgICsgc2VlIGJlbG93IHxcbiAgXG5UaGUgYGluYygpYCBhbmQgYGRlYygpYCBmdW5jdGlvbnMgbXVzdCByZXR1cm4gYSB2YWx1ZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgdmFyaWFibGUgb24gd2hpY2ggdGhlXG5gKytgIG9yIGAtLWAgb3BlcmF0aW9uIHdhcyB1c2VkLiBUaGV5IHNob3VsZG4mYXBvczt0IG11dGF0ZSB0aGUgb2JqZWN0IG9uIHdoaWNoIHRoZSBgaW5jYCBvciBgZGVjYCB3YXMgaW52b2tlZC5cbiAgXG5UaGUgY29tcGlsZXIgcGVyZm9ybXMgdGhlIGZvbGxvd2luZyBzdGVwcyBmb3IgcmVzb2x1dGlvbiBvZiBhbiBvcGVyYXRvciBpbiB0aGUgKnBvc3RmaXgqIGZvcm0sIGUuZy4gYGErK2A6XG4gIFxuKiBEZXRlcm1pbmVzIHRoZSB0eXBlIG9mIGBhYCwgbGV0IGl0IGJlIGBUYC5cbiogTG9va3MgdXAgYSBmdW5jdGlvbiBgaW5jKClgIHdpdGggdGhlIGBvcGVyYXRvcmAgbW9kaWZpZXIgYW5kIG5vIHBhcmFtZXRlcnMsIGFwcGxpY2FibGUgdG8gdGhlIHJlY2VpdmVyIG9mIHR5cGUgYFRgLlxuKiBDaGVja3MgdGhhdCB0aGUgcmV0dXJuIHR5cGUgb2YgdGhlIGZ1bmN0aW9uIGlzIGEgc3VidHlwZSBvZiBgVGAuXG4gIFxuVGhlIGVmZmVjdCBvZiBjb21wdXRpbmcgdGhlIGV4cHJlc3Npb24gaXM6XG4gIFxuKiBTdG9yZSB0aGUgaW5pdGlhbCB2YWx1ZSBvZiBgYWAgdG8gYSB0ZW1wb3Jhcnkgc3RvcmFnZSBgYTBgLFxuKiBBc3NpZ24gdGhlIHJlc3VsdCBvZiBgYS5pbmMoKWAgdG8gYGFgLFxuKiBSZXR1cm4gYGEwYCBhcyBhIHJlc3VsdCBvZiB0aGUgZXhwcmVzc2lvbi5cbiAgXG5Gb3IgYGEtLWAgdGhlIHN0ZXBzIGFyZSBjb21wbGV0ZWx5IGFuYWxvZ291cy5cbiAgXG5Gb3IgdGhlICpwcmVmaXgqIGZvcm1zIGArK2FgIGFuZCBgLS1hYCByZXNvbHV0aW9uIHdvcmtzIHRoZSBzYW1lIHdheSwgYW5kIHRoZSBlZmZlY3QgaXM6XG4gIFxuKiBBc3NpZ24gdGhlIHJlc3VsdCBvZiBgYS5pbmMoKWAgdG8gYGFgLFxuKiBSZXR1cm4gdGhlIG5ldyB2YWx1ZSBvZiBgYWAgYXMgYSByZXN1bHQgb2YgdGhlIGV4cHJlc3Npb24uXG4ifQ==---->",
                "http://kotlinlang.org/docs/reference/operator-overloading.html#increments-and-decrements"
            ],
            "flags": 0,
            "guid": "e;4a7TPm!X",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "OperatorOverloading",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Binary operations:&nbsp;</b><u>Arithmetic operators</u>&nbsp;<i>[Operator overloading]</i>",
                "<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a + b</code></td>\n<td><code>a.plus(b)</code></td>\n</tr>\n<tr>\n<td><code>a - b</code></td>\n<td><code>a.minus(b)</code></td>\n</tr>\n<tr>\n<td><code>a * b</code></td>\n<td><code>a.times(b)</code></td>\n</tr>\n<tr>\n<td><code>a / b</code></td>\n<td><code>a.div(b)</code></td>\n</tr>\n<tr>\n<td><code>a % b</code></td>\n<td><code>a.rem(b)</code>, <code>a.mod(b)</code> (deprecated)</td>\n</tr>\n<tr>\n<td><code>a..b</code></td>\n<td><code>a.rangeTo(b)</code></td>\n</tr>\n</tbody>\n</table>\n<p>For the operations in this table, the compiler just resolves the expression in the <em>Translated to</em> column.</p>\n<p>Note that the <code>rem</code> operator is supported since Kotlin 1.1. Kotlin 1.0 uses the <code>mod</code> operator, which is deprecated in Kotlin 1.1.</p>\n<h4>Example</h4>\n<p>Below is an example Counter class that starts at a given value and can be incremented using the overloaded <code>+</code> operator.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #000000\">data</span> <span style=\"color: #204a87; font-weight: bold\">class</span> <span style=\"color: #000000\">Counter</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">dayIndex</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n    <span style=\"color: #000000\">operator</span> <span style=\"color: #204a87; font-weight: bold\">fun</span> <span style=\"color: #000000\">plus</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">increment</span><span style=\"color: #000000; font-weight: bold\">:</span> <span style=\"color: #000000\">Int</span><span style=\"color: #000000; font-weight: bold\">):</span> <span style=\"color: #000000\">Counter</span> <span style=\"color: #000000; font-weight: bold\">{</span>\n        <span style=\"color: #204a87; font-weight: bold\">return</span> <span style=\"color: #000000\">Counter</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">dayIndex</span> <span style=\"color: #000000; font-weight: bold\">+</span> <span style=\"color: #000000\">increment</span><span style=\"color: #000000; font-weight: bold\">)</span>\n    <span style=\"color: #000000; font-weight: bold\">}</span>\n<span style=\"color: #000000; font-weight: bold\">}</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzE1MTYsICJpZCI6ICIxNDk1NDM4MjA5OTQ5LTAwMSIsICJtZCI6ICJ8IEV4cHJlc3Npb24gfCBUcmFuc2xhdGVkIHRvIHxcbnwgLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0gfFxufCBgYSArIGJgIHwgYGEucGx1cyhiKWAgfFxufCBgYSAtIGJgIHwgYGEubWludXMoYilgIHxcbnwgYGEgKiBiYCB8IGBhLnRpbWVzKGIpYCB8XG58IGBhIC8gYmAgfCBgYS5kaXYoYilgIHxcbnwgYGEgJSBiYCB8IGBhLnJlbShiKWAsIGBhLm1vZChiKWAgKGRlcHJlY2F0ZWQpIHxcbnwgYGEuLmIgYCB8IGBhLnJhbmdlVG8oYilgIHxcbiAgXG5Gb3IgdGhlIG9wZXJhdGlvbnMgaW4gdGhpcyB0YWJsZSwgdGhlIGNvbXBpbGVyIGp1c3QgcmVzb2x2ZXMgdGhlIGV4cHJlc3Npb24gaW4gdGhlICpUcmFuc2xhdGVkIHRvKiBjb2x1bW4uXG4gIFxuTm90ZSB0aGF0IHRoZSBgcmVtYCBvcGVyYXRvciBpcyBzdXBwb3J0ZWQgc2luY2UgS290bGluIDEuMS4gS290bGluIDEuMCB1c2VzIHRoZSBgbW9kYCBvcGVyYXRvciwgd2hpY2ggaXMgZGVwcmVjYXRlZCBpbiBLb3RsaW4gMS4xLlxuICBcbiMjIyMgRXhhbXBsZVxuICBcbkJlbG93IGlzIGFuIGV4YW1wbGUgQ291bnRlciBjbGFzcyB0aGF0IHN0YXJ0cyBhdCBhIGdpdmVuIHZhbHVlIGFuZCBjYW4gYmUgaW5jcmVtZW50ZWQgdXNpbmcgdGhlIG92ZXJsb2FkZWQgYCtgIG9wZXJhdG9yLlxuICBcbmBgYGtvdGxpblxuZGF0YSBjbGFzcyBDb3VudGVyKHZhbCBkYXlJbmRleDogSW50KSB7XG4gICAgb3BlcmF0b3IgZnVuIHBsdXMoaW5jcmVtZW50OiBJbnQpOiBDb3VudGVyIHtcbiAgICAgICAgcmV0dXJuIENvdW50ZXIoZGF5SW5kZXggKyBpbmNyZW1lbnQpXG4gICAgfVxufVxuYGBgXG4ifQ==---->",
                "http://kotlinlang.org/docs/reference/operator-overloading.html#arithmetic-operators"
            ],
            "flags": 0,
            "guid": "C8dKa2$Ih4",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "OperatorOverloading",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Binary operations:&nbsp;</b><u>'In' operator</u>&nbsp;<i>[Operator overloading]</i>",
                "<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a in b</code></td>\n<td><code>b.contains(a)</code></td>\n</tr>\n<tr>\n<td><code>a !in b</code></td>\n<td><code>!b.contains(a)</code></td>\n</tr>\n</tbody>\n</table>\n<p>For <code>in</code> and <code>!in</code> the procedure is the same, but the order of arguments is reversed.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0MzgzNTMsICJpZCI6ICIxNDk1NDM4MzE2NTcwLTAwMSIsICJtZCI6ICJ8IEV4cHJlc3Npb24gfCBUcmFuc2xhdGVkIHRvIHxcbnwgLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0gfFxufCBgYSBpbiBiYCB8IGBiLmNvbnRhaW5zKGEpYCB8XG58IGBhICFpbiBiYCB8IGAhYi5jb250YWlucyhhKWAgfFxuICBcbkZvciBgaW5gIGFuZCBgIWluYCB0aGUgcHJvY2VkdXJlIGlzIHRoZSBzYW1lLCBidXQgdGhlIG9yZGVyIG9mIGFyZ3VtZW50cyBpcyByZXZlcnNlZC5cbiJ9---->",
                "http://kotlinlang.org/docs/reference/operator-overloading.html#in-operator"
            ],
            "flags": 0,
            "guid": "Jh3$z>dOjX",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "OperatorOverloading",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Binary operations:&nbsp;</b><u>Indexed access operator</u>&nbsp;<i>[Operator overloading]</i>",
                "<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a[i]</code></td>\n<td><code>a.get(i)</code></td>\n</tr>\n<tr>\n<td><code>a[i, j]</code></td>\n<td><code>a.get(i, j)</code></td>\n</tr>\n<tr>\n<td><code>a[i_1, ...,  i_n]</code></td>\n<td><code>a.get(i_1, ...,  i_n)</code></td>\n</tr>\n<tr>\n<td><code>a[i] = b</code></td>\n<td><code>a.set(i, b)</code></td>\n</tr>\n<tr>\n<td><code>a[i, j] = b</code></td>\n<td><code>a.set(i, j, b)</code></td>\n</tr>\n<tr>\n<td><code>a[i_1, ...,  i_n] = b</code></td>\n<td><code>a.set(i_1, ..., i_n, b)</code></td>\n</tr>\n</tbody>\n</table>\n<p>Square brackets are translated to calls to <code>get</code> and <code>set</code> with appropriate numbers of arguments.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0MzgzOTMsICJpZCI6ICIxNDk1NDM4MzYwMjQyLTAwMSIsICJtZCI6ICJ8IEV4cHJlc3Npb24gfCBUcmFuc2xhdGVkIHRvIHxcbnwgLS0tLS0tLXwtLS0tLS0tLS0tLS0tLSB8XG58IGBhW2ldYCAgfCBgYS5nZXQoaSlgIHxcbnwgYGFbaSwgal1gICB8IGBhLmdldChpLCBqKWAgfFxufCBgYVtpXzEsIC4uLiwgIGlfbl1gICB8IGBhLmdldChpXzEsIC4uLiwgIGlfbilgIHxcbnwgYGFbaV0gPSBiYCB8IGBhLnNldChpLCBiKWAgfFxufCBgYVtpLCBqXSA9IGJgIHwgYGEuc2V0KGksIGosIGIpYCB8XG58IGBhW2lfMSwgLi4uLCAgaV9uXSA9IGJgIHwgYGEuc2V0KGlfMSwgLi4uLCBpX24sIGIpYCB8XG4gIFxuU3F1YXJlIGJyYWNrZXRzIGFyZSB0cmFuc2xhdGVkIHRvIGNhbGxzIHRvIGBnZXRgIGFuZCBgc2V0YCB3aXRoIGFwcHJvcHJpYXRlIG51bWJlcnMgb2YgYXJndW1lbnRzLlxuIn0=---->",
                "http://kotlinlang.org/docs/reference/operator-overloading.html#indexed-access-operator"
            ],
            "flags": 0,
            "guid": "i3!-90TjX^",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "OperatorOverloading",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Binary operations:&nbsp;</b><u>Invoke operator</u>&nbsp;<i>[Operator overloading]</i>",
                "<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a()</code></td>\n<td><code>a.invoke()</code></td>\n</tr>\n<tr>\n<td><code>a(i)</code></td>\n<td><code>a.invoke(i)</code></td>\n</tr>\n<tr>\n<td><code>a(i, j)</code></td>\n<td><code>a.invoke(i, j)</code></td>\n</tr>\n<tr>\n<td><code>a(i_1, ...,  i_n)</code></td>\n<td><code>a.invoke(i_1, ...,  i_n)</code></td>\n</tr>\n</tbody>\n</table>\n<p>Parentheses are translated to calls to <code>invoke</code> with appropriate number of arguments.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0Mzg0MzAsICJpZCI6ICIxNDk1NDM4Mzk5MzE0LTAwMSIsICJtZCI6ICJ8IEV4cHJlc3Npb24gfCBUcmFuc2xhdGVkIHRvIHxcbnwtLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18XG58IGBhKClgICB8IGBhLmludm9rZSgpYCB8XG58IGBhKGkpYCAgfCBgYS5pbnZva2UoaSlgIHxcbnwgYGEoaSwgailgICB8IGBhLmludm9rZShpLCBqKWAgfFxufCBgYShpXzEsIC4uLiwgIGlfbilgICB8IGBhLmludm9rZShpXzEsIC4uLiwgIGlfbilgIHxcbiAgXG5QYXJlbnRoZXNlcyBhcmUgdHJhbnNsYXRlZCB0byBjYWxscyB0byBgaW52b2tlYCB3aXRoIGFwcHJvcHJpYXRlIG51bWJlciBvZiBhcmd1bWVudHMuXG4ifQ==---->",
                "http://kotlinlang.org/docs/reference/operator-overloading.html#invoke-operator"
            ],
            "flags": 0,
            "guid": "pW2+D[Z(x",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "OperatorOverloading",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Binary operations:&nbsp;</b><u>Augmented assigments</u>&nbsp;<i>[Operator overloading]</i>",
                "<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a += b</code></td>\n<td><code>a.plusAssign(b)</code></td>\n</tr>\n<tr>\n<td><code>a -= b</code></td>\n<td><code>a.minusAssign(b)</code></td>\n</tr>\n<tr>\n<td><code>a *= b</code></td>\n<td><code>a.timesAssign(b)</code></td>\n</tr>\n<tr>\n<td><code>a /= b</code></td>\n<td><code>a.divAssign(b)</code></td>\n</tr>\n<tr>\n<td><code>a %= b</code></td>\n<td><code>a.modAssign(b)</code></td>\n</tr>\n</tbody>\n</table>\n<p>For the assignment operations, e.g. <code>a += b</code>, the compiler performs the following steps:</p>\n<ul>\n<li align=\"left\">If the function from the right column is available<ul>\n<li align=\"left\">If the corresponding binary function (i.e. <code>plus()</code> for <code>plusAssign()</code>) is available too, report error (ambiguity).</li>\n<li align=\"left\">Make sure its return type is <code>Unit</code>, and report an error otherwise.</li>\n<li align=\"left\">Generate code for <code>a.plusAssign(b)</code></li>\n</ul>\n</li>\n<li align=\"left\">Otherwise, try to generate code for <code>a = a + b</code> (this includes a type check: the type of <code>a + b</code> must be a subtype of <code>a</code>).</li>\n</ul>\n<p><em>Note</em>: assignments are <em>NOT</em> expressions in Kotlin.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0Mzg1MTgsICJpZCI6ICIxNDk1NDM4NDM2NDkwLTAwMSIsICJtZCI6ICJ8IEV4cHJlc3Npb24gfCBUcmFuc2xhdGVkIHRvIHxcbnwtLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfFxufCBgYSArPSBiYCB8IGBhLnBsdXNBc3NpZ24oYilgIHxcbnwgYGEgLT0gYmAgfCBgYS5taW51c0Fzc2lnbihiKWAgfFxufCBgYSAqPSBiYCB8IGBhLnRpbWVzQXNzaWduKGIpYCB8XG58IGBhIC89IGJgIHwgYGEuZGl2QXNzaWduKGIpYCB8XG58IGBhICU9IGJgIHwgYGEubW9kQXNzaWduKGIpYCB8XG4gIFxuRm9yIHRoZSBhc3NpZ25tZW50IG9wZXJhdGlvbnMsIGUuZy4gYGEgKz0gYmAsIHRoZSBjb21waWxlciBwZXJmb3JtcyB0aGUgZm9sbG93aW5nIHN0ZXBzOlxuICBcbiogSWYgdGhlIGZ1bmN0aW9uIGZyb20gdGhlIHJpZ2h0IGNvbHVtbiBpcyBhdmFpbGFibGVcbiAgICAqIElmIHRoZSBjb3JyZXNwb25kaW5nIGJpbmFyeSBmdW5jdGlvbiAoaS5lLiBgcGx1cygpYCBmb3IgYHBsdXNBc3NpZ24oKWApIGlzIGF2YWlsYWJsZSB0b28sIHJlcG9ydCBlcnJvciAoYW1iaWd1aXR5KS5cbiAgICAqIE1ha2Ugc3VyZSBpdHMgcmV0dXJuIHR5cGUgaXMgYFVuaXRgLCBhbmQgcmVwb3J0IGFuIGVycm9yIG90aGVyd2lzZS5cbiAgICAqIEdlbmVyYXRlIGNvZGUgZm9yIGBhLnBsdXNBc3NpZ24oYilgXG4qIE90aGVyd2lzZSwgdHJ5IHRvIGdlbmVyYXRlIGNvZGUgZm9yIGBhID0gYSArIGJgICh0aGlzIGluY2x1ZGVzIGEgdHlwZSBjaGVjazogdGhlIHR5cGUgb2YgYGEgKyBiYCBtdXN0IGJlIGEgc3VidHlwZSBvZiBgYWApLlxuICBcbipOb3RlKjogYXNzaWdubWVudHMgYXJlICpOT1QqIGV4cHJlc3Npb25zIGluIEtvdGxpbi5cbiJ9---->",
                "http://kotlinlang.org/docs/reference/operator-overloading.html#augmented-assigments"
            ],
            "flags": 0,
            "guid": "z>@G?[=Z<L",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "OperatorOverloading",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Binary operations:&nbsp;</b><u>Equality and inequality operators</u>&nbsp;<i>[Operator overloading]</i>",
                "<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a == b</code></td>\n<td><code>a?.equals(b) ?: (b === null)</code></td>\n</tr>\n<tr>\n<td><code>a != b</code></td>\n<td><code>!(a?.equals(b) ?: (b === null))</code></td>\n</tr>\n</tbody>\n</table>\n<p><em>Note</em>: <code>===</code> and <code>!==</code> (identity checks) are not overloadable, so no conventions exist for them</p>\n<p>The <code>==</code> operation is special: it is translated to a complex expression that screens for <code>null</code>'s.<br />\n<code>null == null</code> is always true, and <code>x == null</code> for a non-null <code>x</code> is always false and won't invoke <code>x.equals()</code>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0Mzg1NjIsICJpZCI6ICIxNDk1NDM4NTMyNjYxLTAwMSIsICJtZCI6ICJ8IEV4cHJlc3Npb24gfCBUcmFuc2xhdGVkIHRvIHxcbnwtLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfFxufCBgYSA9PSBiYCB8IGBhPy5lcXVhbHMoYikgPzogKGIgPT09IG51bGwpYCB8XG58IGBhICE9IGJgIHwgYCEoYT8uZXF1YWxzKGIpID86IChiID09PSBudWxsKSlgIHxcbiAgXG4qTm90ZSo6IGA9PT1gIGFuZCBgIT09YCAoaWRlbnRpdHkgY2hlY2tzKSBhcmUgbm90IG92ZXJsb2FkYWJsZSwgc28gbm8gY29udmVudGlvbnMgZXhpc3QgZm9yIHRoZW1cbiAgXG5UaGUgYD09YCBvcGVyYXRpb24gaXMgc3BlY2lhbDogaXQgaXMgdHJhbnNsYXRlZCB0byBhIGNvbXBsZXggZXhwcmVzc2lvbiB0aGF0IHNjcmVlbnMgZm9yIGBudWxsYCZhcG9zO3MuXG5gbnVsbCA9PSBudWxsYCBpcyBhbHdheXMgdHJ1ZSwgYW5kIGB4ID09IG51bGxgIGZvciBhIG5vbi1udWxsIGB4YCBpcyBhbHdheXMgZmFsc2UgYW5kIHdvbiZhcG9zO3QgaW52b2tlIGB4LmVxdWFscygpYC5cbiJ9---->",
                "http://kotlinlang.org/docs/reference/operator-overloading.html#equality-and-inequality-operators"
            ],
            "flags": 0,
            "guid": "wQg}A3x3ug",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "OperatorOverloading",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<b>Binary operations:&nbsp;</b><u>Comparison operators</u>&nbsp;<i>[Operator overloading]</i>",
                "<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a &gt; b</code></td>\n<td><code>a.compareTo(b) &gt; 0</code></td>\n</tr>\n<tr>\n<td><code>a &lt; b</code></td>\n<td><code>a.compareTo(b) &lt; 0</code></td>\n</tr>\n<tr>\n<td><code>a &gt;= b</code></td>\n<td><code>a.compareTo(b) &gt;= 0</code></td>\n</tr>\n<tr>\n<td><code>a &lt;= b</code></td>\n<td><code>a.compareTo(b) &lt;= 0</code></td>\n</tr>\n</tbody>\n</table>\n<p>All comparisons are translated into calls to <code>compareTo</code>, that is required to return <code>Int</code>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0Mzg1OTQsICJpZCI6ICIxNDk1NDM4NTc1ODU0LTAwMSIsICJtZCI6ICJ8IEV4cHJlc3Npb24gfCBUcmFuc2xhdGVkIHRvIHxcbnwtLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18XG58IGBhICZndDsgYmAgIHwgYGEuY29tcGFyZVRvKGIpICZndDsgMGAgfFxufCBgYSAmbHQ7IGJgICB8IGBhLmNvbXBhcmVUbyhiKSAmbHQ7IDBgIHxcbnwgYGEgJmd0Oz0gYmAgfCBgYS5jb21wYXJlVG8oYikgJmd0Oz0gMGAgfFxufCBgYSAmbHQ7PSBiYCB8IGBhLmNvbXBhcmVUbyhiKSAmbHQ7PSAwYCB8XG4gIFxuQWxsIGNvbXBhcmlzb25zIGFyZSB0cmFuc2xhdGVkIGludG8gY2FsbHMgdG8gYGNvbXBhcmVUb2AsIHRoYXQgaXMgcmVxdWlyZWQgdG8gcmV0dXJuIGBJbnRgLlxuIn0=---->",
                "http://kotlinlang.org/docs/reference/operator-overloading.html#comparison-operators"
            ],
            "flags": 0,
            "guid": "M4E8CgKc7p",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "Kotlin_1.1",
                "OperatorOverloading",
                "Other"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Map <i>nullable</i> value if <i>not null</i>",
                "<div class=\"codehilite\" style=\"background: #f8f8f8\" align=\"left\"><pre style=\"line-height: 125%\"><span style=\"color: #204a87;font-weight: bold\">val</span> <span style=\"color: #000000\">data</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000; font-weight: bold\">...</span>\n\n<span style=\"color: #204a87; font-weight: bold\">val</span> <span style=\"color: #000000\">mapped</span> <span style=\"color: #000000; font-weight: bold\">=</span> <span style=\"color: #000000\">data</span><span style=\"color: #ce5c00; font-weight: bold\">?.</span><span style=\"color: #000000\">let</span> <span style=\"color: #000000; font-weight: bold\">{</span> <span style=\"color: #000000\">transformData</span><span style=\"color: #000000; font-weight: bold\">(</span><span style=\"color: #000000\">it</span><span style=\"color: #000000; font-weight: bold\">)</span> <span style=\"color: #000000; font-weight: bold\">}</span> <span style=\"color: #ce5c00; font-weight: bold\">?:</span> <span style=\"color: #000000\">defaultValueIfDataIsNull</span>\n</pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE1MDA4MzE5NTcsICJpZCI6ICIxNTAwODMxOTIzMDA2LTAwMSIsICJtZCI6ICJgYGBrb3RsaW5cbnZhbCBkYXRhID0gLi4uXG4gIFxudmFsIG1hcHBlZCA9IGRhdGE/LmxldCB7IHRyYW5zZm9ybURhdGEoaXQpIH0gPzogZGVmYXVsdFZhbHVlSWZEYXRhSXNOdWxsXG5gYGBcbiJ9---->",
                "https://kotlinlang.org/docs/reference/idioms.html#map-nullable-value-if-not-null"
            ],
            "flags": 0,
            "guid": "c_KeP-uI,Y",
            "note_model_uuid": "52ef7cc6-b99a-11e8-a30a-4a0007054d20",
            "tags": [
                "GettingStarted",
                "Idioms",
                "Kotlin_1.1"
            ]
        }
    ]
}